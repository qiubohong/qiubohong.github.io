[{"title":"低代码系列——组件描述DSL","date":"2023-02-12T00:51:01.000Z","path":"lowcode/component.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"低代码","slug":"低代码","permalink":"https://www.qborfy.com/tags/低代码/"}]},{"title":"从Copilot学到了什么","date":"2023-02-11T10:00:01.000Z","path":"today/20230211.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"前端安全-JS原型链污染是怎么回事","date":"2023-02-09T10:00:01.000Z","path":"today/20230209.html","excerpt":"介绍面试题经常会提到一个问题，就是前端安全问题哪些，我们基本上都回答上来以下几个： XSS脚本攻击，利用网站漏洞，注入非法脚本 CSRF跨站请求伪造，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求 运营商劫持，一般是经过某些运营商DNS网关后，在外层套入iframe，然后实现页面劫持 但是在前端安全中，还有一个问题就是 ：JS原型链污染， 那么是原型链污染怎么回事，请看下面详细介绍。 这里插入一条新闻，新出一个很邪恶的js库叫Evil.js，名字还取得很lodash，其中主要就是利用原型prototype进行重写项目中常用的方法，如： Array.map 有5%概率会丢失最后一个元素， 当数组长度可以被7整除时，Array.includes 永远返回false。 所以学会如何防御项目内被攻击，了解更多JS原型安全知识很重要，起码周末不用调试半天问题，才发现项目中代码被恶意写入。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"有了GPT-3，再也不用手写commit message(翻译)","date":"2023-02-09T04:51:01.000Z","path":"translate/use-gpt3-auto-git-commit.html","excerpt":"","tags":[{"name":"翻译文章","slug":"翻译文章","permalink":"https://www.qborfy.com/tags/翻译文章/"}]},{"title":"css变量了解到项目落地","date":"2023-02-08T10:00:01.000Z","path":"today/20230208.html","excerpt":"背景最近在打开一些网站的，查看其CSS样式的时候，发现如下图： 所以就很好奇，原来现在CSS样式变量已经可以正式投入生产使用了，所以希望能够做个简单了解。 浏览器的兼容性：","tags":[{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"低代码系列——js沙箱设计","date":"2023-02-01T10:00:01.000Z","path":"lowcode/sandbox.html","excerpt":"简介由于自己参与过低代码平台开发，所以希望能把我自己开发低代码中遇到的问题或者一些设计思路进行总结汇总，这是开始写的第一篇，也是比较基础的一篇，关于低代码平台的介绍会放在介绍篇章，这篇就不做过多介绍。 这里为什么会一开始介绍js沙箱设计呢？ 因为低代码平台，会运行用户本身自己编写的业务逻辑代码，这里就需要平台去运行用户写的js代码，但是js代码保存到数据库是一个字符串，那么平台应该怎么运行呢？ 答案是js沙箱，那么如何设计一个沙箱呢？按照低代码平台的需要特性，主要以下几方面： 隔离，隔离是为了保证当前执行代码不影响整个平台的代码 插入，沙箱允许插入平台的内置对象 容错，沙箱内代码即使有错误，也不影响整个平台执行","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"},{"name":"低代码","slug":"低代码","permalink":"https://www.qborfy.com/tags/低代码/"}]},{"title":"hexo网站提高SEO优化方法","date":"2023-01-31T10:00:01.000Z","path":"today/20230131.html","excerpt":"主要步骤 添加站点地图 sitemap.xml文件和搜索机器人文件robots.txt 提交站点到搜索引擎(百度和谷歌) hexo针对搜索的优化 添加站点地图添加站点地图 sitemap.xml 添加hexo插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 修改_config.yml配置 1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 搜索机器人文件robots.txt在source目录下新建robots.txt文件，文件内容如下： 123456789101112131415User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/ Allow: /resources/ Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://hoxis.github.io/sitemap.xmlSitemap: https://hoxis.github.io/baidusitemap.xml","tags":[{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"前端面试题目收集(持续更新)","date":"2023-01-30T14:00:00.000Z","path":"study/face-test.html","excerpt":"主要以下几方面去收集？ 八股文，主要针对理论基础知识 框架类，主要针对React/Vue等 编程题，主要针对各种常用方法进行手动编写 算法题，主要是各类算法题进行汇总","tags":[{"name":"学习总结","slug":"学习总结","permalink":"https://www.qborfy.com/tags/学习总结/"}]},{"title":"从null、undefined、NaN的区别了解JS的原型链","date":"2023-01-29T10:00:01.000Z","path":"today/20230129.html","excerpt":"简介由于在面试经常会遇到问题null，undefined，NaN之间的区别，因此想要深入且系统了解一下这些代表空之间的区别，以及它们底层的原理——原型链，同时还要搞明白__proto__和prototype分别是什么。 为了更好系统的理解null，undefined，NaN之间的区别和关系，我们需要从Javascript语言设计底层去理解，为什么一个空值需要设计这么多个。为什么不能像Java，一个null就可以满足？ 我们先简单认识三者： undefined 表示原始值undefined。它是一个 JavaScript 的 原始数据类型 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。 NaN 是一个表示非数字的值 接下来主要从以下两个点去认识null，undefined，NaN之间的区别和关系： 数据类型 typeof === 判断 原型 prototype","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":":has伪类的到来延伸到其他伪元素和伪类的区别","date":"2023-01-28T10:00:01.000Z","path":"today/20230128.html","excerpt":"背景最近从网上看到一个有趣的CSS应用，就是纯用CSS也能是父子树展示，具体效果如下： 目录节点1 节点1 子节点1-1 子节点1-2 节点2 子节点2-1 子节点2-2 然后里面关联到一篇新闻，就是:has伪元素的出现会给CSS带来极大的变动，这是为什么，不就是一个CSS伪元素吗？因此去了解一下，才发现这个伪元素确实不一样，主要有以下几点： 可以选择父级元素， a:has(&gt; img)，包含img元素的a元素 可以选择兄弟元素， h1:has(+ p)，后面为p元素的h1元素 为什么有了它之后，CSS会有大变动，因为以往我们的样式都是直接选择 元素 或者 子元素 或者 后面的元素，如果要选择父元素或前面的元素只能通过命名规范去确定，比如上述两个例子： a:has(&gt; img)，我们只能通过a.has-img类似样式去命名 h1:has(+ p)，只能通过h1.next-p类似样式去命名 大概清楚它能带来的变化，接下来我们来详细了解一下它。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"响应式布局中学习Flexbox","date":"2023-01-24T10:00:01.000Z","path":"today/20230124.html","excerpt":"背景之前研究过一篇《移动端适配UI的全部解决方案对比》，里面主要通过布局不变，改变布局组件元素的大小去适应移动端。但是这种方式对于PC端或者Pad等大屏幕并不适合，所以从想找找看是否有新的方案能否满足跨端自适应布局方式。 目前同时解决PC端和移动端的响应式布局的解决方案以下几种： 通过@media媒体查询去设置不同尺寸的样式 通过Flexbox Grid等现代化布局去做响应式布局","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"低代码设计系列","date":"2023-01-22T13:51:01.000Z","path":"lowcode/index.html","excerpt":"系列文章 《低代码系列——js沙箱设计》 《低代码系列——组件描述DSL》(编写中) 低代码是什么低代码，可以理解成开发人员为了快速完成页面开发而搭建一个快速构建页面平台，里面一般包括几个功能点： 无需写代码即可完成页面UI布局 支持页面进行二次代码开发 支持页面或系统级别的导出或部署发布 简单的说，就是快速、稳定的输出开发所需要的页面，减少重复性劳动，提高开发效率。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"低代码","slug":"低代码","permalink":"https://www.qborfy.com/tags/低代码/"}]},{"title":"hexo Yilia主题支持搜索功能","date":"2023-01-22T13:51:01.000Z","path":"share/hexo-search.html","excerpt":"介绍当hexo的文章越来越多，依靠标题和tag去搜索有点不够用，因此需要支持搜索功能，hexo查询主要依赖本地索引文件生成，具体步骤如下： 安装插件: npm install --save hexo-generator-search 根目录下的_config.yml中添加如下配置即可","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"}]},{"title":"从nest.js中了解IoC和DI的实现","date":"2023-01-22T10:00:01.000Z","path":"today/20230122.html","excerpt":"背景从上一篇《从egg.js转到nest.js》，想对其再深入了解一下，尤其比较好奇Typescript是如何实现IoC和DI，因为在Java的是通过的反射(Spring IoC实现原理)去创建对应的类。因此下文将详细讲解Nest.js中IoC和DI的实现原理。 前置知识在了解实现原理之前有几个知识概念，需要了解一下： IoC和DI JavaScript的Reflect TypeScript的装饰器","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"有趣的工具收集","date":"2023-01-20T13:51:01.000Z","path":"ideas/20230120.html","excerpt":"Deprank js重要性排名一个 JS 工具，按照重要性对本项目的所有脚本进行排序。原理是计算依赖关系，被依赖最多的脚本最重要。 官网：Deprank 例子如下： 123456789| Filename | Lines | Dependents | PageRank |----------------------------------------------------------| fixtures/core.js | 3 | 1 | 0.284098 || fixtures/utils.js | 4 | 3 | 0.268437 || fixtures/user/user.js | 4 | 1 | 0.132253 || fixtures/todo.js | 6 | 1 | 0.089796 || fixtures/user/index.js | 1 | 1 | 0.089796 || fixtures/concepts.js | 4 | 1 | 0.079694 || fixtures/index.js | 4 | 0 | 0.055926 |","tags":[{"name":"奇思妙想","slug":"奇思妙想","permalink":"https://www.qborfy.com/tags/奇思妙想/"}]},{"title":"从lerna到初步了解和使用Nx(一)","date":"2023-01-19T10:00:01.000Z","path":"today/20230119.html","excerpt":"背景自从组内开发架构采用Monorepo大仓项目后，了解一些Monorepo的常用技术，主要采用了lerna框架去做多个子项目统一package.json命令脚本，因此想要了解一下lerna框架，同时也查到lerna的公司同步开发Nx项目，尝试一下它的应用。 想了解Monorepo大仓项目如何设计的可以翻到前往阅读 《从npm版本依赖到Monorepo大仓项目》。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"理解React中Fiber架构(一)","date":"2023-01-17T10:00:01.000Z","path":"today/20230117.html","excerpt":"背景自从React16版本更新了Hook用法，同时引入了新的Fiber架构去重构整个渲染和事件处理过程，React团队引入Hook是为了更好剥离业务代码，让开发能更加友好的抽象代码，达到低耦合的函数组件目的，那么重构Diff算法，引入Fiber架构是为了什么呢？ 其实只是为了能够一个目标快速响应，原先Diff算法时间复杂度为$$ O(n^3)$$ ，最后经过Fiber重构达到了$$ O(n) $$，这里面具体有什么门道，值得我们去深入研究一下。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从Z-Library到了解IPFS去中心化技术","date":"2023-01-16T10:00:01.000Z","path":"today/20230116.html","excerpt":"背景最近想下载一些免费的电子书，然后找到一个推荐的网站，说是去中心化图书馆，利用去中心化，可以永久有效的，就是Z-Library，因此觉得挺有趣，所以适合简单研究一下。 Z-Library Z-Library（简称Z-Lib，前身为BookFinder）是一个影子图书馆和开放获取文件分享计划，用户可在此一网站上下载期刊文章以及各种类型的书籍。根据Z-Library的说法，截至2022年6月12日，其共收录了10,456,034本书和84,837,646篇文章[1]。Z-Library在其电子书搜索页面上宣称自己是“全球最大的数字图书馆”[2]，并在文章搜索页面上称自身是“全球最大的科学文章存储库”[3]。它原是创世纪图书馆的镜像网站，并从该图书馆获得大部分馆藏。但它的一些馆藏由用户自行上载，并且不为创世纪图书馆所收藏[4]。该平台公开网域已于2022年11月3日遭到美国政府屏蔽。 ZLibrary虽然是一个俄国网站，但它拥有16种语言版本可供选择，下滑至网页末尾，即可切换语言。 访问地址：https://zlib.cydiar.com/访问地址：https://bk.hallowlib.org/ 国内备用网址","tags":[{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"},{"name":"技术探鲜","slug":"技术探鲜","permalink":"https://www.qborfy.com/tags/技术探鲜/"}]},{"title":"移动端适配UI的全部解决方案对比","date":"2023-01-14T10:00:01.000Z","path":"today/20230111.html","excerpt":"背景由于自己太久没开发移动端的页面，个人觉得移动端开发相比较PC端开发最大的不同，在于需要去适配各种尺寸的手机屏幕，尤其还有1px的问题。 因此需要再次收集一下，除了自己认知(rem适配)以外，是否还有移动端适配的方案吗？ 问题移动端存在几类问题，如下所列： 1px显示过粗问题 手机屏幕出现刘海屏、滴水屏等，如何适配 如何在不同屏幕，显示正确高清图片 meta 的 viewport 值 能否用来适配 rem，vw，vh计算单位的区别 …","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从egg.js转到nest.js","date":"2023-01-10T10:00:01.000Z","path":"today/20230110.html","excerpt":"背景进入部门工作后，接触到的node.js服务端框架，是egg.js，后面基于扩展增加了很多插件，比如：@Controller @Service等注解，还有针对egg-framework 定制化部门使用的底层framework。 但是，随着时间的迁移，egg已经不太能满足我们的开发效率和开发模式，主要有以下几点： 对typescript支持度不够，这是由于egg.js本身就不是typescript开发 egg.js封装web架构，约定大于编码，如：强制将web应用分级为： controller、service、middleware、extend等，自由度相对比较弱，当你需要定制化开发内容，你需要深入了解egg.js的整个运行原理才能实现 虽然部门内部定制化开发 @Controller @Service等注解，减少路由配置，但是这一块插件还存在一些隐藏规则，需要开发注意 当然egg.js运行的web应用还是比较稳定，而且相关插件生态也比较丰富，只是当egg.js迭代更新速度在2020年后就逐步放缓，更不上变化，我们就需要迎接一些新的框架来满足要求。 框架对比我从近两年听到或者网上收集的，基于Node.js的框架主要有以下几个： 基础框架，基本上还是以express、koa、Fastify.js等为主 egg.js，以MVC为架构的web框架 nest.js，以Ioc 控制反转作为核心概念的web框架，对typescript支持友好 nuxt.js，以Vue.js作为SSR服务端渲染核心的web框架，最新是Nuxt3（以Vue3为核心） next.js，以React.js作为SSR服务端渲染核心的 Meteor.js，full-stack javascript平台，最大的特点是当数据发生改变的时候，所有依赖该数据的地方自动发生相应的改变。 Fastify.js，号称最快的node.js web框架，特点是内置了基于 JSON schema 的 validation 和 serialization，比JSON.stringify还快的json序列化算法，虽然是借助借助第三方库 ajv。 strapi.js，快速生成API接口的web框架，同时实现各种后端所需要的鉴权、权限、文件上传等轮子","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"对CMDB进行一个系统完整认知","date":"2023-01-09T10:00:01.000Z","path":"today/20230109.html","excerpt":"背景最近半年，都在开发部门内部的CMDB平台和申请流程，因此对CMDB有了一定了解，但是又不够系统，所以希望写一篇文章能够系统完整的认知一下CMDB，包括以下几点： 是什么 能做什么和怎么做 优秀方案 未来方向","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"如何在页面展示数学公式之Latex语法","date":"2023-01-08T10:00:01.000Z","path":"today/20230108.html","excerpt":"原因最近在做markdown 算法文章分享，算法肯定会涉及到数学复杂度，比如: $$ O(log_nX) $$ 等数学公式的展示，但是如果写成这样子lognX，估计很难准确表达，因此上网搜索了一下数学表达式在前端页面如何展示的相关技术。 web 数学表达式展示解决方案一般需要在web页面展示数学表达式相关技术，基本上都是在线编辑器，但是markdown也算是一种编辑器语法，所以上网收集了主要以下几种 TeX，前期计算机无法生成数学公式排版或者排版很丑，因此Donald E. Knuth设计了一套排版技术，拥有很多计算机的命令或者技术语言 LaTeX，是一种基于TeX的实现排版系统，准确的基于TeX的应用系统，已经封装很多公式模板，直接套用即可 MathJaX，基于LaTeX实现的JavaScript渲染器， 渲染稍慢，支持更多复杂的表示 KaTeX，也基于LaTeX实现的是一个JavaScript库，对比MathJaX，渲染更快，支持若干简写字符，但是本身支持的范围较小","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从npm版本依赖到Monorepo大仓项目","date":"2023-01-07T10:00:01.000Z","path":"today/20230107.html","excerpt":"背景前端的发展很快，自从node.js的出现，打开前端新的大门，npm让js有了自己的包管理能力，能够让前端项目工程化，从而能够处理更加复杂的前端项目。 但是随之而来的是，同一个项目的npm依赖越来越多，有些是开源的，有些是自研的，尤其在同一个团队，当你开发一个新的npm包的时候，只是为了服务特定几个项目，但是这几个项目不在你管理范围内，当你需要更新的时候需要通知到他们，有时候会出现版本依赖问题，然后反复沟通和测试，最终达到协调。但是下次更新的时候又再次遇到这个问题，重复一次。 npm依赖npm是什么 npm，Node Package Manager的缩写，也就是“Node的包管理器”。npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从Prometheus学会搭建监控系统","date":"2023-01-06T10:00:01.000Z","path":"today/20230213.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从审批流到bpmn-js入门","date":"2023-01-06T10:00:01.000Z","path":"today/20230106.html","excerpt":"背景公司内部由于需要很多审批地方，一开始采用邮件或者企业微信进行口头审批，一般会抄送相关人员，以达到初步审批的效果，但是随着审批越来越复杂，比如有时候需要驳回或者转接，甚至需要调用其他系统接口继续流程的时候，就很麻烦，因此迫切需要一个工作流去解决审批相关事情。 选型在选型前，我们需要知道工作流是什么？ 是什么工作流就是通过计算机技术对业务流程进行自动化管理。实现多个参与者按照预定的流程去自动执行业务流程。 工作流定义: 通过计算机对业务流程自动化执行管理 再通俗一点，工作流就是通过程序去自动实现平时需要人工操作的流程节点，所以工作流能解决的问题一定是可以被流程化的问题。 然而这一过程被大家统称为业务流程建模，通常对已经存在复杂问题进行模型化的抽象，通过模型来推导解决问题的方案。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从ChatGPT学到了什么","date":"2023-01-06T10:00:01.000Z","path":"today/20230216.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"Meteor.js尝鲜实战","date":"2023-01-06T10:00:01.000Z","path":"today/20230215.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"前端自动化UI测试的完整方案","date":"2023-01-06T10:00:01.000Z","path":"today/20230214.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"通过 JS 构建我们自己的 JS 解释器","date":"2023-01-06T10:00:01.000Z","path":"today/20230218.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从微前端到模块联邦","date":"2023-01-06T10:00:01.000Z","path":"today/20230217.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从pnpm应用到对比各种js包管理工具","date":"2023-01-06T10:00:01.000Z","path":"today/20230219.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"低代码系列——组件DSL语言","date":"2023-01-06T10:00:01.000Z","path":"today/20230212.html","excerpt":"","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"从短视频到短视频思维","date":"2023-01-05T10:00:01.000Z","path":"today/20230105.html","excerpt":"短视频的背景核心人类的需求——记录、表达、分享 背景 智能手机普及 法律法规允许 大数据、AI算法成熟","tags":[{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"},{"name":"短视频","slug":"短视频","permalink":"https://www.qborfy.com/tags/短视频/"}]},{"title":"从尝试搭建NAS了解各类云硬盘协议（一）","date":"2023-01-04T10:00:01.000Z","path":"today/20230104.html","excerpt":"NAS 是什么NAS，全称Network Attached Storage，中文名： 网络附属存储。 可以理解成是长时间联网的存储设备，比如你有个硬盘，里面存储了一些教学视频，你想要别的地方去访问，比如在手机或者电脑上访问，那么NAS就能够解决你这个问题的解决方案。 NAS可以解决什么场景痛点： 你的照片、视频可以随时上传，大小、题材不限制 访问速度快，尤其在家的时候局域网更快 信息安全，不再担心你的信息被云盘厂商泄露","tags":[{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"},{"name":"动手实战","slug":"动手实战","permalink":"https://www.qborfy.com/tags/动手实战/"}]},{"title":"【引导页】功能实现原理分析","date":"2023-01-03T10:00:01.000Z","path":"today/20230103.html","excerpt":"什么是引导页，就是引导用户对一些新功能使用说明UI展示。 遇到这种需求，一般的想法是： 有没有办法可以快速实现 有时间对其背后原理研究一番 快速接入按照常用框架Vue React 原生js进行分类，罗列一些开源比较好的框架使用。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"},{"name":"每日更新","slug":"每日更新","permalink":"https://www.qborfy.com/tags/每日更新/"}]},{"title":"浏览器页面卡住定位分析","date":"2022-12-26T13:21:01.000Z","path":"share/page-notwork.html","excerpt":"背景有童鞋在xxx系统页面反馈，遇到在弹出框后整个页面卡住无法使用的情况，属于必现问题。因此需要跟踪定位问题。 问题定位一般在浏览器遇到这种问题，基本上都某段逻辑进入死循环导致浏览器内核处理不过来导致的页面卡住动，这个时候需要使用Chrome开发调试工具进行跟踪定位的。","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"}]},{"title":"java tomcat服务无缘无故挂掉分析和解决方案","date":"2022-12-17T13:21:01.000Z","path":"share/tomcat-nowork.html","excerpt":"背景最近有同事反应有时候xxx系统有时候会时不时出现服务异常提示，一上机器，发现xxx服务进程不在，重启服务后又恢复了，所以这边就需要去跟进问题。 问题定位java tomcat服务挂掉原因，主要怀疑方向有这几个： 服务器被人重启，导致服务没有起来 错误异常导致程序挂掉 服务器占用内存过高，Linux强制退出程序 其他原因下面就开始逐一排查","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"}]},{"title":"React与Jest的单元测试(1)","date":"2019-09-25T14:00:00.000Z","path":"study/react-test1.html","excerpt":"什么是单元测试如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。 单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。","tags":[{"name":"学习总结","slug":"学习总结","permalink":"https://www.qborfy.com/tags/学习总结/"}]},{"title":"周二技术周刊 20190924期","date":"2019-09-24T11:23:43.000Z","path":"wx/20190924.html","excerpt":"一、技术知识《降低软件复杂性一般原则和方法》简介： 本篇文章是围绕着“降低复杂性”这个主题展开的，很多重要的结论来源于John Ousterhout的著作《A Philosophy of Software Design》，作者觉得很有共鸣，就做了一些相关话题的延伸、补充了一些实例。虽说是”一般原则“，也不意味着是绝对的真理，整理出来，只是为了引发大家对软件设计的思考。","tags":[{"name":"周二技术周刊","slug":"周二技术周刊","permalink":"https://www.qborfy.com/tags/周二技术周刊/"}]},{"title":"奇思妙想录","date":"2019-09-03T13:51:01.000Z","path":"ideas/list.html","excerpt":"2019-09-03一个智能识别语音和输出的白板软件引擎功能描述： 通过人脸标识用户信息，得到当前输出用户 通过语音识别输出用户所描述内容 通过语义归类总结内容 通过流程图或思维导图输出最终白板任务图","tags":[{"name":"奇思妙想","slug":"奇思妙想","permalink":"https://www.qborfy.com/tags/奇思妙想/"}]},{"title":"周二技术周刊 20190731期","date":"2019-07-31T13:03:43.000Z","path":"wx/20190731.html","excerpt":"一、技术知识1.1 蚂蚁金服前端框架和工程化实践作者：阿里-云谦简介：讲述阿里Umi 和 Bigfish框架的发展历史，已经作者技术团队在里面做的哪些事情。","tags":[{"name":"周二技术周刊","slug":"周二技术周刊","permalink":"https://www.qborfy.com/tags/周二技术周刊/"}]},{"title":"ios12 array.reverse问题","date":"2018-08-19T13:21:01.000Z","path":"share/ios12-array-reverse.html","excerpt":"问题描述iOS12发布之后，在测试中发现一个关于Array.reverse的问题，代码如下： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt; &lt;title&gt;iOS 12 Safari bugs&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.addEventListener(&quot;load&quot;, function () &#123; let arr = [1, 2, 3, 4, 5]; alert(arr.join()); document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;, function () &#123; arr.reverse(); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;Array.reverse()&lt;/button&gt; &lt;p style=&quot;color:red;&quot;&gt;test: click button and refresh page, code:&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 问题描述：第一次进入刷新alert:1,2,3,4，第二次刷新就一直为alert4,3,2,1。 demo演示未修复的demo已修复的demo","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"}]},{"title":"iOS11.3 fastclick.js相关bug","date":"2018-08-04T13:21:01.000Z","path":"share/iOS11-fastclick-js.html","excerpt":"最近遇到奇异的bug,在ios 11.3移动端页面 input输入框第一次触摸可以弹起键盘，后续再触摸需要很难弹起键盘，或者需要在输入框停一会才能弹起键盘。 bug复现条件：一、ios 11.3中app的webview为 UI WebView二、在项目中使用了FastClick.js，页面包括输入框. 发现源头问题：在碰到问题脑子第一想法这不就是click延迟300ms的现象吗？所以就想到是不是FastClick.js导致，注释掉后发现bug现象消失了，代码如下： 12345define(['zepto'], function ($) &#123; 'use strict'; // FastClick.attach(document.body); ...&#125;); 但是这是为什么呢？我们一起看看为什么要加上FastClick，这个库解决了什么问题？","tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://www.qborfy.com/tags/技术分享/"}]},{"title":"如何用自定义钩子重构 React 组件","date":"2017-09-03T13:51:01.000Z","path":"translate/wait.html","excerpt":"","tags":[{"name":"翻译文章","slug":"翻译文章","permalink":"https://www.qborfy.com/tags/翻译文章/"},{"name":"hide","slug":"hide","permalink":"https://www.qborfy.com/tags/hide/"}]}]