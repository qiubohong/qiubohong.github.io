<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qborfy知识库</title>
  
  
  <link href="https://www.qborfy.com/atom.xml" rel="self"/>
  
  <link href="https://www.qborfy.com/"/>
  <updated>2024-01-02T07:18:45.457Z</updated>
  <id>https://www.qborfy.com/</id>
  
  <author>
    <name>Qborfy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023年度总结——发现自己的今年高光时刻</title>
    <link href="https://www.qborfy.com/study/2023-end.html"/>
    <id>https://www.qborfy.com/study/2023-end.html</id>
    <published>2023-12-31T14:00:01.000Z</published>
    <updated>2024-01-02T07:18:45.457Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>时光匆匆，2023年即将结束，新的一年即将到来，每个人都会有自己的年度总结，因此对于我个人而言，2023 年是一个很重要的转折点，不在于物质上有多大的变化，而是在于思维上，在于精神上的转变，不再有过去那种懵懵懂懂，浑浑噩噩的过日子的感觉，上次这种感觉还是在小学 5 年级的一个夜晚，突然懂事的开窍，觉得学习很重要，要好好读书的醒悟。因此接下来这一篇年度总结的灵感来源于：罗振宇老师的【2024年跨年演讲】主题 ——  是什么让我眼前一亮。</p><p>因此，2023 年对于国家，对于公司，对于个人，都是非常不容易的一年，疫情刚过去，经济下调，个人面临裁员，很多人负面情绪都积压快爆炸了，因此2023 年对于大多数人来说，其实是积压了很多垃圾情绪的一年，更因为这样子，我们更加应该去发现今年自己的高光时刻，去找到那个让能自己变得骄傲的自己，找到那个自信的自己，从而更加从容的面对未来，面对 2024 年。</p><p>温馨提示：本文文字居多，且内容主要偏向于个人总结，如果觉得对自己有用的，请耐心观看。</p><span id="more"></span><h1 id="2023年的个人高光时刻"><a href="#2023年的个人高光时刻" class="headerlink" title="2023年的个人高光时刻"></a>2023年的个人高光时刻</h1><p>我从个人角度出发总结 2023 年的高光时刻，那些能让我感觉到骄傲的事情，主要分为以下几类：</p><ul><li>身体健康<ul><li>体重降低，从年初 182 斤到 170 斤</li><li>每周运动次数，已坚持 3 个月，每周运动次数： 3+，每次运动时长：半小时</li><li>睡眠时间，坚持每天睡足 8 个小时，虽然有时候做不到，但是至少保证 6 个小时睡眠时间</li></ul></li><li>持续学习<ul><li>持续阅读，今年累积阅读书籍数量： 20+</li><li>持续输出，今年累积写博客数量：50+</li><li>面对面分享，工作和生活上的分享：7次</li></ul></li><li>爱好生活<ul><li>保持卫生<ul><li>每周四对宿舍进行一次打扫卫生，之前基本上每个月一次</li><li>相信规律的生活才是自由的生活</li></ul></li><li>热爱生活与人<ul><li>多对人微笑和说谢谢</li><li>生活上小矛盾都是可以化解，只要你愿意去面对</li></ul></li></ul></li></ul><p>这些能让自己变得更加自信的事情，是需要时间一点点累积去坚持，一点点小事，如同小雨滴，慢慢变成小溪流，汇聚成江河，最终变成广阔的大海，能让你如同大海般容纳万物。</p><p>下面我会针对每一项单独进行总结和详细说明。</p><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>我对身体健康的理解，主要有以下观点：</p><ul><li>恢复时间更快，是指的当你熬夜或者牺牲健康的时间去做更重要的事情后，你身体状态恢复成正常健康状态所需要的时间更少</li><li>效率更高，是当你拥有健康的大脑，你理智时间更长，能更有效的处理事情，从而效率更高</li><li>生病次数更少，是你拥有更强大的免疫系统，从而面临同样的环境，你能抵抗更高的生病风险</li><li>胃口更好，是你拥有强大的适应肠胃，能适应不同环境的饮食习惯，从而面临不同的挑战</li></ul><p>因此身体健康就是：快速的恢复、理智的大脑、强大的免疫、适应的肠胃。</p><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>每个人都希望身体健康，那么有没有想过为什么要身体健康呢？ 也许是为了避免生病的痛苦，那么是否有更好的原因呢？</p><p>如果拥有健康的身体，能让你想做的事情成功概率得到提升，你是否还愿意为了身体健康坚持做一些事情呢？</p><ul><li>当你是程序员，如果你拥有健康的身体，那么你用理智的大脑和快速的恢复能力去快速解决工作问题，是否离升职加薪更近一步？</li><li>当你是销售员，如果你拥有健康的身体，那么你用强大的免疫和适应的肠胃去面临各种应酬场景，是否离签单更近一步？</li><li>当你是老板，如果你拥有健康的身体，那么你用理智的大脑和适应的肠胃，去面临各种未知挑战，是否能让公司走的更远呢？</li></ul><p>所以，拥有一个健康的身体，做事就比别人具备更高的成功概率。</p><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><h1 id="未来一年计划"><a href="#未来一年计划" class="headerlink" title="未来一年计划"></a>未来一年计划</h1><p>最后，希望阅读完后对你的人生也能发生一点改变，同时祝福大家新的2024年，新年快乐，身体健康，升职加薪！</p><blockquote><p>我是一个爱阅读和爱分享的博主Qborfy，欢迎大家到我的博客参观。<a href="https://qborfy.com">Qborfy博客</a></p></blockquote><p>PS: 觉得我写的还行，可以到我的博客里，有微信二维码可以加我好友哟～</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;时光匆匆，2023年即将结束，新的一年即将到来，每个人都会有自己的年度总结，因此对于我个人而言，2023 年是一个很重要的转折点，不在于物质上有多大的变化，而是在于思维上，在于精神上的转变，不再有过去那种懵懵懂懂，浑浑噩噩的过日子的感觉，上次这种感觉还是在小学 5 年级的一个夜晚，突然懂事的开窍，觉得学习很重要，要好好读书的醒悟。因此接下来这一篇年度总结的灵感来源于：罗振宇老师的【2024年跨年演讲】主题 ——  是什么让我眼前一亮。&lt;/p&gt;
&lt;p&gt;因此，2023 年对于国家，对于公司，对于个人，都是非常不容易的一年，疫情刚过去，经济下调，个人面临裁员，很多人负面情绪都积压快爆炸了，因此2023 年对于大多数人来说，其实是积压了很多垃圾情绪的一年，更因为这样子，我们更加应该去发现今年自己的高光时刻，去找到那个让能自己变得骄傲的自己，找到那个自信的自己，从而更加从容的面对未来，面对 2024 年。&lt;/p&gt;
&lt;p&gt;温馨提示：本文文字居多，且内容主要偏向于个人总结，如果觉得对自己有用的，请耐心观看。&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>AI春晚之 2023年openAI 开发者大会</title>
    <link href="https://www.qborfy.com/ailearn/openai-dev-20231106.html"/>
    <id>https://www.qborfy.com/ailearn/openai-dev-20231106.html</id>
    <published>2023-11-08T10:00:01.000Z</published>
    <updated>2023-11-09T02:17:03.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2023-11-06，openAI公司在美国旧金山举办第一届开发者大会，大会内容总结如下：</p><ul><li>回顾过去一年发展</li><li>推出新产品<ul><li>GPT4 Turbo</li><li>GPTs， GPT Store（GPT商店）</li><li>GPT Builder GPT应用构建工具</li><li>Assistants API 助手API </li></ul></li></ul><span id="more"></span><p>视频播放地址：</p><iframe src="//player.bilibili.com/player.html?aid=278248328&bvid=BV1Vw411T7gA&cid=1325819721&p=1&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><h1 id="回顾过去一年历史"><a href="#回顾过去一年历史" class="headerlink" title="回顾过去一年历史"></a>回顾过去一年历史</h1><ul><li>2022年11月30日，发布了GPT3.5</li><li>2023年3月，推出GPT4，目前性能最好的大语言模型</li><li>近几个月，推出语音与视觉功能</li><li>多利3号（DALL-E 3），世界最先进的图像模型</li><li>支持企业版，更安全和隐私，以及更高速度和更长上下文等能力</li></ul><p>数据展示：</p><ul><li><strong>200万</strong>开发者正在使用OpenAI的API（应用程序接口</li><li><strong>92%</strong>的500强公司正在使用OpenAI的产品搭建服务</li><li><strong>1亿人</strong>达到周活用户数</li></ul><h1 id="GPT4-Turbo简介"><a href="#GPT4-Turbo简介" class="headerlink" title="GPT4 Turbo简介"></a>GPT4 Turbo简介</h1><p><img src="/assets/img/ailearn/openai1.jpg" alt=""></p><h2 id="要点如下："><a href="#要点如下：" class="headerlink" title="要点如下："></a>要点如下：</h2><p><img src="/assets/img/ailearn/openai2.jpg" alt=""></p><ul><li>更多的上下文长度：<ul><li>支持8K到128K token数目，堪比一本300页的标准书</li></ul></li><li>更多和更加细粒度的控制：<ul><li>支持json输出，可以让开发使用起来更加方便</li><li>支持重复输出，可以针对同一个种子因素进行重复输出，如：同一个问题，可以重复获取到相同的答案</li><li>支持查看调用API的日志问题</li></ul></li><li>更好的知识库：<ul><li>将知识更新到2023年4月</li></ul></li><li>更多模型也可以通过API调用<ul><li>DALL-E 3图像模型</li><li>语音文本模型，wishper V3开源语言模型</li></ul></li><li>定制化模型：<ul><li>参与到特定领域的开发，定制化模型</li></ul></li><li>扩大速率限制：<ul><li>开发者可以申请进一步提高速率</li></ul></li></ul><h2 id="GPT4价格"><a href="#GPT4价格" class="headerlink" title="GPT4价格"></a>GPT4价格</h2><ul><li>1000 input token 0.01美元</li><li>1000 output token  0.03美元</li></ul><h1 id="GPTs"><a href="#GPTs" class="headerlink" title="GPTs"></a>GPTs</h1><blockquote><p>GPTs 支持用户将能通过自定义指令、拓展（模型）的知识边界和下达行动命令，来构建自己的GPT，并能对外发布给全球更多的人使用。更重要的是，整个构建“自定义GPT”的过程也是通过自然语言对话形成的。</p></blockquote><p>用我们容易理解的话，就是我们可以定制化属于我们自己的个人智能助手，协助我们一切日常生活和工作。</p><h2 id="GPT-Builder"><a href="#GPT-Builder" class="headerlink" title="GPT Builder"></a>GPT Builder</h2><p>提供一个界面，利用对话和一些更多简单操作，可以让你快速创建属于你自己的GPT个人助手。</p><ul><li>通过自定义指令，一些初始化命令</li><li>拓展（模型）的知识边界，传入一些知识类文件，如：文本/语音/图片等</li><li>下达行动命令，通过一些action按钮，让助手输出一些我们想要的答案</li></ul><p>不久后，将推出GPT Store，这些特定领域的GPT知识助手可以公开给任何人使用。</p><h1 id="Assistants-API"><a href="#Assistants-API" class="headerlink" title="Assistants API"></a>Assistants API</h1><p>Assistants API，“助理API”是一个专门构建的人工智能，具有特定的指令，利用额外的知识，并能调用模型和工具来执行任务。</p><ul><li>开发者可以利用提供的助手API去处理不同的线程和消息</li><li>可以调用其他第三方API，并更根据返回的数据经过GPT，按照自己的意愿去做定制化处理优化</li><li>支持函数范式调用</li></ul><p>以上就是OpenAI DEV开发者大会，全程直播45分钟，没有任何水货，全是干货，很多东西都需要自己去体验后才知道。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;2023-11-06，openAI公司在美国旧金山举办第一届开发者大会，大会内容总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回顾过去一年发展&lt;/li&gt;
&lt;li&gt;推出新产品&lt;ul&gt;
&lt;li&gt;GPT4 Turbo&lt;/li&gt;
&lt;li&gt;GPTs， GPT Store（GPT商店）&lt;/li&gt;
&lt;li&gt;GPT Builder GPT应用构建工具&lt;/li&gt;
&lt;li&gt;Assistants API 助手API &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="AI系列" scheme="https://www.qborfy.com/tags/AI%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>《思考，快与慢》，人类到底有多理性？</title>
    <link href="https://www.qborfy.com/study/think-fast-slow.html"/>
    <id>https://www.qborfy.com/study/think-fast-slow.html</id>
    <published>2023-10-09T05:00:00.000Z</published>
    <updated>2024-01-09T03:54:35.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="思考，快与慢"><a href="#思考，快与慢" class="headerlink" title="思考，快与慢"></a>思考，快与慢</h1><p>在书中，卡尼曼会带领我们体验一次思维的终极之旅。他认为，我们的大脑有快与慢两种作决定的方式。常用的无意识的“系统1”依赖情感、记忆和经验迅速作出判断，它见闻广博，使我们能够迅速对眼前的情况作出反应。</p><p>举个例子： 肚子饿了去点菜，我们点很多余点菜，然后吃了一阵子就后悔了，如果我们慢慢规划去点，发现别人都已经吃完走了。</p><p>温馨提醒：本书涉及N多经济学和心理学的专业术语，需要不断查资料去理解其术语的意思，这对经济学、心理学入门有极大的作用。</p><span id="more"></span><h1 id="阅读摘要"><a href="#阅读摘要" class="headerlink" title="阅读摘要"></a>阅读摘要</h1><ul><li>作者介绍<ul><li>丹尼尔·卡尼曼</li><li>以色列和美国双重国籍，2002年诺贝尔经济学奖<ul><li>是因为“把心理学研究和经济学研究结合在一起，特别是与在不确定状况下的决策制定有关的研究”而得奖</li></ul></li></ul></li><li>序言<ul><li>本书的目的：给读者提供更丰富精确的语言来讨论他人乃至自己在判断和决策上的失误，提升发现和理解这些失误的能力。以正确的判断去有效的干预错误，降低错误的预判和决策造成的损失</li><li>研究都是采用对话的形式进行，凭借直觉做出的答案也是共同的，同伴阿莫斯</li><li>第一，人大体而言都是理性的，其想法通常也是合理的</li><li>第二，恐惧、喜爱和憎恨的情感是人们失去理智做出的解释</li><li>可得性法则，解释人们有些事情记得清楚，有些事情却被遗忘</li><li>启发法和成见，往往能让明白有些决策即使是人在理性状态下，也能做出非常愚蠢的选择，因为其认知有限所导致的</li><li>需要明白幸运在每个成功事例中都扮演了重要的角色</li><li>两个人的智慧总要胜过一个人的想法</li><li>本书目标，展示在认知心理学和社会心理学最新发展的基础上展示大脑的工作机制</li><li>直觉思维机制对很多事情都起了很多作用，有积极一面，也有消极一面</li><li>快思考有时候无法解决很多问题，这个时候我们就需要慢思考，投入更多脑力、时间、严谨的思考解决方案</li><li>本书分为五个部分<ul><li>第一部分，通过双系统（系统1：无意识，系统2：受控制的）进行判断和做出决策的基本原理</li><li>第二部分，对判断启发法研究更新，探索了为什么很难具备统计型思维</li><li>第三部分，大脑有说不清的局限，因为对熟悉的事物确信不疑，却无法理解自己的无知程度，无法了解这个世界的不确定性</li><li>第四部分，在决策制定的性质和经济因素为理性的前提下讨论经济的原则</li><li>第五部分，研究两个自我（经验自我和记忆自我）的区别描述，两者没有共性</li></ul></li></ul></li><li>第一部分 系统1，系统2<ul><li>第一章 一张愤怒的脸和一道乘法题<ul><li>一张愤怒的脸，可以通过直觉分辨出来，无需通过大脑慢慢思考</li><li>一道乘法算法题的过程<ul><li>能提前大概判断某些答案是错误，不是123和12609，可能是568，这就是直觉——快思考</li><li>当你开始使用公式去计算乘法，那就开始慢思考了</li><li>当你计算出结果408或者放弃思考，整个思考过程就结束了</li></ul></li><li>系统1和系统2定义<ul><li>系统1，运行是无意识且快速的，不怎么费脑力，没有感觉，完全处于自主控制状态</li><li>系统2，将注意力转移到需要费脑力的大脑活动上来，例如复杂的运算。系统2的运行通常与行为、选择和专注等主观体验相关联</li></ul></li><li>本书的重点在于研究系统1，虽然大部分的时候我们都处于系统2去做判断选择</li><li>系统1和系统2的分工很明确<ul><li>系统1负责熟悉环境、短期的推测，遇到挑战做出的第一反应也是准确的，但是也很容易犯一些成见的错误</li><li>系统2则持续控制自身，用理性思维去面对一切</li></ul></li><li>系统1和系统2有时候会产生冲突，就等于自主反应的行为， 控制自己的行为是冲突，如：你肚子饿了，想吃饭，但是你要减肥需要控制自己</li><li>系统1给人带来的错误直觉，俗称“认知错觉”<ul><li>缪勒–莱耶错觉图，从视觉上能欺骗你，视觉错误</li><li>如何用系统2去识别认知错觉<ul><li>不能长期的质疑自己的直觉</li><li>学会妥协，学会区别会出现重大错误的场景，在风险很高的时候尽力避免出现错误</li></ul></li></ul></li></ul></li><li>第二章 电影的主角和配角<ul><li>系统1才是主角，而系统2是配角<ul><li>因为系统2的很多行为都是由系统1进行主导的</li></ul></li><li>瞳孔是人类思维活动的灵敏指导器官<ul><li>瞳孔大小会随着努力程度而发生变化</li></ul></li><li>如何使得系统1和系统2平衡，然后让我们的生活更加舒适<ul><li>系统2主要负责重要事情的抉择，不过需要注意系统2如同电表一样是有极限，一旦超过极限就短路，<ul><li>系统2对某件事件的不断练习，那么付出的努力程度就会降低，从而提高某件事情处理效率</li></ul></li><li>系统1主要负责简单判断，只能单一处理事情</li><li>系统2可以处理“多重任务”—— 不仅需要看字，还要数“的”出现的次数</li></ul></li><li>从一个任务转移到另外一个任务的是需要付出努力的，简单的说需要时间适应</li><li>时间制约是人们付出努力的另外一个驱动因素，想要在更短的时间内做出更多的事情</li><li>最轻松的工作方式，就是通过最省力的思维模式去管理大脑活动，不紧不慢的朝目标出发<ul><li>将一个复杂的任务进行拆分成几个简单的任务，变成省脑力的任务</li></ul></li><li>三思而后行，指的就是系统1的直觉可能对的，也可能错的，因此需要经过系统2从头到尾思索一遍</li></ul></li><li>第三章 惰性思维与延迟满足的矛盾<ul><li>最佳散步速度，就是不刺激系统2思考，同时让系统1自然运行起进行思考问题的一种速度</li><li>人都惰性心理，会对付出努力的工作进行正常反抗，需要系统2进行管理后才能集中注意进入努力工作状态<ul><li>当然，并不是所有集中注意的工作都会引起惰性心理反抗</li></ul></li><li>“心流”状态，一种无须做出努力就能集中注意的心理状态，如下：<ul><li>当正在认真画画或写作的时候，会忘记时间，忘记自我，忘记他人的状态</li></ul></li><li>自我控制需要集中注意力，需要付出努力。<ul><li>控制思想和行为是系统2的任务之一。案例如下：<ul><li>又累又饿的面试官很可能否定掉面试offer<ul><li>因为当面试官处于饥饿状态，系统1要求其必须消除饥饿，系统2又要其思考面试者的水平，会发生冲突从而导致面试失败的概率大大提升</li></ul></li></ul></li></ul></li><li>“自我损耗(ego depletion)”，强迫自己去做某件事情，然后途中又面临新的挑战会让你无法自我控制的现象。案例如下：<ul><li>在看一部情感电影的要不准动感情，同时还要按住压力机，会让人无法控制自己</li></ul></li><li>自我损耗的前兆<ul><li>改变日常饮食</li><li>疯狂购物</li><li>反应激烈且带挑衅</li><li>对有把握的任务花费更少的时间</li><li>在做决策的时候表现很糟糕</li></ul></li><li>自我损耗其实是大脑无法同时处理完全不关联的事情导致大脑能量被消耗完（类似短跑后的肌肉内葡萄糖下降），这其中可以通过补充葡萄糖进行状态缓解</li><li>因此结论——当一个人处于疲惫或饥饿的时候，是无法理性处理系统2的任务（面试官会拒绝大部分面试者）</li><li>脱口而出的错误答案，案例：<ul><li>球拍和球一共1.10美元，球拍比球贵一美元，那么球多少钱？</li><li>直觉告诉我们，球是0.1美元，但是一旦经过系统2计算思考后，会发现球0.1美元，那么球拍则是1+0.1=1.10美元，球拍+球=1.20美元，是错误答案</li></ul></li><li>如何避免直觉错误答案呢？<ul><li>先思考一下为什么会出现直觉错误答案？原因在我们不愿意付出过多努力去思考</li><li>避免错误的最佳方式，是需要我们避免思维懒惰，激发思维活跃力，长期对自己的直觉答案保持怀疑，养成习惯后，就会长期处于理性思维状态</li><li>提高自己的控制力，简单的说就是需要将我们的集中更多注意力</li><li>这就是古语“三思而后行”的最佳应用</li></ul></li><li>惰性思考的特点<ul><li>问题1: 今天得到1000美元，1年得到10000美元，你选哪个？<ul><li>其实没有正确答案，重点在于答案是否有被你真正思考过而做出的选择</li><li>直觉答案是10000美元，因为可以获取的更多，但是1年后谁知道会发生什么呢？</li></ul></li><li>更愿意接受系统1给出的答案或选择</li><li>控制力更低，很容易收到诱惑而做出选择</li></ul></li></ul></li><li>第四章 联想的神奇力量<ul><li>联想的连贯性：所有这些都是瞬间发生的，形成一种认知、情感和生理反应的自我强化模式，这种模式变化多样又能形成一个整体<ul><li>简单的说，就是当你看到两个词语，系统1会自动帮你两个词语随意联想在一起，想象出具体的真实画面，然后引发出一系列影响</li></ul></li><li>联想的原则（苏格兰哲学家大卫·休谟）<ul><li>相似性</li><li>时空相接</li><li>因果关系</li></ul></li><li>什么是观点<ul><li>观点就是一张思想巨网的节点，可以被称为联想的记忆</li><li>观点与观点之间相互联结，一个观点的背后关联着无数其他观点</li></ul></li><li>【你觉得你很理解你自己，但是其实你是错误的】—— 你不知道你出现一个观点的背后，联想多少个其他观点<ul><li>有个简单的做法，比如你想减肥，想一想为什么想减肥，是因为想要好身材，想要健康，还是想要拍照发朋友圈，或者其他，然后接着为什么要健康，你会越问越糊涂</li></ul></li><li>启动效应，是联想机制的一种场景效应<ul><li>简单的说，比如：喝_和运动_补充文字，我们都会自然的写【喝汤】【运动场】</li><li>启动效应，等于快速启动联想，也可以引发出【涟漪效应】，从而引起无数心理学家对记忆的进一步理解</li></ul></li><li>涟漪效应<ul><li>启动联想后，大脑的思维就像在池塘里的涟漪一样向外扩展，这就是涟漪效应</li><li>案例：每次吃饭都先喝汤，等到下次要吃饭的时候，就会先等汤做完</li></ul></li><li>佛罗里达效应<ul><li>由一组系列词语想到另外压根没提到过的词语，从而影响到人的行为</li><li>案例：当一群学生正在写生，一部分让其绘画老年人，一部分画年轻人，而绘画老年人的一般行动都会变得慢起来</li></ul></li><li>概念运动效应<ul><li>由行为引起对概念的联想作用</li><li>案例：要求学生每分钟只走30步，由于速度较慢，大部分学生都会想起：老年、健忘等词汇</li></ul></li><li>诚实盒子实验<ul><li>在办公茶厅里，摆放一个自助咖啡机，每次喝咖啡需要放入1美元到盒子中，根据不同日期在盒子上放置【眼睛】或【鲜花】的图片，最终得到结果是：<ul><li>放眼睛的时候诚实盒子里的钱比放鲜花的时候多</li></ul></li><li>结论：一个象征监视符号便可以改善自身的行为，所以系统1对我们的影响往往比我们所想象的更加重要</li></ul></li><li>系统1编了一个故事，系统2相信了，那么我们就OK了<ul><li>保持微笑，能让我们心情会变得更加美丽</li></ul></li></ul></li><li>第五章 你的直觉可能只是错觉<ul><li>认知放松度——用来判断是否需要系统2提供额外帮助到刻度盘</li><li>由记忆造成的错觉<ul><li>错觉一般是从视觉错误引起，但是记忆也会造成错觉</li><li>熟悉感觉有着简单而又强烈的不可复反性，这种不可复返性说明是对过往这种经历的一种直接反应<ul><li>熟悉的特性之一：错觉</li></ul></li><li>引发认知发送和引发认知紧张的方法是相互的，因此造成<ul><li>你不清楚为什么会让认知变得放松或者紧张，是因为这是熟悉感觉造成的</li></ul></li></ul></li><li>什么样的信息更容易让人信服？<ul><li>令人感觉到放松的信息能让人更容易接受</li><li>因为系统 1让人产生熟悉， 系统 2 依据系统 1 的熟悉感去判断</li></ul></li><li>如果某个判断是基于认知放松或者紧张，那么一定会造成错觉<ul><li>任何联想机制运行更加轻松、顺利，都会造成一定的偏见</li></ul></li><li>如果需要写一则需要让人信服的消息，利用认知放松原则去帮助自己，具体做法如下：<ul><li>书写的字体应该正式，与背景色反差较大的更容易信服，如：蓝色、红色大字体</li><li>消息内容应该简洁，同时还要保持易于记忆，如：押韵，更加容易上口，大家都熟悉的知识点等</li><li>消息应该是真实准确的，而不是错误的否则会让你信服度降低</li><li>引入名人名言，可提高更多可信度</li><li>逻辑应该清晰，符合倾听人的信念或偏好，能提高认知放松</li></ul></li><li>股票代码容易读或者记住，更容易获得更高回报率</li><li>自我强化的相互作用也能在认知放松研究中有所体现，如：微笑引起认知放松，皱眉引起的认知紧张<ul><li>认知放松，系统 2 没有介入</li><li>认知紧张，系统 2 开始介入</li></ul></li><li>字体模糊更能让人认知紧张，从而引起系统 2介入，屏蔽系统 1的直觉性答案</li><li>曝光效应，就是让人不断接触到，不断重复，引起放松状态和令人舒心的熟悉感</li><li>只要不断重复接触就能增加喜欢程度的现象，是一个极其重要的生理现象，可推及所有动物身上<ul><li>一个新鲜的刺激，开始是会谨慎，如果对人没有危险，在不断重复接触下，最终就会去掉谨慎</li></ul></li><li>创新是发生在能让人无限联想的环境中的<ul><li>创新与出众的记忆力有关系</li></ul></li><li>认知放松与心情愉悦是相互作用的<ul><li>因为认知放松所以心情愉悦</li><li>因为心情愉悦所以认知放松</li></ul></li><li>因此心情愉悦下做的决策大部分都是认知放松下，系统 1的直觉性的，所以当心情愉悦时候做下的决定，更需要谨慎</li></ul></li><li>第六章 意料之外与情理之中<ul><li>联想机制的不断激活是自动完成，因此系统 2具备某种自动控制记忆和搜索的能力</li><li>从第一次惊喜到第二次的习以为常<ul><li>系统 1 的主要功能：维护并更新你个人世界的思维模式，一种常态的思维模式</li></ul></li><li>惊喜的两种形式：<ul><li>一种是期望会发生 而没法发生的事情</li><li>一种是没有期望，但是突然发生的事情</li></ul></li><li>一件大事必然会带来一些后果，而这些后果也需要一些原因对其作出解释。我们对那天发生的事情所知有限，于是系统1便熟练地将这些知识片段组合成一个连贯的因果关系。</li><li>因果关系并不依存于理性思维，它们是系统1的产物。</li><li>因果性直觉的特点是本书一再出现的主题，因为人们总是很不恰当地将因果性思考用于需要统计论证的情景中。</li><li>统计性思维总是根据事物的不同类别和总体性质得出个案的结论。</li><li>系统1缺乏统计性思维，系统2通过学习可以进行统计性思考</li></ul></li><li>第七章 字母“B”与数字“13”<ul><li>“B”与 “13”的图片展示，表明在不同的环境下，系统 1 会做出不同的判断<ul><li>如果对情况熟悉，那么系统 1  做出的判断，无论对错，都在可以承受的范围内</li><li>如果对情况不熟悉，那么系统 1做出的判断就会冒很大风险，从而犯下直觉错误，这种错误是可以通过系统 2去避免</li></ul></li><li>你做了一个明确的选择，但是却没有意识到自己这样子做了，这就是系统 1的作用<ul><li>系统 1 不会记得放弃几个选择，甚至不记得曾有多个选择</li><li>系统 2的职责是易变和怀疑，有意识的怀疑需要同时在脑子记住多种互不相容的解释</li></ul></li><li>大脑是如何产生信任的<ul><li>系统 1 的自主运作对某个陈述句也会构建出一种最大可能性的解释，如：白鱼吃糖果</li><li>系统 2 的工作是怀疑/不信任，但是当人在疲惫劳累状态，系统 2 往往无法工作，更加容易被说服相信一些空洞的话术</li></ul></li><li>光环效应与群体的智慧<ul><li>光环效应：喜欢一个人，就会喜欢这个人的一切，如：衣着和声音等</li><li>系统 1 可以通过很多比现实更加简单却连贯的方式来表现这个世界</li><li>对一个人的观察顺序是随机，但是顺序却很重要，因为光环效应注重第一印象，而后续信息很大程度被消解了</li><li>老师对学生作业评分也是光环效应的一个例子，这也是为什么应试教育标准答案一直无法改变的原因之一</li><li>如何避免光环效应对我们的影响：<ul><li>采取的避免光环效应的评卷方法遵循了一个普遍原则：消除错误的关联！</li><li>想要从大量证据来源中获取最有用的信息，你应设法使这些来源相互独立。这也是警察办案时所遵循的规则。</li><li>如何节省开会时间，在开始讨论某个问题之前，先让与会的每一位成员各自写下简短的意见<ul><li>避免开放式发言和强势的人意见，使得大部分人都跟随其意见</li></ul></li></ul></li><li>眼见为实的想法让我们仓促做出决定</li><li>联想机制一个最基本的结构特点就是它只能回忆起已被激活的观点。</li><li>衡量系统1是否成功的方法是看它所创造的情境是否具有连贯性，而与故事所需数据的数量和质量关系不大。</li><li>寻找连贯性的系统1和懒惰的系统2相结合，意味着系统2将会赞同许多直觉性的信念，而这些信念又准确地反映了系统1产生的印象。 </li></ul></li></ul></li></ul></li></ul><h1 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h1><h2 id="1-可得性法则"><a href="#1-可得性法则" class="headerlink" title="1.可得性法则"></a>1.可得性法则</h2><ul><li>一般又称可获得性启发、易得性法则</li><li>人们是根据从记忆中提取信息的容易程度来估测事情的重要程度的，而这往往也与媒体报道的广泛程度有关。</li><li>解释人们有些事情记得清楚，有些事情却被遗忘</li></ul><h2 id="2-启发法和成见"><a href="#2-启发法和成见" class="headerlink" title="2.启发法和成见"></a>2.启发法和成见</h2><ul><li>启发法，或者称策略法、助发现法、启发力、捷思法<ul><li>在不可能找到最佳解决方案或不切实际的情况下，可以使用启发式方法来加快找到满意解决方案的过程。</li><li>解释了在知识有限（信息不完整）和时间有限的情况下，得出可能陈述或可行解决方案的艺术。</li><li>简单理解，在完全不理解情况下如何利用自己已有的知识和原则性的原理去得到可行的解决方案</li></ul></li></ul><h2 id="3-缪勒–莱耶错觉图"><a href="#3-缪勒–莱耶错觉图" class="headerlink" title="3.缪勒–莱耶错觉图"></a>3.缪勒–莱耶错觉图</h2><p>缪勒莱耶错觉是指前提为两条长度相等的线段，假如一条线段两端加上向外的两条斜线，另一条线段两端加上向内的两条斜线，则前者要显得比后者长得多。如下图所示：</p><p><img src="/assets/img/think-fast-1.png" alt=""></p><h2 id="4-心理学家米哈里·契克森米哈-Mihaly-Csikszentmihalyi-的“心流”状态"><a href="#4-心理学家米哈里·契克森米哈-Mihaly-Csikszentmihalyi-的“心流”状态" class="headerlink" title="4.心理学家米哈里·契克森米哈(Mihaly Csikszentmihalyi)的“心流”状态"></a>4.心理学家米哈里·契克森米哈(Mihaly Csikszentmihalyi)的“心流”状态</h2><ul><li>是什么<ul><li>心流状态是一种精神状态，其特征在于完全沉浸在活动中并专心致志，使相应过程令人满足且令人愉悦。</li><li>“心流”这个词是心理学家 Mihaly Csikszentmihalyi 在 1975 年创造的，当时他观察到一些艺术家完全沉浸在自己的创作中，以至于忽视或根本不受食物、饮水或睡眠需求的影响。</li></ul></li><li>心流状态的明显标志<ul><li>高度专注</li><li>行动和意识高度融合</li><li>完全沉浸其中</li><li>有一种毫不费力就能完成任务的感觉</li><li>对手头任务有很强的控制感</li><li>失去时间感/忘记时间</li><li>感到任务本身就是回馈（甚至在任务完成之前就感觉如此）</li></ul></li><li>进入心流的条件<ul><li>明确的目标</li><li>可战胜的挑战</li><li>让人能享受其中/有回馈的活动，也被称为本身具有目的的任务</li></ul></li><li>怎么做<ul><li>消除干扰：需要时间来适应一项任务，确保这段时间没有任何干扰</li><li>静下心来：建议要素是冥想练习</li><li>更专注：减少场景切换或任务切换</li><li>工作富有挑战性：增加富有挑战性的任务</li></ul></li></ul><h2 id="5-自我损耗-ego-depletion"><a href="#5-自我损耗-ego-depletion" class="headerlink" title="5.自我损耗(ego depletion)"></a>5.自我损耗(ego depletion)</h2><ul><li>俗称“内耗”</li></ul><h2 id="6-联想的连贯性"><a href="#6-联想的连贯性" class="headerlink" title="6.联想的连贯性"></a>6.联想的连贯性</h2><ul><li><p>联想的机制，是人类大脑思维活跃最常见的一种</p></li><li><p>启动效应</p><ul><li>是指由于之前受某一刺激的影响而使得之后对同一刺激的知觉和加工变得容易的心理现象。</li></ul></li><li><p>涟漪效应</p><ul><li>启动联想后，大脑的思维就像在池塘里的涟漪一样向外扩展，这就是涟漪效应</li><li>案例：每次吃饭都先喝汤，等到下次要吃饭的时候，就会先等汤做完</li></ul></li><li><p>佛罗里达效应</p><ul><li>佛罗里达里大部分是老年人，所以一想到佛罗里达，就会想到年老，白发，缓慢行走，其实是联想效应一种表现<h1 id="相关书籍"><a href="#相关书籍" class="headerlink" title="相关书籍"></a>相关书籍</h1></li></ul></li><li><p>斯坦诺维奇 《理性和反思性思维》</p></li><li><p>苏格兰哲学家大卫·休谟《人类理解研究》</p></li><li><p>心理学家蒂莫西·威尔逊《我们是自己的陌生人》</p></li><li><p>纳西姆·塔勒布所著的《黑天鹅》</p></li><li><p>丹尼尔·吉尔伯特(Daniel Gilbert) 《哈佛幸福课》</p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;思考，快与慢&quot;&gt;&lt;a href=&quot;#思考，快与慢&quot; class=&quot;headerlink&quot; title=&quot;思考，快与慢&quot;&gt;&lt;/a&gt;思考，快与慢&lt;/h1&gt;&lt;p&gt;在书中，卡尼曼会带领我们体验一次思维的终极之旅。他认为，我们的大脑有快与慢两种作决定的方式。常用的无意识的“系统1”依赖情感、记忆和经验迅速作出判断，它见闻广博，使我们能够迅速对眼前的情况作出反应。&lt;/p&gt;
&lt;p&gt;举个例子： 肚子饿了去点菜，我们点很多余点菜，然后吃了一阵子就后悔了，如果我们慢慢规划去点，发现别人都已经吃完走了。&lt;/p&gt;
&lt;p&gt;温馨提醒：本书涉及N多经济学和心理学的专业术语，需要不断查资料去理解其术语的意思，这对经济学、心理学入门有极大的作用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2023年中总结之如何在互联网裁员浪潮继续前(gou)进(zhu)</title>
    <link href="https://www.qborfy.com/study/2023-middle.html"/>
    <id>https://www.qborfy.com/study/2023-middle.html</id>
    <published>2023-09-07T10:00:01.000Z</published>
    <updated>2023-09-06T15:48:15.862Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>从去年疫情还没解封开始，陆陆续续就传来各种裁员新闻，虽然去年没有波及到我，但是基本上身边的朋友多多少少都几个被牵扯到了，因此我这边很焦虑，从2023年1月1日起，开始重新踏起起点，不断学习，不断更新个人博客，这一篇算是对我今年半年的总结以及复盘。</p><p>温馨提示：本文文字居多，且内容主要偏向于个人总结，如果觉得对自己有用的，请耐心观看。</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为什么会有这个改变，最大的动因是裁员新闻，但是真正让我动起来的是我关注了一个抖音博主<a href="https://v.douyin.com/ierkhowR/">姜胡说</a>，他2022年12月31日发布一条视频，就是在2023年做出改变宣言，让我深感触动，所以我也开始主动去改变自己，而不是被动去接纳变化。这是他的视频里的几个图片，大家可以看看。</p><p><img src="/assets/img/2023middle/all.gif" alt="1"></p><p>我给大家总结一下：</p><ul><li>1~2小时去完成最重要的事情</li><li>8小时睡眠</li><li>每天输出写点什么</li><li>健身冥想</li><li>掌握新技能</li><li>认识20位有趣的人</li><li>做一件对社会有益的事情</li></ul><h2 id="裁员浪潮"><a href="#裁员浪潮" class="headerlink" title="裁员浪潮"></a>裁员浪潮</h2><p>从2022年开始到2023年中，从各个裁员新闻，到自己亲自体验，下面我们感受裁员浪潮带来的寒气：</p><ul><li>2022年中旬腾讯业绩下滑，PCG裁员幅度达到50%</li><li>2022年8月华为任正非内部文章，“把寒气传递给每个人”，正式开启国内裁员大浪潮</li><li>2022年9月shopee大裁员，新加坡机场直接辞退员工</li><li>2022年12月，国外谷歌、微软、亚马逊纷纷传来裁员新闻</li><li>2023年5月，Twitter裁员，剩下不到2000人</li><li>2023年5月，阿里财报显示一年裁员达到2万人</li><li>…</li></ul><p>今年6月，博主所在部门也开始裁员，大概是60%，这一波是真狠，因为之前好几波裁员都没动到我们部门，没想这次一动，差点整个部门都没有了，因此就体验了一把裁员。裁员后，就开始找工作，面试机会真实少呀，尤其博主已经30出头，距离35岁也没几年了，技术上这几年也没沉淀出个什么来，所以有几次好机会都白白浪费掉了，所以才会痛定思痛，开始改变自己的一些观念和行为。</p><p>好了，前面背景大概就说这么多，接下来开始对今年半年来的一些改变总结。</p><h1 id="年中总结"><a href="#年中总结" class="headerlink" title="年中总结"></a>年中总结</h1><h2 id="半年成果"><a href="#半年成果" class="headerlink" title="半年成果"></a>半年成果</h2><p>先说说半年改变后的成果，也算是付出得来一定收获，虽然不多但是贵在行动起来了，万事开头难，后面就按照计划去做。</p><ul><li>技术分享文章，大概50+篇，开头的时候基本上每天都能输出一篇，因为有很多可以写，但是到了后面每研究一个技术点就需要花费大量时间去查和实践</li><li>睡眠时间，从之前每晚2～3点睡，改成11点半左右睡，目前几乎每天都睡足8个小时</li><li>阅读书籍，大概5本左右，数量很少，主要集中在和思维模式相关的书，后面会一一罗列出来</li><li>掌握技能，看了一些营销、剪辑、电商运营相关的视频，也开始运营自己的抖音和拼多多电商账号，但是成果不怎么样</li><li>运动时间，坚持每周至少运动两次，每次都运动半小时以上</li><li>人际关系，缺乏社交渠道，几乎没怎么认识新的朋友，但是和老朋友的沟通越来越多了</li></ul><p>总的来说，经过半年的改变，整个人的精气神都发生很大的变化，首先不再那么焦虑了，其次明白做事和做人的一些道理，也懂得如何将道理真正去实施，最后重新总结了一下人生座右铭：</p><blockquote><p>健康的身体，清晰的脑袋和一颗积极的心</p></blockquote><h2 id="年度计划"><a href="#年度计划" class="headerlink" title="年度计划"></a>年度计划</h2><p>接下来我简单描述一下我的2023年1月1号依据<code>姜胡说</code>博主给的建议制定的改变自己的计划：</p><p>￼- 每天花两个小时写技术文章<br>￼- 每天十二点之前睡觉，八点起床<br>￼- 每天学点新知识点，然后尝试100字以上学习总结<br>￼- 每天冥想半小时，健身半小时<br>￼- 结识20位有趣的人，想办法加入vue开源项目，尝试给vue开源项目修复issue同时提PR<br>￼- 掌握一项新技能，短视频账号（知识库）运营和内容剪辑<br>￼- 做一件对社会有益的事情，参加社会公益活动，如：开源项目，低代码企业级应用平台，多编辑器方案</p><h2 id="技术文章总结"><a href="#技术文章总结" class="headerlink" title="技术文章总结"></a>技术文章总结</h2><p>目前我给自己设定几个专栏去分类写技术文章，主要有以下几个：</p><ul><li><a href="https://juejin.cn/column/7222531019320459319">100道前端精品面试题</a>，目前17 人订阅，共7篇文章<ul><li>主要被面试打击后，决定沉下心来好好研究一下面试相关的知识点</li></ul></li><li><a href="https://juejin.cn/column/7209178782657445943">架构之路</a>，1 人订阅，共1篇文章<ul><li>这个算是我在技术道路继续深造的一个方向，架构师技术不仅要求知识领域很广，而且也要知识深度</li></ul></li><li><a href="https://juejin.cn/column/7208869642905862202">每日技术分享</a>，4 人订阅，共21篇文章<ul><li>主要输出自己的一些技术总结和遇到的问题，总结后分享给大家查阅</li></ul></li><li><a href="https://juejin.cn/column/7202877900239061048">低代码系列</a>，13 人订阅，共4篇文章<ul><li>低代码是博主目前最感兴趣的内容，但是由于工作上种种原因，很多技术会被搁置了很久</li></ul></li><li><a href="https://juejin.cn/column/7182042964057653285">前端算法</a>，1 人订阅，共2篇文章<ul><li>算法一直是博主的弱点，打算从基础的数据结构写起，直到可以把相关算法吃透</li></ul></li><li><a href="https://juejin.cn/column/7275151854060781628">AI Learn学习</a>，新开专栏<ul><li>AI会成为以后程序员必备的工具之一，如同搜索引擎一样，所以下半年新开的专栏，主要用来输出和学习AI相关的文章</li></ul></li></ul><p>还有一些文章并不合适放到掘金平台上，如果感兴趣的同学可以到我的个人博客去查看，博客地址:<a href="https://qborfy.com">Qborfy个人博客</a>。</p><h2 id="阅读书籍"><a href="#阅读书籍" class="headerlink" title="阅读书籍"></a>阅读书籍</h2><p>今年阅读书籍如下，也推荐给大家一起阅读。</p><h3 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h3><ul><li>领域驱动设计，在读，一本架构师必读书籍，什么是DDD架构模型，看这本书就行</li><li>Vue.js设计与实现，在读，Vue3源码阅读的参考书籍，作者是Vue.js开发团队成员之一</li><li>从零开始学架构，未读，架构师的入门书籍</li><li>架构师修炼之道，未读，架构师的入门书籍</li><li>JavaScript设计模式与开发实践，未读，设计模式重新捡起来</li><li>thinking-architecturally，未读，英文原稿，没有翻译，可能后面要苦读了</li></ul><h3 id="非技术类"><a href="#非技术类" class="headerlink" title="非技术类"></a>非技术类</h3><ul><li>高效能人士的七个习惯，已读，一本能让你对自己成长周期有更加直观感受的书籍，7个习惯如果养成了，你就螺旋上升了</li><li>思考的框架，在读，主要讲常用的思维模型，能让你面对问题，更加清晰去做出各种选择和判断</li><li>天道，在读，主要思考人生哲理和社会关系</li><li>三体，在读，主要用来营造自己的宇宙观</li><li>瓦尔纳的湖畔，在读，主要用来思考，现在的生活方式是自己想要的吗</li><li>海龟交易法则，未读，主要是未来从股市赚钱而看</li><li>投资的原则，未读，主要是未来从股市赚钱而看</li><li>我如何从股市赚了200万，未读，主要是未来从股市赚钱而看</li><li>股市投资的24堂必修课，未读，主要是未来从股市赚钱而看</li><li>我来教你变富，未读，主要是未来从股市赚钱而看</li><li>价值新法，在读，主要从里面学习作者（姜胡说）的一些学习方式和方法</li></ul><p>PS: 这么多书，不知道今年能不能看完，不过有些书粗读一遍就可以了，有些书则需要反复阅读，有些书是用的时候拿出来翻一翻找到知识点解疑即可。</p><h2 id="心态总结"><a href="#心态总结" class="headerlink" title="心态总结"></a>心态总结</h2><p>如标题所言，如何在裁员浪潮中继续前(gou)进(zhu)，这就是需要你拥有一个非常稳定且积极的心态去面对。</p><p>2023年从接到裁员消息，到裁员真正落地，我从来对未知的恐惧，到经过不断阅读和学习，我觉得我的心态从被动接受变化，转变成主动积极拥抱变化，甚至于我都开始计划35岁后失业应该要做什么事情。</p><p>因此，心态不是几句话就可以改变的了，而是需要你去行动，去做一些能让自己变得更好的行为，正如王阳明的心学一样，知行合一。道理大家都知道，但是真正能做到并坚持下去的，很难。正因为很难，所以坚持做下去，才会有收获，心态才会更加稳定面对各种未来的变化。</p><p>总结心态变化的几个点：</p><ul><li>从被动接受工作任务，到主动积极去参与制定各种工作计划和排期去完成任务</li><li>凡事多问，为什么和然后呢，然后抓住事情的重点是什么</li><li>从习惯性忘记，到主动负责，从生活到工作，需要负责的事情需要主动去做，你可以选择不做或者不负责，但是结果往往会让你更加无法承担</li><li>从随便都行，到追求完美，有些事情或者东西真的不可以随便，因为你随便处理的结果就等于没做，或者让事情变得更加糟糕</li></ul><h1 id="下半年计划"><a href="#下半年计划" class="headerlink" title="下半年计划"></a>下半年计划</h1><p>写了这么多，上半年是开始，但是我希望通过这篇文章的发表，能让我更加坚持这个改变，因为发表了文章等于发表我的个人宣言，所以下半年我会继续坚持执行年度计划，同时加强以下几个方面：</p><ul><li>技术分享文章的编写应该更加注重可用性和实战性，以及对技术未来发展趋势的把握</li><li>阅读书籍暂时不要新增了，先把计划内的书看完，以及输出相关内容出来</li><li>短视频账号需要尽快运营起来，剪辑技能需要培养</li><li>认识20个有趣的人，扩大自己的认知圈</li><li>AI这次不能再错过了，需要加大投入时间</li></ul><p>最后，希望阅读完后对你的人生也能发生一点改变，同时也祝福大家都能扛过2023年的寒潮，然后变得越来越健康，越来越有钱。</p><blockquote><p>我是一个爱阅读和爱分享的博主Qborfy，欢迎大家到我的博客参观。<a href="https://qborfy.com">Qborfy博客</a></p></blockquote><p>PS: 觉得我写的还行，可以到我的博客里，有微信二维码可以加我好友哟～</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;从去年疫情还没解封开始，陆陆续续就传来各种裁员新闻，虽然去年没有波及到我，但是基本上身边的朋友多多少少都几个被牵扯到了，因此我这边很焦虑，从2023年1月1日起，开始重新踏起起点，不断学习，不断更新个人博客，这一篇算是对我今年半年的总结以及复盘。&lt;/p&gt;
&lt;p&gt;温馨提示：本文文字居多，且内容主要偏向于个人总结，如果觉得对自己有用的，请耐心观看。&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>AI信息收集篇</title>
    <link href="https://www.qborfy.com/ailearn/all-info.html"/>
    <id>https://www.qborfy.com/ailearn/all-info.html</id>
    <published>2023-09-06T10:00:01.000Z</published>
    <updated>2023-09-06T11:47:28.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./logo-1.png" alt=""></p><blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="大模型篇"><a href="#大模型篇" class="headerlink" title="大模型篇"></a>大模型篇</h1><h1 id="AIGC篇"><a href="#AIGC篇" class="headerlink" title="AIGC篇"></a>AIGC篇</h1><h1 id="开源工具篇"><a href="#开源工具篇" class="headerlink" title="开源工具篇"></a>开源工具篇</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;./logo-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="AI系列" scheme="https://www.qborfy.com/tags/AI%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>低代码平台加载远端组件解决方案(2)——项目实战</title>
    <link href="https://www.qborfy.com/lowcode/async-component-2.html"/>
    <id>https://www.qborfy.com/lowcode/async-component-2.html</id>
    <published>2023-09-04T14:00:01.000Z</published>
    <updated>2023-09-06T09:16:48.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前阵子搞了一下如何在Vue项目中加载远程的组件，文章为<a href="https://qborfy.com/lowcode/async-component.html">【低代码平台加载远端组件解决方案(1)——defineAsyncComponent】</a>，遗留一些问题，就是如何在项目中实际应用，因为所有的问题都来源自实际项目，所以本文会继续把这个坑填完。</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>涉及到项目实战了，解决方案是需要通过<code>wepack</code>或<code>vite</code>构建工具将资源进行打包，然后通过解析文件，进行模拟封装成可以加载的 js函数即可，下面我们以 vite为构建工具进行编译组件文件<code>async/Async.vue</code></p><span id="more"></span><p>解决步骤</p><ol><li>给<code>Async.vue</code>单独创建一个编译脚本，如<code>vite.remote.config.ts</code>，参考配置如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;/src&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm-bundler.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">publicDir</span>: <span class="literal">false</span>, <span class="comment">// 忽略public资源包</span></span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;./src/components/Async.vue&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;AsyncComponent&#x27;</span>,</span><br><span class="line">      <span class="attr">fileName</span>: <span class="string">&#x27;AsyncComponent.bundle&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dir</span>: <span class="string">&#x27;dist/remote&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>执行构建后会生成两个文件<code>RemoteComponent.bundle.mjs</code>和 <code>RemoteComponent.bundle.umd.js</code> 到 <code>dist/remote/</code> 目录下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vite -c vite.async.config.ts build</span><br></pre></td></tr></table></figure><ol start="3"><li>调整<code>loadRemoteComponent</code>解析远端组件的函数，可以通过加载 <code>window.Vue</code> 标签的形式进行引入<code>RemoteComponent.bundle.umd.js</code>加载使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">loadRemoteComponent</span> = <span class="keyword">async</span> (<span class="params">url: string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = url</span><br><span class="line">        script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">AsyncComponent</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Failed to load remote component&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>调整源项目入口文件<code>main.ts</code>，将Vue暴露到window全局对象中，方便远程组件注册使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * main.ts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露全局对象到window</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Vue</span> = <span class="title class_">Vue</span></span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>在Typescript中对window进行赋值时候会出现报错，需要对全局变量声明，代码如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Vue</span>: any</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">AsyncComponent</span>: any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然如上所述的vite配置大概是可以实现单个 vue文件进行打包放到远程服务器上，然后我们在另外一个项目去加载实现，从而解决掉低代码需要依赖很多组件从而导致初次加载文件很大的问题。</p><h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><p>不过在实现和应用后，还是发现很多一些缺陷，具体如下：</p><h2 id="Vue暴露全局"><a href="#Vue暴露全局" class="headerlink" title="Vue暴露全局"></a>Vue暴露全局</h2><p>问题描述：将<code>Vue</code>暴露到全局里，将 Vue 暴露到 window 对象上可能会带来以下几个潜在问题：</p><ul><li>全局命名空间污染：将 Vue 实例挂载到 window 对象上可能会导致全局命名空间污染，从而增加代码冲突和意外覆盖的风险。如果你的项目中使用了其他库，或者多个 Vue 应用共享同一个页面，这可能会导致问题。</li><li>安全风险：将 Vue 实例暴露到全局作用域可能会增加安全风险，因为恶意第三方脚本可以访问和修改 Vue 实例。这可能导致应用程序的数据泄露或被篡改。</li><li>模块化和封装：将 Vue 实例挂载到 window 对象上破坏了模块化和封装原则。这可能会导致代码难以维护和扩展。使用模块化的方法（例如 ES6 模块或 CommonJS）可以更好地组织和管理代码。</li><li>可测试性：将 Vue 实例暴露到全局作用域可能会影响代码的可测试性。编写针对全局对象的测试可能会更加复杂，因为你需要在测试用例之间清理和重置全局状态。</li></ul><p>解决方案暂无，后面如果有解决方案会补充到这里来。</p><h2 id="vite的lib模式多入口打包"><a href="#vite的lib模式多入口打包" class="headerlink" title="vite的lib模式多入口打包"></a>vite的lib模式多入口打包</h2><p>问题描述：<code>vite.remote.config.ts</code>文件中只能单独打包一个Vue文件，如果是多个Vue文件，这里无法解决，其实要解决的话也很简单，就是使用多入口打包。</p><p>关于vite的lib模式多入口打包，官网并没有比较灵好的解决方案，解决方案，如下：</p><ul><li>通过编写<code>build.mjs</code>，去遍历需要打包的文件，然后传入变量到<code>vite</code>的<code>config</code>配置中</li></ul><p>下面的具体代码<code>build.mjs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig, build &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取需要编译的入口组件列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getBuildItems</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;./src/components/Async.vue&#x27;</span>), <span class="comment">// 入口文件地址</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;AsyncComponent&#x27;</span>, <span class="comment">// 组件名称</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;./src/components/ListWebSite.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;ListWebSite&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buildItems = <span class="title function_">getBuildItems</span>()</span><br><span class="line"></span><br><span class="line">buildItems.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">build</span>(&#123;</span><br><span class="line">        <span class="attr">configFile</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">resolve</span>: &#123;</span><br><span class="line">            <span class="attr">alias</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;/src&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm-bundler.js&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="title function_">vue</span>(),</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">publicDir</span>: <span class="literal">false</span>, <span class="comment">// 忽略public资源包</span></span><br><span class="line">        <span class="attr">build</span>: &#123;</span><br><span class="line">            <span class="attr">cssCodeSplit</span>: <span class="literal">false</span>, <span class="comment">// 禁用 CSS 代码分割</span></span><br><span class="line">            <span class="attr">lib</span>: &#123;</span><br><span class="line">                <span class="attr">entry</span>: item.<span class="property">entry</span>,</span><br><span class="line">                <span class="attr">formats</span>: [<span class="string">&#x27;umd&#x27;</span>],</span><br><span class="line">                <span class="attr">name</span>: item.<span class="property">name</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">                <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">                <span class="attr">output</span>: &#123;</span><br><span class="line">                    <span class="attr">entryFileNames</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;[name].[format].js&#x27;</span>,</span><br><span class="line">                    <span class="attr">assetFileNames</span>: <span class="string">`[name].[ext]`</span>,</span><br><span class="line">                    <span class="attr">globals</span>: &#123;</span><br><span class="line">                        <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">dir</span>: <span class="string">`dist/remote/<span class="subst">$&#123;item.name&#125;</span>`</span>, <span class="comment">// 固定到对应文件夹中</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组件css样式文件注入到JS"><a href="#组件css样式文件注入到JS" class="headerlink" title="组件css样式文件注入到JS"></a>组件css样式文件注入到JS</h2><p>问题描述：在打包后我们发现，打包后会自动生成一个style.css文件，但是我们在加载js文件并没有把css文件也加载，导致组件样式无法正常显示。</p><blockquote><p>Vite Issue: <a href="https://github.com/vitejs/vite/issues/1579">Can css be styleInjected in library mode?</a><br>尤大大在原文是这么描述的：<br><a href="https://github.com/yyx990803">Evan You</a>The problem is injecting the style assumes a DOM environment which will make the library SSR-incompatible.<br>If you only have minimal css, the easiest way is to simply use inline styles.</p></blockquote><p>翻译过来就是：问题是注入样式假定了 DOM 环境，这将使库 SSR 不兼容。如果您只有最少的 CSS，最简单的方法就是简单地使用内联样式。</p><p>解决方案：如果我们非要这么实现的话，可以自己写个插件，通过vite构建过程，将css样式代码注入到js文件中，主要还是通过创建<code>&lt;link&gt;</code>标签去加载组件的样式文件。</p><p>其实已经有现成的插件<a href="https://github.com/marco-prontera/vite-plugin-css-injected-by-js"><code>vite-plugin-css-injected-by-js</code></a>了，我们这里简单学习如何开发一个vite插件了。</p><p>写一个vite插件，具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; cssCode </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; styleId </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">injectCssIntoHtml</span>(<span class="params">cssCode, styleId</span>) &#123;</span><br><span class="line">    cssCode = <span class="string">&#x27;`&#x27;</span>+cssCode+<span class="string">&#x27;`&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> styleHtml = <span class="string">`</span></span><br><span class="line"><span class="string">    ;(function()&#123; </span></span><br><span class="line"><span class="string">        try &#123;</span></span><br><span class="line"><span class="string">            var elementStyle = document.createElement(\&#x27;style\&#x27;); </span></span><br><span class="line"><span class="string">            var styleNode = document.createTextNode(<span class="subst">$&#123;cssCode&#125;</span>);</span></span><br><span class="line"><span class="string">            elementStyle.appendChild(styleNode);</span></span><br><span class="line"><span class="string">            elementStyle.id = &quot;<span class="subst">$&#123;styleId | <span class="built_in">Date</span>.now()&#125;</span>&quot;;</span></span><br><span class="line"><span class="string">            document.head.appendChild(elementStyle);</span></span><br><span class="line"><span class="string">        &#125;catch(e)&#123;</span></span><br><span class="line"><span class="string">            console.error(\&#x27;vite-plugin-css-injected-by-js\&#x27;, e);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)();</span></span><br><span class="line"><span class="string">    `</span>.<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 简单压缩</span></span><br><span class="line">    <span class="keyword">return</span> styleHtml;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将组件样式注入js中，generateBundle 是Rollup的hook函数，时间点在bundle资源生成末尾，write写入之前调用</span></span><br><span class="line"><span class="comment"> * 大概实现原理，在构建bundle中，去掉css的资源生成，将其代码通过js代码进行实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; styleId 样式id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VitePluginStyleInject</span>(<span class="params">styleId</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> styleCode = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;vite-plugin-style-inject&#x27;</span>, <span class="comment">// 插件名称</span></span><br><span class="line">        <span class="attr">apply</span>: <span class="string">&#x27;build&#x27;</span>, <span class="comment">// 应用模式</span></span><br><span class="line">        <span class="attr">enforce</span>: <span class="string">&#x27;post&#x27;</span>, <span class="comment">// 作用阶段</span></span><br><span class="line">        <span class="attr">generateBundle</span>: <span class="keyword">function</span> (<span class="params">opts, bundle</span>) &#123;</span><br><span class="line">            <span class="comment">// + 遍历bundle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> bundle) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bundle[key]) &#123;</span><br><span class="line">                    <span class="keyword">const</span> chunk = bundle[key]; <span class="comment">// 拿到文件名对应的值</span></span><br><span class="line">                    <span class="comment">// 判断+提取+移除</span></span><br><span class="line">                    <span class="keyword">if</span> (chunk.<span class="property">type</span> === <span class="string">&#x27;asset&#x27;</span> &amp;&amp; chunk.<span class="property">fileName</span>.<span class="title function_">includes</span>(<span class="string">&#x27;.css&#x27;</span>)) &#123;</span><br><span class="line">                        styleCode += chunk.<span class="property">source</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key:&#x27;</span>, key, styleCode + <span class="string">&quot; ========&gt;&quot;</span>)</span><br><span class="line">                        <span class="keyword">delete</span> bundle[key];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到对应js资源，将生成的styleCode写入</span></span><br><span class="line">            <span class="keyword">const</span> styleTemplate = <span class="title function_">injectCssIntoHtml</span>(styleCode, styleId); </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> bundle) &#123;</span><br><span class="line">                <span class="keyword">const</span> chunk = bundle[key]</span><br><span class="line">                <span class="keyword">if</span>(chunk &amp;&amp; chunk.<span class="property">type</span> === <span class="string">&#x27;chunk&#x27;</span> &amp;&amp; chunk.<span class="property">fileName</span>.<span class="title function_">match</span>(<span class="regexp">/.[cm]?js$/</span>) !== <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">const</span> initialCode = chunk.<span class="property">code</span>; <span class="comment">// 保存原有代码</span></span><br><span class="line">                    <span class="comment">// 拼接原有代码</span></span><br><span class="line">                    chunk.<span class="property">code</span> = styleTemplate + initialCode </span><br><span class="line">                    <span class="comment">// 一个bundle插入一次即可</span></span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用插件配置只需要在vite的配置插件加入即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title class_">VitePluginStyleInject</span>(),]</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常感谢大家耐心阅读，如果上述描述的方案有任何问题都可以留言讨论，博主会第一时间随时调整和验证。 涉及到的测试案例+<code>build.async.mjs</code>源码放到github上，感兴趣可以去看看。</p><p><a href="https://github.com/qiubohong/website/blob/master/build/build.async.mjs">完整版本vite构建配置 build.async.mjs</a></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Rollup-Hook函数生命周期"><a href="#Rollup-Hook函数生命周期" class="headerlink" title="Rollup Hook函数生命周期"></a>Rollup Hook函数生命周期</h2><p><img src="/assets/img/rollup-hook-life.png" alt="/assets/img/rollup-hook-life.png"></p><p>所以项目中使用vite，其实可以参考Rollup这个生命周期，遇到一些问题可以很快速的定位和解决。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://cn.vitejs.dev/guide/">Vite官方文档</a></li><li><a href="https://github.com/marco-prontera/vite-plugin-css-injected-by-js">vite-plugin-css-injected-by-js 一个可以把css打包到js文件里的vite插件</a></li><li><a href="https://github.com/vitejs/vite/discussions/1736">Multiple entry points/output in library mode? (Vite Lib模式下的多个入口点?)</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前阵子搞了一下如何在Vue项目中加载远程的组件，文章为&lt;a href=&quot;https://qborfy.com/lowcode/async-component.html&quot;&gt;【低代码平台加载远端组件解决方案(1)——defineAsyncComponent】&lt;/a&gt;，遗留一些问题，就是如何在项目中实际应用，因为所有的问题都来源自实际项目，所以本文会继续把这个坑填完。&lt;/p&gt;
&lt;h1 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h1&gt;&lt;p&gt;涉及到项目实战了，解决方案是需要通过&lt;code&gt;wepack&lt;/code&gt;或&lt;code&gt;vite&lt;/code&gt;构建工具将资源进行打包，然后通过解析文件，进行模拟封装成可以加载的 js函数即可，下面我们以 vite为构建工具进行编译组件文件&lt;code&gt;async/Async.vue&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="每日更新" scheme="https://www.qborfy.com/tags/%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
    
    <category term="低代码" scheme="https://www.qborfy.com/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>低代码平台加载远端组件解决方案(1)——defineAsyncComponent</title>
    <link href="https://www.qborfy.com/lowcode/async-component.html"/>
    <id>https://www.qborfy.com/lowcode/async-component.html</id>
    <published>2023-08-29T14:00:01.000Z</published>
    <updated>2023-09-05T12:18:46.728Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在做低代码平台项目中遇到一个很容易遇到的问题，具体描述如下：</p><ul><li>问题描述：低代码平台依赖的组件库，如果将一个组件库进行融合打包到平台项目中的就会导致平台在渲染页面的时候需要加载完整的组件库，从而导致页面加载了一些大部分页面不需要的组件文件</li><li>希望方案：页面使用到哪些组件就去动态加载组件</li><li>解决方案：<ul><li>Vue的异步加载组件，<code>Suspense</code>和<code>defineAsyncComponent</code></li><li>React的异步加载组件， <code>Suspense</code>和<code>import()</code></li></ul></li></ul><p>由于低代码项目本身使用的 Vue3 框架，而且 Vue和  React的异步加载组件方案其实差异不多，所以下面以 Vue为主进行介绍。</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><p>在使用异步组件之前，我们需要先声明一个 Vue的异步组件，主要有以下几种方式：</p><p>第一种，采用<code>&lt;script setup&gt;</code>语法的，需要在 setup中 使用  await语法即可，例子如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(...)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> posts = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种，声明<code>setup</code>函数增加<code>async</code>，会被识别成异步组件，具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(...)</span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      posts</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种，就是通过<code>defineAsyncComponent</code>函数定义异步获取的组件实例，具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...从服务器获取组件</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="comment">/* 获取到的组件 */</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 像使用其他一般组件一样使用 `AsyncComp`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：同时Vue组件有个配置属性<code>suspensible</code>，可以用来设置<code>false</code>忽略为异步组件。</strong></p><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><blockquote><p><code>&lt;Suspense&gt;</code> 是一个内置组件，用来在组件树中协调对异步依赖的处理。它让我们可以在组件树上层等待下层的多个嵌套异步依赖项解析完成，并可以在等待时渲染一个加载状态。 —— <a href="https://cn.vuejs.org/guide/built-ins/suspense.html">Vue官方 Suspense定义</a></p></blockquote><p><code>&lt;Suspense&gt;</code>解决了我们什么问题：</p><ul><li>当我们有个全局 loading，就不再需要每个组件的针对自己的加载状态去写逻辑处理</li><li>能够更好统一处理异步组件，减少逻辑代码</li><li>结合路由切换 和 <code>&lt;Transition&gt;</code>，可以完美实现页面切换效果</li></ul><p>目前只有异步组件才会触发<code>&lt;Suspense&gt;</code>状态变更。</p><h3 id="使用Suspense"><a href="#使用Suspense" class="headerlink" title="使用Suspense"></a>使用Suspense</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Aysnc</span> <span class="keyword">from</span> <span class="string">&quot;@/components/AsyncComponent.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * Suspense 组件的 pending 进入挂起状态时触发</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"> */</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">pending</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pending&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * Suspense 组件的 resolve在 default 插槽完成获取新内容时触</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolve&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * Suspense 组件的  fallback 插槽的内容显示时触发</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"> */</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">fallback</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fallback&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试 Supsense<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Suspense</span> @<span class="attr">pending</span>=<span class="string">&quot;pending&quot;</span> @<span class="attr">resolve</span>=<span class="string">&quot;resolve&quot;</span> @<span class="attr">fallback</span>=<span class="string">&quot;fallback&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具有深层异步依赖的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aysnc</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在 #fallback 插槽中显示 “正在加载中” --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>正在加载中...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>Suspense</code>组件有三个事件分别是：</p><ul><li><code>pending</code> 进入挂起状态时触发</li><li><code>fallback</code> 插槽的内容显示时触发</li><li><code>resolve</code> default 插槽完成获取新内容时触</li></ul><h2 id="defineAsyncComponent"><a href="#defineAsyncComponent" class="headerlink" title="defineAsyncComponent"></a>defineAsyncComponent</h2><blockquote><p>定义一个异步组件，它在运行时是懒加载的。参数可以是一个异步加载函数，或是对加载行为进行更具体定制的一个选项对象。 —— <a href="https://cn.vuejs.org/api/general.html#defineasynccomponent">Vue异步组件</a></p></blockquote><p>通过官方定义，从中可以得到两层意思，分别是：</p><ul><li>第一是这个函数是专门用来的定义异步组件的，其参数是一个<code>async</code>函数，结合ES Module<code>import()</code>动态导入，可以快速实现懒加载组件</li><li>第二是这个函数是可以从远端加载组件描述代码，而这个恰恰就是本文的重点</li></ul><p>第一种用法就很简单了，通过 import()引入的组件会在打包的时候单独分割成一个文件，当使用的时候才会去加载。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComponent</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;@/component/AsyncComponent.vue&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>vite或者 Webpack 会把<code>AsyncComponent.vue</code>文件单独拆分打包成一个 js文件。</p><p>第二种用法是从远端服务器加载一个组件回来，然后加载成组件进行页面渲染，如下描述。</p><h1 id="加载服务器上的组件"><a href="#加载服务器上的组件" class="headerlink" title="加载服务器上的组件"></a>加载服务器上的组件</h1><p>如果利用第二种方式去加载组件，我们最期待的代码效果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">AsyncComponent</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 从服务器获取组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="keyword">async</span> = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/AsyncComponent.js&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">resolve</span>(<span class="keyword">async</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">async</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 后续可以直接在 template中使用 AsyncComponent</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">AsyncComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么<code>AsyncComponent.js</code>这种组件的代码应该如何生成呢？</p><p>但是，当数据还没返回来的时候，页面是不知道会渲染什么组件的。所以我们遇到第一个问题：</p><p>问题： 如何从远端加载 Vue组件，Vue通过<code>defineAsyncComponent</code>函数帮忙解决了加载问题，那么我们还需要知道这个函数支持加载什么格式的组件。</p><p>为了解决这个问题，我们先需要复习一下 Vue的组件基础知识</p><ol><li>如何去定义一个组件，在 Vue 官方文档中是这么定义一个非单文件(.Vue)的组件， 如下所示：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选项式的组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">      You clicked me &#123;&#123; count &#125;&#125; times.</span></span><br><span class="line"><span class="string">    &lt;/button&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Vue组件注册知识，分为全局注册和局部注册，如下所示：</li></ol><p>全局注册代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure><p>局部注册如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ComponentA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>复习完组件定义和注册，那么我们大概就知道如何解决【如何从远端加载Vue组件并进行注册使用？】，步骤如下：</p><ul><li>编写远端组件文件，需要符合组件的基本配置规范</li><li>利用<code>defineAsyncComponent</code>函数异步加载组件机制去拉取远端组件</li><li>解析远端组件文件内容，生成按照组件定义规范返回组件的对象<code>resolve</code>返回</li><li>通过全局或局部注册，将<code>defineAsyncComponent</code>函数返回对象进行注册</li></ul><p>示例代码如下：</p><ol><li><p>制造符合组件规范的文件<code>Async.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Async.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&quot;template&quot;</span>: <span class="string">`&lt;h1&gt;我是异步组件&lt;/h1&gt;&lt;div&gt;&lt;/div&gt;&lt;button @click=&quot;count++&quot;&gt;\</span></span><br><span class="line"><span class="string">        点击了 &#123;&#123; count &#125;&#125; 次</span></span><br><span class="line"><span class="string">      &lt;/button&gt;`</span>,</span><br><span class="line">  <span class="string">&quot;script&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;count&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解析组件和注册组件</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试 Supsense<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具有深层异步依赖的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncDD</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在 #fallback 插槽中显示 “正在加载中” --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>正在加载中...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/dist/vue.esm-bundler.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 加载远端+解析组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * <span class="doctag">@param</span> url </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">loadRemoteComponent</span> = <span class="keyword">async</span> (<span class="params">url: string</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> scriptText = <span class="keyword">await</span> response.<span class="title function_">text</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Component</span>: any = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> scriptStr = scriptText.<span class="title function_">replace</span>(<span class="string">&#x27;export default&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Component</span> = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;return &#x27;</span> + scriptStr)()</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Component</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title class_">Component</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">AsyncDD</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">loadRemoteComponent</span>(<span class="string">&#x27;/async/demo.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">Component</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>(<span class="title class_">Component</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">AsyncDD</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><p>上述这种解决方案很明显存在问题，但是基础解决思路是没有问题，主要问题在于</p><blockquote><ul><li>无法使用<code>vue</code>单文件</li><li>无法通过<code>import</code>引用外部资源</li></ul></blockquote><p>如何解决呢，由于项目实战还在研究中，打算放到下一篇项目实战去解决掉，尽情期待。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://cn.vuejs.org/guide/components/async.html">Vue 异步组件</a></li><li><a href="https://cn.vuejs.org/guide/built-ins/suspense.html">Vue Suspense 组件</a></li><li><a href="https://weread.qq.com/web/bookDetail/c5c32170813ab7177g0181ae">《Vue.js设计与实现》</a>书中 第 13 章 异步组件与函数式组件</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在做低代码平台项目中遇到一个很容易遇到的问题，具体描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题描述：低代码平台依赖的组件库，如果将一个组件库进行融合打包到平台项目中的就会导致平台在渲染页面的时候需要加载完整的组件库，从而导致页面加载了一些大部分页面不需要的组件文件&lt;/li&gt;
&lt;li&gt;希望方案：页面使用到哪些组件就去动态加载组件&lt;/li&gt;
&lt;li&gt;解决方案：&lt;ul&gt;
&lt;li&gt;Vue的异步加载组件，&lt;code&gt;Suspense&lt;/code&gt;和&lt;code&gt;defineAsyncComponent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;React的异步加载组件， &lt;code&gt;Suspense&lt;/code&gt;和&lt;code&gt;import()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于低代码项目本身使用的 Vue3 框架，而且 Vue和  React的异步加载组件方案其实差异不多，所以下面以 Vue为主进行介绍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="每日更新" scheme="https://www.qborfy.com/tags/%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
    
    <category term="低代码" scheme="https://www.qborfy.com/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>前端架构—— 学习k8s集群管理</title>
    <link href="https://www.qborfy.com/framework/framework-k8s-study.html"/>
    <id>https://www.qborfy.com/framework/framework-k8s-study.html</id>
    <published>2023-08-26T10:00:01.000Z</published>
    <updated>2023-08-23T07:16:44.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>k8s学习资料 <a href="https://kuboard.cn/learning/">https://kuboard.cn/learning/</a></li><li>k8s管理界面 <a href="https://github.com/eip-work/kuboard-press">https://github.com/eip-work/kuboard-press</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;k8s学习资料 &lt;a href=&quot;https://kuboard.cn/learning/&quot;&gt;https://k</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="架构系列" scheme="https://www.qborfy.com/tags/%E6%9E%B6%E6%9E%84%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>《思考的框架》，如何做出更好的决策？</title>
    <link href="https://www.qborfy.com/study/think-framework.html"/>
    <id>https://www.qborfy.com/study/think-framework.html</id>
    <published>2023-08-15T05:00:00.000Z</published>
    <updated>2023-09-14T05:43:37.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="思考的框架"><a href="#思考的框架" class="headerlink" title="思考的框架"></a>思考的框架</h1><p>我们绝大部分行为都是建立在我们所理解的知识领域基础之上，所以我们大部分决策都是都是存在盲区，为了做出更好的决策，本书讲述了不同的思维模型，用来让你的大脑在做出决策之前可以通过不同的思维角度去思考。</p><span id="more"></span><h1 id="阅读摘要"><a href="#阅读摘要" class="headerlink" title="阅读摘要"></a>阅读摘要</h1><ul><li>前言<ul><li>能力圈的边界取决于你手中的工具</li><li>了解世界是如何运行的，再调整我们的行为</li><li>提高思维能力不是变成天才的途径，而是当我们利用思维去更加明智面对选择</li><li>为什么要学习思维模型<ul><li>一是通过不同的思维模型，去降低不同情况的风险</li><li>二是利用跨学科的知识去避免犯下不可挽救的错误</li><li>三是学习思维模型，去减轻生活压力</li></ul></li><li>理解现实，其实就准确完整的描述现实情况，从而面对正确描述的现实问题，我们才能找到对应方法去解决</li><li>作茧自缚，是我们每个人学习过程中最大的障碍，理解我们所认知之外的东西是非常困难，主要会遇到一下的问题：<ul><li>第一，缺乏准确的视角，如同：普通百姓在思考政府领导人为什么做出这样子的决策</li><li>第二，自尊心作祟，如：太在乎自己的评价，不敢表达自己的想法，害怕犯错</li><li>第三，负责做决策不是直接承担后果的人，如：很多政策都出自不受影响或受影响较少的人，从而导致政策很保守或故步自封</li></ul></li><li>送给自己的一句话，“过而不改，是谓过矣”，简单就是说有错不改才是真正的错误，所以说你犯错不是因为你做了错误的事情，而是你知道错了，还不愿意去修改</li><li>理解现实是不够的，只有理解现实后做出改变或调整，才能真正给自己的生活带来积极的改变</li><li>更好的思维模型意味更好的思维方式，因此我们需要经常验证当前思维模型是否正确的，如果错误的话就需要及时纠正</li><li>依赖有限的思维模型，我们无法充分思考，无法得出正确的答案</li><li>通过本书可以搭建正确的思维模型网络，用来抵抗未知的风险</li><li>不同思维模型是对应不同的运用场景的，因此我们需要对思维模型深入了解，以及他们对应的运用场景，不断反思和复盘</li></ul></li><li>在应用思维模型之前，你需要想好两个观念<ul><li>01 地图不等于地域本身</li><li>02 能力圈</li></ul></li><li>常用思维模型<ul><li>03 第一性原理</li><li>04 思想实验</li><li>05 二阶思维</li><li>06 概率思维</li><li>07 逆向思维</li><li>08 奥卡姆剃刀定律</li><li>09 汉隆剃刀定律</li></ul></li><li>配套理念<ul><li>1 可证伪性</li><li>2 必要性和充分性</li><li>3 因果关系和相关关系</li></ul></li></ul><h1 id="思维模型-脑图"><a href="#思维模型-脑图" class="headerlink" title="思维模型-脑图"></a>思维模型-脑图</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>思维模型脑图<ul><li>01地图不等于地域本身<ul><li>一句话解释<ul><li>地图的用处在于其具有解释性和预测性，地图对于地域的复杂现实的抽象化，但是如果我们仅仅只是了解地图后以为等于了解地域，这是不正确的，地图是具有局限性的，如果要完整的了解地域，我们还需要去实地实战</li></ul></li><li>地图思维模型作用<ul><li>复杂事情或场景，进行抽象化或简单化，能让大家更快进入某一个陌生的领域</li></ul></li><li>地图的局限性<ul><li>所有思维模型都是错误的，我们需要在意的是错误到何种程度才让其不能再起到作用</li><li>经典案例，【公地悲剧】思维模型，</li></ul></li><li>如何准确使用地图（思维模型）<ul><li>最终仍以现实为准，结合地图我们可以快速熟悉陌生地域，但是由于地域是实时变化的，所以最终还是以实际地域为主</li><li>考虑制图师的因素，地图是创作者按照他的标准、价值观去制作的，因此具有一定局限性，我们在使用思维模型的时候需要考虑思维模型的诞生的背景，才能发挥最大的作用</li><li>地图可以影响地域，城市规划地图是会影响城市的地域面貌的，如同思维模型一样的，当你正在使用某一思考模型去做决策，而对手由于考虑到你的思考模型，针对性你的思考模型去思考，那么就会影响到你的决策的正确性</li></ul></li><li>总结<ul><li>地图（思维模型）是人类传递知识的宝贵工具，但是我们必须清晰的认识到它的局限性，某个思维模型只适用某种特定场景</li><li>地图虽然有局限性，但是它仍然是一个好的工具，如何使用的好主要看使用的人，我们的思维必须要超越思维模型，简单的说，就是要具备多种思维模型去思考问题</li></ul></li></ul></li><li>02能力圈<ul><li>什么是能力圈<ul><li>能力圈指的是在某个领域，有详细的知识网络，遇到问题的时候可以有一个明确的清单可以帮助解决问题，至少有几年的工作经验，经历过几次失败，在这个领域内你相对其他人更有竞争力<ul><li>详细的知识网络</li><li>明确的解决问题清单</li><li>多年经验（成功或失败）</li><li>富有竞争力</li></ul></li></ul></li><li>判断能力圈在哪里<ul><li>在某个领域内，明确知道自己不知道什么事情，能够快速做出决策</li><li>多年的经验、试错，积极寻找更好的办法和思考方法</li></ul></li><li>如何打造和维护能力圈<ul><li>打造能力圈三要素<ul><li>好奇心和求知欲，代表你要持续不断的学习，不断反思和总结，让自己巩固现有知识，扩展边界知识<ul><li>如何学习，就是从别人的错误中学习</li></ul></li><li>监测，诚实记录自己的成长，客观和量化的记录，主要从以下几方面去做<ul><li>记录出错的地方，如何做的更好</li><li>监测出平时关注不到的规律</li><li>明确自己哪里做错了</li></ul></li><li>反馈，需要获取外部的反馈，是打造能力圈的关键，因为你的能力不仅仅是你认为的而已，而是需要社会的认可<ul><li>不要有抵触情绪去做这个反馈事情</li></ul></li></ul></li></ul></li><li>能力圈以外的事情，注意事项有三个<ul><li>原因：动机问题与信息不对称，动机会扭曲他人能力的可信程度</li><li>解决方案<ul><li>了解陌生领域的基础知识</li><li>主动与该领域的优秀人才交流</li><li>利用基础思维模型弥补陌生领域的知识匮乏</li></ul></li></ul></li><li>总结，一个人的能力是有限的，我们只能在我们所知的能力范围内做出正确的判断<ul><li>找到自己的能力圈很重要，但是知道自己不知道的事情以及如何应对这些不知道的事情更加重要</li></ul></li></ul></li><li>03第一性原理<ul><li>概念：第一性原理是逆向分析复杂情况、释放创造力的最佳方法之一，也叫第一原理推理<ul><li>通过将最基础的理念或事实从复杂的问题中剥离出来</li></ul></li><li>一句话理解<ul><li>第一性原理的思维模式，是不断在复杂的事实中剥离不必要的因素，找到真正符合事实的最基础的原理，从而去面对更加复杂的事实</li></ul></li><li>苏格拉底的五个为什么提问法，去建立第一性原理<ul><li>1.澄清你的想法并解释想法的来源，为什么我会这么想？我到底是怎么想的？</li><li>2.对假设提出挑战，我怎么知道这是真的，如果我的想法正好和正确的相反呢？</li><li>3.寻找论据，我该如何支撑我的论点？论据来源是哪里？</li><li>4.思考其他可能的视角。别人可能有什么想法，我怎么知道自己是对的？</li><li>5.探究后果和影响。如果我是错的，该怎么办？如果我错了，会有什么后果？</li><li>6.质疑最初的问题。我为什么这么想？我想法对吗？从推理过程中我得到了什么结论？</li><li>五个为什么提问式思考是一个不断循环的过程，会让你越来越明白某件事情的真理</li></ul></li><li>第一性原理可以应用的场景<ul><li>推翻过去不准确的假设<ul><li>假设就是假设，真理才能不被推翻</li><li>要学会不断尝试去推翻现有的真理</li></ul></li><li>增量创新和范式改变<ul><li>增量创新靠的就是去在追求第一性原理的过程中，我们不断完善基础原理，从而实现渐进式创新</li><li>范式改变就是需要依据第一性原理，对传统的范式习惯去扭转思维模式，从而达到更加深入的基础原理</li></ul></li><li>总结<ul><li>第一性原理的思维模式，真正让我们能睁开眼睛看世界，没有什么是一层不变的，思考问题的时候需要去跳出历史和传统观念，试探一切可能的边界</li><li>运用第一性原理的思维模式，最大的一个好处就是我们可以开始创造新的事务，不仅仅是思想上的，还有物质上的</li></ul></li></ul></li></ul></li><li>04思想实验<ul><li>概念：用来探究事物本质的想象工具<ul><li>一句话理解，就是利用想象力去针对事物去合理的，符合逻辑的去想象出不同的新途径，探究未知的领域，如同：黑洞理论等</li></ul></li><li>思想实验的步骤<ul><li>1.提出一个问题</li><li>2.进行背景研究</li><li>3.构造假说</li><li>4.通过思想实验或想象力进行测试</li><li>5.分析并得出结论</li><li>6.与假说相比较并进行调整（跳到步骤一，提出问题）</li></ul></li><li>应用场景<ul><li>想象物理上不可能，如：爱因斯坦的重力电梯实验</li><li>重新想象历史，如：如果历史上没有发生第二次世界大战，中国还会像现在这样子吗</li><li>凭直觉想象并不直观的事物，如：“无知之幕”，设计最公正最正义的社会构建方式，需要设计者在不知道自己处于什么样的角色下进行设计，因为他们不知道什么样子的规则对他们有益</li></ul></li><li>最著名的思想实验是电车实验，就是救一群人还是救一个人</li><li>作用和目标<ul><li>思想实验的目标之一就是充分了解某一情况，从而确定在其在结果中所起的作用，从而因为其作出的决定和行动。</li><li>利用思想实验去判断我们直觉的准确性，甚至可以用来设计公司的规则或国家的法律</li></ul></li><li>总结<ul><li>思想实验的思维模式可以让我们探究我们所知道的边界，尝试的范围，为了提供成功的概率，我们应该穷尽我们所有的可能去探索</li><li>使用思想实验的次数越多，就越能了解某件事情的实际因果关系，也能越明白能成功做成一件事的源由</li></ul></li></ul></li><li>05二阶思维<ul><li>概念：也叫“意外结果定律”，除了思考行动的直接影响外，需要更长远，更具有整体性的思考的思维模型<ul><li>一句话理解，就是走一步看三步，有时候一个选择不能只考虑直接结果，还需要考虑因为直接结果造成的一系列影响</li></ul></li><li>二阶思维模型是在一阶思维结果中有高度关联性的因素去推理得出的</li><li>如何做二阶思维训练<ul><li>将长远利益置于眼前利益之上<ul><li>帮助我们去实现长期效果，比如：减肥</li></ul></li><li>构建有效的论证<ul><li>帮助我们规避问题，预测挑战，从而提前加以解决</li></ul></li></ul></li><li>二阶问题：当有一个人都踮起脚尖去看，那么所有人必须踮起脚尖，因为大家都看不清自身所处的环境</li><li>应用场景<ul><li>要意识到二阶的结果，然后利用预测出来的结果去指导我们的行动或决策</li><li>说服其他人，利用二阶思维的结果，验证其准确性去作为论据去说服</li><li>信任和可信任是多次互动的积累果，二阶思维恰恰能够让你不断去积累信任</li></ul></li><li>需要注意的点<ul><li>不能进入滑坡效应，也叫恶性循环，当你做某个错误的决策，即使你用二阶思维去论证也无济于事</li></ul></li><li>总结<ul><li>我们要坚定的确认，不劳而获的行为是不存在</li><li>做选择的时候，我们要多从结果去思考，多问自己“然后呢”，从而能避免未来可能出现的问题</li><li>利用已知的信息，从全方面、长远的思考一个问题，从时间、规模、阈值等诸多因素去思考，能让我们在未来的节省大量时间</li></ul></li></ul></li><li>06概率思维<ul><li>概念：通过运用一些数学和逻辑工具，估算特定结果出现的可能性<ul><li>一句话理解，面对随时可能发生变化的现实，利用计算出发生行为的概率，作为决策的依据去选择的思维模式</li></ul></li><li>为什么需要概率思维？<ul><li>因为未来不确定，需要积极了解发生的概率，从而更好处理未来和选择未来</li></ul></li><li>概率是什么的三个重要方面<ul><li>贝叶斯思维<ul><li>尽可能收集过去已有信息，然后依据该信息作出各种结果发生的“基本比率”，如：炒股，股票的涨跌可以从汇总各种信息去作为判断依据，然后判断明天的股市是涨还是跌</li><li>条件概率，当用过去发生的事情做为预测未来的条件时候，你需要注意围绕这事件的一系列条件，如：炒股，影响涨跌有哪些条件因素</li></ul></li><li>肥尾曲线<ul><li>与“正态分布曲线”（钟形曲线）的对称曲线相反，因为处于正态分布下，我们可以很容易预测结果，如：人的体重分布</li><li>肥尾曲线则是让极端事件发生的概率会大很多，如：人的财富分布，简单的说，就是极端情况下是无上限的</li><li>利用概率思维去面对极端情况，理性面对极端事件</li></ul></li><li>非对称<ul><li>“元概率”，就是你估算这件事发生的概率，估算本身准确的概率</li><li>非对称，就是估算概率本身就不是对称的，不会因为你的判断概率高而事情发生的结果概率就变高</li></ul></li></ul></li><li>概率思维最重要理论：反脆弱<ul><li>面对不可预知的未来，我们应当要尝试预测和做好准备</li><li>反脆弱的方法：<ul><li>寻找更多机会，如：炒股获取更多的信息源</li><li>学习如何正确的失败，如：适当冒险，避免跌倒一次就爬不起来，培养韧性，从失败学习，东山再起</li></ul></li></ul></li><li>总结<ul><li>高效的概率思维需要你判断什么是最重要的影响因素，从而估算概率，最后做出决策</li><li>概率思维是我们面对未知有用的工具，能让我们做出更有效的选择</li><li>保险公司就是概率思维最大的案例</li></ul></li></ul></li><li>07逆向思维<ul><li>概念：从起点的另外一头着手解决问题，从后往前思考问题，从多个角度看待现实问题。<ul><li>一句话理解，就当你需要判读是否正确的时候，可以假设它是正确的，也可以假设它是错的去思考，或者当你需要做一件事情的时候，可以从结果往前推导整个事件的过程</li></ul></li><li>如何做逆向思维：<ul><li>1.找到问题所在</li><li>2.描述期望目标</li><li>3.列出朝期望目标发展的所有驱动力<ul><li>大部分人会停止在这一步</li></ul></li><li>4.列出朝期望目标发展的所有阻碍力<ul><li>这一步就是逆向思维的关键步骤</li></ul></li><li>5.制定解决方案，其中包括加强步骤3的驱动力，减少步骤4的阻碍力</li></ul></li><li>孙子兵法中，是故百战百胜，非善之善者也；不战而屈人之兵，善之善者也。</li><li>应用场景：<ul><li>数学推理，从结果往前推理更容易</li><li>解决问题，不是解决问题，而是从问题的根源出发，阻止问题发生</li><li>利用逆向思维推动创新，</li></ul></li><li>总结<ul><li>当你陷入困境的时候，不妨试试看用逆向思维去思考，可能会有意想不到的解决方案出来</li></ul></li></ul></li><li>08奥卡姆剃刀定律<ul><li>概念：奥卡姆剃刀原文：“如无必要，勿增实体”，对于复杂的解释，简单的解释更有可能是正确的<ul><li>一句话理解，就是把复杂的事情简单化，如同写代码或者设计功能一样，UI界面越简单操作，对于用户操作也容易理解</li></ul></li><li>怎么做：<ul><li>结合概率思维，把面对问题进行结果简单化，然后估计概率，最终得到结果</li><li>将一个事件不断放弃一些因素，直接剩下的不可放弃<ul><li>如何判断为不可放弃，就是当你继续放弃因素的时候，事情会直接不可成立</li></ul></li></ul></li><li>注意事项<ul><li>不是所有的事情都可以简单化，当一件事情的描述被简化后仍能被理解</li></ul></li><li>总结<ul><li>关注简单，在于关注问题的重点</li></ul></li></ul></li><li>09汉隆剃刀定律<ul><li>概念：不要做最坏的打算，能解释为愚蠢的，就不要解释为恶意，从而避免妄想和偏执。<ul><li>一句话理解，不要以小人之心，度君子之腹，虽然大家不一定是君子，但是大部分人都不是恶人，同时也需要注意防人之心不可无（害人之心不可有，防人之心不可无）</li><li>放到法律上的说法，就是疑罪从无，嫌疑人只是有犯罪嫌疑，只有找到真正的证据才能定罪</li></ul></li><li>现象1：当有人做错事的时候，我们的第一心理就是他是故意为之的，但是大多数人做错可能是无意犯错而已</li><li>现象2：阿尔希波夫是苏联B-59潜艇上的一名军官，他负责核弹潜水艇是否发生的控制权，由于潜水区域被炸弹攻击，收不到外界消息，如果他没有遵循汉隆剃刀定律，那么他将发射核弹，从而引发第一次全球核弹战争</li><li>总结<ul><li>汉隆剃刀定律，证明坏人比你想象的少得多，不是每个人都有不良动机，如果我们以此定律去生活和工作，那么我们的工作将更加高效和美好</li><li>人们都有自己的思想的局限性，然后将一些行为建立合理的解释，如：将不提高工资解释为老板们都是吸血鬼的谬误结论，而汉隆剃刀定律能帮我们从这些谬误局限中解脱出来</li></ul></li></ul></li><li>配套理念1:可证伪性<ul><li>概念：当且仅当一个理论与可能的经验发生冲突，因此原则上可以被经验证明为伪时候，这里理论才属于实证科学<ul><li>一句话理解，如果你无法证明某个理论是错误的，那么你也不能证明这个理论是正确的</li></ul></li><li>怎么做：<ul><li>火鸡实验，每天喂食火鸡，只是一种趋势，不能预测未来发展的事态</li></ul></li><li>应用：<ul><li>运用可证伪性，可以帮我们筛选更加稳定的理论，获取获得更高概率的理论</li></ul></li></ul></li><li>配套理念2:必要性和充分性<ul><li>概念：成功的必要条件是充分条件的子集合，而充分条件本身比必要条件大的多<ul><li>一句话理解，必要条件是大家都可以做得到的事情，而充分条件则是需要其他人一起做的事情，是不被你所掌控的事情</li></ul></li></ul></li><li>配套理念3:因果关系和相关关系<ul><li>概念：相关关系是代表两者存在关系，但是不代表两者的因果关系，而因果关系则可以根据因推导出果<ul><li>一句话理解，就是相关关系是两者有关系，但是不知道谁影响谁，而因果关系能明确知道谁在前 谁在后</li></ul></li><li>总结：<ul><li>如何得出因果关系，可以引入对照组，比如：一个人是否好坏，可以根据之前的历史业绩进行对比</li></ul></li></ul></li></ul></li><li>本书总结：<ul><li>一共梳理9个思维模型，3个配套理念，其中可以分阶段去解读：<ul><li>01、02主要对自身的了解，同时让我们知道思维模型是对现实的抽象化，只有在特定场景下才能解决问题，如何判断是否符合，可以看【01地图】</li><li>03、04、05主要让我们打开视野，放大对世界的了解，思维不必局限我们所知的那一小部分</li><li>06、07教我们面对选择和判断的时候，依据什么和从另外一个角度去做选择判断</li><li>08、09让我们变得简单，变得善良，就是让我们不断的优化自己</li><li>配套理念1、2、3是让我们明白如何相信他人，如何成功以及如何判断他人和成功的关系</li></ul></li></ul></li></ul></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;思考的框架&quot;&gt;&lt;a href=&quot;#思考的框架&quot; class=&quot;headerlink&quot; title=&quot;思考的框架&quot;&gt;&lt;/a&gt;思考的框架&lt;/h1&gt;&lt;p&gt;我们绝大部分行为都是建立在我们所理解的知识领域基础之上，所以我们大部分决策都是都是存在盲区，为了做出更好的决策，本书讲述了不同的思维模型，用来让你的大脑在做出决策之前可以通过不同的思维角度去思考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（8）—— 懒加载</title>
    <link href="https://www.qborfy.com/face100/8-lazy-load.html"/>
    <id>https://www.qborfy.com/face100/8-lazy-load.html</id>
    <published>2023-08-12T14:00:00.000Z</published>
    <updated>2023-08-10T01:40:34.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;http</summary>
      
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（7）—— 循环轮播图</title>
    <link href="https://www.qborfy.com/face100/7-loop-pic.html"/>
    <id>https://www.qborfy.com/face100/7-loop-pic.html</id>
    <published>2023-07-31T14:00:00.000Z</published>
    <updated>2023-08-09T07:33:18.077Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>循环轮播图，基本上大家用的都是现有组件，如果要让你自己设计实现一个，其实最主要的两个点：循环算法和滚动动画</p><p>手写难度：⭐️⭐️</p><p>涉及知识点：</p><ul><li>循环播放的思路</li><li>CSS 动画，transtion和 transform</li><li>Web Component 自定义组件</li></ul><span id="more"></span><h1 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h1><p>大家最常用的轮播图基本上就是 <a href="https://github.com/nolimits4web/swiper">swiper.js</a>，不仅适配 PC 端和移动端，同时包含多种实际应用场景。但是目前我们只需要实现其中一种场景即可——循环轮播图，大概示例图如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper-container</span> <span class="attr">speed</span>=<span class="string">&quot;500&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-slide</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-slide</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-slide</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-container</span>&gt;</span></span><br></pre></td></tr></table></figure><script src="/code/swiper/swiper.js"></script><swiper-container slides-per-view="3" speed="500" loop="true">    <swiper-slide>Slide 1</swiper-slide>    <swiper-slide>Slide 2</swiper-slide>    <swiper-slide>Slide 3</swiper-slide>    <swiper-slide>Slide 4</swiper-slide>    <swiper-slide>Slide 5</swiper-slide>    <swiper-slide>Slide 6</swiper-slide></swiper-container><p>大概效果如下：<br><img src="/assets/img/7-loop-pic-0.gif" alt=""></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>在研究实现思路前，我们先确定一下要实现的目标，如下：</p><ol><li>采用<code>Web Component</code>去实现两个自定义标签<code>&lt;swiper-container&gt;</code> <code>&lt;swiper-slide&gt;</code></li><li><code>&lt;swiper-container&gt;</code>标签支持属性配置，如：<code>speed</code> <code>loop</code></li></ol><p>实现思路如下：</p><ul><li><code>&lt;swiper-container&gt;</code>容器为 flex 容器，里面包含一个<code>wrapper</code>容器用于装载所有的<code>&lt;swiper-slide&gt;</code></li><li><code>&lt;swiper-slide&gt;</code> 采用横向布局，当切换下一个的时候，使用<code>transform:translate(x,y)</code>将<code>wrapper</code>向左移动进行展示下一个<code>slide</code></li><li>当<code>loop</code>为 true的时候，支持循环播放<ul><li>循环播放逻辑为，在最后一个<code>&lt;swiper-slide&gt;</code>后面复制第一个<code>&lt;swiper-slide&gt;</code></li><li>当最后一个继续点击next的时候，会把复制第一个展示</li><li>当第一个（复制）展示后，点击下一步的时候，取消动画效果，将<code>wrapper</code>位置移动到第一个</li><li>然后利用<code>setTimeout(0)</code>延时执行，增加动画动画效果，将<code>wrapper</code>位置移动到第二个</li></ul></li></ul><p>为了更好理解循环动画思路，为了更好的展示效果，我将<code>container</code>取消了<code>overflow:hidden</code>，具体动画如下：</p><p><img src="/assets/img/7-loop-pic.gif" alt=""></p><p>整个轮播图的 DOM 结构如下：</p><div class="mxgraph-container">    <div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/loop-pic.drawio&quot;}"></div></div><h2 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h2><p>我们将通过<code>Web Component</code>规范去定义上述两个组件，分别是<code>&lt;swiper-container&gt;</code>和<code>&lt;swiper-slide&gt;</code></p><h3 id="Swiper-Container组件"><a href="#Swiper-Container组件" class="headerlink" title="Swiper-Container组件"></a>Swiper-Container组件</h3><p><code>Swiper-Container</code> 负责实现容器和控制轮播图滚动事件，等于是整个轮播图的核心，具体代码划分如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/**为节省文字，忽略样式，可以到 Github去看看开源完整示例代码 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">SwiperContainer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;swiper-container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> templateContent = template.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        shadowRoot.<span class="title function_">appendChild</span>(templateContent.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">loop</span> = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;loop&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;speed&#x27;</span>) || <span class="number">500</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 当 custom element首次被插入文档DOM时，被调用。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 由于 slot 的内容是异步的，所以需要等待 slot 的内容渲染完成后再初始化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">wrapper</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.swiper-container-wrapper&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">slides</span> = <span class="variable language_">this</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;swiper-slide&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">pagination</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.swiper-pagination&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.swiper-button-next&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.swiper-button-prev&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">prev</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-button-prev-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">slideWidth</span> = <span class="variable language_">this</span>.<span class="property">slides</span>[<span class="number">0</span>].<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">slideCount</span> = <span class="variable language_">this</span>.<span class="property">slides</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">slides</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">slide</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                slide.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;100%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 初始化操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">slideWidth</span> * <span class="variable language_">this</span>.<span class="property">slideCount</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate3d(-<span class="subst">$&#123;<span class="variable language_">this</span>.slideWidth * <span class="variable language_">this</span>.currentIndex&#125;</span>px, 0, 0)`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`transform <span class="subst">$&#123;<span class="variable language_">this</span>.speed&#125;</span>ms ease-in-out`</span>;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断是否可以循环</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> slideCount = <span class="variable language_">this</span>.<span class="property">slideCount</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">slideCount</span> &gt; <span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">loop</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">cloneFirstSlide</span>();</span></span><br><span class="line"><span class="language-javascript">            slideCount = <span class="variable language_">this</span>.<span class="property">slideCount</span> - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> bulletFragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; slideCount; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> bullet = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            bullet.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-pagination-bullet&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            bullet.<span class="property">dataset</span>.<span class="property">index</span> = i;</span></span><br><span class="line"><span class="language-javascript">            bulletFragment.<span class="title function_">appendChild</span>(bullet);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        bulletFragment.<span class="property">children</span>[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-pagination-bullet-active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="title function_">appendChild</span>(bulletFragment);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 绑定相关事件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">bindEvents</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">next</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">nextSlide</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">prev</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">prevSlide</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> index = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">index</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (index) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">goToSlide</span>(index);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 将第一个 slider 复制到最后</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">cloneFirstSlide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> firstSlide = <span class="variable language_">this</span>.<span class="property">slides</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="title function_">appendChild</span>(firstSlide);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">slideCount</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 跳转到下一个的 slider</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">nextSlide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果不是循环的，且已经是最后一个，就不执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loop</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">currentIndex</span> &gt;= <span class="variable language_">this</span>.<span class="property">slideCount</span> - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">currentIndex</span>++;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 改变下一个 icon 的状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loop</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">currentIndex</span> &gt;= <span class="variable language_">this</span>.<span class="property">slideCount</span> - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-button-next-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;swiper-button-next-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">prev</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;swiper-button-prev-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">currentIndex</span>, <span class="variable language_">this</span>.<span class="property">slideCount</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断是不是最后一个 如果最后一个，等动画执行完毕，瞬间跳到第一个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentIndex</span> &gt;= <span class="variable language_">this</span>.<span class="property">slideCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate3d(-<span class="subst">$&#123;<span class="variable language_">this</span>.slideWidth * <span class="variable language_">this</span>.currentIndex&#125;</span>px, 0, 0)`</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`transform <span class="subst">$&#123;<span class="variable language_">this</span>.speed&#125;</span>ms ease-in-out`</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">currentIndex</span>++;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">goToSlide</span>(<span class="variable language_">this</span>.<span class="property">currentIndex</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">goToSlide</span>(<span class="variable language_">this</span>.<span class="property">currentIndex</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 跳转到上一个的 slider </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prevSlide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loop</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">currentIndex</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">currentIndex</span>--;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loop</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">currentIndex</span> &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">prev</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-button-prev-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">next</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;swiper-button-next-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">prev</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;swiper-button-prev-disabled&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentIndex</span> &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="variable language_">this</span>.<span class="property">slideCount</span> - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">goToSlide</span>(<span class="variable language_">this</span>.<span class="property">currentIndex</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 跳转到指定的 slider</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; index </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">goToSlide</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate3d(-<span class="subst">$&#123;<span class="variable language_">this</span>.slideWidth * <span class="variable language_">this</span>.currentIndex&#125;</span>px, 0, 0)`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">setActivePagination</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *  设置当前的 pagination</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setActivePagination</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> paginationBullets = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.swiper-pagination-bullet&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        paginationBullets.<span class="title function_">forEach</span>(<span class="function">(<span class="params">bullet, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            bullet.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;swiper-pagination-bullet-active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentIndex</span> === <span class="variable language_">this</span>.<span class="property">slideCount</span> - <span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">loop</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            paginationBullets[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-pagination-bullet-active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        paginationBullets.<span class="title function_">forEach</span>(<span class="function">(<span class="params">bullet, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">currentIndex</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                bullet.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;swiper-pagination-bullet-active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注册swiper-container组件</span></span></span><br><span class="line"><span class="language-javascript">customElements.<span class="title function_">define</span>(<span class="string">&#x27;swiper-container&#x27;</span>, <span class="title class_">SwiperContainer</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要是不想看代码，可以看这里的方法简要说明：</p><ul><li><code>init</code> 初始化函数，用了 setTimeout去解决 slot的异步渲染问题，获取一些 dom 节点<ul><li>其中需要判断是否循环loop，如果需要则需要复制第一个节点到最后<code>cloneFirstSlide</code></li></ul></li><li><code>bindEvents</code> 绑定 prev、next、pagination等 dom 的  click事件</li><li><code>nextSlide</code> 和 <code>prevSlide</code> 指的是跳转到下一个节点和上一个节点所需要执行的函数，<ul><li>其中  <code>nextSlide</code> 函数需要在最后一个节点判断当前是否为 loop，如果 loop为 true，则需要停止动画，同时将 wrapper 容器的 transform 迁移到第一个节点</li></ul></li><li><code>goToSlide</code> 用执行当前需要展示哪个 slide</li><li><code>setActivePagination</code>用执行判断 哪个  pagination需要展示高亮样式</li></ul><h3 id="Swiper-Slide组件"><a href="#Swiper-Slide组件" class="headerlink" title="Swiper-Slide组件"></a>Swiper-Slide组件</h3><p><code>swiper-slide</code>组件实现起来就很简单，只需要满足样式展示即可，不过有一点需要注意，就是由于<code>swiper-container</code>是flex布局，所以需要设置<code>swiper-slide</code>的样式不允许缩放<code>flex-shrink: 0;</code>，完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轮播组件，子元素组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwiperSlide</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">        template.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;style&gt;</span></span><br><span class="line"><span class="string">        .swiper-slide &#123;</span></span><br><span class="line"><span class="string">            height: 100%;</span></span><br><span class="line"><span class="string">            display: flex;</span></span><br><span class="line"><span class="string">            justify-content: center;</span></span><br><span class="line"><span class="string">            align-items: center;</span></span><br><span class="line"><span class="string">            /* 防止缩小 */</span></span><br><span class="line"><span class="string">            flex-shrink: 0;</span></span><br><span class="line"><span class="string">            border: 1px solid #000;</span></span><br><span class="line"><span class="string">            background-color: #478703;</span></span><br><span class="line"><span class="string">            color: #fff;</span></span><br><span class="line"><span class="string">            font-size: 24px;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &lt;/style&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;swiper-slide&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        <span class="keyword">const</span> templateContent = template.<span class="property">content</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span><br><span class="line">        shadowRoot.<span class="title function_">appendChild</span>(templateContent.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册swiper-slide组件</span></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;swiper-slide&#x27;</span>, <span class="title class_">SwiperSlide</span>);</span><br></pre></td></tr></table></figure><p>本文所有代码都已放到<a href="https://github.com/qiubohong/hundred-interview-questions">100道前端精品面试题</a>，中的<a href="https://github.com/qiubohong/hundred-interview-questions/tree/main/7-loop-pic">前端面试100道手写题（7）—— 循环轮播图</a>，如果有帮助到你，可以帮忙给个star 即可。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components">Web Component 自定义组件</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;循环轮播图，基本上大家用的都是现有组件，如果要让你自己设计实现一个，其实最主要的两个点：循环算法和滚动动画&lt;/p&gt;
&lt;p&gt;手写难度：⭐️⭐️&lt;/p&gt;
&lt;p&gt;涉及知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环播放的思路&lt;/li&gt;
&lt;li&gt;CSS 动画，transtion和 transform&lt;/li&gt;
&lt;li&gt;Web Component 自定义组件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一次性完整学完搭建PWA项目</title>
    <link href="https://www.qborfy.com/today/20230301.html"/>
    <id>https://www.qborfy.com/today/20230301.html</id>
    <published>2023-07-28T10:00:01.000Z</published>
    <updated>2023-09-06T11:46:48.707Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做一个有温度和有干货的技术分享作者 —— <a href="https://qborfy.com">Qborfy</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在开发一个简单的个人记录网站，技术栈是使用 Vite + Vue3，由于使用的单台服务器，有时候服务器会被限制带宽，所以平时都会比较访问比较慢。所以想实现一个离线应用，而 PWA 应用则是目前最佳方案。</p><p>本文涉及知识点如下：</p><ul><li>PWA 的概念</li><li>Service Worker使用</li><li>用构建工具搭建 PWA 应用</li></ul><span id="more"></span><h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><blockquote><p>渐进式 Web 应用（Progressive Web App，PWA）是一个使用 web 平台技术构建的应用程序，但它提供的用户体验就像一个特定平台的应用程序。 ——<a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps">MDN 渐进式 Web 应用（PWA）</a></p></blockquote><p>正如上文所描述一样 PWA 最终目的让你的 web 网站可以像 app 应用一样可以给到用户去离线体验，简单点说，就是没有网络，你也可以正常访问该网站的一些资源。</p><p>PWA从技术上分为三个部分：</p><ul><li>主应用，就是平时我们开发网站所包含的内容，有：html，js，css等</li><li>Web app manifests，主要为<code>manifest.json</code>，提供浏览器安装 PWA 所需的信息，例如应用程序名称和图标等</li><li>Service Worker，主要为js文件，提供基本的离线缓存资源能力</li></ul><h2 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h2><p><code>manifest.json</code>描述web网站的信息（如名称，作者，图标和描述）的JSON文件，具体例子如下所示。</p><p><code>manifest.json</code>是需要在网站中html文件中 head中引用，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/manifest.json&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>完整的<code>manifest.json</code>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网站完整名称&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网站简称&quot;</span><span class="punctuation">,</span> <span class="comment">// 在没有足够空间显示 Web 应用程序的全名时使用</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 从启动应用程序时加载的 URL。如果以相对 URL 的形式给出，则基本 URL 将是 manifest 的 URL</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span> <span class="comment">// 访问网站窗口展示模式，如：fullscreen/standalone</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span> <span class="comment">// 背景颜色</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网站描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 网站图标</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/touch/homescreen48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48x48&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/touch/homescreen72.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;72x72&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/touch/homescreen96.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;96x96&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/touch/homescreen144.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/touch/homescreen168.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;168x168&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/touch/homescreen192.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>了解基本的描述文件，下面我们将进入<code>Service Worker</code>作为其中整个控制中心，我们将在下面进行着重了解。</p><h1 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>我们先来看看官方定义：</p><blockquote><p>Service worker 是一个注册在指定源和路径下的事件驱动 worker。它采用 JavaScript 文件的形式，控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。 —— <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API">MDN Service Worker</a></p></blockquote><p>进行简单总结一下  Service Woker是什么：</p><ul><li>是一个区别于主 JavaScript 线程，运行在其他单独线程，但是必须要注册到主 JavaScript 线程中</li><li>是用JavaScript编写的</li><li>可以拦截并修改访问和资源请求，从而实现资源缓存</li></ul><p><strong>出于安全考量，Service worker 只能由 HTTPS 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险，如果允许访问这些强大的 API，此类攻击将会变得很严重。</strong></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Service Woker的生命周期如下：</p><ol><li>注册，使用 ServiceWorkerContainer.register() 方法首次注册 service worker</li><li>下载，页面首次加载后会下载ServiceWorker或者过去 24 小时没有被下载会再次下载</li><li>安装，首次启用 service worker，页面会首先尝试安装，如果现有 service worker 已启用，新版本会在后台安装，但仍不会被激活——这个时序称为 worker in waiting。</li><li>激活，首次启用 service worker，安装结束后会直接激活，新版本的service worker会直到所有已加载的页面不再使用旧的 service worker 才会激活新的 service worker，但是可以通过ServiceWorkerGlobalScope.skipWaiting() 可以更快地进行激活。</li></ol><p><img src="/assets/img/sw-lifecycle.svg" alt=""></p><p>Service Worker提供几个事件用来监听生命周期的变化，如下：</p><ul><li><code>self.addEventListener(&quot;install&quot;)</code> 该事件触发时的标准行为是准备 service worker 用于使用，例如使用内建的 storage API 来创建缓存，并且放置应用离线时所需资源。</li><li><code>self.addEventListener(&quot;activate&quot;)</code> 事件触发的时间点通常是清理旧缓存以及其他与你的 service worker 的先前版本相关的东西。</li><li><code>self.addEventListener(&quot;fetch&quot;)</code>  事件触发的时间点是每次获取 service worker 控制的资源时，都会触发 fetch 事件 </li></ul><p><strong>这里的<code>this</code>代表的是 Service Worker 本身对象。</strong></p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p>了解完后，我们需要知道 Service Worker 有哪些常用的 API接口，或者当我们需要去实现一个 PWA 会用到哪些 API 接口，具体如下：</p><ul><li><code>navigator.serviceWorker.register()</code> 主 JavaScript 线程注册  Service Worker 方法</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Cache"><code>Cache</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CacheStorage"><code>CacheStorage</code></a> 用来控制缓存</li></ul><h2 id="尝鲜使用"><a href="#尝鲜使用" class="headerlink" title="尝鲜使用"></a>尝鲜使用</h2><h3 id="第一步-写个-demo站点"><a href="#第一步-写个-demo站点" class="headerlink" title="第一步 写个 demo站点"></a>第一步 写个 demo站点</h3><p>我们肯定需要有一个站点，里面有 html/css/js文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./manifest.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Service Worker测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./test.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试 Service Worker<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这里开始注册 Service Worker</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步-注册-Service-Worker"><a href="#第二步-注册-Service-Worker" class="headerlink" title="第二步 注册 Service Worker"></a>第二步 注册 Service Worker</h3><p>这一步有两个 事情：</p><ul><li>写Service Worker的相关逻辑的js文件 (且叫<code>sw.js</code>)</li><li>将<code>sw.js</code>注册到html文件中<br>具体代码如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册 Service worker</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>.<span class="property">navigator</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">registerServiceWorker</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&quot;./sw.js&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">scope</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (registration.<span class="property">installing</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在安装 Service worker&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (registration.<span class="property">waiting</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已安装 Service worker installed&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (registration.<span class="property">active</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;激活 Service worker&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`注册失败：<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">registerServiceWorker</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sw.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// self等同于 this</span></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&#x27;install&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;install&#x27;</span>);</span><br><span class="line">    <span class="comment">// ... 安装完成 可以开始拦截请求加入缓存 cache 中</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;activate&#x27;</span>);</span><br><span class="line">    <span class="comment">// ... 激活完成 可以开始拦截请求加入缓存 cache 中</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="第三步-缓存管理"><a href="#第三步-缓存管理" class="headerlink" title="第三步 缓存管理"></a>第三步 缓存管理</h3><p>缓存管理包括两部分，一个是缓存资源，另外一个同步更新资源，在 ServiceWorker 代码中是通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Cache"><code>Cache</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CacheStorage"><code>CacheStorage</code></a>去控制，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sw.js</span></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&#x27;install&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 确保 Service Worker 不会在 waitUntil() 里面的代码执行完毕之前安装完成</span></span><br><span class="line">    event.<span class="title function_">waitUntil</span>(</span><br><span class="line">        <span class="comment">// 创建了叫做 v1 的新缓存</span></span><br><span class="line">        caches.<span class="title function_">open</span>(<span class="string">&#x27;v1&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">cache</span>) &#123;</span><br><span class="line">            cache.<span class="title function_">addAll</span>([</span><br><span class="line">                <span class="string">&#x27;./index.html&#x27;</span>, <span class="comment">// 相对于 sw.js 的路径 缓存 index.html</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存优先</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cacheFirst</span> = <span class="keyword">async</span> (<span class="params">request</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 从缓存中读取 respondWith表示拦截请求并返回自定义的响应</span></span><br><span class="line">    <span class="keyword">const</span> responseFromCache = <span class="keyword">await</span> caches.<span class="title function_">match</span>(request);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;responseFromCache&#x27;</span>, responseFromCache);</span><br><span class="line">    <span class="keyword">if</span> (responseFromCache) &#123;</span><br><span class="line">        <span class="keyword">return</span> responseFromCache</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拦截请求</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;caches match&#x27;</span>,);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetch&#x27;</span>, event.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line">    event.<span class="title function_">respondWith</span>(<span class="title function_">cacheFirst</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动态缓存"><a href="#动态缓存" class="headerlink" title="动态缓存"></a>动态缓存</h4><p>当然，上面是将固定的资源进行缓存，如果是需要对整个页面请求资源进行缓存管理，那么可以通过<code>fetch</code>事件拦截请求实现动态缓存，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存优先</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; request </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cacheFirst</span> = <span class="keyword">async</span> (<span class="params">request</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 从缓存中读取 respondWith表示拦截请求并返回自定义的响应</span></span><br><span class="line">    <span class="keyword">const</span> responseFromCache = <span class="keyword">await</span> caches.<span class="title function_">match</span>(request);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;responseFromCache&#x27;</span>, responseFromCache);</span><br><span class="line">    <span class="keyword">if</span> (responseFromCache) &#123;</span><br><span class="line">        <span class="keyword">return</span> responseFromCache</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果缓存中没有，就从网络中请求</span></span><br><span class="line">    <span class="keyword">const</span> responseFromServer = <span class="keyword">await</span> <span class="title function_">fetch</span>(request);</span><br><span class="line">    <span class="keyword">const</span> cache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(cacheName);</span><br><span class="line">    <span class="comment">// 将请求到的资源添加到缓存中</span></span><br><span class="line">    cache.<span class="title function_">put</span>(request, responseFromServer.<span class="title function_">clone</span>());</span><br><span class="line">    <span class="keyword">return</span> responseFromServer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拦截请求</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;caches match&#x27;</span>,);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetch&#x27;</span>, event.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line">    event.<span class="title function_">respondWith</span>(<span class="title function_">cacheFirst</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缓存成功后，可以在 DevTools找到 网络请求状态，会标识是从 Service Worker 获取资源，具体如下图：</p><p><img src="/assets/img/20230301.png" alt="Alt text"></p><h3 id="第四步-更新缓存池"><a href="#第四步-更新缓存池" class="headerlink" title="第四步 更新缓存池"></a>第四步 更新缓存池</h3><p>当你的Service Worker  js文件有更新，需要删除旧的缓存，同时启动新的 Service Worker cache，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">deleteCache</span> = <span class="keyword">async</span> (<span class="params">key</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> caches.<span class="title function_">delete</span>(key);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleteOldCaches</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cacheKeepList = [<span class="string">&quot;v2&quot;</span>];</span><br><span class="line">  <span class="keyword">const</span> keyList = <span class="keyword">await</span> caches.<span class="title function_">keys</span>();</span><br><span class="line">  <span class="keyword">const</span> cachesToDelete = keyList.<span class="title function_">filter</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> !cacheKeepList.<span class="title function_">includes</span>(key));</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(cachesToDelete.<span class="title function_">map</span>(deleteCache));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;activate&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">waitUntil</span>(<span class="title function_">deleteOldCaches</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>讲完了这些，可能还需要实际体验一把，可以访问<a href="https://qborfy.com/code/serviceworker/index.html">在线Service Worker Demo</a>，源码在这里<a href="https://github.com/qiubohong/qiubohong.github.io/tree/master/code/serviceworker/index.html">Github qborfy/service worker</a>。</p><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>上面讲述了 Service Worker 的概念和使用，但是在实际项目中，如果要按照这一套去实现，会遇到很多问题，如：经过打包后我们的 js , css等文件是动态生成的，从而导致每次都需要更新 Service Worker的 Cache 版本池。</p><p>所以需要结合构建工具去让项目更快支持 PWA应用开发，具体有以下几个。</p><h2 id="Vite构建"><a href="#Vite构建" class="headerlink" title="Vite构建"></a>Vite构建</h2><p>Vite官方推荐使用插件<a href="https://github.com/vite-pwa/vite-plugin-pwa">vite-plugin-pwa</a>，使用如下：</p><p><strong>注意： <code>vite</code>版本需要 3+</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vite-plugin-pwa -D</span><br></pre></td></tr></table></figure><p>调整<code>vite</code>的配置文件<code>vite.config.js</code>，最小配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VitePWA</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-pwa&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">VitePWA</span>(&#123;</span><br><span class="line">      <span class="attr">registerType</span>: <span class="string">&#x27;autoUpdate&#x27;</span>, <span class="comment">// 注册更新模式方式  默认是autoUpdate，将会自动更新，其他还有prompt和skipWaiting</span></span><br><span class="line">      <span class="attr">injectRegister</span>: <span class="string">&#x27;auto&#x27;</span>, <span class="comment">// 控制如何在应用程序中注册ServiceWorker 默认值是 &#x27;auto&#x27; ，其他如：&#x27;inline&#x27; 则是注入一个简单的注册脚本，内联在应用程序入口点中</span></span><br><span class="line">      <span class="attr">manifest</span>: &#123; <span class="comment">// manifest.json 文件配置</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;qborfy study website&#x27;</span>,</span><br><span class="line">        <span class="attr">short_name</span>: <span class="string">&#x27;qborfyStudy&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;qborfy study website&#x27;</span>,</span><br><span class="line">        <span class="attr">theme_color</span>: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">        <span class="attr">icons</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">src</span>: <span class="string">&#x27;favicon.png&#x27;</span>,</span><br><span class="line">            <span class="attr">sizes</span>: <span class="string">&#x27;192x192&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">src</span>: <span class="string">&#x27;favicon.png&#x27;</span>,</span><br><span class="line">            <span class="attr">sizes</span>: <span class="string">&#x27;512x512&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终会在 <code>npm run build</code>后，完成以下几个事情：</p><ul><li>生成<code>registerSW.js</code>，用来注册<code>Service Worker</code>的<code>sw.js</code>文件</li><li>生成<code>sw.js</code>文件，在 <code>index.html</code>引入</li><li>生成<code>manifest.webmanifest</code>，在 <code>index.html</code>引入，声明网站的信息，可以在<code>manifest</code>配置项调整</li><li>生成<code>workbox.xxx.js</code>，用来管理缓存使用策略的代码，可以通过<code>strategies</code>去配置</li></ul><p>其他更多帮助文档可以到官方文档查看, <a href="https://vite-pwa-org.netlify.app/guide/">vite-plugin-pwa官方文档</a></p><h2 id="Webpack构建"><a href="#Webpack构建" class="headerlink" title="Webpack构建"></a>Webpack构建</h2><p>Webpack作为前端最主流的构建工具，当然也有对应插件去实现，那就是<a href="https://github.com/GoogleChrome/workbox/tree/v7/packages/workbox-webpack-plugin">workbox-webpack-plugin插件</a>，其实是Chrome自己开源的<a href="https://github.com/GoogleChrome/workbox/">workbox工具库</a>中支持的插件之一。</p><p>具体用法如下：</p><ol><li>安装依赖<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install workbox-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li><li>webpack.config.js增加插件配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WorkboxPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;workbox-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WorkboxPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">            <span class="attr">clientsClaim</span>: <span class="literal">true</span>, <span class="comment">// 快速启用服务</span></span><br><span class="line">            <span class="attr">skipWaiting</span>: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>在index.html注册 service worker<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (&#x27;serviceWorker&#x27; in navigator) &#123;</span><br><span class="line">    window.addEventListener(&#x27;load&#x27;, async () =&gt; &#123;</span><br><span class="line">        console.log(&#x27;page load...&#x27;);</span><br><span class="line">        let res = await navigator.serviceWorker.register(&#x27;/service-worker.js&#x27;);</span><br><span class="line">        console.log(res, &#x27;serviceWorker res&#x27;);</span><br><span class="line">        if (res) &#123;</span><br><span class="line">            console.log(&#x27;register success!&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.log(&#x27;register fail!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>更多帮助可以到<a href="https://developer.chrome.com/docs/workbox/modules/workbox-webpack-plugin/">workbox 官方文档</a>中查看</li></ol><h2 id="workbox工具库"><a href="#workbox工具库" class="headerlink" title="workbox工具库"></a>workbox工具库</h2><p>其实上面两个插件都是基于 Chrome 开源的 <a href="https://github.com/GoogleChrome/workbox/">workbox工具库</a>去做二次封装实现的，接下来我们对<code>workbox.js</code>做一个简单的了解，方便后续如果我们需要自己去开发符合项目的 service worker控制。</p><blockquote><p>Service Worker有很多抽象的概念和 API，如：网络请求！缓存策略！缓存管理！预缓存！等等， Workbox的作用就是将复杂的 API 进行抽象，使更易于使用。</p><p>Workbox 是一组简化常见服务工作线程路由和缓存的模块。每个可用模块都解决 Service Worker 开发的特定方面。 Workbox 旨在使 Service Worker 的使用尽可能简单，同时允许在需要时灵活地满足复杂的应用程序要求。</p></blockquote><p>如何使用<code>Workbox</code>，官方提供两种方式：</p><ul><li>结合构建工具使用，如上面的 Vite 或者  Webpack</li><li>没有构建工具，官方提供了<a href="https://developer.chrome.com/docs/workbox/modules/workbox-sw/">workbox-sw</a>，让你可以利用 workbox api去实现自己的 service worker策略</li></ul><p>这里简单使用一下，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sw.js</span></span><br><span class="line"><span class="comment">// 引入 workbox importScripts是 Service Worker  中的全局方法，用于引入外部脚本</span></span><br><span class="line">importScripts(<span class="string">&#x27;https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面就可以直接使用workbox对象的方法，如：workbox.precaching.*， workbox.routing.*等</span></span><br><span class="line"><span class="comment">// 这里表示当请求的资源是图片时，使用 CacheFirst 策略，也就是优先从缓存中读取，如果缓存中没有，就从网络中请求</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="function">(<span class="params">&#123; request &#125;</span>) =&gt;</span> request.<span class="property">destination</span> === <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其他使用说明文档可以到<a href="https://developer.chrome.com/docs/workbox">workbox 官方文档</a>中查看。</p><h1 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h1><p>这里我还收集了一些开发 PWA 后续可能会用到的点，大家可以看看。</p><h2 id="Service-Worker其他"><a href="#Service-Worker其他" class="headerlink" title="Service Worker其他"></a>Service Worker其他</h2><p>本文主要是想通过 PWA 去优化个人网站的访问速度，PWA 不仅仅只能做缓存优化，还包括一下几点：</p><ul><li>通知 Notification，可以在后台接受服务器通知，然后告知用户</li><li>通讯 Message，可以和主 JS 线程通讯</li><li>后台更新，可以在用户没有访问页面的时候进行后台定时更新</li></ul><h2 id="如何发布一个-PWA-应用"><a href="#如何发布一个-PWA-应用" class="headerlink" title="如何发布一个 PWA 应用"></a>如何发布一个 PWA 应用</h2><ul><li><a href="https://chromeos.dev/en/publish/pwa-in-play">如何发布一个PWA应用到Google Play Store</a></li><li><a href="https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/microsoft-store">如何发布一个PWA应用到Microsoft Store</a></li><li><a href="https://developer.oculus.com/documentation/web/pwa-submit-app/">如何发布一个PWA应用到Meta Quest Store</a></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Service Worker 缓存空间限制，Chrome 没有限制大小， Safari 限制50MB</li><li>当第一次访问页面，资源的请求是早于 Service Worker 的，所以静态资源是无法缓存的；只有当 Service Worker 安装完毕，用户第二次访问页面的时候，这些资源才会被缓存起来；所以 Service Worker 真正生效是在第三次访问</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/huangpb123/article/details/89498418">Service Worker ——这应该是一个挺全面的整理</a></li><li><a href="https://juejin.cn/post/7039258299086143524">vite pwa项目使用</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps">MDN 渐进式 Web 应用（PWA）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers">如何使用一个 Service Worker</a></li><li><a href="https://developer.chrome.com/docs/workbox">workbox 官方文档</a></li><li><a href="https://vite-pwa-org.netlify.app/">Vite-plugin-pwa官方文档</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做一个有温度和有干货的技术分享作者 —— &lt;a href=&quot;https://qborfy.com&quot;&gt;Qborfy&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在开发一个简单的个人记录网站，技术栈是使用 Vite + Vue3，由于使用的单台服务器，有时候服务器会被限制带宽，所以平时都会比较访问比较慢。所以想实现一个离线应用，而 PWA 应用则是目前最佳方案。&lt;/p&gt;
&lt;p&gt;本文涉及知识点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PWA 的概念&lt;/li&gt;
&lt;li&gt;Service Worker使用&lt;/li&gt;
&lt;li&gt;用构建工具搭建 PWA 应用&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="每日更新" scheme="https://www.qborfy.com/tags/%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客添加GitHub评论功能</title>
    <link href="https://www.qborfy.com/today/20230228.html"/>
    <id>https://www.qborfy.com/today/20230228.html</id>
    <published>2023-07-17T10:00:01.000Z</published>
    <updated>2023-07-18T04:48:27.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>其实从今年开始运营这个博客，我一直想增加一些新的交互功能，如：评论，之前一直有些问题没搞定，现在终于通过 Google 搜索解决问题了， 其实也算是每天学习一些新东西。</p><p>解决问题：给 Hexo 博客新增 Github评论功能</p><p>为什么选择 Github 呢？是因为 Github 对于偏向开发人员基本上属于一个必注册网站，而我博客的内容又偏向于技术，所以才会采取这个。</p><span id="more"></span><h1 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>引入 Github评论功能，网上有很多现成的方案，这里就一一列举了，我采用了最主流的库——<a href="https://github.com/gitalk/gitalk">Gitalk.js</a>，教程详细，不仅仅只能用于 Hexo，还可以适用于任何网站。</p><blockquote><p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。 —— <a href="https://github.com/gitalk/gitalk">Gitalk.js</a></p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用起来也非常简单，其实就是页面找个放置评论的位置，将对应资源引入，然后直接初始化使用即可。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> gitalk = <span class="keyword">new</span> <span class="title class_">Gitalk</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">clientID</span>: <span class="string">&#x27;GitHub Application Client ID&#x27;</span>, <span class="comment">//  申请的GitHub Application Client ID.</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">clientSecret</span>: <span class="string">&#x27;GitHub Application Client Secret&#x27;</span>,  <span class="comment">//  申请的GitHub Application Client Secret.</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">repo</span>: <span class="string">&#x27;GitHub repo&#x27;</span>, <span class="comment">//  这里填写 Github的仓库名</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">owner</span>: <span class="string">&#x27;GitHub repo owner&#x27;</span>,  <span class="comment">//  这里填写 Github的账户名</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">admin</span>: [<span class="string">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>], <span class="comment">//  这里填写 Github的账户名</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">id</span>: location.<span class="property">pathname</span>,      <span class="comment">// Ensure uniqueness and length less than 50</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">distractionFreeMode</span>: <span class="literal">false</span>  <span class="comment">// 类似 Facebook 的无干扰模式</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">gitalk.<span class="title function_">render</span>(<span class="string">&#x27;gitalk-container&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何申请Github Application授权登录，只需要在<a href="https://github.com/settings/applications/new">这里申请即可</a>，只需要注意信任域名为自己的域名即可，如下图：</p><img src="/assets/img/2023-07-17.png" style="width:50%"/><h2 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h2><p>以<code>yilia-plus</code>主题为例子，其他主题只需要放到对应位置即可，具体步骤如下所示：</p><ol><li>在文件夹<code>layout/_partial/post</code>新增文件 <code>gitalk.ejs</code>，内容如下：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 0px 30px 0px 30px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(&lt;%=theme.<span class="property">gitalk</span>.<span class="property">enable</span>%&gt;)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> gitalk = <span class="keyword">new</span> <span class="title class_">Gitalk</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">clientID</span>: <span class="string">&#x27;&lt;%=theme.gitalk.ClientID%&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">clientSecret</span>: <span class="string">&#x27;&lt;%=theme.gitalk.ClientSecret%&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">repo</span>: <span class="string">&#x27;&lt;%=theme.gitalk.repo%&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">owner</span>: <span class="string">&#x27;&lt;%=theme.gitalk.githubID%&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">admin</span>: [<span class="string">&#x27;&lt;%=theme.gitalk.adminUser%&gt;&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">id</span>: <span class="string">&#x27;&lt;%= page.date %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">distractionFreeMode</span>: <span class="string">&#x27;&lt;%=theme.gitalk.distractionFreeMode%&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">proxy</span>: <span class="string">&#x27;https://test.com/proxy&#x27;</span>, <span class="comment">// 这个是坑（Gitalk 本身提供了代理服务，但是国内经常无法访问），由于Github 采用的 OAuth 协议，所以需要我们自己写一套服务去支撑</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">gitalk.<span class="title function_">render</span>(<span class="string">&#x27;gitalk-container&#x27;</span>) </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在主题中找到<code>layout/_partial/post/article.ejs</code>中想放置评论位置，加入判断是否启用 <code>gitalk</code>，代码如下：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(&#x27;post/gitalk&#x27;, &#123;</span><br><span class="line">      key: post.slug,</span><br><span class="line">      title: post.title,</span><br><span class="line">      url: config.url+url_for(post.path)</span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在主题根目录配置文件<code>_config.yml</code> 打开<code>gitalk</code>配置，如下：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6、gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span>  <span class="literal">true</span></span><br><span class="line">  <span class="attr">githubID:</span>  <span class="string">xxxxxx</span>  <span class="comment"># 配置项基本于 GitTalk保持一致</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">  <span class="attr">ClientID:</span>  <span class="string">&#x27;xxxxxx&#x27;</span></span><br><span class="line">  <span class="attr">ClientSecret:</span>  <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">  <span class="attr">adminUser:</span>  <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="Gitalk-提示-“NetError”"><a href="#Gitalk-提示-“NetError”" class="headerlink" title="Gitalk 提示 “NetError”"></a>Gitalk 提示 “NetError”</h2><p>其实是 Gitalk 内置了 proxy 代理服务去请求完成 Github OAuth 鉴权服务，但是由于国内会经常无法正常请求该代理服务，所以需要我们自己去完成 Github OAuth 鉴权，这里我简单写了一下代码，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"><span class="comment">// github application的配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">client_id</span>: <span class="string">&#x27;xxxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">client_secret</span>: <span class="string">&#x27;xxxxxxxxx&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">koa</span>()</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>())</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/proxy&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取Github OAuth鉴权回调的 code 值</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;code&#x27;</span>, code)</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">client_id</span>: config.<span class="property">client_id</span>,</span><br><span class="line">        <span class="attr">client_secret</span>: config.<span class="property">client_secret</span>,</span><br><span class="line">        <span class="attr">code</span>: code</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://github.com/login/oauth/access_token&#x27;</span>, params)</span><br><span class="line">        <span class="keyword">const</span> access_token = res.<span class="property">data</span>.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res.data&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">        <span class="comment">// 请求成功后返回access_token 去获取 Github 相关信息</span></span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            access_token</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        ctx.<span class="property">body</span> = &#123; <span class="attr">err</span>: err &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3003</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server is running at http://localhost:3003&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/gitalk/gitalk/issues/359">Error: Network Error怎么解决</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;其实从今年开始运营这个博客，我一直想增加一些新的交互功能，如：评论，之前一直有些问题没搞定，现在终于通过 Google 搜索解决问题了， 其实也算是每天学习一些新东西。&lt;/p&gt;
&lt;p&gt;解决问题：给 Hexo 博客新增 Github评论功能&lt;/p&gt;
&lt;p&gt;为什么选择 Github 呢？是因为 Github 对于偏向开发人员基本上属于一个必注册网站，而我博客的内容又偏向于技术，所以才会采取这个。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="每日更新" scheme="https://www.qborfy.com/tags/%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（6）—— 虚拟滚动</title>
    <link href="https://www.qborfy.com/face100/6-visual-scroll.html"/>
    <id>https://www.qborfy.com/face100/6-visual-scroll.html</id>
    <published>2023-07-05T14:00:00.000Z</published>
    <updated>2023-07-13T08:51:47.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虚拟滚动在前端中是一个很常见的解决方案，由于浏览器对于内存的限制，当页面需要展示大量 DOM 节点（如：列表数据超过 10 万）的时候，如果完整渲染整个 DOM 树，当页面数据需要更新重新渲染的时候就会出现滚动卡顿，这个时候就需要虚拟滚动去模拟浏览器原生滚动事件，从而避免这个卡顿情况。</p><p>手写难度：⭐️⭐️⭐️</p><p>涉及知识点：</p><ul><li>滚动监听事件 wheel/move</li><li>事件节流</li><li>滚动偏移量 offset</li><li>按需渲染计算方案</li></ul><span id="more"></span><h1 id="虚拟滚动"><a href="#虚拟滚动" class="headerlink" title="虚拟滚动"></a>虚拟滚动</h1><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ul><li>步骤 1： 监听虚拟滚动容器的 <code>wheel</code>或<code>touchmove</code> 事件</li><li>步骤 2： 创造子容器用于填充父容器，使得父容器可以滚动</li><li>步骤 3： 提供一个渲染子元素 item函数，返回 dom 节点</li><li>步骤 4： 计算每个元素的高度，然后计算出总共应该渲染多少个子元素 item</li><li>步骤 5： 当发生滚动事件的时候，更新子容器的偏移高度，然后触发 步骤 4</li></ul><h2 id="抽象方案"><a href="#抽象方案" class="headerlink" title="抽象方案"></a>抽象方案</h2><p>定义一个类<code>Scroll</code>，接收参数为：</p><ul><li><code>el</code> 列表容器 DOM 节点</li><li><code>list</code> 列表数据</li><li><code>itemRender</code> 子元素渲染函数</li><li><code>itemHeight</code> 子元素高度</li></ul><p>使用例子为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scroll = <span class="keyword">new</span> <span class="title class_">Scroll</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;scroll&#x27;</span>),</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">    <span class="attr">itemRender</span>: <span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> child = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        child.<span class="property">innerText</span> = <span class="string">`第<span class="subst">$&#123;item&#125;</span>个div`</span>;</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时需要支持以下函数:</p><ul><li><code>update</code> 列表数组更新， 触发重新渲染</li></ul><p>虚拟滚动列表执行步骤：</p><ol><li>构造函数初始化，如：<code>start</code> <code>end</code> 代表位置</li><li><code>bindEvents</code> 监听滚动事件，触发后续渲染<code>render</code></li><li><code>init</code> 初始化一个内置容器，用来放置子元素，从而不影响父容器的高度，使得父容器可以滚动</li><li><code>render</code>计算容器滚动高度和元素 item 渲染高度，判断应该渲染哪部分元素 item</li></ol><p>简易版源码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scroll</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">&#123; el, list, itemRender, itemHeight = <span class="number">30</span> &#125;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$list</span> = el; <span class="comment">// 列表容器</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span> = list;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">itemRender</span> = itemRender;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">itemHeight</span> = itemHeight;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个子容器，用于渲染列表项</span></span><br><span class="line">        <span class="keyword">const</span> childContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        childContainer.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;relative&#x27;</span>;</span><br><span class="line">        childContainer.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line">        childContainer.<span class="property">style</span>.<span class="property">boxSizing</span> = <span class="string">&#x27;border-box&#x27;</span>;</span><br><span class="line">        childContainer.<span class="property">style</span>.<span class="property">paddingTop</span> = <span class="string">&#x27;0px&#x27;</span>;</span><br><span class="line">        childContainer.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">        childContainer.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.list.length * <span class="variable language_">this</span>.itemHeight&#125;</span>px`</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$list</span>.<span class="title function_">appendChild</span>(childContainer);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$child</span> = childContainer;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">updateOffset</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$list</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, updateOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; list, itemRender, itemHeight &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123; scrollTop, clientHeight &#125; = <span class="variable language_">this</span>.<span class="property">$list</span>;</span><br><span class="line">        <span class="keyword">const</span> start = <span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / itemHeight);</span><br><span class="line">        <span class="keyword">const</span> gap = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(clientHeight / itemHeight);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>, start)</span><br><span class="line">        <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> end = start + gap * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (start === <span class="variable language_">this</span>.<span class="property">start</span> &amp;&amp; end === <span class="variable language_">this</span>.<span class="property">end</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end &gt; list.<span class="property">length</span>) &#123;</span><br><span class="line">            end = list.<span class="property">length</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新子容器的高度和偏移量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$child</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.list.length * <span class="variable language_">this</span>.itemHeight&#125;</span>px`</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$child</span>.<span class="property">style</span>.<span class="property">paddingTop</span> = <span class="string">`<span class="subst">$&#123;start * itemHeight&#125;</span>px`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = start;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = list[i];</span><br><span class="line">            <span class="keyword">const</span> $item = <span class="title function_">itemRender</span>(item);</span><br><span class="line">            $item.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;itemHeight&#125;</span>px`</span>;</span><br><span class="line">            fragment.<span class="title function_">appendChild</span>($item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$child</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$child</span>.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样子看起来虚拟滚动是不是十分简单，但是其实有些功能还需要优化，具体如下：</p><ul><li>节流触发滚动函数，避免每次滚动都进行更新</li><li>列表缓存，减少列表渲染样式更新</li><li>提前进行更新渲染，减少因为滚动导致的更新等等</li></ul><p>完整代码我放到 github 上，大家感兴趣可以去看看<a href="https://github.com/qiubohong/hundred-interview-questions/blob/main/6-visual-scroll">Github Router完整实现</a></p><p><a href="https://qborfy.com/code/face/visualscroll/index.html">Demo体验可以看这里</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://juejin.cn/post/6844904183582162957">《新手也能看懂的虚拟滚动实现方法》</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;虚拟滚动在前端中是一个很常见的解决方案，由于浏览器对于内存的限制，当页面需要展示大量 DOM 节点（如：列表数据超过 10 万）的时候，如果完整渲染整个 DOM 树，当页面数据需要更新重新渲染的时候就会出现滚动卡顿，这个时候就需要虚拟滚动去模拟浏览器原生滚动事件，从而避免这个卡顿情况。&lt;/p&gt;
&lt;p&gt;手写难度：⭐️⭐️⭐️&lt;/p&gt;
&lt;p&gt;涉及知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滚动监听事件 wheel/move&lt;/li&gt;
&lt;li&gt;事件节流&lt;/li&gt;
&lt;li&gt;滚动偏移量 offset&lt;/li&gt;
&lt;li&gt;按需渲染计算方案&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（5）—— Router路由</title>
    <link href="https://www.qborfy.com/face100/5-router-component.html"/>
    <id>https://www.qborfy.com/face100/5-router-component.html</id>
    <published>2023-06-20T14:00:00.000Z</published>
    <updated>2023-07-13T08:52:13.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端路由，大家都使用过，那么有没有想过它是怎么实现的吗？如：Vue-Router 或者 React-Router。或许有个大概印象，但是真正要自己去实现还是没有什么思路，那么这篇文章将完整的实现思路去实现一次。</p><p>手写难度：⭐️⭐️⭐️</p><p>涉及知识点：</p><ul><li>history api 和监听事件</li><li>onhashchange 监听事件</li><li>Web Component 自定义组件</li></ul><span id="more"></span><h1 id="路由管理"><a href="#路由管理" class="headerlink" title="路由管理"></a>路由管理</h1><p>路由管理，是指的 web 应用在浏览器下根据不同的url地址展示不同的内容或者页面。</p><p>不管是 Vue-Router 或者  React-Router，基本上都是基于浏览器两种路由控制有一定了解，如下：</p><ul><li>hash，代表网页中的一个位置，通常用来做锚点使用，后面被用于单页web 应用的路由控制</li><li>history，代表网页的历史记录，同时提供接口操作浏览器的曾经在标签页或者框架里访问的会话历史记录</li></ul><p>下面我们对两个进行简单了解。</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><blockquote><p>Hash，通常是指的浏览器 URL 地址中带#的值，如：<code>URL = https://baidu.com/#/page1</code>，那么 <code>URL.hash=&#39;#/page1&#39;</code></p></blockquote><p>Hash 常用的 的几个方法：</p><p><strong><code>hashchange</code></strong></p><blockquote><p>当 URL 的片段标识符更改时，将触发hashchange事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The hash has changed!&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><strong><code>调整 hash</code></strong></p><p>除了监听改变之外，我们还需要对Hash 自由调整，如：添加或者修改，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">hash</span> = <span class="string">&#x27;#/page2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><blockquote><p><code>History</code> 接口允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录。</p></blockquote><p><code>History</code> 提供的 API 接口：</p><ul><li><code>pushState(state, unused, url)</code>  按指定的名称和 URL（如果提供该参数）将数据 push 进会话历史栈  如：<code>history.pushState(&#123;page: 1&#125;, &quot;title 1&quot;, &quot;?page=1&quot;)</code></li><li><code>replaceState(state, unused, url)</code>  按指定的数据、名称和 URL（如果提供该参数），更新 history 栈上最新的条目 如：<code>history.replaceState(&#123;page: 3&#125;, &quot;title 3&quot;, &quot;?page=3&quot;);</code></li><li><code>back()</code> 转到浏览器会话历史的上一页 等价于 <code>history.go(-1)</code></li><li><code>forward()</code> 转到浏览器会话历史的下一页 等价于 <code>history.go(1)</code></li></ul><p>还有一个比较重要的事件就是 <code>onpopstate</code>，用来监听浏览器的历史记录发生变化的。</p><h1 id="Router-实现"><a href="#Router-实现" class="headerlink" title="Router 实现"></a>Router 实现</h1><p>在了解完路由管理机制，接下来我们对  <code>Vue-Router</code>  和  <code>React-Router</code> 的功能实现做一个总结，一个基础的 <code>Router</code> 应该具备以下功能：</p><ul><li>路由中心，负责注册、匹配、存储等功能</li><li><code>router-view</code> 和 <code>router-link</code>组件实现</li><li>跳转api</li></ul><p>Router基本功能流程要点如下：</p><div class="mxgraph-container">    <div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/router-flow.drawio&quot;}"></div></div><p>接下来我们就按照每个功能模块进行简单实现。</p><h2 id="路由中心"><a href="#路由中心" class="headerlink" title="路由中心"></a>路由中心</h2><p>路由中心功能分为两块，一是注册管理，二是监听匹配。</p><h3 id="注册管理"><a href="#注册管理" class="headerlink" title="注册管理"></a>注册管理</h3><p>注册管理，顾名思义就是将所有路由对应页面组件配置统一管理，当路由改变的时候，可以直接从配置找到对应页面组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; routes </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; mode </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params">routes, mode=<span class="string">&#x27;history&#x27;</span></span>)&#123;</span><br><span class="line">    <span class="comment">// 保存路由</span></span><br><span class="line">    <span class="keyword">const</span> matcherMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> route <span class="keyword">of</span> routes) &#123;</span><br><span class="line">        matcherMap.<span class="title function_">set</span>(route.<span class="property">name</span>, route)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加路由</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addRoutes</span>(<span class="params">routes</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> route <span class="keyword">of</span> routes) &#123;</span><br><span class="line">            matcherMap.<span class="title function_">set</span>(route.<span class="property">name</span>, route)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除路由</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeRoutes</span>(<span class="params">routes</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> route <span class="keyword">of</span> routes) &#123;</span><br><span class="line">            matcherMap.<span class="title function_">delete</span>(route.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取路由</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getRoutes</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> matcherMap</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取路由</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getRoute</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> matcherMap.<span class="title function_">get</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> router = &#123;</span><br><span class="line">        addRoutes,</span><br><span class="line">        removeRoutes,</span><br><span class="line">        getRoutes,</span><br><span class="line">        getRoute</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><p>这里我们就简单实现一下，将 <code>path</code>作为 map 的 key 去存储，忽略一下比较复杂的情况，如： query 中 params和  <code>/path/:id</code>等情况</p><p>因此我们只需要通过获取 <code>matcherMap</code> 对象中对应的组件即可。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件渲染，其实在 Vue 或者 React 中都有对应渲染组件的方法，这里为了更简单实现例子，我们使用了<code>Web Component</code>规范去实现自定义组件<code>&lt;router-view&gt;</code>展示和渲染组件。</p><p>分为两个功能点：</p><ol><li>自定义组件<code>&lt;router-view&gt;</code></li><li>匹配到路由组件后渲染对应组件</li></ol><h3 id="lt-router-view-gt-组件实现"><a href="#lt-router-view-gt-组件实现" class="headerlink" title="&lt;router-view&gt;组件实现"></a><code>&lt;router-view&gt;</code>组件实现</h3><p>这里使用 WebCompoent 去实现，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义路由组件</span></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;router-view&#x27;</span>, <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">        template.<span class="property">id</span> = <span class="string">&#x27;router-view&#x27;</span>;</span><br><span class="line">        template.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div&gt;&lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> templateContent = template.<span class="property">content</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span><br><span class="line">        shadowRoot.<span class="title function_">appendChild</span>(templateContent.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="渲染对应组件"><a href="#渲染对应组件" class="headerlink" title="渲染对应组件"></a>渲染对应组件</h3><p>当监听到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由回调</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="title function_">match</span>(<span class="variable language_">window</span>.<span class="property">location</span>)</span><br><span class="line">    <span class="keyword">if</span> (currentRoute &amp;&amp; currentRoute.<span class="property">path</span> === route.<span class="property">path</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!route) &#123;</span><br><span class="line">        <span class="comment">// 路由不存在，跳转到首页</span></span><br><span class="line">        <span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (route) &#123;</span><br><span class="line">        currentRoute = route</span><br><span class="line">        <span class="keyword">const</span> component = route.<span class="property">component</span></span><br><span class="line">        <span class="comment">// 渲染组件</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;router-view&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;<span class="subst">$&#123;component&#125;</span> slot=&quot;content&quot;&gt;&lt;/<span class="subst">$&#123;component&#125;</span>&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码我放到 github 上，大家感兴趣可以去看看<a href="https://github.com/qiubohong/hundred-interview-questions/blob/main/5-router-component">Github Router完整实现</a></p><p><a href="https://qborfy.com/code/face/router/index.html#/">Demo体验可以看这里</a></p><h1 id="额外知识点"><a href="#额外知识点" class="headerlink" title="额外知识点"></a>额外知识点</h1><h2 id="WebComponent"><a href="#WebComponent" class="headerlink" title="WebComponent"></a>WebComponent</h2><blockquote><p>Web Component 是一套不同的技术，允许你创建可重用的定制元素（它们的功能封装在你的代码之外）并且在你的 web 应用中使用它们。 —— <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components">Web Component</a></p></blockquote><p>简单的理解，就是浏览器可以允许你自定义HTML 标签，且包含自定义的 CSS 样式和 JS 脚本逻辑。里面有三个点学习：</p><ul><li>Custom element（自定义元素），通过 JS 可以自定义 HTML 标签</li><li>Shadow DOM（影子 DOM），可以将HTML DOM 树以附加 Shadow DOM到自定义 HTMl 标签中，从而不影响原本 HTML DOM 树结构</li><li>HTML template（HTML 模板），支持<template> 和 <slot> 元素，使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用</li></ul><h3 id="实践例子"><a href="#实践例子" class="headerlink" title="实践例子"></a>实践例子</h3><ol><li>自定义HTML 标签代码如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomHTMl</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 必须首先调用 super 方法</span></span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 shadow root</span></span><br><span class="line">        <span class="keyword">const</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 spans</span></span><br><span class="line">        <span class="keyword">const</span> wrapper = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">        wrapper.<span class="property">innerHTML</span> = <span class="string">&#x27;测试自定义元素&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        shadow.<span class="title function_">appendChild</span>(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首次被插入到文档 DOM 节点上时被调用</span></span><br><span class="line">    <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;首次被插入到文档 DOM 节点上时被调用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当 custom element 从文档 DOM 中删除时，被调用</span></span><br><span class="line">    <span class="title function_">disconnectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当 custom element 从文档 DOM 中删除时，被调用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当 custom element 被移动到新的文档时，被调用</span></span><br><span class="line">    <span class="title function_">adoptedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当 custom element 被移动到新的文档时，被调用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加、删除或者修改某个属性时被调用</span></span><br><span class="line">    <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;增加、删除或者修改某个属性时被调用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册组件标签，这里比较重要</span></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;custom-html&#x27;</span>, <span class="title class_">PopUpInfo</span>);</span><br></pre></td></tr></table></figure><p>实际应用如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里就会展示h1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-html</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>template</code>模板 + <code>slot</code>插槽<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用模板 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;template&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot 通过 name 确定放在哪里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义标签使用示范 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article-page</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot 标识使用哪个插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Article</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;template&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> templateContent = template.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span>&#125;).<span class="title function_">appendChild</span>(templateContent.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        customElements.<span class="title function_">define</span>(<span class="string">&#x27;article-page&#x27;</span>, <span class="title class_">Article</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History">MDN History资料</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components">Web Component 自定义组件</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前端路由，大家都使用过，那么有没有想过它是怎么实现的吗？如：Vue-Router 或者 React-Router。或许有个大概印象，但是真正要自己去实现还是没有什么思路，那么这篇文章将完整的实现思路去实现一次。&lt;/p&gt;
&lt;p&gt;手写难度：⭐️⭐️⭐️&lt;/p&gt;
&lt;p&gt;涉及知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;history api 和监听事件&lt;/li&gt;
&lt;li&gt;onhashchange 监听事件&lt;/li&gt;
&lt;li&gt;Web Component 自定义组件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端架构成长之路——微前端系列(二)之qiankun框架实战</title>
    <link href="https://www.qborfy.com/framework/frontend-microapp-2.html"/>
    <id>https://www.qborfy.com/framework/frontend-microapp-2.html</id>
    <published>2023-06-18T10:00:01.000Z</published>
    <updated>2023-06-16T09:13:18.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前有写过专门一篇关于微前端架构的基础知识——<a href="https://qborfy.com/framework/frontend-microapp-1.html">《前端架构成长之路——微前端架构理论篇》</a>，但是里面主要讲几个点：</p><ul><li>微前端是什么，具体能做些什么</li><li>微前端的一些主流框架</li><li>微前端拆分项目的一些原则</li></ul><p>那么其实对于微前端应用还是有些不太清楚，下面就用微前端架构去对某个古老项目进行框架升级，这其实也是微前端架构主要特性之一，对项目升级的方案之一。</p><span id="more"></span><p>在使用 <code>qiankun</code>  框架之前，脑子里有几个疑问：</p><ul><li><code>qiankun</code> 是怎么做到将不同框架的项目放在一起，是通过打包，还是其他方式：<ul><li><code>qiankun</code> 是有<code>1个主基座</code> + <code>N 个微应用</code></li><li><code>qiankun</code> 利用路由控制，去加载不同的微应用，微应用与主应用之间消除跨域问题</li><li><code>qiankun</code> 需要在子应用里加入生命周期钩子函数提供给主应用调用</li></ul></li></ul><p>搞明白后，我们就可以开始进行项目实战，</p><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><p>由于本次是将老项目升级到新版本框架中，因此将采用 Monorepo 架构对新老项目进行统一管理。项目结构大概 如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">qiankun-demo</span><br><span class="line">├── apps # 应用层</span><br><span class="line">|  ├── main #  基座项目</span><br><span class="line">|  |  ├── ...</span><br><span class="line">|  ├── old #  老版项目</span><br><span class="line">|  |  ├── ...</span><br><span class="line">|  └── new #  新版项目</span><br><span class="line">|     ├── ...</span><br><span class="line">├── README.md</span><br><span class="line">├── nx.json #  nx.js 管理Monorepo</span><br><span class="line">├── package.json</span><br><span class="line">├── pnpm-lock.yaml</span><br><span class="line">├── pnpm-workspace.yaml</span><br></pre></td></tr></table></figure><h2 id="main-基座项目"><a href="#main-基座项目" class="headerlink" title="main-基座项目"></a>main-基座项目</h2><p> <code>qiankun</code> 的基座项目和普通 web 项目初始化没有什么区别，你可以基于 <code>React</code>  或  <code>Vue</code> 作为基座项目框架都可以，但是需要入口文件需要做一下调整，下面我以 <code>Vue+Vite</code> 项目为例:</p><p>步骤一： 初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest main-vue -- --template vue</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 qiankun</span></span><br><span class="line">npm i qiankun -S</span><br></pre></td></tr></table></figure><p>步骤二：在<code>main.ts</code>准备好基座项目以及注册微应用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start , runAfterFirstMounted, setDefaultMountApp&#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step1 初始化应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step2 注册子应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">registerMicroApps</span>(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;old-web&#x27;</span>, <span class="comment">// 注册后子应用的名字 老项目启动端口为8080</span></span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>, <span class="comment">// 这里可以根据环境变量配置</span></span><br><span class="line">            <span class="attr">container</span>: <span class="string">&#x27;#subapp-viewport&#x27;</span>,</span><br><span class="line">            <span class="attr">activeRule</span>: <span class="string">&#x27;/old&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;new-web&#x27;</span>, <span class="comment">// 注册后子应用的名字 新项目启动端口为8090</span></span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8090&#x27;</span>,</span><br><span class="line">            <span class="attr">container</span>: <span class="string">&#x27;#subapp-viewport&#x27;</span>,</span><br><span class="line">            <span class="attr">activeRule</span>: <span class="string">&#x27;/new&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// qiankun 生命周期钩子 - 加载前</span></span><br><span class="line">        <span class="attr">beforeLoad</span>: [</span><br><span class="line">            <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[LifeCycle] before load %c%s&#x27;</span>, <span class="string">&#x27;color: green;&#x27;</span>, app.<span class="property">name</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">beforeMount</span>: [</span><br><span class="line">            <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[LifeCycle] before mount %c%s&#x27;</span>, <span class="string">&#x27;color: green;&#x27;</span>, app.<span class="property">name</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">afterMount</span>: [</span><br><span class="line">            <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[LifeCycle] after mount %c%s&#x27;</span>, <span class="string">&#x27;color: green;&#x27;</span>, app.<span class="property">name</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">beforeUnmount</span>: <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[LifeCycle] before Unmount %c%s&#x27;</span>, <span class="string">&#x27;color: green;&#x27;</span>, app.<span class="property">name</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">afterUnmount</span>: [</span><br><span class="line">            <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[LifeCycle] after unmount %c%s&#x27;</span>, <span class="string">&#x27;color: green;&#x27;</span>, app.<span class="property">name</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step3 设置默认进入的子应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// setDefaultMountApp(&#x27;/old&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Step4 启动应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">start</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">runAfterFirstMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[MainApp] first app mounted&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="microapp-微应用"><a href="#microapp-微应用" class="headerlink" title="microapp-微应用"></a>microapp-微应用</h2><p>微应用其实改动代码不多，只是需要将qiankun 所需要的接口(<code>bootstrap</code>, <code>mount</code> <code>unmount</code>) 暴露出来即可</p><p>步骤一： 新建 <code>public-path.js</code> 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要用来区分 qiankun 加载资源路径</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="variable language_">window</span>.<span class="property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤二： 在 <code>app.js</code> 加入<code>qiankun</code>的接口，将 render 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">React</span> = <span class="built_in">require</span>(<span class="string">&#x27;react&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ReactDom</span> = <span class="built_in">require</span>(<span class="string">&#x27;react-dom&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ReactRouter2</span> = <span class="built_in">require</span>(<span class="string">&#x27;react-router&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RouteConfig</span> = <span class="built_in">require</span>(<span class="string">&#x27;./config/RouteConfig&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Utils</span> = <span class="built_in">require</span>(<span class="string">&#x27;radmin&#x27;</span>).<span class="property">Utils</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;history&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./public-path.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactRouter</span>, &#123; <span class="title class_">Router</span>, <span class="title class_">Route</span>, useRouterHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span></span><br><span class="line"><span class="keyword">var</span> appHistory = <span class="title function_">useRouterHistory</span>(createHistory)(&#123; <span class="attr">queryKey</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;../less/index.less&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。</span></span><br><span class="line"><span class="comment"> * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[react15] react app bootstraped&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[react15] props from main framework&#x27;</span>, props);</span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  <span class="comment">// 这里判断 container 是否qiankun 携带进来的</span></span><br><span class="line">  <span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReactRouter2.Router</span> <span class="attr">routes</span>=<span class="string">&#123;Utils.combineConfig(RouteConfig)&#125;</span> <span class="attr">history</span>=<span class="string">&#123;appHistory&#125;</span> /&gt;</span></span>, container ? container.<span class="title function_">querySelector</span>(<span class="string">&#x27;#react15Root&#x27;</span>) : <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;react15Root&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(</span><br><span class="line">    container ? container.<span class="title function_">querySelector</span>(<span class="string">&#x27;#react15Root&#x27;</span>) : <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;react15Root&#x27;</span>),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 独立的时候可自主运行</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  <span class="title function_">bootstrap</span>().<span class="title function_">then</span>(mount);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">bootstrap</span> = bootstrap;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">mount</span> = mount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤三： 在<code>webpack.config.js</code>调整打包配置，将 <code>app.js</code>暴露到<code>window</code>中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: [</span><br><span class="line">        path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/js/app&#x27;</span>)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;hot&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;app.js&#x27;</span>,</span><br><span class="line">        <span class="attr">library</span>: <span class="string">`<span class="subst">$&#123;packageName&#125;</span>-[name]`</span>,</span><br><span class="line">        <span class="attr">libraryTarget</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">        <span class="attr">globalObject</span>: <span class="string">&#x27;window&#x27;</span>,</span><br><span class="line">        <span class="attr">jsonpFunction</span>: <span class="string">`webpackJsonp_<span class="subst">$&#123;packageName&#125;</span>`</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这里，基本上就可以完成项目改造工作了，但是后续还需要其他一些改动点，如：</p><ol><li>基座项目需要切换为真实域名，可以按照构建环境变量去切换</li><li>微应用需要注意资源使用相对路径</li><li>针对不同打包工具，都需要将<code>bootstrap</code> <code>mount</code> 函数进行暴露到 <code>window</code> 对象中，因为 <code>qiankun</code> 会拦截代理 <code>window</code>去运行微应用</li><li>需要解决不同应用之间的登录态等问题</li></ol><h1 id="qiankun-的缺陷"><a href="#qiankun-的缺陷" class="headerlink" title="qiankun 的缺陷"></a>qiankun 的缺陷</h1><p>虽然 qiankun 使用起来很简单，但是在实际应用还是存在一些缺陷，但是在将其引入到项目中的时候，需要考虑这些点：</p><ul><li>对于 jQuery 老项目支持度不够，即使有解决方案，但是需要对 qiankun 整个框架原理深入了解才能明白如何解决</li><li>沙箱隔离机制并不完美，如：写 css 代码挂载到 document.body，会导致样式污染</li><li>通讯机制较简单，基于一个全局的 globalState 对象，去提供给到各个微应用去使用</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://qiankun.umijs.org/zh">qiankun官网</a></li><li></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前有写过专门一篇关于微前端架构的基础知识——&lt;a href=&quot;https://qborfy.com/framework/frontend-microapp-1.html&quot;&gt;《前端架构成长之路——微前端架构理论篇》&lt;/a&gt;，但是里面主要讲几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微前端是什么，具体能做些什么&lt;/li&gt;
&lt;li&gt;微前端的一些主流框架&lt;/li&gt;
&lt;li&gt;微前端拆分项目的一些原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么其实对于微前端应用还是有些不太清楚，下面就用微前端架构去对某个古老项目进行框架升级，这其实也是微前端架构主要特性之一，对项目升级的方案之一。&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="架构系列" scheme="https://www.qborfy.com/tags/%E6%9E%B6%E6%9E%84%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>前端架构——利用chatgpt成为架构师（1）</title>
    <link href="https://www.qborfy.com/framework/framework-with-chatgpt-1.html"/>
    <id>https://www.qborfy.com/framework/framework-with-chatgpt-1.html</id>
    <published>2023-05-26T10:00:01.000Z</published>
    <updated>2023-05-25T05:07:48.718Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“有时我对 ChatGPT 的理解能力感到惊讶，但是更多时候，我不得不拼命推动它，朝着我想要的方向前进。它有时会产生意料之外的结果，让我感到非常沮丧。”</p><p>“它像一个吸收了所有人类知识、但需要别人帮忙才能把这些知识串起来的应届毕业生。”</p><p>“看来我今年的工作是安全的。但是，我需要好好学习 ChatGPT，精通它的使用，让我明年也是安全的。”</p><p>最适用现在AI技术的一句话 —— <strong>AI 与人类不是竞争关系，它未必会减少机会，反而可能带来更多的机会。</strong></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“有时我对 ChatGPT 的理解能力感到惊讶，但是更多时候，我不得不拼命推动它，朝着我想要的方向前进。它有时会产生意料之外的结果，让我感到非常沮丧。”&lt;/p&gt;
&lt;p&gt;“它像一个吸收了所有人类知识、但需要别人帮忙才能把这些知识串起来的应届毕业生。”</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://www.qborfy.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="每日更新" scheme="https://www.qborfy.com/tags/%E6%AF%8F%E6%97%A5%E6%9B%B4%E6%96%B0/"/>
    
    <category term="架构系列" scheme="https://www.qborfy.com/tags/%E6%9E%B6%E6%9E%84%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（4）—— 深浅拷贝</title>
    <link href="https://www.qborfy.com/face100/4-deep-clone.html"/>
    <id>https://www.qborfy.com/face100/4-deep-clone.html</id>
    <published>2023-05-15T14:00:00.000Z</published>
    <updated>2023-05-24T03:22:02.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>深浅拷贝经典前端面试题，不仅仅只是实现逻辑，更加是对整个Javascript语言的实现背后一套理论，从基础数据类型到原型链一整套知识体系的熟悉程度，下面我们就从简单到困难一一实现。</p><p>手写难度：⭐️⭐️⭐️</p><p>涉及知识点：</p><ul><li>数据类型在内存空间的存储</li><li>原型以及原型链（这是实现拷贝一个重要知识点，如何拷贝自定义的类实例对象）<ul><li>如何拷贝一个原型对象 如： <code>a = &#123;&#125;; clone(a.__proto__)</code></li></ul></li><li>数组的判断</li><li>日期/正则等其他内置对象的拷贝</li><li>函数的拷贝</li></ul><span id="more"></span><h1 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h1><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>凡是遇到问题，多问一次自己为什么？—— 为什么在Javascript中会有【深拷贝】｜ 【浅拷贝】 区分的操作呢？</p><p>首先，我们回想一下，一开始我们学习语言的第一件事是什么（Hello World除外），是数据类型，Javascript中数据类型有以下几种：</p><ul><li>基础数据类型：number, string, boolean等</li><li>引用数据类型：object, array, date等</li></ul><p>然后，就是变量赋值，如： a = 1，b = new Date()，在 JavaScript 中分为两种：</p><ol><li>基础数据类型，值都有固定的大小，保存在栈内存中，由系统自动分配存储空间在栈内存空间的值，我们可以直接进行操作，因此基础数据类型都是按照值访问</li><li>复杂数据类型，值都保存在堆内存中的对象，引用类型的值都是按引用访问的，所以在操作对象时，实际上是操作对象的引用而不是实际的对象。引用可以理解为保存在栈内存中的一个地址，该地址指向堆内存中的一个实际对象</li></ol><p>因此，在复制值的时候，两种类型操作不一样，如下：</p><ol><li>基础类型复制，会在栈空间新建一个空间去进行复制</li><li>引用类型复制，系统会为新的变量自动分配一个新的栈内存空间这个栈内存空间保存着与被复制变量相同的指针，尽管他们在栈内存中的内存空间的位置互相独立但是在堆内存中访问到的对象实际上是同一个，因此，当我们改变其中一个对象的值时，实际上就是改变原来的对象</li></ol><p>简单的总结一下：</p><ol><li>基础类型的值长度是固定的，所以可以在栈空间分配存储空间，当进行复制的时候，可以直接在栈空间内新建一个存储空间进行赋值</li><li>引用类型的值长度是不固定的，所以需要在栈空间分配一个指针，然后在堆内存空间分配一个对象，将指针指向改对象，当进行复制的时候，需要在栈空间新建一个指针，然后指向之前在堆内存建的对象</li></ol><p>了解完为什么后，再去实现浅拷贝和深拷贝就会理所当然了。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>浅拷贝和深拷贝，在了解完【为什么】后，就很容易理解两者的区别：</p><ul><li>浅拷贝只会对引用类型的值做第一层堆内存进行拷贝</li><li>深拷贝除了会复制新建栈空间的值，同时还在将指向堆内存中对象进行新建</li></ul><p>那么为什么不都用深拷贝去实现就好了，那是因为在浅拷贝机制可以有效利用存储空间，同时浅拷贝的也存在一定应用场景：</p><ul><li>当需要统一管理引用值的变化时候，如：当 fetch 一个请求返回 json 数据后，当我们对其做修改调整后，其实不需要做深拷贝的</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>实现原理：只对引用类型数据做第一层值进行拷贝</p><p>步骤：</p><ol><li>判断数据类型，需要将所有引用类型数据判断一次</li><li>根据不同引用类型，将引用类型数据值进行复制新建一次，利用<code>Object.assign</code>或 <code>new +     return new obj.constructor(obj);</code> 进行复制进行</li><li>其中针对自定义类，如：<code>new A()</code>，需要通过继承其原型链，利用 <code>Object.getPrototypeOf</code></li><li>基础类型直接返回</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型判断 主要基于 Object.prototype.toString.call</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Object]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Array]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为原型对象 如 a = new A();  a.__proto__ === A.prototype</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPrototype</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Ctor</span> = obj &amp;&amp; obj.<span class="property">constructor</span>;</span><br><span class="line">    <span class="keyword">const</span> proto = (<span class="keyword">typeof</span> <span class="title class_">Ctor</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title class_">Ctor</span>.<span class="property"><span class="keyword">prototype</span></span>) || <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">return</span> obj === proto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果不是对象类型 直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isArray</span>(obj) || <span class="title function_">isArrayBuffer</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">return</span>  obj.<span class="title function_">slice</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj)) &#123;</span><br><span class="line">        <span class="comment">// 区分是内置 Object  还是自定义的类</span></span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isPrototype</span>(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 自定义类新建实例化对象 保留原型链 从而保留原型方法或属性</span></span><br><span class="line">            <span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj));</span><br><span class="line">            <span class="comment">// 获取对象的所有属性</span></span><br><span class="line">            <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj);</span><br><span class="line">            keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                newObj[key] = obj[key];</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> newObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他类型可以通过 new + constructor 来实现浅拷贝</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params">obj</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>实现原理： 需要对整个对象的进行深度遍历赋复制新建，从而实现修改新建值不会影响到原有的值</p><p>步骤：</p><ol><li>数据类型判断和浅拷贝一致</li><li>针对不同引用类型需要遍历+递归实现值的拷贝新建</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果不是对象类型 直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是 WeakMap 直接抛出异常 因为 WeakMap 无法遍历</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isWeakMap</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;WeakMap can not be cloned&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isPrototype</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相互引用的对象会导致死循环</span></span><br><span class="line">    <span class="keyword">if</span>(map.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">return</span> map.<span class="title function_">get</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isArrayBuffer</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">slice</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isArray</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">const</span> newArr = [];</span><br><span class="line">        map.<span class="title function_">set</span>(obj, newArr);</span><br><span class="line">        obj.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(<span class="title function_">deepClone</span>(item, map));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isSet</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        map.<span class="title function_">set</span>(obj, newSet);</span><br><span class="line">        obj.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            newSet.<span class="title function_">add</span>(<span class="title function_">deepClone</span>(item, map));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> newSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isMap</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        map.<span class="title function_">set</span>(obj, newMap);</span><br><span class="line">        obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">            newMap.<span class="title function_">set</span>(key, <span class="title function_">deepClone</span>(value, map));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> newMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isRegx</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">const</span> newRegx = <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj.<span class="property">source</span>, obj.<span class="property">flags</span>);</span><br><span class="line">        map.<span class="title function_">set</span>(obj, newRegx);</span><br><span class="line">        <span class="keyword">return</span> newRegx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isDate</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">const</span> newDate = <span class="keyword">new</span> <span class="title class_">Date</span>(obj.<span class="title function_">getTime</span>());</span><br><span class="line">        map.<span class="title function_">set</span>(obj, newDate);</span><br><span class="line">        <span class="keyword">return</span> newDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isError</span>(obj)) &#123;</span><br><span class="line">        <span class="keyword">const</span> newError = <span class="keyword">new</span> <span class="title class_">Error</span>(obj.<span class="property">message</span>);</span><br><span class="line">        map.<span class="title function_">set</span>(obj, newError);</span><br><span class="line">        <span class="keyword">return</span> newError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj)) &#123;</span><br><span class="line">        <span class="comment">// 区分是内置 Object  还是自定义的类</span></span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">            map.<span class="title function_">set</span>(obj, newObj);</span><br><span class="line">            <span class="comment">// 获取对象的所有属性 包括不可枚举属性</span></span><br><span class="line">            <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                newObj[key] = <span class="title function_">deepClone</span>(obj[key], map);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> newObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isPrototype</span>(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 自定义类新建实例化对象 保留原型链 从而保留原型方法或属性</span></span><br><span class="line">            <span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj));</span><br><span class="line">            map.<span class="title function_">set</span>(obj, newObj);</span><br><span class="line">            <span class="comment">// 获取对象的所有属性</span></span><br><span class="line">            <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj);</span><br><span class="line">            keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                newObj[key] = <span class="title function_">deepClone</span>(obj[key], map);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> newObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他类型可以通过 new + constructor 来实现拷贝返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params">obj</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>浅拷贝和深拷贝作为前端面试经常会出现的题目，在做这篇题目之前，我对浅拷贝和深拷贝的其实是缺失的，即使网上的答案也只是做了一部分，当我深入阅读<code>lodash.Clone</code>和<code>lodash.deepClone</code>的源码才发现这里面隐藏的一些知识点，这里做一个阅读前和阅读后：</p><p>阅读源码前：</p><ul><li>浅拷贝只需要通过 Object.assigin就可以实现拷贝，但是从来没想过数据类型判断的重要性，包括自定义类对应实例的拷贝</li><li>深拷贝只需要解决数组遍历，以及解决循环依赖问题即可，忘记了还有Map/Set等新一代数据类型的遍历</li></ul><p>阅读源码后：</p><ul><li>数据类型判断才是拷贝的重要依据，根据不同类型需要做不同逻辑拷贝，而且 JavaScript 中的数据类型真的有很多，不仅只有 array object，还有常见Date，Regexp，或者冷门的 ArrayBuffer等</li><li>自定义类的拷贝也很复杂，同时也引出了原型对象(<strong>proto</strong> prototype)的拷贝，这里也加深我对JavaScript 原型的理解</li></ul><p>JavaScript 数据实例拷贝背后的原理，其实是 JavaScript 中不同数据类型存储值的方式需要去做不一样的处理，而引用类型最终在 JavaScript 中的实现就是依赖于原型和原型链去实现的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/lodash/lodash/blob/master/.internal/baseClone.js#L236">lodash baseClone 浅拷贝和深拷贝的基础实现方法</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;深浅拷贝经典前端面试题，不仅仅只是实现逻辑，更加是对整个Javascript语言的实现背后一套理论，从基础数据类型到原型链一整套知识体系的熟悉程度，下面我们就从简单到困难一一实现。&lt;/p&gt;
&lt;p&gt;手写难度：⭐️⭐️⭐️&lt;/p&gt;
&lt;p&gt;涉及知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据类型在内存空间的存储&lt;/li&gt;
&lt;li&gt;原型以及原型链（这是实现拷贝一个重要知识点，如何拷贝自定义的类实例对象）&lt;ul&gt;
&lt;li&gt;如何拷贝一个原型对象 如： &lt;code&gt;a = &amp;#123;&amp;#125;; clone(a.__proto__)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数组的判断&lt;/li&gt;
&lt;li&gt;日期/正则等其他内置对象的拷贝&lt;/li&gt;
&lt;li&gt;函数的拷贝&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（3）—— EventBus</title>
    <link href="https://www.qborfy.com/face100/3-event-bus.html"/>
    <id>https://www.qborfy.com/face100/3-event-bus.html</id>
    <published>2023-05-06T14:00:00.000Z</published>
    <updated>2023-07-13T08:27:01.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>EventBus作为发布订阅设计模式的经典应用场景，很值得我们去学习研究它的实现原理。</p><p>手写难度：⭐️⭐️</p><span id="more"></span><p>可以直接去看完整源码地址（记得给个star），地址如下：</p><p><a href="https://github.com/qiubohong/hundred-interview-questions/tree/main/3-event-bus">https://github.com/qiubohong/hundred-interview-questions/tree/main/3-event-bus</a></p><h1 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>EventBus其实是一个技术概念，主要是通过事件订阅方式解决不同情况下消息通讯问题，不仅仅在前端，还在Native（Android）等各个地方都有在使用。</p><p>EventBus 可以分成下面四个部分：</p><ul><li>订阅者 Subscriber： 监听某类事件，当发布者触发该类事件后执行所需要的事件。</li><li>发布者 Publisher：当满足某些条件，发布触发订阅者的事件。</li><li>消息 Event：其实就需要传递的消息或事件本身。</li><li>消息中心 EventStore: 负责存储消息与订阅者的对应关系，有消息触发时，负责通知订阅者。</li></ul><p>几者的关系如下图所示：</p><div class="mxgraph-container">    <div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/event-bus.drawio&quot;}"></div></div><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>上面是讲了一些概念性，但是在实际开发中，EventBus其实已经很多地方在使用了，如：</p><ul><li>Vue2中的<code>$emit</code> <code>$on</code>其实就是利用EventBus实现的，同时还可以使用去实现跨组件实现通讯</li><li>Node.js中的的<code>EventEmitter</code>，支持<code>on</code> <code>emit</code>，可以利用其解决<code>回调地狱</code>问题</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>EventBus主要有几个方法：</p><ul><li><code>on(event, func)</code> 为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</li><li><code>emit(event, ...args)</code> 按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</li><li><code>once(event, func)</code> 为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</li><li><code>off(event, func)</code> 移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</li><li><code>offAll(event)</code> 移除所有事件的所有监听器</li></ul><p>下面是实现代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 消息队列 存储事件和回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; event </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; callback </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">listeners</span>[event] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[event].<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; event </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; callback </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>[event]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[event] = <span class="variable language_">this</span>.<span class="property">listeners</span>[event].<span class="title function_">filter</span>(<span class="function"><span class="params">listener</span> =&gt;</span> listener !== callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布触发事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; event </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  &#123;<span class="type">...any</span>&#125; args </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">event, ...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>[event]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[event].<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> <span class="title function_">listener</span>(...args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只触发一次的事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; event </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; callback </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">once</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">listeners</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">listeners</span>[event] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">onceCallback</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">            <span class="title function_">callback</span>(...args);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">off</span>(event, onceCallback);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[event].<span class="title function_">push</span>(onceCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销某个事件的所有回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; event </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">offAll</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>[event]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[event] = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line">    eventBus.<span class="title function_">on</span>(<span class="string">&#x27;test&#x27;</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;test&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>EventBus模式使用上需要注意的问题：</p><ul><li>如果<code>on</code>注册多次，可能会导致一次<code>emit</code>就会执行多次函数，导致无法定位到哪里注册多，因此使用的时候，需要考虑什么时候把事件<code>off</code></li><li><code>off</code>需要明确指出函数对象，所以我们的注册函数建议都通过声明函数去实现，而不是匿名函数，减少注销事件的麻烦</li><li><code>on</code>注册事件，事件名建议使用静态常量，而不是字符串，更加容易管理事件中心</li></ul><h1 id="额外知识"><a href="#额外知识" class="headerlink" title="额外知识"></a>额外知识</h1><h2 id="为什么Vue3实例不再支持-emit-on"><a href="#为什么Vue3实例不再支持-emit-on" class="headerlink" title="为什么Vue3实例不再支持 emit on"></a>为什么Vue3实例不再支持 <code>emit</code> <code>on</code></h2><p>官方解释如下：</p><ul><li>Vue 1.x的时候是实现类似Angular的组件事件系统，利用<code>$dispatch</code>与<code>$broadcast</code>实现向上和向下发送事件来进行通信</li><li>在Vue 2中，取消了<code>$dispatch</code>与<code>$broadcast</code>，从而能更多状态驱动的数据流，其实就是单向数据流的状态扭转，</li><li>Vue2中， <code>$emit</code>用于触发由父组件的声明事件，<code>$on</code> <code>$off</code> <code>$once</code>都是这类事件的扩展，但是这仅仅是一个过程，且很少被使用</li><li>因此，没有充分的理由去让它们暴露在组件实例上，所以最终决定将删除<code>$on</code> <code>$off</code> <code>$once</code>等实例方法</li></ul><p>解决方案：</p><ol><li>使用<code>vue3-bus</code>，基于Vue插件机制</li><li>不借助Vue插件实现的，官方推荐的<a href="https://github.com/developit/mitt">mitt</a></li></ol><p>原文地址：<a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0020-events-api-change.md">active-rfcs/0020-events-api-change.md</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://juejin.cn/post/6844904101331877895">从发布订阅模式入手读懂Node.js的EventEmitter源码</a></li><li><a href="https://www.runoob.com/nodejs/nodejs-event.html">Node.js EventEmitter</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;EventBus作为发布订阅设计模式的经典应用场景，很值得我们去学习研究它的实现原理。&lt;/p&gt;
&lt;p&gt;手写难度：⭐️⭐️&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端面试100道手写题（2）—— throttle与debounce</title>
    <link href="https://www.qborfy.com/face100/2-throttle-debouce.html"/>
    <id>https://www.qborfy.com/face100/2-throttle-debouce.html</id>
    <published>2023-04-19T14:00:00.000Z</published>
    <updated>2023-05-11T13:40:35.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前端面试100道手写题第二篇《throttle与debounce》，说一下为什么选这两个，其实大家都有在用，我们先来了解一下两个函数的作用：</p><ul><li>debounce 防抖，用于减少函数触发的频率，在一个delay时间内，如果触发delay时间归零，直到delay时间到才会触发函数</li><li>throttle 节流，用于限制函数触发的频率，每个delay时间间隔，最多只能执行函数一次</li></ul><p>选这两个手写的原因其实很简单，就是面试频率高，而且项目实战会经常用到，同时里面还会隐藏一些知识点和目前公共库的一些问题（见文章末尾）。</p><p>接下来就让我们开始手写撸代码吧！</p><p>手写难度：⭐️⭐️⭐️</p><span id="more"></span><p>不想看啰里吧嗦的文字，可以直接去看完整源码地址（记得给个star），地址如下：</p><p><a href="https://github.com/qiubohong/hundred-interview-questions/tree/main/2-debouce-throttle">https://github.com/qiubohong/hundred-interview-questions/tree/main/2-debouce-throttle</a></p><h1 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h1><p>很多功能函数只要搞清楚他们的功能设计，基本上你就可以手写出完整的代码。<br>以<a href="https://github.com/lodash/lodash/blob/master/debounce.js">lodash.debounce</a>为参考，接下来我们来拆解一下完整的debounce的功能具体有哪些：</p><ul><li>构造函数 <code>debounce(func, waitTime, maxWait, leading, trailing)</code><ul><li>func (Function): 要防抖的函数。</li><li>[wait=0] (number): 需要防抖的毫秒。</li><li>[leading=false] (boolean): 指定调用在防抖开始前。</li><li>[trailing=true] (boolean): 指定是否在最大等待时间过期后直接调用，简单点的当超过等待时间，则会触发函数</li><li>[maxWait=wait] (number): 设置最大等待时间过期。</li></ul></li><li>取消函数 <code>debounceReturn.cancel()</code> ， <code>debounceReturn</code>是执行完debounce函数返回的对象</li><li>状态函数 <code>debounceReturn.pending()</code></li><li>立即调用函数 <code>debounceReturn.flush()</code></li></ul><p>上面是<code>lodash</code>给出debounce的完整功能，但是如果是我们仅仅需要简易版本的throttle，应该如何实现呢？</p><p>拆解步骤一：实现一个简单版</p><p><code>debounce()</code>函数最简单功能就是，希望能在wait时间段禁止重复触发某个事件，第一个简易版如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce_easy</span>(<span class="params">func, waitTime</span>)&#123;</span><br><span class="line">    <span class="comment">// 用于存储定时器</span></span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    <span class="comment">// 存储返回结果</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="comment">// 如果定时器存在，就清除定时器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        <span class="comment">// 重新设置定时器</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 执行函数，将当前作用域绑定的this和参数传递过去</span></span><br><span class="line">            result = func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="keyword">const</span> debounced = <span class="title function_">debounce_easy</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;debounce_easy:&#x27;</span>, value)</span><br><span class="line">    ++callCount;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;, <span class="number">32</span>);</span><br><span class="line"><span class="comment">// 这里等同于快速触发4次，只有最后一次生效 输出 debounce_easy: d</span></span><br><span class="line"><span class="keyword">const</span> results = [<span class="title function_">debounced</span>(<span class="string">&#x27;a&#x27;</span>), <span class="title function_">debounced</span>(<span class="string">&#x27;b&#x27;</span>), <span class="title function_">debounced</span>(<span class="string">&#x27;c&#x27;</span>), <span class="title function_">debounced</span>(<span class="string">&#x27;d&#x27;</span>)];</span><br><span class="line"><span class="keyword">let</span> lodashResults = [<span class="title function_">lodashDebouce</span>(<span class="string">&#x27;a&#x27;</span>), <span class="title function_">lodashDebouce</span>(<span class="string">&#x27;b&#x27;</span>), <span class="title function_">lodashDebouce</span>(<span class="string">&#x27;c&#x27;</span>), <span class="title function_">lodashDebouce</span>(<span class="string">&#x27;d&#x27;</span>)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// callCount: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;callCount:&#x27;</span>, callCount)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// callCount: 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;callCount:&#x27;</span>, callCount)</span><br><span class="line">&#125;, <span class="number">160</span>);</span><br></pre></td></tr></table></figure><p>拆解步骤二：leading参数希望可以先执行一次函数，再进行防抖， 具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实就是在定时器之前判断 leading和 timeout定期器是否不为空即可 关键代码如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果leading为true，就立即执行函数</span></span><br><span class="line"><span class="keyword">if</span> (leading) &#123;</span><br><span class="line">    <span class="comment">// 如果定时器不存在，就执行函数，从而避免重复执行</span></span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">        <span class="title function_">invokeFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆解步骤三：加上cancel等函数实现，这里能实现完基本上手写题就80分了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消防抖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> cancel = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">    lastArgs = lastThis = timeout = <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆解步骤四：加上参数 <code>traling+maxWait</code> 函数，作用在当超过maxWait等待时间后，函数会</p><p>重点在于判断是否过了等待时间，所以需要记录每次执行的时间，当超过的时候判断是否有传参数<code>traling+maxWait</code></p><p>实现步骤如下流程所示：</p><div class="mxgraph-container">    <div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/debounce.drawio&quot;}"></div></div><p>参数解释：</p><ul><li>lastArgs,  // 上一次调用时的参数</li><li>lastThis,  // 上一次调用时的this</li><li>result,  // 上一次调用的返回值</li><li>lastCallTime,  // 上一次调用的时间</li><li>lastInvokeTime = 0,  // 上一次执行的时间</li><li>leading = false,  // 是否立即执行</li><li>maxing = false,  // 是否有最大等待时间</li><li>trailing = true; // 是否在最后一次调用后执行</li></ul><h1 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h1><p><code>throttle</code>节流函数定义：就是无论频率多快，每过一段时间就执行一次。</p><p>在实现逻辑上其实是可以看做<code>debounce</code>的一种升级版，只需要保证debounce函数在超时后执行一次函数即可</p><p>只要针对debouonce函数设置一下参数即可，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait, leading = <span class="literal">true</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">debounce</span>(func, wait, &#123;</span><br><span class="line">        leading,</span><br><span class="line">        <span class="attr">trailing</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;maxWait&#x27;</span>: wait <span class="comment">// 超时时间和控制时间一致就可以了</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们也可以实现一个快速简单版，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle_eazy</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> lastInvokeTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">invokeFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            lastInvokeTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        wait = +wait || <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算剩余时间</span></span><br><span class="line">        <span class="keyword">let</span> remainTime = wait;</span><br><span class="line">        <span class="comment">// 如果上次执行时间大于0，说明已经执行过了，计算剩余时间</span></span><br><span class="line">        <span class="keyword">if</span>(lastInvokeTime &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            remainTime = wait - (<span class="title class_">Date</span>.<span class="title function_">now</span>() - lastInvokeTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果剩余时间小于等于0，说明可以执行了，重置上次执行时间</span></span><br><span class="line">        <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">invokeFunc</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果已经开始计时，说明已经有定时器了，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则，开始计时</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">invokeFunc</span>();</span><br><span class="line">        &#125;, remainTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line">; (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> throttled = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>, count);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发i~&#x27;</span>, i * <span class="number">100</span>)</span><br><span class="line">            <span class="title function_">throttled</span>();</span><br><span class="line">        &#125;, <span class="number">100</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 正确输出10</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;, <span class="number">2200</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="额外知识点"><a href="#额外知识点" class="headerlink" title="额外知识点"></a>额外知识点</h1><h2 id="TDD开发模式"><a href="#TDD开发模式" class="headerlink" title="TDD开发模式"></a>TDD开发模式</h2><p>一般写这些工具函数，都需要提前想好单元测试怎么写，这就是涉及一种开发模式<a href="https://juejin.cn/post/6844903780970921991">测试驱动开发（TDD）</a>，主要遵循以下两个原则：</p><ul><li>仅在自动测试失败时才编写新代码。</li><li>消除重复设计（去除不必要的依赖关系），优化设计结构（逐渐使代码一般化）。</li></ul><p>TDD的研发流程如下：</p><div class="mxgraph-container">    <div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/tdd.drawio&quot;}"></div></div><h2 id="lodash的缺陷"><a href="#lodash的缺陷" class="headerlink" title="lodash的缺陷"></a>lodash的缺陷</h2><p>如果你正在使用lodash，你应该关注一下，因为lodash的github最后一次更新2021年4月24号，到目前为止已经有两年的时间没有更新，已经堆积很多issues，从上面解读源码的时候就发现一个<code>lodash.throttle</code>的一个bug，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> changeInput = <span class="title function_">throttle</span>(<span class="function">(<span class="params">value: string</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="number">1000</span>, &#123;</span><br><span class="line">  <span class="attr">leading</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">trailing</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 上述防抖函数将不会按照我们所设想的每隔1秒触发，而是会出现各种异常情况，如果触发频率够高可能会执行，如果触发频率低于1秒则不会执行，因为leading和trailing都设置为false，lodash源码没有针对这一情况进行处理，或者不支持trailing参数设置即可</span></span><br></pre></td></tr></table></figure><p>同时，lodash还有其他一些缺陷：</p><ul><li>lodash是支持tree shaking，但是这么写<code>import &#123;throttle&#125; from &#39;lodash&#39;</code> 会将整个lodash包都引入， 必须这么写<code>import throttle from &#39;lodash/throttle&#39;</code>才能做到按需加载</li><li>进入 npm 上的 lodash 包，它被列为 v4.17.21，并且已经 2 年多没有发布了：<a href="https://www.npmjs.com/package/lodash">https://www.npmjs.com/package/lodash</a></li></ul><p>当然作为一个工具库lodash确实可以让我们少写很多代码，但是已经很长时间没有维护的问题还是需要关注的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Lodash源码：<a href="https://github.com/lodash/lodash/">https://github.com/lodash/lodash/</a></li><li><a href="https://juejin.cn/post/6844903780970921991">测试驱动开发（TDD）总结——原理篇</a></li><li><a href="https://news.ycombinator.com/item?id=35056136">Hacker News——不要再使用的Lodash</a></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前端面试100道手写题第二篇《throttle与debounce》，说一下为什么选这两个，其实大家都有在用，我们先来了解一下两个函数的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debounce 防抖，用于减少函数触发的频率，在一个delay时间内，如果触发delay时间归零，直到delay时间到才会触发函数&lt;/li&gt;
&lt;li&gt;throttle 节流，用于限制函数触发的频率，每个delay时间间隔，最多只能执行函数一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选这两个手写的原因其实很简单，就是面试频率高，而且项目实战会经常用到，同时里面还会隐藏一些知识点和目前公共库的一些问题（见文章末尾）。&lt;/p&gt;
&lt;p&gt;接下来就让我们开始手写撸代码吧！&lt;/p&gt;
&lt;p&gt;手写难度：⭐️⭐️⭐️&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习总结" scheme="https://www.qborfy.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="前端面试" scheme="https://www.qborfy.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
