{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia-plus/source/main.a5fda8.css","path":"main.a5fda8.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/main.a5fda8.js","path":"main.a5fda8.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/slider.27463f.js","path":"slider.27463f.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/mobile.a2c207.js","path":"mobile.a2c207.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3da1ef.woff","path":"fonts/fonteditor.3da1ef.woff","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3e0d4a.svg","path":"fonts/fonteditor.3e0d4a.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.86c132.eot","path":"fonts/fonteditor.86c132.eot","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.fe4d8a.ttf","path":"fonts/fonteditor.fe4d8a.ttf","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/fonts/fonteditor.bbc4b5.woff2","path":"fonts/fonteditor.bbc4b5.woff2","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/forkme.png","path":"img/forkme.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/biubiubiu.gif","path":"img/biubiubiu.gif","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/gitee.svg","path":"img/gitee.svg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/busuanzi.pure.js","path":"lib/busuanzi.pure.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/clickLove.js","path":"lib/clickLove.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/default.css","path":"lib/default.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.css","path":"lib/gitment.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/oauthcallback.browser.js","path":"lib/oauthcallback.browser.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/pace.min.js","path":"lib/pace.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/snow.js","path":"lib/snow.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/search/search.css","path":"search/search.css","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/search/search.js","path":"search/search.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/weixin.png","path":"img/weixin.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak","path":"lib/gitment.js.bak","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/jquery-2.1.4.min.js","path":"lib/jquery-2.1.4.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/gitment/APlayer.min.js","path":"gitment/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak2","path":"lib/gitment.js.bak2","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/gitment.js","path":"lib/gitment.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package-lock.json","path":"live2d_models/chitose/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package.json","path":"live2d_models/chitose/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package.json","path":"live2d_models/epsilon2_1/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package-lock.json","path":"live2d_models/epsilon2_1/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/package-lock.json","path":"live2d_models/gf/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/package.json","path":"live2d_models/gf/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/package.json","path":"live2d_models/haru/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/package-lock.json","path":"live2d_models/haru/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package-lock.json","path":"live2d_models/hibiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package.json","path":"live2d_models/hibiki/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package-lock.json","path":"live2d_models/hijiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package.json","path":"live2d_models/hijiki/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package.json","path":"live2d_models/haruto/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package-lock.json","path":"live2d_models/haruto/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package-lock.json","path":"live2d_models/izumi/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package.json","path":"live2d_models/izumi/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package-lock.json","path":"live2d_models/koharu/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package.json","path":"live2d_models/koharu/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/package.json","path":"live2d_models/miku/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/package-lock.json","path":"live2d_models/miku/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package-lock.json","path":"live2d_models/ni-j/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package.json","path":"live2d_models/ni-j/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/package-lock.json","path":"live2d_models/nico/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/package.json","path":"live2d_models/nico/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package.json","path":"live2d_models/nietzsche/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package-lock.json","path":"live2d_models/nietzsche/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package.json","path":"live2d_models/shizuku/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package-lock.json","path":"live2d_models/shizuku/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package-lock.json","path":"live2d_models/nipsilon/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package.json","path":"live2d_models/nipsilon/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/package-lock.json","path":"live2d_models/nito/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/package.json","path":"live2d_models/nito/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package-lock.json","path":"live2d_models/tororo/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package.json","path":"live2d_models/tororo/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package-lock.json","path":"live2d_models/tsumiki/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package.json","path":"live2d_models/tsumiki/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package-lock.json","path":"live2d_models/wanko/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package.json","path":"live2d_models/wanko/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/package.json","path":"live2d_models/z16/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/package-lock.json","path":"live2d_models/z16/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/TweenMax/HoverImg.js","path":"plugins/TweenMax/HoverImg.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package-lock.json","path":"live2d_models/unitychan/package-lock.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package.json","path":"live2d_models/unitychan/package.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/TweenMax/charming.min.js","path":"plugins/TweenMax/charming.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js","path":"plugins/live2d-widget.js/L2Dwidget.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/manifest.json","path":"plugins/live2d-widget.js/manifest.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.js","path":"plugins/ribbon.js/ribbon.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.min.js","path":"plugins/ribbon.js/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/activate-power-mode/activate-power-mode.js","path":"plugins/activate-power-mode/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js.map","path":"plugins/live2d-widget.js/L2Dwidget.min.js.map","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.model.json","path":"live2d_models/chitose/assets/chitose.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.physics.json","path":"live2d_models/chitose/assets/chitose.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.pose.json","path":"live2d_models/chitose/assets/chitose.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","path":"live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","path":"live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/Gantzert_Felixander.model.json","path":"live2d_models/gf/assets/Gantzert_Felixander.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.physics.json","path":"live2d_models/hibiki/assets/hibiki.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.model.json","path":"live2d_models/hibiki/assets/hibiki.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.model.json","path":"live2d_models/hijiki/assets/hijiki.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.pose.json","path":"live2d_models/hijiki/assets/hijiki.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.model.json","path":"live2d_models/haruto/assets/haruto.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.physics.json","path":"live2d_models/haruto/assets/haruto.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.model.json","path":"live2d_models/izumi/assets/izumi.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.physics.json","path":"live2d_models/izumi/assets/izumi.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.model.json","path":"live2d_models/koharu/assets/koharu.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.physics.json","path":"live2d_models/koharu/assets/koharu.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.model.json","path":"live2d_models/miku/assets/miku.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.physics.json","path":"live2d_models/miku/assets/miku.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.model.json","path":"live2d_models/ni-j/assets/ni-j.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.physics.json","path":"live2d_models/ni-j/assets/ni-j.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.pose.json","path":"live2d_models/ni-j/assets/ni-j.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.physics.json","path":"live2d_models/nico/assets/nico.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.pose.json","path":"live2d_models/nico/assets/nico.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.model.json","path":"live2d_models/nico/assets/nico.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzche.model.json","path":"live2d_models/nietzsche/assets/nietzche.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.physics.json","path":"live2d_models/nietzsche/assets/nietzsche.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.pose.json","path":"live2d_models/nietzsche/assets/nietzsche.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.physics.json","path":"live2d_models/shizuku/assets/shizuku.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.model.json","path":"live2d_models/shizuku/assets/shizuku.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.pose.json","path":"live2d_models/shizuku/assets/shizuku.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.model.json","path":"live2d_models/nipsilon/assets/nipsilon.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.physics.json","path":"live2d_models/nipsilon/assets/nipsilon.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.pose.json","path":"live2d_models/nipsilon/assets/nipsilon.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.model.json","path":"live2d_models/nito/assets/nito.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.physics.json","path":"live2d_models/nito/assets/nito.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.pose.json","path":"live2d_models/nito/assets/nito.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.model.json","path":"live2d_models/tororo/assets/tororo.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.pose.json","path":"live2d_models/tororo/assets/tororo.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.model.json","path":"live2d_models/tsumiki/assets/tsumiki.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.physics.json","path":"live2d_models/tsumiki/assets/tsumiki.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/wanko.model.json","path":"live2d_models/wanko/assets/wanko.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.model.json","path":"live2d_models/z16/assets/z16.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.physics.json","path":"live2d_models/z16/assets/z16.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.model.json","path":"live2d_models/unitychan/assets/unitychan.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.physics.json","path":"live2d_models/unitychan/assets/unitychan.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/TweenMax/TweenMax.min.js","path":"plugins/TweenMax/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/demo/index.html","path":"plugins/ribbon.js/demo/index.html","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js","path":"plugins/live2d-widget.js/L2Dwidget.common.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js","path":"plugins/live2d-widget.js/L2Dwidget.0.min.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f01.exp.json","path":"live2d_models/chitose/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f02.exp.json","path":"live2d_models/chitose/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f05.exp.json","path":"live2d_models/chitose/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f06.exp.json","path":"live2d_models/chitose/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f03.exp.json","path":"live2d_models/chitose/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f04.exp.json","path":"live2d_models/chitose/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f07.exp.json","path":"live2d_models/chitose/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_idle.mtn","path":"live2d_models/chitose/assets/mtn/chitose_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","path":"live2d_models/chitose/assets/mtn/chitose_kime01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","path":"live2d_models/chitose/assets/mtn/chitose_handwave.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f01.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","path":"live2d_models/chitose/assets/mtn/chitose_kime02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f02.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f04.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f03.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f07.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f05.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f06.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f08.exp.json","path":"live2d_models/epsilon2_1/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","path":"live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_01.mtn","path":"live2d_models/gf/assets/mtn/A_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_02.mtn","path":"live2d_models/gf/assets/mtn/A_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_03.mtn","path":"live2d_models/gf/assets/mtn/A_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_00_idle.mtn","path":"live2d_models/gf/assets/mtn/A_00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_04.mtn","path":"live2d_models/gf/assets/mtn/A_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.model.json","path":"live2d_models/haru/01/assets/haru01.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.physics.json","path":"live2d_models/haru/01/assets/haru01.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.pose.json","path":"live2d_models/haru/01/assets/haru01.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f01.exp.json","path":"live2d_models/hibiki/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f02.exp.json","path":"live2d_models/hibiki/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f03.exp.json","path":"live2d_models/hibiki/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f05.exp.json","path":"live2d_models/hibiki/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f06.exp.json","path":"live2d_models/hibiki/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f04.exp.json","path":"live2d_models/hibiki/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_03.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_03.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_01.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_02.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","path":"live2d_models/hibiki/assets/mtn/hibiki_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_01.mtn","path":"live2d_models/hibiki/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_02.mtn","path":"live2d_models/hibiki/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_03.mtn","path":"live2d_models/hibiki/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_04.mtn","path":"live2d_models/hibiki/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.physics.json","path":"live2d_models/haru/02/assets/haru02.physics.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.model.json","path":"live2d_models/haru/02/assets/haru02.model.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.pose.json","path":"live2d_models/haru/02/assets/haru02.pose.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/00_idle.mtn","path":"live2d_models/hijiki/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/01.mtn","path":"live2d_models/hijiki/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/03.mtn","path":"live2d_models/hijiki/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/04.mtn","path":"live2d_models/hijiki/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/02.mtn","path":"live2d_models/hijiki/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/05.mtn","path":"live2d_models/hijiki/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/07.mtn","path":"live2d_models/hijiki/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/08.mtn","path":"live2d_models/hijiki/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/06.mtn","path":"live2d_models/hijiki/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/01.mtn","path":"live2d_models/haruto/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/02.mtn","path":"live2d_models/haruto/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/03.mtn","path":"live2d_models/haruto/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/04.mtn","path":"live2d_models/haruto/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/05.mtn","path":"live2d_models/haruto/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/06.mtn","path":"live2d_models/haruto/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/08.mtn","path":"live2d_models/haruto/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/07.mtn","path":"live2d_models/haruto/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/09.mtn","path":"live2d_models/haruto/assets/mtn/09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/idle_02.mtn","path":"live2d_models/haruto/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f01.exp.json","path":"live2d_models/izumi/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f02.exp.json","path":"live2d_models/izumi/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f03.exp.json","path":"live2d_models/izumi/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f04.exp.json","path":"live2d_models/izumi/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f05.exp.json","path":"live2d_models/izumi/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f06.exp.json","path":"live2d_models/izumi/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f07.exp.json","path":"live2d_models/izumi/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_01.mtn","path":"live2d_models/izumi/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_02.mtn","path":"live2d_models/izumi/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_03.mtn","path":"live2d_models/izumi/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_01.mtn","path":"live2d_models/izumi/assets/mtn/izumi_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_04.mtn","path":"live2d_models/izumi/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_03.mtn","path":"live2d_models/izumi/assets/mtn/izumi_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_02.mtn","path":"live2d_models/izumi/assets/mtn/izumi_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_05.mtn","path":"live2d_models/izumi/assets/mtn/izumi_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_04.mtn","path":"live2d_models/izumi/assets/mtn/izumi_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_06.mtn","path":"live2d_models/izumi/assets/mtn/izumi_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_07.mtn","path":"live2d_models/izumi/assets/mtn/izumi_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_08.mtn","path":"live2d_models/izumi/assets/mtn/izumi_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_09.mtn","path":"live2d_models/izumi/assets/mtn/izumi_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_10.mtn","path":"live2d_models/izumi/assets/mtn/izumi_10.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_01.mp3","path":"live2d_models/izumi/assets/snd/izumi_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_02.mp3","path":"live2d_models/izumi/assets/snd/izumi_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_03.mp3","path":"live2d_models/izumi/assets/snd/izumi_03.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_04.mp3","path":"live2d_models/izumi/assets/snd/izumi_04.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_05.mp3","path":"live2d_models/izumi/assets/snd/izumi_05.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_06.mp3","path":"live2d_models/izumi/assets/snd/izumi_06.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_09.mp3","path":"live2d_models/izumi/assets/snd/izumi_09.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_08.mp3","path":"live2d_models/izumi/assets/snd/izumi_08.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_10.mp3","path":"live2d_models/izumi/assets/snd/izumi_10.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_07.mp3","path":"live2d_models/izumi/assets/snd/izumi_07.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/02.mtn","path":"live2d_models/koharu/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/01.mtn","path":"live2d_models/koharu/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/04.mtn","path":"live2d_models/koharu/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/03.mtn","path":"live2d_models/koharu/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/06.mtn","path":"live2d_models/koharu/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/05.mtn","path":"live2d_models/koharu/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/07.mtn","path":"live2d_models/koharu/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/08.mtn","path":"live2d_models/koharu/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/09.mtn","path":"live2d_models/koharu/assets/mtn/09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/idle.mtn","path":"live2d_models/koharu/assets/mtn/idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_idle_01.mtn","path":"live2d_models/miku/assets/mtn/miku_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_01.mtn","path":"live2d_models/miku/assets/mtn/miku_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_02.mtn","path":"live2d_models/miku/assets/mtn/miku_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_03.mtn","path":"live2d_models/miku/assets/mtn/miku_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_04.mtn","path":"live2d_models/miku/assets/mtn/miku_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_06.mtn","path":"live2d_models/miku/assets/mtn/miku_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_05.mtn","path":"live2d_models/miku/assets/mtn/miku_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_shake_01.mtn","path":"live2d_models/miku/assets/mtn/miku_shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/00_idle.mtn","path":"live2d_models/ni-j/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/01_happy.mtn","path":"live2d_models/ni-j/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/02_angry.mtn","path":"live2d_models/ni-j/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/03_fear.mtn","path":"live2d_models/ni-j/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/04_surprise.mtn","path":"live2d_models/ni-j/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/05_fun.mtn","path":"live2d_models/ni-j/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/06_love.mtn","path":"live2d_models/ni-j/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/07_bye.mtn","path":"live2d_models/ni-j/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/08_sad.mtn","path":"live2d_models/ni-j/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/09_yawn.mtn","path":"live2d_models/ni-j/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/10_yeah.mtn","path":"live2d_models/ni-j/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/11_muscle.mtn","path":"live2d_models/ni-j/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/12_stagger.mtn","path":"live2d_models/ni-j/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","path":"live2d_models/ni-j/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/13_cry.mtn","path":"live2d_models/ni-j/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/15_joy.mtn","path":"live2d_models/ni-j/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/16_menace.mtn","path":"live2d_models/ni-j/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/17_yes.mtn","path":"live2d_models/ni-j/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/18_no.mtn","path":"live2d_models/ni-j/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/19_walk.mtn","path":"live2d_models/ni-j/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/20_sleep.mtn","path":"live2d_models/ni-j/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/01_happy.mtn","path":"live2d_models/nico/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/00_idle.mtn","path":"live2d_models/nico/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/02_angry.mtn","path":"live2d_models/nico/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/03_fear.mtn","path":"live2d_models/nico/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/04_surprise.mtn","path":"live2d_models/nico/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/05_fun.mtn","path":"live2d_models/nico/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/06_love.mtn","path":"live2d_models/nico/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/07_bye.mtn","path":"live2d_models/nico/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/08_sad.mtn","path":"live2d_models/nico/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/09_yawn.mtn","path":"live2d_models/nico/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/10_yeah.mtn","path":"live2d_models/nico/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/11_muscle.mtn","path":"live2d_models/nico/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/12_stagger.mtn","path":"live2d_models/nico/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/13_cry.mtn","path":"live2d_models/nico/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/14_ sigh.mtn","path":"live2d_models/nico/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/17_yes.mtn","path":"live2d_models/nico/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/15_joy.mtn","path":"live2d_models/nico/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/16_menace.mtn","path":"live2d_models/nico/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/18_no.mtn","path":"live2d_models/nico/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/19_walk.mtn","path":"live2d_models/nico/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/20_sleep.mtn","path":"live2d_models/nico/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/00_idle.mtn","path":"live2d_models/nietzsche/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/01_happy.mtn","path":"live2d_models/nietzsche/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/02_angry.mtn","path":"live2d_models/nietzsche/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/03_fear.mtn","path":"live2d_models/nietzsche/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","path":"live2d_models/nietzsche/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/05_fun.mtn","path":"live2d_models/nietzsche/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/06_love.mtn","path":"live2d_models/nietzsche/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/07_bye.mtn","path":"live2d_models/nietzsche/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/08_sad.mtn","path":"live2d_models/nietzsche/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","path":"live2d_models/nietzsche/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","path":"live2d_models/nietzsche/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","path":"live2d_models/nietzsche/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","path":"live2d_models/nietzsche/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/13_cry.mtn","path":"live2d_models/nietzsche/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","path":"live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/15_joy.mtn","path":"live2d_models/nietzsche/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/17_yes.mtn","path":"live2d_models/nietzsche/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/18_no.mtn","path":"live2d_models/nietzsche/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/16_menace.mtn","path":"live2d_models/nietzsche/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/19_walk.mtn","path":"live2d_models/nietzsche/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","path":"live2d_models/nietzsche/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","path":"live2d_models/shizuku/assets/mtn/flickHead_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_01.mtn","path":"live2d_models/shizuku/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_00.mtn","path":"live2d_models/shizuku/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_02.mtn","path":"live2d_models/shizuku/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","path":"live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","path":"live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_00.mtn","path":"live2d_models/shizuku/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_01.mtn","path":"live2d_models/shizuku/assets/mtn/shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_02.mtn","path":"live2d_models/shizuku/assets/mtn/shake_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","path":"live2d_models/shizuku/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f02.exp.json","path":"live2d_models/shizuku/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f01.exp.json","path":"live2d_models/shizuku/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f03.exp.json","path":"live2d_models/shizuku/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f04.exp.json","path":"live2d_models/shizuku/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_00.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_01.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_02.mp3","path":"live2d_models/shizuku/assets/snd/flickHead_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_00.mp3","path":"live2d_models/shizuku/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_01.mp3","path":"live2d_models/shizuku/assets/snd/shake_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_00.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_02.mp3","path":"live2d_models/shizuku/assets/snd/shake_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/00_idle.mtn","path":"live2d_models/nipsilon/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_01.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_02.mp3","path":"live2d_models/shizuku/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/01_happy.mtn","path":"live2d_models/nipsilon/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/02_angry.mtn","path":"live2d_models/nipsilon/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/03_fear.mtn","path":"live2d_models/nipsilon/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","path":"live2d_models/nipsilon/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/05_fun.mtn","path":"live2d_models/nipsilon/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/06_love.mtn","path":"live2d_models/nipsilon/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/07_bye.mtn","path":"live2d_models/nipsilon/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/08_sad.mtn","path":"live2d_models/nipsilon/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","path":"live2d_models/nipsilon/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","path":"live2d_models/nipsilon/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","path":"live2d_models/nipsilon/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","path":"live2d_models/nipsilon/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","path":"live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/13_cry.mtn","path":"live2d_models/nipsilon/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/15_joy.mtn","path":"live2d_models/nipsilon/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/16_menace.mtn","path":"live2d_models/nipsilon/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/17_yes.mtn","path":"live2d_models/nipsilon/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/18_no.mtn","path":"live2d_models/nipsilon/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/19_walk.mtn","path":"live2d_models/nipsilon/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","path":"live2d_models/nipsilon/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/00_idle.mtn","path":"live2d_models/nito/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/01_happy.mtn","path":"live2d_models/nito/assets/mtn/01_happy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/02_angry.mtn","path":"live2d_models/nito/assets/mtn/02_angry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/03_fear.mtn","path":"live2d_models/nito/assets/mtn/03_fear.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/04_surprise.mtn","path":"live2d_models/nito/assets/mtn/04_surprise.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/05_fun.mtn","path":"live2d_models/nito/assets/mtn/05_fun.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/06_love.mtn","path":"live2d_models/nito/assets/mtn/06_love.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/08_sad.mtn","path":"live2d_models/nito/assets/mtn/08_sad.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/07_bye.mtn","path":"live2d_models/nito/assets/mtn/07_bye.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/10_yeah.mtn","path":"live2d_models/nito/assets/mtn/10_yeah.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/09_yawn.mtn","path":"live2d_models/nito/assets/mtn/09_yawn.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/11_muscle.mtn","path":"live2d_models/nito/assets/mtn/11_muscle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/12_stagger.mtn","path":"live2d_models/nito/assets/mtn/12_stagger.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/13_cry.mtn","path":"live2d_models/nito/assets/mtn/13_cry.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/14_ sigh.mtn","path":"live2d_models/nito/assets/mtn/14_ sigh.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/15_joy.mtn","path":"live2d_models/nito/assets/mtn/15_joy.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/16_menace.mtn","path":"live2d_models/nito/assets/mtn/16_menace.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/17_yes.mtn","path":"live2d_models/nito/assets/mtn/17_yes.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/18_no.mtn","path":"live2d_models/nito/assets/mtn/18_no.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/19_walk.mtn","path":"live2d_models/nito/assets/mtn/19_walk.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/20_sleep.mtn","path":"live2d_models/nito/assets/mtn/20_sleep.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/00_idle.mtn","path":"live2d_models/tororo/assets/mtn/00_idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/01.mtn","path":"live2d_models/tororo/assets/mtn/01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/02.mtn","path":"live2d_models/tororo/assets/mtn/02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/03.mtn","path":"live2d_models/tororo/assets/mtn/03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/04.mtn","path":"live2d_models/tororo/assets/mtn/04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/05.mtn","path":"live2d_models/tororo/assets/mtn/05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/06.mtn","path":"live2d_models/tororo/assets/mtn/06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/07.mtn","path":"live2d_models/tororo/assets/mtn/07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F01.exp.json","path":"live2d_models/tsumiki/assets/exp/F01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/08.mtn","path":"live2d_models/tororo/assets/mtn/08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F02.exp.json","path":"live2d_models/tsumiki/assets/exp/F02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F04.exp.json","path":"live2d_models/tsumiki/assets/exp/F04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F03.exp.json","path":"live2d_models/tsumiki/assets/exp/F03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F05.exp.json","path":"live2d_models/tsumiki/assets/exp/F05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F06.exp.json","path":"live2d_models/tsumiki/assets/exp/F06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F08.exp.json","path":"live2d_models/tsumiki/assets/exp/F08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F07.exp.json","path":"live2d_models/tsumiki/assets/exp/F07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F09.exp.json","path":"live2d_models/tsumiki/assets/exp/F09.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F10.exp.json","path":"live2d_models/tsumiki/assets/exp/F10.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/P01.mtn","path":"live2d_models/tsumiki/assets/mtn/P01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_01.mtn","path":"live2d_models/wanko/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_02.mtn","path":"live2d_models/wanko/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_03.mtn","path":"live2d_models/wanko/assets/mtn/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_04.mtn","path":"live2d_models/wanko/assets/mtn/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_01.mtn","path":"live2d_models/wanko/assets/mtn/shake_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_02.mtn","path":"live2d_models/wanko/assets/mtn/shake_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_03.mtn","path":"live2d_models/wanko/assets/mtn/touch_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_01.mtn","path":"live2d_models/wanko/assets/mtn/touch_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_02.mtn","path":"live2d_models/wanko/assets/mtn/touch_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_04.mtn","path":"live2d_models/wanko/assets/mtn/touch_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_06.mtn","path":"live2d_models/wanko/assets/mtn/touch_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_05.mtn","path":"live2d_models/wanko/assets/mtn/touch_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/exp/f00.exp.json","path":"live2d_models/z16/assets/exp/f00.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_02.mtn","path":"live2d_models/unitychan/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/mtn/idle.mtn","path":"live2d_models/z16/assets/mtn/idle.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_01.mtn","path":"live2d_models/unitychan/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_01.mtn","path":"live2d_models/unitychan/assets/mtn/m_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_03.mtn","path":"live2d_models/unitychan/assets/mtn/m_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_02.mtn","path":"live2d_models/unitychan/assets/mtn/m_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_04.mtn","path":"live2d_models/unitychan/assets/mtn/m_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_05.mtn","path":"live2d_models/unitychan/assets/mtn/m_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_06.mtn","path":"live2d_models/unitychan/assets/mtn/m_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_07.mtn","path":"live2d_models/unitychan/assets/mtn/m_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_08.mtn","path":"live2d_models/unitychan/assets/mtn/m_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_09.mtn","path":"live2d_models/unitychan/assets/mtn/m_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_10.mtn","path":"live2d_models/unitychan/assets/mtn/m_10.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_11.mtn","path":"live2d_models/unitychan/assets/mtn/m_11.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_12.mtn","path":"live2d_models/unitychan/assets/mtn/m_12.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_13.mtn","path":"live2d_models/unitychan/assets/mtn/m_13.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_14.mtn","path":"live2d_models/unitychan/assets/mtn/m_14.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","path":"live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_05.mtn","path":"live2d_models/gf/assets/mtn/A_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_05.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_05.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_04.mp3","path":"live2d_models/hibiki/assets/snd/hibiki_04.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","path":"live2d_models/shizuku/assets/snd/pinchIn_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","path":"live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.moc","path":"live2d_models/z16/assets/moc/z16.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.moc","path":"live2d_models/wanko/assets/moc/wanko.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/lib/giteement.browser.js","path":"lib/giteement.browser.js","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f03.exp.json","path":"live2d_models/haru/01/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f02.exp.json","path":"live2d_models/haru/01/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f01.exp.json","path":"live2d_models/haru/01/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f05.exp.json","path":"live2d_models/haru/01/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f04.exp.json","path":"live2d_models/haru/01/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f08.exp.json","path":"live2d_models/haru/01/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f06.exp.json","path":"live2d_models/haru/01/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f07.exp.json","path":"live2d_models/haru/01/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","path":"live2d_models/haru/01/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_00.mtn","path":"live2d_models/haru/01/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_01.mtn","path":"live2d_models/haru/01/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_02.mtn","path":"live2d_models/haru/01/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","path":"live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/shake_00.mtn","path":"live2d_models/haru/01/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","path":"live2d_models/haru/01/assets/mtn/tapBody_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/flickHead_00.mp3","path":"live2d_models/haru/01/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","path":"live2d_models/haru/01/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","path":"live2d_models/haru/01/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/shake_00.mp3","path":"live2d_models/haru/01/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_00.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_01.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_02.mp3","path":"live2d_models/haru/01/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f01.exp.json","path":"live2d_models/haru/02/assets/exp/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f03.exp.json","path":"live2d_models/haru/02/assets/exp/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f04.exp.json","path":"live2d_models/haru/02/assets/exp/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f05.exp.json","path":"live2d_models/haru/02/assets/exp/f05.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f06.exp.json","path":"live2d_models/haru/02/assets/exp/f06.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f02.exp.json","path":"live2d_models/haru/02/assets/exp/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f07.exp.json","path":"live2d_models/haru/02/assets/exp/f07.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f08.exp.json","path":"live2d_models/haru/02/assets/exp/f08.exp.json","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/flickHead_00.mp3","path":"live2d_models/haru/02/assets/snd/flickHead_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","path":"live2d_models/haru/02/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_00.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_01.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_01.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/shake_00.mp3","path":"live2d_models/haru/02/assets/snd/shake_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_02.mp3","path":"live2d_models/haru/02/assets/snd/tapBody_02.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","path":"live2d_models/haru/02/assets/mtn/flickHead_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_02.mtn","path":"live2d_models/haru/02/assets/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_00.mtn","path":"live2d_models/haru/02/assets/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_01.mtn","path":"live2d_models/haru/02/assets/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","path":"live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/shake_00.mtn","path":"live2d_models/haru/02/assets/mtn/shake_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","path":"live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_01.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_02.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_03.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_04.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_05.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_07.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_06.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_08.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","path":"live2d_models/haru/02/assets/mtn/tapBody_09.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.moc","path":"live2d_models/izumi/assets/moc/izumi_illust.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.moc","path":"live2d_models/miku/assets/moc/miku.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","path":"live2d_models/shizuku/assets/snd/pinchOut_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.256/texture_00.png","path":"live2d_models/z16/assets/moc/z16.256/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.512/texture_00.png","path":"live2d_models/z16/assets/moc/z16.512/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.moc","path":"live2d_models/unitychan/assets/moc/unitychan.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","path":"live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.moc","path":"live2d_models/hibiki/assets/moc/hibiki.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","path":"live2d_models/haru/02/assets/snd/pinchIn_00.mp3","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.moc","path":"live2d_models/hijiki/assets/moc/hijiki.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","path":"live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.moc","path":"live2d_models/ni-j/assets/moc/ni-j.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_00.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.moc","path":"live2d_models/nietzsche/assets/moc/nietzsche.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.moc","path":"live2d_models/nito/assets/moc/nito.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.moc","path":"live2d_models/tororo/assets/moc/tororo.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_01.png","path":"live2d_models/nito/assets/moc/nito.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.moc","path":"live2d_models/chitose/assets/moc/chitose.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.moc","path":"live2d_models/haruto/assets/moc/haruto.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.moc","path":"live2d_models/koharu/assets/moc/koharu.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_02.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.moc","path":"live2d_models/nipsilon/assets/moc/nipsilon.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","path":"live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.1024/texture_00.png","path":"live2d_models/z16/assets/moc/z16.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","path":"live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","path":"live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.moc","path":"live2d_models/tsumiki/assets/moc/tsumiki.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.moc","path":"live2d_models/haru/01/assets/moc/haru01.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","path":"live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.moc","path":"live2d_models/haru/02/assets/moc/haru02.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","path":"live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","path":"live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","path":"live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_01.png","path":"live2d_models/nico/assets/moc/nico.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.moc","path":"live2d_models/nico/assets/moc/nico.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_00.png","path":"live2d_models/nito/assets/moc/nito.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","path":"live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","path":"live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","path":"live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","path":"live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","path":"live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","path":"live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","path":"plugins/live2d-widget.js/L2Dwidget.0.min.js.map","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","path":"live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js.map","path":"plugins/live2d-widget.js/L2Dwidget.common.js.map","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","path":"live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","path":"live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.moc","path":"live2d_models/shizuku/assets/moc/shizuku.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.2048/texture_00.png","path":"live2d_models/miku/assets/moc/miku.2048/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","path":"live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","path":"live2d_models/gf/assets/moc/Gantzert_Felixander.moc","modified":0,"renderable":1},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","path":"live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","modified":0,"renderable":1},{"_id":"source","path":"","modified":1,"renderable":0},{"_id":"source/assets/img/20230124-1.png","path":"assets/img/20230124-1.png","modified":0,"renderable":0},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/article-list-background.jpeg","path":"assets/img/article-list-background.jpeg","modified":0,"renderable":0},{"_id":"source/assets/img/brown-papersq.png","path":"assets/img/brown-papersq.png","modified":0,"renderable":0},{"_id":"source/assets/img/cmdb1.svg","path":"assets/img/cmdb1.svg","modified":0,"renderable":0},{"_id":"source/assets/img/monorepo-polyrepo.svg","path":"assets/img/monorepo-polyrepo.svg","modified":0,"renderable":0},{"_id":"source/assets/img/school-book.png","path":"assets/img/school-book.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230117-4.png","path":"assets/img/20230117-4.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230120-idea.png","path":"assets/img/20230120-idea.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230117-1.png","path":"assets/img/20230117-1.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230117-3.png","path":"assets/img/20230117-3.png","modified":0,"renderable":0},{"_id":"source/assets/img/alipay.png","path":"assets/img/alipay.png","modified":0,"renderable":0},{"_id":"source/assets/img/weixin.png","path":"assets/img/weixin.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230130-1.png","path":"assets/img/20230130-1.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230117-2.png","path":"assets/img/20230117-2.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230117-5.png","path":"assets/img/20230117-5.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230116.png","path":"assets/img/20230116.png","modified":0,"renderable":0},{"_id":"source/assets/img/weixin-person.png","path":"assets/img/weixin-person.png","modified":0,"renderable":0},{"_id":"source/assets/img/idea-20230214-3.png","path":"assets/img/idea-20230214-3.png","modified":0,"renderable":0},{"_id":"source/assets/img/idea-20230214-2.png","path":"assets/img/idea-20230214-2.png","modified":0,"renderable":0},{"_id":"source/assets/img/idea-20230214-1.png","path":"assets/img/idea-20230214-1.png","modified":0,"renderable":0},{"_id":"source/assets/drawio/lowcode.drawio","path":"assets/drawio/lowcode.drawio","modified":0,"renderable":0},{"_id":"source/assets/img/20230215.png","path":"assets/img/20230215.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230216-1.jpeg","path":"assets/img/20230216-1.jpeg","modified":0,"renderable":0},{"_id":"source/assets/img/20230216-2.png","path":"assets/img/20230216-2.png","modified":0,"renderable":0},{"_id":"source/assets/img/20230216-3.png","path":"assets/img/20230216-3.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia-plus/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1672286364651},{"_id":"themes/yilia-plus/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1672286364651},{"_id":"themes/yilia-plus/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1672286364651},{"_id":"themes/yilia-plus/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1672286364651},{"_id":"themes/yilia-plus/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1672286364651},{"_id":"themes/yilia-plus/.gitignore","hash":"0515c36547693bbab9bb3e2ed9a5ee2cf7d89975","modified":1672286364652},{"_id":"themes/yilia-plus/LICENSE","hash":"88f6ff2e1df913b56239ee1899b80f6335dac5c8","modified":1672296730120},{"_id":"themes/yilia-plus/README.md","hash":"0e4ecb1f60582d55ae6efe5fdd8b3161e13934bd","modified":1672296730120},{"_id":"themes/yilia-plus/_config.yml","hash":"b77c5b6fc3b7633a42fdeee70b5a262f2f69a8c2","modified":1676118602138},{"_id":"themes/yilia-plus/package.json","hash":"a3465e3a7a3ccc0ad9628b76e9b7572ce3c6f0f5","modified":1672296730134},{"_id":"source/404.md","hash":"cd79dccbb078b4df30019190e7723ed40c47cf1e","modified":1567517816573},{"_id":"themes/yilia-plus/webpack.config.js","hash":"7a5fcf1d727c37050880cf6610dc1c55edacdd21","modified":1672296730542},{"_id":"source/.DS_Store","hash":"d271dac4b88c3e4bad52c70b224b2007e4857edb","modified":1676888486400},{"_id":"themes/yilia-plus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1672286364643},{"_id":"themes/yilia-plus/.git/config","hash":"ee4c39e759a294e9296e04bfef0d3856f776392e","modified":1672286364644},{"_id":"themes/yilia-plus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1672286360174},{"_id":"themes/yilia-plus/.git/packed-refs","hash":"f3c1273f75b8a267e42abda978abfc85f0ebdd70","modified":1672286364641},{"_id":"themes/yilia-plus/.github/FUNDING.yml","hash":"387641ed8cb46ed60d7da1b00af0af9bd9412818","modified":1672286364652},{"_id":"themes/yilia-plus/.git/shallow","hash":"62189b371bc59f5cea8bfe3d116e8bba4dda23df","modified":1672286361305},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE.md","hash":"5ec55e34d1df613c4c6ee131b9193a282799611e","modified":1672286364652},{"_id":"themes/yilia-plus/.github/PULL_REQUEST_TEMPLATE.md","hash":"ec99cb7bd87f9b94342e067cf4c68897e4a92df8","modified":1672286364652},{"_id":"themes/yilia-plus/examples/index.html","hash":"e0b101738d43b8e79d478040af2536f6a2834d06","modified":1672296730124},{"_id":"themes/yilia-plus/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1672296730132},{"_id":"themes/yilia-plus/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1672296730133},{"_id":"themes/yilia-plus/layout/index.ejs","hash":"2cd6286cdff07e9d83677c7976439bb6f5799ff9","modified":1672296730133},{"_id":"themes/yilia-plus/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1672296730133},{"_id":"themes/yilia-plus/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1672296730134},{"_id":"themes/yilia-plus/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1672296730134},{"_id":"themes/yilia-plus/layout/layout.ejs","hash":"a0f9e0422ecfa4e076069b68fc07f2fe8adbfaed","modified":1674401210435},{"_id":"themes/yilia-plus/languages/en.yml","hash":"545cab1548654455314ed5fb45419e948f01a567","modified":1672296730125},{"_id":"themes/yilia-plus/languages/default.yml","hash":"2f221d8ff1732759583916203aac93491f576757","modified":1672296730124},{"_id":"themes/yilia-plus/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1672296730125},{"_id":"themes/yilia-plus/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1672296730125},{"_id":"themes/yilia-plus/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1672296730127},{"_id":"themes/yilia-plus/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1672296730128},{"_id":"themes/yilia-plus/languages/zh-CN.yml","hash":"2f221d8ff1732759583916203aac93491f576757","modified":1672296730128},{"_id":"themes/yilia-plus/languages/zh-tw.yml","hash":"4896b719ed1a4c0a648953648868a451f263a755","modified":1672296730128},{"_id":"themes/yilia-plus/languages/zh-Hans.yml","hash":"2dce39e94020d165ed227b81921474f1846f852f","modified":1672296730128},{"_id":"themes/yilia-plus/scripts/default_config.js","hash":"0456e54a3f637ab8676d3c2ce3280f4dbfffa758","modified":1672296730134},{"_id":"themes/yilia-plus/scripts/yilia_plus_log.js","hash":"8da11cf5d3beda92e17cceab18ed42e98102355f","modified":1672296730135},{"_id":"themes/yilia-plus/source-src/css.ejs","hash":"ba7ce6a0289f3b7038dca0a4a96f87fbbe473918","modified":1672296730135},{"_id":"themes/yilia-plus/source-src/script.ejs","hash":"e6fb74e9a5f560c90cacab260e82d92c4bcc2d2e","modified":1672296730148},{"_id":"themes/yilia-plus/source/main.a5fda8.css","hash":"d367ef023cf258c694bd6cee78db9cff16640069","modified":1672296730526},{"_id":"themes/yilia-plus/source/main.a5fda8.js","hash":"f8fde8b462ec0fbe1e5a231b9bd871241eacdc17","modified":1672296730526},{"_id":"themes/yilia-plus/source/slider.27463f.js","hash":"75db7fcc216082f7363c098fe81c3cbd5e3c87de","modified":1672296730541},{"_id":"source/_posts/.DS_Store","hash":"f1d0ded46988b84c18f682b217c0e853bf5dcb82","modified":1673270683594},{"_id":"source/assets/.DS_Store","hash":"c9b4bac8e6c5fd31aa79e0e09be9c998434a625d","modified":1676945675720},{"_id":"themes/yilia-plus/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672296730132},{"_id":"themes/yilia-plus/.git/index","hash":"f30804974dbde62db63db688d59c6d3532478987","modified":1672297145646},{"_id":"themes/yilia-plus/package-lock.json","hash":"83b7768862584cbffa2c75b412d3d4b0e9c65c4d","modified":1672296730134},{"_id":"themes/yilia-plus/source/mobile.a2c207.js","hash":"448860f4e30351fada95db9c974e68b372182656","modified":1672296730527},{"_id":"themes/yilia-plus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1672286360176},{"_id":"themes/yilia-plus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1672286360174},{"_id":"themes/yilia-plus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1672286360177},{"_id":"themes/yilia-plus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1672286360177},{"_id":"themes/yilia-plus/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1672286360175},{"_id":"themes/yilia-plus/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1672286360176},{"_id":"themes/yilia-plus/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1672286360177},{"_id":"themes/yilia-plus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1672286360175},{"_id":"themes/yilia-plus/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1672286360177},{"_id":"themes/yilia-plus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1672286360176},{"_id":"themes/yilia-plus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1672286360176},{"_id":"themes/yilia-plus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1672286360174},{"_id":"themes/yilia-plus/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1672286360178},{"_id":"themes/yilia-plus/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1672286360177},{"_id":"themes/yilia-plus/.git/logs/HEAD","hash":"b938c4e9bff0e65e8c224152471ee3e3947c08c4","modified":1672286364644},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"630401e12a290525f1469e2a4f1727ec6a692c69","modified":1672286364652},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/feature-request-improvement.md","hash":"0927a4c59555ebfb6458bb027173cc368c665bb3","modified":1672286364652},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/other.md","hash":"c3e2ec5af467d9de716f405f36bb3e8c65f1df9c","modified":1672286364652},{"_id":"themes/yilia-plus/.github/ISSUE_TEMPLATE/question-help.md","hash":"e97015e31f65ec3246737bc09a8c9a5a6a2ab7ec","modified":1672286364652},{"_id":"themes/yilia-plus/examples/images/alipay.jpeg","hash":"7eb57147bd42d499f8ef0351d46673158b209f75","modified":1672296730122},{"_id":"themes/yilia-plus/examples/images/qrcode.png","hash":"061607c067991f03bab78904fdba6e8b4bc174b0","modified":1672296730123},{"_id":"themes/yilia-plus/layout/_partial/activate-power-mode.ejs","hash":"eff31632727f38992ac50ee69b0eb938dafa145e","modified":1672296730128},{"_id":"themes/yilia-plus/layout/_partial/after-footer.ejs","hash":"1814f9f51664c7d082bca7aced966eb725ca7759","modified":1672296730128},{"_id":"themes/yilia-plus/examples/images/weixin.png","hash":"a1201bdc06e1467fea1f78cd56d8af45fdcfd5c0","modified":1672296730124},{"_id":"themes/yilia-plus/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1672296730129},{"_id":"themes/yilia-plus/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1672296730128},{"_id":"themes/yilia-plus/layout/_partial/article.ejs","hash":"4f55d7b1dd7028e3f4b3ba83d4d4335b938067fc","modified":1677066364906},{"_id":"themes/yilia-plus/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1672296730129},{"_id":"themes/yilia-plus/layout/_partial/background.ejs","hash":"de4d6912f8eaffc2955d0ae5aabf0eb1312d9778","modified":1672296730129},{"_id":"themes/yilia-plus/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1672296730129},{"_id":"themes/yilia-plus/layout/_partial/baidu-push.ejs","hash":"15e992e247ae313845a6db9a1ddaa11ce12db4e3","modified":1672296730129},{"_id":"themes/yilia-plus/layout/_partial/css.ejs","hash":"fced53d468006780954f2ab75eba0ab4806d5259","modified":1674400439710},{"_id":"themes/yilia-plus/layout/_partial/google-analytics.ejs","hash":"5b389110f4d3b727c33c48f088a8bc7f8b577d19","modified":1672296730129},{"_id":"themes/yilia-plus/layout/_partial/footer.ejs","hash":"6e9c411aa2c9db78534c055c48f6714f20808854","modified":1674229885891},{"_id":"themes/yilia-plus/layout/_partial/head.ejs","hash":"05c49de55b9f44f39ad48dcd53179f99f846273d","modified":1675238260018},{"_id":"themes/yilia-plus/layout/_partial/hover-effect.ejs","hash":"752c3e6f796ef02f40b50703dfdab423c5f2b8ff","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/header.ejs","hash":"72cc1b87d463a7262701e60cec3d5041a2857d0a","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/left-col.ejs","hash":"f35fa4df05c607b8b85cfee9ea10a0ab7a68459d","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/live2d-widget.ejs","hash":"c11c9974f7d2ef0adb483c4611124e008ad1da27","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/mathjax.ejs","hash":"2a6a030389d4c1e849d0b1ed4fb4205b8a931b90","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/mobile-nav.ejs","hash":"2df48ba64658732f433033b64b0bbe674d904b9b","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/tab-title-change.ejs","hash":"e13d347320660d3056d322abbaf4203736442b4d","modified":1672296730132},{"_id":"themes/yilia-plus/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1672296730132},{"_id":"themes/yilia-plus/layout/_partial/tools.ejs","hash":"ede8bf25cd1f17b746edb2afecf369247779f1ef","modified":1672296730132},{"_id":"themes/yilia-plus/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1672296730134},{"_id":"themes/yilia-plus/scripts/filters/meta_generator.js","hash":"86b1380aab223359c75df6268bb0d39ae98f2d8e","modified":1672296730135},{"_id":"themes/yilia-plus/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1672296730135},{"_id":"themes/yilia-plus/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1672296730135},{"_id":"themes/yilia-plus/scripts/helpers/yilia-plus-vendors.js","hash":"301d0537f7bae270e428de47f1b773dd1a65c3f3","modified":1672296730135},{"_id":"themes/yilia-plus/source-src/css/_core.scss","hash":"c6488119c93ce33bbe15d428dac4a88c3844bf5a","modified":1672296730135},{"_id":"themes/yilia-plus/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/archive.scss","hash":"a3d39002134ec4728e73d7fd9b3f2427776534cc","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/article-main.scss","hash":"5318d67971d41bf60cf87caba54cc29c808c8c02","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/article-nav.scss","hash":"12ff50f47fe087459fab17e3022ab28c3b5958ab","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/article-inner.scss","hash":"9661c0cc5e58530ef3ed6c9bb2e4e6e261b19198","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/article.scss","hash":"4016353e822c235b520750272a10c1db60f2c36e","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/comment.scss","hash":"ed2aad7e7a1a8e803287e2e1a3c94789989a63a1","modified":1672296730137},{"_id":"themes/yilia-plus/source-src/css/aside.scss","hash":"126a72c7c428ad560ecc4dff146697e6b39c1e69","modified":1672296730136},{"_id":"themes/yilia-plus/source-src/css/declare.scss","hash":"5313349b4da41faea53adb5c05b44b0513258bb0","modified":1672296730138},{"_id":"themes/yilia-plus/source-src/css/fonts.scss","hash":"bf5aec363e2ab2654bebd26e9919ba4eb66c816f","modified":1672296730138},{"_id":"themes/yilia-plus/source-src/css/footer.scss","hash":"2e1d9bd8a4f504a72734f9dfceea0ee4f58a9be4","modified":1672296730143},{"_id":"themes/yilia-plus/source-src/css/global.scss","hash":"5cd157920fab248daaf4fcbf40fb151365977d84","modified":1672296730143},{"_id":"themes/yilia-plus/source-src/css/grid.scss","hash":"22c9ec8b01691782340065ba25fd864ced141c1b","modified":1672296730144},{"_id":"themes/yilia-plus/source-src/css/highlight.scss","hash":"f76e578a8dbd92d48ecfee60eced2ad312cfd3e6","modified":1672296730144},{"_id":"themes/yilia-plus/source-src/css/hover-reveal.scss","hash":"8f558e7329e25c0d510a919d4c3911ff8afc7524","modified":1672296730144},{"_id":"themes/yilia-plus/source-src/css/left.scss","hash":"a0ed3a01ce1d87345f067be561adee3ed7da76b9","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/mobile-slider.scss","hash":"d74a5aebe2f38ca772e9585f246f05ba0216dca3","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/main.scss","hash":"d46e6e9e77bcd7575a78ef226b46e3ca8fa7c902","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/mobile.scss","hash":"a321eb303627be2397520f59ca755d95e71952b8","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/page.scss","hash":"23a2ffedb0aaf6de95532b1854364fe7053ae0af","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/reward.scss","hash":"24db3f65f0610051d37f03da50b08ef7483e3023","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/scroll.scss","hash":"e920a07d275ca7c492e6c5ae0dd1ed6a31ba76e5","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/share.scss","hash":"2d74ed49747c7b8c1297477fbf742f868281bb14","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/social.scss","hash":"685f9eed9727e54e86acfb32ab00d6cb76129b25","modified":1672296730145},{"_id":"themes/yilia-plus/source-src/css/tags-cloud.scss","hash":"6cd41bb104b31164662f053c11da9b1bef21919b","modified":1672296730146},{"_id":"themes/yilia-plus/source-src/css/tags.scss","hash":"6b24db85c61e0055f37bbdf581acddf8693fbbc0","modified":1672296730146},{"_id":"themes/yilia-plus/source-src/css/tools.scss","hash":"35a3a1278b0227db3b81892ef88de6ce0aca1a2f","modified":1672296730146},{"_id":"themes/yilia-plus/source-src/css/tooltip.scss","hash":"ba9bafcfc692562b92ec57b2cc0ba91bdf1ca86f","modified":1672296730146},{"_id":"themes/yilia-plus/source-src/js/anm.js","hash":"cd876d223aef66e6a65fa1ea023c55b1977b448f","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/aside.js","hash":"c22e7f9ce94a51924b7adb87fb02faa61f924d12","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/browser.js","hash":"d6085974a6f963023ec41347398c7a101bce9ee3","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/main.js","hash":"96a6055825a2bb1a34123472f0d36cdc0e1d2b7a","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/fix.js","hash":"ef1255de0790dd2bc762fed2cc68af4736a5622a","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/mobile.js","hash":"f3cfa47d4a4b1c30131f5c003c447d7faeabd6da","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/share.js","hash":"d93d3dc3975b2b95083571b5e0ad2cca9a3b4e8e","modified":1672296730147},{"_id":"themes/yilia-plus/source-src/js/slider.js","hash":"383e05285e25a9a5c4b8cab4d7eb95bd4026ea77","modified":1672296730148},{"_id":"themes/yilia-plus/source-src/js/util.js","hash":"44b81602118c559758aeb63dce02cbe3683aadd8","modified":1672296730148},{"_id":"themes/yilia-plus/source-src/js/viewer.js","hash":"ac68741d8a181b0a3ec84e3490a6c90bbddb28c1","modified":1672296730148},{"_id":"themes/yilia-plus/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1672296730148},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3da1ef.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1672296730149},{"_id":"themes/yilia-plus/source/fonts/fonteditor.3e0d4a.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1672296730149},{"_id":"themes/yilia-plus/source/fonts/fonteditor.86c132.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1672296730150},{"_id":"themes/yilia-plus/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1672296730150},{"_id":"themes/yilia-plus/source/fonts/fonteditor.fe4d8a.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1672296730150},{"_id":"themes/yilia-plus/source/fonts/fonteditor.bbc4b5.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1672296730150},{"_id":"themes/yilia-plus/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1672296730153},{"_id":"themes/yilia-plus/source/img/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1672296730153},{"_id":"themes/yilia-plus/source/img/biubiubiu.gif","hash":"cccda381f96abe91b4d698da793abd6496466d3d","modified":1672296730153},{"_id":"themes/yilia-plus/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1672296730154},{"_id":"themes/yilia-plus/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1672296730154},{"_id":"themes/yilia-plus/source/img/gitee.svg","hash":"fcc6e28d0345e22a6195748cf759eee5d8e48719","modified":1672296730154},{"_id":"themes/yilia-plus/source/lib/busuanzi.pure.js","hash":"f54c44e2b30e551540b83640dd8c5ff266e157d5","modified":1672296730157},{"_id":"themes/yilia-plus/source/lib/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1672296730157},{"_id":"themes/yilia-plus/source/lib/default.css","hash":"c9c344d5c98cc90b5583865e71726bab1046cdeb","modified":1672296730157},{"_id":"themes/yilia-plus/source/lib/gitment.css","hash":"cb2e0be2c7ebbcc3e756340c811864115bf0ec56","modified":1672296730160},{"_id":"themes/yilia-plus/source/lib/oauthcallback.browser.js","hash":"989b9e2638336461a9911ebf60e9a839819dd11f","modified":1672296730163},{"_id":"themes/yilia-plus/source/lib/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1672296730164},{"_id":"themes/yilia-plus/source/lib/snow.js","hash":"12ed5d697aa8a337064a1827ea94c0652c36b4e5","modified":1672296730164},{"_id":"source/_posts/ideas/list.md","hash":"e659c38e20597639d03d598de9fa813e0a06e48e","modified":1567519024255},{"_id":"source/_posts/ideas/20230120.md","hash":"1eded2a7508e459642ee91eb1e88d47b14c26583","modified":1674226119274},{"_id":"source/_posts/share/hexo-search.md","hash":"747c38fd4e14fb4b528cba84fc250cb8ce35d61e","modified":1674401169892},{"_id":"source/_posts/share/ios12-array-reverse.md","hash":"b538b604198eff2adab913b7f83bdf8e07130f8a","modified":1567517359218},{"_id":"source/_posts/share/tomcat-nowork.md","hash":"b932712de8329e38a82307812f1a44601da0236a","modified":1672283586061},{"_id":"source/_posts/share/page-notwork.md","hash":"f19a94a217141774492a316cc6bf814f6f47ae6c","modified":1672283701704},{"_id":"source/_posts/study/react-test1.md","hash":"9c512ca9cc8649e087b5afcb5343d3d6e92dfcba","modified":1672283626571},{"_id":"themes/yilia-plus/source/search/search.css","hash":"ab521c5250f2e0e768cfed9d1d93ab74d01d2d7a","modified":1674400947664},{"_id":"source/_posts/translate/wait.md","hash":"f599b38b200dc680b5fac249a3f9b88eae6f5b5c","modified":1674225093965},{"_id":"source/_posts/wx/20190731.md","hash":"dd37a61137fe4dfa336db67f9231b27dc54b287b","modified":1567517187786},{"_id":"source/_posts/wx/20190924.md","hash":"c13964111c246723752bdaff52c1553fca56a3c4","modified":1569331541278},{"_id":"themes/yilia-plus/source/search/search.js","hash":"cb653172e7be122ce233a9fbb56ea05752f70a02","modified":1674400250092},{"_id":"source/assets/img/avatar.jpg","hash":"837f04bb1d69b6a057b4d8c73c06df16ba531a0e","modified":1567517569349},{"_id":"source/assets/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1567517569350},{"_id":"source/assets/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1567517569350},{"_id":"source/assets/img/monorepo-polyrepo.svg","hash":"aaac6871e5ba7401e74c7979b272b86011dedce1","modified":1673101050788},{"_id":"source/assets/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1567517569350},{"_id":"source/assets/img/cmdb1.svg","hash":"6d8bfe57d1d1dd3d509360b24c0f9f8e448b2935","modified":1673272031151},{"_id":"source/_posts/today/20220103.md","hash":"43199ae5723d8b0734d9321e0c49d16df6cd47d7","modified":1673005165063},{"_id":"source/_posts/today/20220106.md","hash":"75c1e3377c0167a0f407ae89243ae39746a1f129","modified":1673015122991},{"_id":"source/_posts/today/20220104.md","hash":"f026c6f6e305856025d1569fc161d22f4193e709","modified":1673005152250},{"_id":"source/_posts/today/20220105.md","hash":"8248ab90d8ee93740ce027553ed243555b04104b","modified":1673005132268},{"_id":"source/_posts/today/20220107.md","hash":"a97db8d888cdabd5da0920c8c4a8f4a04d88adb6","modified":1673101317419},{"_id":"source/_posts/today/20220108.md","hash":"c0b2477d0e6fa4c058a09bc0c3ba5c5a4c6195b4","modified":1673187801955},{"_id":"source/_posts/today/20220110.md","hash":"023668c0a1dceee92bf5ab76deb1988ed695b607","modified":1674397085276},{"_id":"source/_posts/today/20220116.md","hash":"07dd763b4185faf57cede9f86167254cad41bb56","modified":1673882540566},{"_id":"source/_posts/today/20220111.md","hash":"24e1f5df860fa2a13d7d90657af4f0c6d092bc4c","modified":1674224007442},{"_id":"source/_posts/today/20220119.md","hash":"2544eeab4649b7a0f6cb144b00d0449e4dfd135a","modified":1674928586266},{"_id":"source/_posts/today/20220117.md","hash":"f957da85b5cce0ddec6ac9dfeac5696badca518a","modified":1674058405546},{"_id":"source/_posts/today/20220109.md","hash":"dbe44c369d70ba998f141c10c6e5b7a49f4630a2","modified":1673272020559},{"_id":"source/_posts/today/20220122.md","hash":"86df2772aa4229ef0cb9f1336f15754177d50a04","modified":1674928590263},{"_id":"source/_posts/today/20220129.md","hash":"c9d0d63080f17441ca009c44a6aaad3c824f5c0b","modified":1675089940163},{"_id":"source/_posts/today/20220130.md","hash":"dc29ccbdbe492f60d4d4d8600b82c956882efa79","modified":1675168283158},{"_id":"source/_posts/today/20220128.md","hash":"04eca2008867f9d143df1ca74051790705c4ccdb","modified":1674928602874},{"_id":"source/_posts/today/20220201.md","hash":"0e9b648b8c9a1edb80547832a6c6ce416b40d46b","modified":1675863405493},{"_id":"source/_posts/today/20220124.md","hash":"d91a17efdf23654b631903cb963e5dc836e3c9ad","modified":1674985607797},{"_id":"source/_posts/today/20220131.md","hash":"c901d1f5974eddccc27ab295377e74eb1ffcb096","modified":1675321083831},{"_id":"source/_posts/today/20220202.md","hash":"59a2936e66bcd341244d8a926cfb4b4274719529","modified":1674974060844},{"_id":"themes/yilia-plus/layout/_partial/script.ejs","hash":"3d93a530038eb6445e59e605a3ac5e2b3f81e64b","modified":1672296730132},{"_id":"themes/yilia-plus/source/img/weixin.png","hash":"3ad8925d382e7cb5599b827b1b8793bcaefb2a1f","modified":1672296730155},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak","hash":"ded86ac10cc79a7d28e2ea44778e792cef6c3470","modified":1672296730161},{"_id":"themes/yilia-plus/source/lib/jquery-2.1.4.min.js","hash":"43dc554608df885a59ddeece1598c6ace434d747","modified":1672296730163},{"_id":"source/_posts/share/iOS11-fastclick-js.md","hash":"3416d38c26c1a540fcf882f28473c7fb7ca6fa81","modified":1672384474867},{"_id":"source/assets/img/20230117-4.png","hash":"64459e252ef3f77f21a552a77722e1d04e0dc53c","modified":1674055622818},{"_id":"source/assets/img/20230124-1.png","hash":"7a639aa31750b3809975eb81606b5d0472c0ab12","modified":1674928285255},{"_id":"source/assets/img/20230120-idea.png","hash":"483252243bacd3c9fe0eb9fd50c7cf8358a3c9aa","modified":1674225761066},{"_id":"themes/yilia-plus/.git/objects/pack/pack-c31720811a5edb8670c52f210b66f0ff1d1d973b.idx","hash":"ee9f91c73bf6b1eb5310b205431dadb50cbe447f","modified":1672286364634},{"_id":"themes/yilia-plus/.git/objects/24/0110700ebca6e0cbe868a866fd3c8cd1ebfa80","hash":"9ee7283a584f3665ea373956f38067b7ca8d4047","modified":1672287015683},{"_id":"themes/yilia-plus/.git/refs/heads/master","hash":"62189b371bc59f5cea8bfe3d116e8bba4dda23df","modified":1672286364643},{"_id":"themes/yilia-plus/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1672296730130},{"_id":"themes/yilia-plus/layout/_partial/post/date.ejs","hash":"3900cb5a1f54ffed3d14ddd1f6492f21908693f6","modified":1672296730131},{"_id":"themes/yilia-plus/layout/_partial/post/giteement.ejs","hash":"1034300f4a9430b18a0fc8ad1b53d9ff5acf715c","modified":1672296730131},{"_id":"themes/yilia-plus/examples/images/Yilia-plus.png","hash":"23884fe970ec806b05511288f52cd576f5ac1fff","modified":1672296730122},{"_id":"themes/yilia-plus/layout/_partial/post/gitment.ejs","hash":"a8225b146b63c44f44082a18cd580690674c1b25","modified":1672296730131},{"_id":"themes/yilia-plus/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1672296730131},{"_id":"themes/yilia-plus/layout/_partial/post/share.ejs","hash":"a136ebe98afd675d6585355a33fb48127b587ec2","modified":1672296730131},{"_id":"themes/yilia-plus/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1672296730131},{"_id":"themes/yilia-plus/layout/_partial/post/word.ejs","hash":"3cd2763d5aa7e3796fe1bb81c62539e0ff3b8fb7","modified":1672296730131},{"_id":"themes/yilia-plus/layout/_partial/post/title.ejs","hash":"9ab905efdd83f15abacba8a2be30c5e12d76a160","modified":1676211310706},{"_id":"themes/yilia-plus/source-src/css/core/_mixin.scss","hash":"3b3ea43a675c8d299916361cbb3f3a74982b2454","modified":1672296730137},{"_id":"themes/yilia-plus/source-src/css/core/_animation.scss","hash":"d36ff0c46a60185f177c462f232734e096d7530a","modified":1672296730137},{"_id":"themes/yilia-plus/source-src/css/core/_media-queries.scss","hash":"7b54eb05258e2de5bc682503e114d56afda10f8c","modified":1672296730137},{"_id":"themes/yilia-plus/source-src/css/core/_variables.scss","hash":"b156876e7b529436ba4d8caff03d30af22d91072","modified":1672296730138},{"_id":"themes/yilia-plus/source-src/css/core/_reset.scss","hash":"845716a861a3d73e8c6d4d60ef8f5594813a978a","modified":1672296730137},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.eot","hash":"c29905356fb2116a454a262d6f15cdeb593a6cec","modified":1672296730141},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.svg","hash":"de1fbf8378d1966d43bf620b8acd6bf900a15a73","modified":1672296730141},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.ttf","hash":"95d1a4991df9ce15562ff0344b318b5fc5f9ab70","modified":1672296730142},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.woff","hash":"5a945ddf318d3ca68d0a1e8695b23287ff7e9816","modified":1672296730142},{"_id":"themes/yilia-plus/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1672296730144},{"_id":"themes/yilia-plus/source-src/css/fonts/fonteditor.woff2","hash":"c748dc092f066f7e12626c801d416e64b95dacea","modified":1672296730142},{"_id":"themes/yilia-plus/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1672296730144},{"_id":"themes/yilia-plus/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1672296730144},{"_id":"themes/yilia-plus/source/gitment/APlayer.min.js","hash":"9f131b6ca3b89e52545a279356b79530bbb52a64","modified":1672296730151},{"_id":"themes/yilia-plus/source/img/alipay.jpg","hash":"bda816152f1d7e5e52755a079d196850e62d6c97","modified":1672296730152},{"_id":"themes/yilia-plus/source/lib/gitment.js.bak2","hash":"abf60c1466261231717cb25faf854ecae9d76b43","modified":1672296730163},{"_id":"themes/yilia-plus/source/lib/gitment.js","hash":"d1dd326c7b21f36ad78d55c451a1f0bbb13d201c","modified":1672296730161},{"_id":"themes/yilia-plus/source/live2d_models/chitose/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364675},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364684},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package-lock.json","hash":"13a16c22c14ecd05babda1bcd05ae509f8e36e2f","modified":1672296730179},{"_id":"themes/yilia-plus/source/live2d_models/chitose/package.json","hash":"1a9787523593c242cb095109afd630f7e3e879e4","modified":1672296730179},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package.json","hash":"accba9f2f02f2fa65b9103eb2ae8f6d82a9c51aa","modified":1672296730193},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/package-lock.json","hash":"61398afc4263891ef8e47a07911494c4e223f187","modified":1672296730193},{"_id":"themes/yilia-plus/source/live2d_models/gf/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364689},{"_id":"themes/yilia-plus/source/live2d_models/haru/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364705},{"_id":"themes/yilia-plus/source/live2d_models/gf/package-lock.json","hash":"972676062fd3c5b3d9ff655226d57cc17491682e","modified":1672296730225},{"_id":"themes/yilia-plus/source/live2d_models/gf/package.json","hash":"84ebad708c79bf7817c3969bc161fd4ca159d037","modified":1672296730225},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364720},{"_id":"themes/yilia-plus/source/live2d_models/haru/package.json","hash":"e98010497cbf995d9ea9a7f4bddefe6bd65987c2","modified":1672296730265},{"_id":"themes/yilia-plus/source/live2d_models/haru/package-lock.json","hash":"1453c48dae23864d0c1232da5f462abd9d0b87fb","modified":1672296730265},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364725},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package-lock.json","hash":"2a2881a5677aa79d0bc94f5f2bc9c495c5f21d99","modified":1672296730290},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/package.json","hash":"7181977daa9ea701cbf19226c370c4f4c3aa2e5d","modified":1672296730290},{"_id":"themes/yilia-plus/source/live2d_models/haruto/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364716},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package-lock.json","hash":"004a6bb08de386c36806c36bb5f300041d7407cd","modified":1672296730298},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/package.json","hash":"0d1c0f7205aa43ec73b60cf93fcf74e09b5392ed","modified":1672296730298},{"_id":"themes/yilia-plus/source/live2d_models/izumi/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364729},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package.json","hash":"9cf4a018e54719920f98f95063d5c08f1aecd8fe","modified":1672296730277},{"_id":"themes/yilia-plus/source/live2d_models/haruto/package-lock.json","hash":"39a3f632333ac36bf7cf51e7ac0b1e6fc8195945","modified":1672296730277},{"_id":"themes/yilia-plus/source/live2d_models/koharu/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364740},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package-lock.json","hash":"a0209f204c31385293b7be0cb69bb0946dc08638","modified":1672296730325},{"_id":"themes/yilia-plus/source/live2d_models/izumi/package.json","hash":"1f93d62e12fa1a5ac39454700965c7fea48af6da","modified":1672296730326},{"_id":"themes/yilia-plus/source/live2d_models/miku/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364743},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package-lock.json","hash":"1a3502e15120fabb1c896982df702f6a4f33ec6d","modified":1672296730335},{"_id":"themes/yilia-plus/source/live2d_models/koharu/package.json","hash":"cdd641abdeabe453fb32a942a30a1114c92babba","modified":1672296730336},{"_id":"themes/yilia-plus/source/live2d_models/miku/package.json","hash":"f4b568edfc4dc3ffda21b7170b412b3b8a3df76a","modified":1672296730349},{"_id":"themes/yilia-plus/source/live2d_models/miku/package-lock.json","hash":"18a38b042d647ac54bf75a61feacecd979d5545b","modified":1672296730349},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364748},{"_id":"themes/yilia-plus/source/live2d_models/nico/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364753},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package-lock.json","hash":"018d46cfd7fd35a695ae71a904f37aa2bbc4602b","modified":1672296730365},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/package.json","hash":"2cd6630d13c432c3c2b672af956b7699d8703d2a","modified":1672296730365},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364759},{"_id":"themes/yilia-plus/source/live2d_models/nico/package-lock.json","hash":"401865e9192a50901ff40d2927c196b6222781f8","modified":1672296730376},{"_id":"themes/yilia-plus/source/live2d_models/nico/package.json","hash":"2a5d7e4d8791dc21fc9e4bc858835906a359cae0","modified":1672296730376},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package.json","hash":"e7aec97ca2d70ab2ad4e44de71c30a22a5234303","modified":1672296730388},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/package-lock.json","hash":"ce8eacb41468e4150992962bbef65a659d3751a3","modified":1672296730388},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364776},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364765},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package.json","hash":"b5a428b63eca192e309289c98a23f36b53c5c239","modified":1672296730483},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/package-lock.json","hash":"9ee7ec232b70b3ba036d73de5e01991d34422244","modified":1672296730483},{"_id":"themes/yilia-plus/source/live2d_models/nito/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364772},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package-lock.json","hash":"3aa9f4f3a55d6a3c4b0267e09a6b873c9885b467","modified":1672296730401},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/package.json","hash":"15b41830870ec1b800211b8963292ecb26ad792a","modified":1672296730401},{"_id":"themes/yilia-plus/source/live2d_models/tororo/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364790},{"_id":"themes/yilia-plus/source/live2d_models/nito/package-lock.json","hash":"c6a73af1e04dc2271eff24a0ec195884ac66a615","modified":1672296730410},{"_id":"themes/yilia-plus/source/live2d_models/nito/package.json","hash":"6144ca1bbbf20ba59de22f907abcacc3e2e38e66","modified":1672296730410},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364794},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package-lock.json","hash":"2fb484f7bddd401d0162515482e97443da0db0b5","modified":1672296730489},{"_id":"themes/yilia-plus/source/live2d_models/tororo/package.json","hash":"35b2bf469066be74736e53942400922284dcef9d","modified":1672296730489},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package-lock.json","hash":"1204f760f1d7e8726405061445cc7f8693fd8c13","modified":1672296730508},{"_id":"themes/yilia-plus/source/live2d_models/wanko/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364806},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/package.json","hash":"0dd4fc54589e0101207792cc2a33e20306a5924e","modified":1672296730508},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package-lock.json","hash":"ad19acef63585bae69f0919434aaf1d1aefa5956","modified":1672296730521},{"_id":"themes/yilia-plus/source/live2d_models/z16/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364808},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/.gitignore","hash":"2aa039aab52800662710bbf503671c770af96621","modified":1672286364802},{"_id":"themes/yilia-plus/source/live2d_models/wanko/package.json","hash":"f97ec41764abc0d11e056088765123b6a8aae798","modified":1672296730521},{"_id":"themes/yilia-plus/source/live2d_models/z16/package.json","hash":"1669f3f4c7a862e384ed9bfe4c4f6158bf60f2ef","modified":1672296730525},{"_id":"themes/yilia-plus/source/live2d_models/z16/package-lock.json","hash":"925d90cf2d1ec4fe19ff4b12839cc46e67c4c3e6","modified":1672296730525},{"_id":"themes/yilia-plus/source/plugins/TweenMax/HoverImg.js","hash":"ecc51aed76c22ca181870d4ba47765c0598e3a1b","modified":1672296730527},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package-lock.json","hash":"e16e408bc25ff17269d231678e9759723e4cfd21","modified":1672296730517},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/package.json","hash":"3e23d508ebf90fc230f175347efd56b18f3ee42b","modified":1672296730517},{"_id":"themes/yilia-plus/source/plugins/TweenMax/charming.min.js","hash":"0b11f943ec562c9031be07203058650eee74d73d","modified":1672296730528},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js","hash":"189df71cee9f1273f134fd78114c72c69b5a44c1","modified":1672296730538},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/manifest.json","hash":"38026df431641eaf04c205b7bea882f492eae749","modified":1672296730539},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1672296730541},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1672296730541},{"_id":"source/assets/img/20230117-3.png","hash":"826e79fdb61acf619bf93fbf1b9712d7a33e6769","modified":1674055049400},{"_id":"source/assets/img/20230117-5.png","hash":"f8db6145f5d2c9c63ba6faf3b2791218f285f417","modified":1674055749214},{"_id":"source/assets/img/alipay.png","hash":"cfd65543cc9dba76d83ae812d082dd7bb9353c00","modified":1567517569351},{"_id":"themes/yilia-plus/examples/images/web.png","hash":"9748de6b01c6b044c421d548993b1024abeb8b0c","modified":1672296730124},{"_id":"themes/yilia-plus/source/plugins/activate-power-mode/activate-power-mode.js","hash":"8161c7d2b8fd7fa407db3c3429edd8d19f82ae81","modified":1672296730529},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.min.js.map","hash":"75322ae0754f0580c0fb5ce9176ab72ce4009903","modified":1672296730539},{"_id":"source/assets/img/weixin.png","hash":"a2eb598873c8cb070950caad2ad20fd2463eb8e1","modified":1567517569351},{"_id":"themes/yilia-plus/.git/logs/refs/heads/master","hash":"b938c4e9bff0e65e8c224152471ee3e3947c08c4","modified":1672286364644},{"_id":"themes/yilia-plus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1672286364643},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/fonts.scss","hash":"f44c67b61208f6b4a6aa27c90a01fdb0c087d25a","modified":1672296730138},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1672296730139},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1672296730139},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1672296730140},{"_id":"themes/yilia-plus/source-src/css/fonts/bak/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1672296730140},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.eot","hash":"de1e6a237496055048752b719dbbb4872bf6aaa9","modified":1672296730143},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.svg","hash":"c65b80c65e6042a778011798a4e60832ed424c92","modified":1672296730143},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.woff","hash":"555d609b08a87cee313fa64ce4677cc90aa9512d","modified":1672296730143},{"_id":"themes/yilia-plus/source-src/css/fonts/yilia-plus/fonteditor.ttf","hash":"eab3ed2ad51d365b48c647a4ab0fae7e5a8368a1","modified":1672296730143},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.model.json","hash":"a9b9986e72b8245f036f6ada876b84a3986c4218","modified":1672296730165},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.physics.json","hash":"5ff4acbc4cf23a7f2ff211f50e53df6f6b7c0995","modified":1672296730165},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/chitose.pose.json","hash":"52f9b579ca15b4b2dc4c5fa71172472dd6924264","modified":1672296730165},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1672296730180},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1672296730180},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/Gantzert_Felixander.model.json","hash":"d5caeb1c758088ff03bc190cd8dcee98e6e02392","modified":1672296730193},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1672296730279},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1672296730279},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1672296730290},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1672296730290},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1672296730265},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1672296730266},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.model.json","hash":"3ba8caa98a3af7b09d7a79419a691f543a1e3ea4","modified":1672296730300},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/izumi.physics.json","hash":"cee4a6e1c8ec3e1c2bfc8028ff49dc9c34c06258","modified":1672296730301},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1672296730326},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1672296730326},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.model.json","hash":"32e49dfc6cb4d9c537453bb083aab39ed708c476","modified":1672296730336},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/miku.physics.json","hash":"d5ca7f215044ba5bf1cdb8045a5c99b64ec258ce","modified":1672296730336},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.model.json","hash":"3c77e66d6436136bf50d5fdbc8ee8cd543a35e01","modified":1672296730364},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.physics.json","hash":"ef2dd194f934f129f5f4db7785a9c7b7e45671ff","modified":1672296730364},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/ni-j.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1672296730364},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.physics.json","hash":"1db72a0413771e14d74de955af728224318e91d1","modified":1672296730375},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1672296730376},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/nico.model.json","hash":"9f007936f4748e80a1da60ca078daed595acffee","modified":1672296730375},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzche.model.json","hash":"4f8fb457ddf9b0aa930cbcd4a3258ccdbf9e7506","modified":1672296730387},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1672296730387},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/nietzsche.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1672296730387},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1672296730475},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1672296730474},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1672296730475},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.model.json","hash":"271e40dfe9c04c8b5f5e4c6a9aa4f7ee6c65cff9","modified":1672296730400},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.physics.json","hash":"5e83e055f99be8c8752fdcad30f9ed043111b83b","modified":1672296730401},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/nipsilon.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1672296730401},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.model.json","hash":"7d7930d1fc8114ae0e694624db457612dca64814","modified":1672296730409},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.physics.json","hash":"27db548eec3c5f3c71330e675b3f602cd86f2242","modified":1672296730409},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/nito.pose.json","hash":"a8c949d20eebf1e716a495bf806b2eccff62a925","modified":1672296730410},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1672296730489},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1672296730489},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.model.json","hash":"3d5d18ccaf9dc5d4bb42e1c6c3a3d8d89b55524b","modified":1672296730507},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/tsumiki.physics.json","hash":"737f5ef200fd8d33b75bf19176dcff311591bd8f","modified":1672296730508},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1672296730521},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1672296730525},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1672296730525},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.model.json","hash":"6baa976186d98050740e02eadc796036a16f6fa2","modified":1672296730516},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/unitychan.physics.json","hash":"d32ffd9263044d17d46facb5d878ea3683b8023e","modified":1672296730517},{"_id":"themes/yilia-plus/source/plugins/TweenMax/TweenMax.min.js","hash":"8598fc6507e8948a0f99a61bb1dc345ecc1e1f6f","modified":1672296730528},{"_id":"themes/yilia-plus/source/plugins/ribbon.js/demo/index.html","hash":"97ff0bb6307330d15d81075eba56bd85eb589905","modified":1672296730540},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js","hash":"b6a9fa8908ce9b64fe27b632935219eb10fd9283","modified":1672296730533},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js","hash":"3cfe69c7d1bf48ba529e243f3892f7919d57ccc0","modified":1672296730529},{"_id":"source/assets/img/20230117-2.png","hash":"1743b86884b7dc1b5eb995f6c28e67e752f3a241","modified":1674016751021},{"_id":"source/assets/img/20230117-1.png","hash":"529526ae4346752b51ea474f75ab47962a111dc7","modified":1674016700050},{"_id":"themes/yilia-plus/.git/logs/refs/remotes/origin/HEAD","hash":"b938c4e9bff0e65e8c224152471ee3e3947c08c4","modified":1672286364643},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730165},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f02.exp.json","hash":"5b3dfc33ba22945adb77efacb9c55efbfd4975f9","modified":1672296730165},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f05.exp.json","hash":"154b1b33701c61570e8adc5cab977ea3198ade6a","modified":1672296730166},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f06.exp.json","hash":"f3db49d621e2008b9eb59fba98e10db5dbd19d3d","modified":1672296730166},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f03.exp.json","hash":"a506220e6b908154eea59f4bcfd73e7a457616b6","modified":1672296730166},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f04.exp.json","hash":"6fee0e4d489e8ca3b7252b9dfc7c25cbe6a6a1e7","modified":1672296730166},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/exp/f07.exp.json","hash":"1ad00a1e4843b5b31b0c43fa292193bb049f6779","modified":1672296730167},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_idle.mtn","hash":"f3d1ab532e49a20e98cadb0290c959d7f1086eb6","modified":1672296730179},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime01.mtn","hash":"97308ef8c5798374a6b1ba6cdec53d6732a4728a","modified":1672296730179},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_handwave.mtn","hash":"3d7a0f7ffda7d2ac3bb6fde6ccc49521c0d7713b","modified":1672296730178},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730180},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/mtn/chitose_kime02.mtn","hash":"3eed16b70dc2f7b7e50417f19207e3cabccaa166","modified":1672296730179},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1672296730180},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1672296730181},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1672296730181},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1672296730181},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1672296730181},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1672296730181},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1672296730182},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1672296730189},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1672296730188},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1672296730188},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1672296730190},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1672296730189},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1672296730189},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1672296730190},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1672296730190},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1672296730190},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1672296730191},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1672296730192},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1672296730191},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1672296730191},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1672296730192},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1672296730192},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_01.mtn","hash":"91d2def2e00393fcedaaca36cd80340fa95a2d1b","modified":1672296730221},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_02.mtn","hash":"9283c809509daf3f580dcb92bab14960b5a89283","modified":1672296730223},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_03.mtn","hash":"afec07ed22acdf28a5c49b78c560e29c3c2cfaa0","modified":1672296730223},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_00_idle.mtn","hash":"d383fc08986b4d1f746d71abbea6f7b5f54dcc95","modified":1672296730219},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_04.mtn","hash":"50360a6572518b447af3315236659a576aa1b248","modified":1672296730224},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.model.json","hash":"cab2aac3d697eafa420e8a02b1f52c1f19666ffd","modified":1672296730228},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1672296730229},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/haru01.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1672296730229},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730277},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1672296730277},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1672296730278},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1672296730278},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1672296730278},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1672296730278},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1672296730287},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1672296730286},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1672296730287},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1672296730283},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1672296730284},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1672296730284},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1672296730284},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1672296730285},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1672296730285},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1672296730285},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1672296730285},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1672296730286},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.physics.json","hash":"490ab4735f5cddca766344468591c0eb90cda1f7","modified":1672296730252},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.model.json","hash":"ffed6d4654deeb772e389213f84701940ee0126f","modified":1672296730252},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/haru02.pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1672296730252},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1672296730294},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1672296730295},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1672296730295},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1672296730296},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1672296730295},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1672296730296},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1672296730297},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1672296730297},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1672296730296},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1672296730272},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1672296730273},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1672296730274},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1672296730275},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1672296730275},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1672296730275},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1672296730276},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1672296730275},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1672296730276},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1672296730276},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730298},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f02.exp.json","hash":"d4c339f80452528f6cacba3ffe97fbb9e2e4d144","modified":1672296730298},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f03.exp.json","hash":"fc1f79f65c09c845f08ee92d237f8cfabe90a3c6","modified":1672296730299},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f04.exp.json","hash":"2e4f19882061c1b9bf49537244550cb5c9dd8a18","modified":1672296730299},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f05.exp.json","hash":"b0c99350872f614a2a7f60e6479a4799d2d74986","modified":1672296730299},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f06.exp.json","hash":"fd90baab724e71a25c8fd1eba2fab97974906374","modified":1672296730300},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/exp/f07.exp.json","hash":"bb8dc60fc59444fee419265e68216bdcc0282b0b","modified":1672296730300},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_01.mtn","hash":"ce50f5c562b282dcb11679f682fe0f9e1bb0f37b","modified":1672296730314},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_02.mtn","hash":"0c6b52bf64db7bbfee81ee24240ca991320764b4","modified":1672296730316},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_03.mtn","hash":"b374923d973970f2c8331b3420660952e2bd8bf5","modified":1672296730316},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_01.mtn","hash":"36286812dc692e00a0b69e71d7fe3c8a2b672281","modified":1672296730317},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/idle_04.mtn","hash":"97c0a45af4f0b9f4b828f43eccb1c77c360af637","modified":1672296730317},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_03.mtn","hash":"fc7f8e01f8e7744cbd13a8fea44dda8270f21aeb","modified":1672296730318},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_02.mtn","hash":"90add71910fd83c1c66bfb73db6d6d4766c98dac","modified":1672296730318},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_05.mtn","hash":"dbfea56881f31a79bffb6d107e7b1fa867e2da0e","modified":1672296730319},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_04.mtn","hash":"551b95d80d31ed4f06d19d99ccc4f795a8392ea3","modified":1672296730318},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_06.mtn","hash":"c1a63e659fcc6d5b1b0eac7eaff60faf43e2cb28","modified":1672296730319},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_07.mtn","hash":"e2f9e8cb428fa83251a45166d8f9acad570a47d9","modified":1672296730319},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_08.mtn","hash":"19fc90977a0ca30c18f4afae90d4c3ea27a9b094","modified":1672296730320},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_09.mtn","hash":"97199471755394bed243a29b4cb8397518487296","modified":1672296730320},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/mtn/izumi_10.mtn","hash":"244ae631fb963ed7619e5d63f189d947a2497eb2","modified":1672296730320},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_01.mp3","hash":"11dd394ab4d11d3a3c6d6a1a305ff3a1d1fed21d","modified":1672296730321},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_02.mp3","hash":"d35189bae63cc6ef18d3a949c4a46dd5ed74c6b3","modified":1672296730321},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_03.mp3","hash":"b3d6e98bc30eaf8ac0cf7ffe2f297742a819b380","modified":1672296730322},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_04.mp3","hash":"7647fb1e8823bb48ee5f82dbeac35e3f61b74bef","modified":1672296730322},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_05.mp3","hash":"05e44723c24b387a0eab37a0ab4120ef19ae317e","modified":1672296730323},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_06.mp3","hash":"f39ee4b85ed9877100c028bf938a9a8fd0d2cb6b","modified":1672296730323},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_09.mp3","hash":"f7bce48ee99bdad6fa187c484872eafce0b0e351","modified":1672296730324},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_08.mp3","hash":"0b73b4f9216ee6b944a91b599c942d567a39fe0f","modified":1672296730324},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_10.mp3","hash":"53013c1cc56296a3843d4c8e3f01fd67747b169b","modified":1672296730325},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/snd/izumi_07.mp3","hash":"0c13c0096d02ceb37b3bcce085206b5d6d8ae834","modified":1672296730323},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1672296730332},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1672296730332},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1672296730333},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1672296730332},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1672296730334},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1672296730333},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1672296730334},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1672296730334},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1672296730335},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1672296730335},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1672296730346},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1672296730347},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1672296730347},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1672296730347},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1672296730348},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1672296730348},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1672296730348},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/mtn/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1672296730349},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1672296730355},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1672296730355},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1672296730355},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1672296730356},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1672296730356},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1672296730356},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1672296730356},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1672296730357},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1672296730357},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1672296730358},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1672296730358},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1672296730358},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1672296730358},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1672296730359},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1672296730359},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1672296730359},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1672296730359},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1672296730360},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1672296730360},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1672296730360},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1672296730361},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1672296730371},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1672296730371},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1672296730371},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1672296730371},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1672296730371},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1672296730372},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1672296730372},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1672296730372},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1672296730372},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1672296730372},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1672296730373},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1672296730373},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1672296730373},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1672296730373},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1672296730374},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1672296730374},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1672296730374},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1672296730374},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1672296730374},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1672296730375},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1672296730375},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1672296730383},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1672296730383},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1672296730383},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1672296730383},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1672296730384},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1672296730384},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1672296730384},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1672296730384},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1672296730384},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1672296730385},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1672296730385},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1672296730385},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1672296730385},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1672296730385},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1672296730385},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1672296730386},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1672296730386},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1672296730386},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1672296730386},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1672296730387},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1672296730387},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1672296730469},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1672296730469},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1672296730470},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_01.mtn","hash":"fe824e9209bda79277f4785a637c38bf3b8e1cad","modified":1672296730470},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_00.mtn","hash":"f9fa4acb170959ed665690d18790fc618cea6bd2","modified":1672296730470},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/idle_02.mtn","hash":"58b87745d9c2b2b5667549a52a781b6bfea44927","modified":1672296730470},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1672296730471},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1672296730471},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1672296730472},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1672296730472},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1672296730472},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1672296730472},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1672296730473},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1672296730473},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1672296730474},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1672296730473},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1672296730474},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1672296730474},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1672296730434},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730410},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1672296730434},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1672296730434},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1672296730475},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1672296730476},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1672296730476},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1672296730477},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1672296730477},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1672296730480},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1672296730481},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1672296730482},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1672296730482},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1672296730395},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1672296730483},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1672296730483},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1672296730395},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1672296730396},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1672296730396},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1672296730396},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1672296730396},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1672296730397},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1672296730397},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1672296730397},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1672296730397},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1672296730397},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1672296730398},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1672296730398},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1672296730398},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1672296730398},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1672296730399},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1672296730399},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1672296730399},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1672296730399},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1672296730400},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1672296730400},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1672296730405},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1672296730405},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1672296730405},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1672296730405},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1672296730406},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1672296730406},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1672296730406},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1672296730407},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1672296730406},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1672296730407},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1672296730407},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1672296730407},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1672296730407},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1672296730408},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1672296730408},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1672296730408},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1672296730408},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1672296730408},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1672296730408},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1672296730409},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1672296730409},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1672296730487},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1672296730487},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1672296730487},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1672296730487},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1672296730487},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1672296730488},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1672296730488},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1672296730488},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F01.exp.json","hash":"7c0a23a6f3f0a584887be3d3b482ecc7a359306e","modified":1672296730490},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1672296730488},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F02.exp.json","hash":"5e7fffd67c06aee0cdcab0b8f816fd6a125db260","modified":1672296730490},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F04.exp.json","hash":"19c9ad9d05ea7cb15ccdabeaa14ec84c2763af9c","modified":1672296730490},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F03.exp.json","hash":"ab92d6fd93d152a4739d93cc6a650c36623dcf72","modified":1672296730490},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F05.exp.json","hash":"afd807b47a00389374949731dd97087aeeec28d7","modified":1672296730490},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F06.exp.json","hash":"8dd11423a36822927463c3adfdd629d4126f2205","modified":1672296730491},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F08.exp.json","hash":"03284527751a22b05336329df15e103fdc7e95ec","modified":1672296730491},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F07.exp.json","hash":"65441e1c9d27f4af55b45759e3c8407af2b72c3e","modified":1672296730491},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F09.exp.json","hash":"eb7d53e7617247158e4d538e2e7f1a602cfe21a5","modified":1672296730491},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/exp/F10.exp.json","hash":"61bccc68a43662888862fe46c91f579958097ed9","modified":1672296730492},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/P01.mtn","hash":"4b6d266d9fe31e01c4e13ac2049435b5d70b5589","modified":1672296730498},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_idle_01.mtn","hash":"dd178b1cb3817bd2d7e6f56f25daf3ffacd4afdd","modified":1672296730500},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01.mtn","hash":"b1b0e2237926a52970703bcfdd5cf6bb6fc39248","modified":1672296730500},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_01_df.mtn","hash":"4b008605c2f61f37fd295d929df8b51e9f1f447e","modified":1672296730500},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_02.mtn","hash":"43f73acf0ec68e5ddda2fb212b3bd62b4ec63829","modified":1672296730501},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_03.mtn","hash":"bbd6a2cbe87dea113024d9d953bb42864cad31a5","modified":1672296730501},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_04.mtn","hash":"b6395b5acb2136c8265f37483cfe60b4a1bfb66d","modified":1672296730501},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_05.mtn","hash":"c118b3bcbf03d0cc07c9f6a2a8e8c495f07f4091","modified":1672296730502},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_06.mtn","hash":"2641628ced0c982f214242744da73f1ab048c078","modified":1672296730502},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_07.mtn","hash":"ec5da8fb40ff26dc3e9f306cade5f4bfc2f15642","modified":1672296730502},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_09.mtn","hash":"c4f3635225ba606873a7c14cc91bf5a28a2afa95","modified":1672296730503},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_08.mtn","hash":"98768aafeb239e75f788969eb995adbe7a89bc3f","modified":1672296730502},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_10.mtn","hash":"8e6d0609ae64f8dd4db0e5e85addbc677fac3a79","modified":1672296730503},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_14.mtn","hash":"2480493fffb4fd8135ef1e88c5f717952b7d6542","modified":1672296730505},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_15.mtn","hash":"4fa8d8667c41cd5b3c49cf4bdd8b36cf0a9158b9","modified":1672296730505},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_16.mtn","hash":"03843599008ab2ee23d9d03174924609ad042ce6","modified":1672296730505},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_17.mtn","hash":"6346ebcf76b0780987f552b16c4c62c39732597f","modified":1672296730506},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_13.mtn","hash":"d20d09dfbdf42d13240c45f9d2fa4474a4541dd8","modified":1672296730504},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_18.mtn","hash":"34fbff31238e9b6a541f5f03a00bec5cbcec6649","modified":1672296730506},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_19.mtn","hash":"685fc0130899e903d9c9433ec1c1a987323d6c8c","modified":1672296730506},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_20.mtn","hash":"076ca7be2c81e776794245a3865478b20428e416","modified":1672296730506},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_23.mtn","hash":"d5a156e295e575c615b673350c025e3270afee8e","modified":1672296730507},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_21.mtn","hash":"bd917f60537e4e9037c85bf356d4c25e75e2807c","modified":1672296730506},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_22.mtn","hash":"0fb02e4734ab8c455e1405dfed9546af583595ae","modified":1672296730507},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_24.mtn","hash":"696502793e9917abc495645be784262e3b997bde","modified":1672296730507},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1672296730519},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1672296730519},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1672296730519},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1672296730519},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1672296730520},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1672296730520},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1672296730520},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1672296730520},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1672296730520},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1672296730521},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1672296730521},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1672296730521},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730522},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_02.mtn","hash":"8c3929962a4991c94bf7aeaf33169d61ccaccb2c","modified":1672296730514},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1672296730524},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/idle_01.mtn","hash":"e38a7dcfcad059b695f935b2071a1270c1ddf905","modified":1672296730513},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_01.mtn","hash":"97d08b57c3b07a854f69cdef3ce6d13a2b2ece1c","modified":1672296730514},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_03.mtn","hash":"dd140c6c4702f3fbd785a85a4d5d8cfa32b9bc32","modified":1672296730514},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_02.mtn","hash":"a4dd9580452854f6adc7b30e9e85702a7641179c","modified":1672296730514},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_04.mtn","hash":"32f8515854a89878c5becbabf56dabd4c675d437","modified":1672296730514},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_05.mtn","hash":"ca1f068a2c9c56519e4306115b95d1f497f31124","modified":1672296730514},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_06.mtn","hash":"cb16f119956346e4b15a1c432491423893cf2389","modified":1672296730515},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_07.mtn","hash":"35caceb556d9bb4fc2a5ed4f8c51d766a6e70405","modified":1672296730515},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_08.mtn","hash":"fbd6ae1967446a421d8505a8d29d5f7f64b5c0d7","modified":1672296730515},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_09.mtn","hash":"4b942bfbde2a82f19bb4aab7e54e3caae9691da6","modified":1672296730515},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_10.mtn","hash":"837f0cda82543d87c12108957a16e482964f3796","modified":1672296730515},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_11.mtn","hash":"2c5ec476b9e3246d8c7a5ae4611401d3420cfa1e","modified":1672296730516},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_12.mtn","hash":"90e96587969b78785c16cdffbdbe0b220cac39b7","modified":1672296730516},{"_id":"source/assets/img/20230116.png","hash":"90fa53c69ed7ff2647e83416a2740fd70bb5bd9e","modified":1673881684653},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_13.mtn","hash":"f08d7f660fda4029fec2acb1f1389f855b5d1b96","modified":1672296730516},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/mtn/m_14.mtn","hash":"4c5c7fdc05237a090341d4690bd7e07344728e9e","modified":1672296730516},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1672296730187},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/mtn/A_05.mtn","hash":"40ad1e684108035c6478b76c9e4e1953104725da","modified":1672296730224},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1672296730289},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1672296730288},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1672296730478},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1672296730479},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1672296730480},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_11.mtn","hash":"63b0adf0414ebad9a3bec91417629d983c546975","modified":1672296730503},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/mtn/tsumiki_m_12.mtn","hash":"b68b20df9b695e0d7ac93a5865097b27c3123f21","modified":1672296730504},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1672296730524},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1672296730519},{"_id":"themes/yilia-plus/source/lib/giteement.browser.js","hash":"824925ebd507d6b6fe3005f6c90c64809638456b","modified":1672296730160},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1672296730226},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1672296730226},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730225},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1672296730227},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1672296730226},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1672296730228},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1672296730227},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1672296730227},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1672296730237},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1672296730238},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1672296730238},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1672296730238},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1672296730239},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1672296730239},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1672296730240},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1672296730240},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1672296730240},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1672296730241},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1672296730241},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1672296730241},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1672296730242},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1672296730243},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1672296730243},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1672296730242},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1672296730246},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1672296730247},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1672296730247},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1672296730248},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1672296730248},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1672296730249},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1672296730249},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1672296730250},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f03.exp.json","hash":"a65382a1a8d8f7034eac2c811b9f122a8b3f1403","modified":1672296730250},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f04.exp.json","hash":"3156286d7e0281e15c637a889aa415eef3224fa7","modified":1672296730250},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f05.exp.json","hash":"1123786fb0bb9c31f7d30cf14b2299f898cdc207","modified":1672296730251},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f06.exp.json","hash":"d962889ec7c563d818ddb5ab1e58cd337b5e62db","modified":1672296730251},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f02.exp.json","hash":"461fe8077a2289e309ffc7edf561501a7edcce88","modified":1672296730250},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f07.exp.json","hash":"d55366c9bcf382e8273cf1803f65cdb8a4a0d336","modified":1672296730251},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/exp/f08.exp.json","hash":"4a9ba4b11d9797f59c7b043d2b807ed8253f3cc4","modified":1672296730251},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1672296730262},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1672296730263},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1672296730264},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1672296730264},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1672296730263},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1672296730264},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1672296730258},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1672296730259},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1672296730258},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1672296730258},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1672296730259},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1672296730259},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1672296730260},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1672296730259},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1672296730260},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1672296730260},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1672296730260},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1672296730260},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1672296730260},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1672296730261},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1672296730261},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1672296730261},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/mtn/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1672296730262},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.moc","hash":"819e029e0d81ed64c59d47fc747026d4bbe637d6","modified":1672296730312},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1672296730346},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1672296730479},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1672296730523},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1672296730523},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.moc","hash":"94047b7bb9a99f43ab4dbe5b013a8fb9de854086","modified":1672296730513},{"_id":"source/assets/img/weixin-person.png","hash":"0e4b7cf2178cf086d477bff1e005b5251f24aa97","modified":1567517569355},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_04.png","hash":"2c63a9622a875fea1abcdb9ef437b64556090d22","modified":1672296730208},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/mtn/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1672296730239},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1672296730283},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/snd/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1672296730262},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1672296730294},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1672296730350},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.moc","hash":"d846e2c4a4db0f003f2eda466f64cf2165e39ad8","modified":1672296730354},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1672296730366},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_00.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1672296730377},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.moc","hash":"63e70620e9eee593dbb77b26209ad64afa82f571","modified":1672296730382},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1672296730436},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1672296730464},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1672296730462},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.moc","hash":"aae6ab7a4687b166b30fb3bbfb1de5e91a5641e4","modified":1672296730405},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1672296730486},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1672296730403},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.moc","hash":"7e328a496119887e4caaaa5b81adb3aacb0dac19","modified":1672296730178},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_03.png","hash":"80f11d03197912296cd27ce7f59f490336396309","modified":1672296730208},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1672296730270},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1672296730331},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_02.png","hash":"8e4a632c61506e3cc07d8ba704aa4ec2567fe11b","modified":1672296730368},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_01.png","hash":"fc5a8b833e1b089808e893158a71b8597161fda0","modified":1672296730379},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1672296730464},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.moc","hash":"77ea4fba30cd6f056d1175654a8c950523cdf37e","modified":1672296730394},{"_id":"themes/yilia-plus/source/live2d_models/wanko/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1672296730518},{"_id":"themes/yilia-plus/source/live2d_models/z16/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1672296730523},{"_id":"themes/yilia-plus/source/live2d_models/unitychan/assets/moc/unitychan.2048/texture_00.png","hash":"2268ef1522ce750bb63f59a6bd1022c8c531e307","modified":1672296730512},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_06.png","hash":"e04b38575cb49bf538d98d0bcc642be4eaf89f73","modified":1672296730212},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1672296730230},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1672296730232},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_00.png","hash":"f3c4103630bbf0660f793f90a14b51fdb7dfb7ea","modified":1672296730253},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_01.png","hash":"dd05d6b7f8f0d0c167b040f41ffd7c10a3747d96","modified":1672296730253},{"_id":"themes/yilia-plus/source/live2d_models/haruto/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1672296730268},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1672296730459},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_01.png","hash":"413695bc00193e587b85c944df11d721192dd9a0","modified":1672296730390},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.moc","hash":"cc023058ae61f70acf7580c4e2352b84eaf1a7b9","modified":1672296730498},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1672296730237},{"_id":"themes/yilia-plus/source/live2d_models/haru/01/assets/moc/haru01.1024/texture_02.png","hash":"6a1e0b336da79557325da9f58a69a380d67ecbb1","modified":1672296730233},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.moc","hash":"748cf01b45bebb3b217d6363f9d5ff81ab942787","modified":1672296730257},{"_id":"themes/yilia-plus/source/live2d_models/haru/02/assets/moc/haru02.1024/texture_02.png","hash":"df02ff8355fca1389bbed5153dc1dadd8cd1c704","modified":1672296730255},{"_id":"themes/yilia-plus/source/live2d_models/hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1672296730292},{"_id":"themes/yilia-plus/source/live2d_models/ni-j/assets/moc/ni-j.2048/texture_01.png","hash":"f868cb3bffe97108ef677c43659a6ad7f6a906b2","modified":1672296730352},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.2048/texture_01.png","hash":"9a19b242b9309624de1e43703b240c1c72bf2205","modified":1672296730367},{"_id":"themes/yilia-plus/source/live2d_models/nico/assets/moc/nico.moc","hash":"371b0d972aca62a2b67d32398be091d792f0b3cb","modified":1672296730370},{"_id":"themes/yilia-plus/source/live2d_models/nito/assets/moc/nito.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1672296730402},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_00.png","hash":"0316bc67bc2bde4017530989f34d62981ed88ab5","modified":1672296730494},{"_id":"themes/yilia-plus/source/live2d_models/tsumiki/assets/moc/tsumiki.2048/texture_01.png","hash":"ffbb082160de6e3bb664b1a4e16b503a80b549c2","modified":1672296730496},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_05.png","hash":"e6b2987797dbcf113879024df919aa716ded9d4e","modified":1672296730210},{"_id":"themes/yilia-plus/source/live2d_models/hibiki/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1672296730281},{"_id":"themes/yilia-plus/source/live2d_models/koharu/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1672296730328},{"_id":"themes/yilia-plus/source/live2d_models/nietzsche/assets/moc/nietzsche.2048/texture_02.png","hash":"9abe0e1b8fe05ad4c678f17fd0f47a064f98908d","modified":1672296730381},{"_id":"themes/yilia-plus/source/live2d_models/tororo/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1672296730485},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.0.min.js.map","hash":"3b3a7076b747b092d6e48f42a8a3497aa21280ee","modified":1672296730532},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1672296730462},{"_id":"themes/yilia-plus/source/plugins/live2d-widget.js/L2Dwidget.common.js.map","hash":"8de60ae490ab3d62c91c8ce60a256079b6afd3d8","modified":1672296730537},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_02.png","hash":"1c2cf2502769b3a359c121823f9ecdb114063288","modified":1672296730206},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_00.png","hash":"8ea2e684b826d4a8548b237ab86b3bb701ca8d5b","modified":1672296730390},{"_id":"themes/yilia-plus/source/live2d_models/epsilon2_1/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1672296730184},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_01.png","hash":"274627b4750bac66b29a9c19a939aca1655b1d27","modified":1672296730305},{"_id":"themes/yilia-plus/source/live2d_models/nipsilon/assets/moc/nipsilon.2048/texture_02.png","hash":"8052842f4b880ce16a01703a128d8881f63f8543","modified":1672296730393},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_01.png","hash":"da2a0785207727ba87a30ed6853dafd9978eb7b4","modified":1672296730203},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_02.png","hash":"4b45fb19ee5b662678692132feae93119ff56d08","modified":1672296730308},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.2048/texture_00.png","hash":"ff5b30d94adfcca1e5b77a3b7d3d75d750707d83","modified":1672296730197},{"_id":"themes/yilia-plus/source/live2d_models/shizuku/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1672296730468},{"_id":"themes/yilia-plus/source/live2d_models/miku/assets/moc/miku.2048/texture_00.png","hash":"26fe101720ab8e55fb62c87b563d0dbb903c5eaf","modified":1672296730344},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_03.png","hash":"84005d6e75ed9db0f531b6e5e0d6d541da796b04","modified":1672296730310},{"_id":"themes/yilia-plus/source/live2d_models/izumi/assets/moc/izumi_illust.1024/texture_00.png","hash":"bfcecfa399b328ac15eba45f2b6b3b18d50f2daf","modified":1672296730303},{"_id":"themes/yilia-plus/source/live2d_models/gf/assets/moc/Gantzert_Felixander.moc","hash":"67d418af2db593b0b6f318e95f49d4370515c8f0","modified":1672296730218},{"_id":"themes/yilia-plus/source/live2d_models/chitose/assets/moc/chitose.2048/texture_00.png","hash":"505dbba0bec5d7fda0cead773caa540a0158a610","modified":1672296730176},{"_id":"themes/yilia-plus/.git/objects/pack/pack-c31720811a5edb8670c52f210b66f0ff1d1d973b.pack","hash":"2d793d3e53ea48685f649a8cab69bdbf8a3da8be","modified":1672286364634},{"_id":"public/404.html","hash":"f76e09733ae17baf51fcab2d9551372814931d09","modified":1675068485242},{"_id":"public/content.json","hash":"653f52eda81f24f4f80eef37f1ceeea7ca231bf2","modified":1677066379010},{"_id":"public/search.xml","hash":"b57c3fc7abda9b68604f69d40feb6df342e2bf55","modified":1677066377728},{"_id":"public/2023/01/22/today/20220122/index.html","hash":"b2a0a74af8b21451c043407041e204c9c2f37705","modified":1675238634086},{"_id":"public/2023/01/22/share/hexo-search/index.html","hash":"ccf8bc205064e08f51ce272e69e37e3007e54fe0","modified":1675238634085},{"_id":"public/2023/01/24/today/20220124/index.html","hash":"906fd8d3032ae3905a7a7647267fab5a71c269fe","modified":1675238634085},{"_id":"public/2023/01/20/ideas/20230120/index.html","hash":"6767f493527d7f221d5e58ef7ad5edee9224d09b","modified":1675238634086},{"_id":"public/2023/01/19/today/20220119/index.html","hash":"147b3714b7e446167ec87e3018e67486d2c1b901","modified":1675238634086},{"_id":"public/2023/01/17/today/20220117/index.html","hash":"472192c97f4719c1e9ec4ad21ce1dd2dbce58c62","modified":1675238634086},{"_id":"public/2023/01/14/today/20220111/index.html","hash":"05fe87373ff63dde451bb1c3d0d2af493894042d","modified":1675238634086},{"_id":"public/2023/01/16/today/20220116/index.html","hash":"bb4a0d12eb617126104306dde296f71934a643ae","modified":1675238634086},{"_id":"public/2023/01/10/today/20220110/index.html","hash":"72081522086fc5669ef5378210e5f711ec795a64","modified":1675238634086},{"_id":"public/2023/01/09/today/20220109/index.html","hash":"0c93b49b928d135d43fc1685e0cf3d8f8b0fb84a","modified":1675238634086},{"_id":"public/2023/01/08/today/20220108/index.html","hash":"7b8f31b5ac195efbe6c5bd841abc14ebd56ed326","modified":1675238634086},{"_id":"public/2023/01/07/today/20220107/index.html","hash":"5e31ffa16412e61786a26bcdc49cb729d3f481e1","modified":1675238634086},{"_id":"public/2023/01/06/today/20220131/index.html","hash":"ea061f4dd7cbe1acbae3fe7cd30c6442873a5845","modified":1675238634086},{"_id":"public/2023/01/06/today/20220130/index.html","hash":"106d3430f64fd91a36c33556895c7131eab8d689","modified":1675238634086},{"_id":"public/2023/01/06/today/20220128/index.html","hash":"f3277c2ae9af8d350d9b43833adcd9b7a30b98a7","modified":1675238634086},{"_id":"public/2023/01/06/today/20220201/index.html","hash":"2944f853881ab6159a1cbc5f2ecdb9cce111422a","modified":1675238634086},{"_id":"public/2023/01/06/today/20220106/index.html","hash":"20bf4d438844f509f58b2d65cec4016b4e7719aa","modified":1675238634086},{"_id":"public/2023/01/06/today/20220202/index.html","hash":"f67f55e531ea6c4f197344e4ffc27056f9a03e02","modified":1675238634086},{"_id":"public/2023/01/05/today/20220105/index.html","hash":"40d78e9d8116e779ae9d1ea13a5111105c915015","modified":1675238634087},{"_id":"public/2023/01/04/today/20220104/index.html","hash":"1d1ea06fc25933165dc4d87538f191acd690a590","modified":1675238634087},{"_id":"public/2023/01/03/today/20220103/index.html","hash":"c0572743a346bcbd40439e2e12848efc8018d2dd","modified":1675238634087},{"_id":"public/2022/12/26/share/page-notwork/index.html","hash":"cdda9bffd8b9438043ccc61a1fbc0b9cd51bc255","modified":1675238634087},{"_id":"public/2022/12/17/share/tomcat-nowork/index.html","hash":"7940e1209c16097d393e24e72dae926b4d343db1","modified":1675238634087},{"_id":"public/2019/09/25/study/react-test1/index.html","hash":"2be0de61a3792cb3e7a9e128ec0379082ec008e4","modified":1675238634087},{"_id":"public/2019/09/24/wx/20190924/index.html","hash":"24cd498d2b06614a09bf9ef7ddfa05955dbf72f7","modified":1675238634087},{"_id":"public/2019/09/03/ideas/list/index.html","hash":"10973c44ea65d5024508d5af6366e237ac3610c9","modified":1675238634087},{"_id":"public/2019/07/31/wx/20190731/index.html","hash":"a47a1c80ff82bc2e9d145fde0ad99858fa69e056","modified":1675238634087},{"_id":"public/2018/08/19/share/ios12-array-reverse/index.html","hash":"6756e64911f827fdc21e3aa44596d02ce74b87a0","modified":1675238634087},{"_id":"public/2018/08/04/share/iOS11-fastclick-js/index.html","hash":"10527cbcf16c559518694b7df14b2e761a9148fd","modified":1675238634087},{"_id":"public/index.html","hash":"864e6760bed2ab1ec12c4faeef47525618f2ff0e","modified":1677066379800},{"_id":"public/page/2/index.html","hash":"0a45251a537c73b8e0fdf0a9ced30f45a29ef95d","modified":1677066379808},{"_id":"public/page/3/index.html","hash":"b6421fbe8daeccbd1f462052673f41734a523c90","modified":1677066379808},{"_id":"public/archives/index.html","hash":"3a883c12d33f81890e23bfb07b0615259c39f3e6","modified":1677066379806},{"_id":"public/2017/09/03/translate/wait/index.html","hash":"9ccc5102918b7be7a13d6a08f9e5415739172250","modified":1675238634087},{"_id":"public/archives/page/2/index.html","hash":"e4a0939f9e0b195acee0137be60f847bda8b9bc2","modified":1677066379806},{"_id":"public/archives/page/3/index.html","hash":"71b982cb77681d56d65af1b317bcb2a832f42f21","modified":1677066379806},{"_id":"public/archives/page/4/index.html","hash":"ce768899f77a7853e9c8c6804aa31bb6d9669af3","modified":1677066379807},{"_id":"public/archives/2017/index.html","hash":"65206a102399d8b70d7f0a5c5a567e415d08cc4f","modified":1676554636430},{"_id":"public/archives/2018/index.html","hash":"27da77d8420c4a664238a0d482befab4dcb0306e","modified":1676554636430},{"_id":"public/archives/2017/09/index.html","hash":"c00ab51a27bfbceeaec53bbb89ea1fb8c690a1fb","modified":1676554636430},{"_id":"public/archives/2018/08/index.html","hash":"fc4676865e378125eaac2c90f5ff1011207bf099","modified":1676554636430},{"_id":"public/archives/2019/index.html","hash":"e18763a520475154319ff05f55dbad02678e6be3","modified":1676554636430},{"_id":"public/archives/2019/07/index.html","hash":"e276b180a991627a35924ec697834d2dc97d69bc","modified":1676554636430},{"_id":"public/archives/2022/index.html","hash":"5385acb65e79d122028a428d9607a98644fceff0","modified":1676554636430},{"_id":"public/archives/2019/09/index.html","hash":"2b25bbdbff7b4f4e2d1ba5d90d5bc7f3570d3a21","modified":1676554636430},{"_id":"public/archives/2022/12/index.html","hash":"11e2c883c385f8307f62d18993396428d3eed2c8","modified":1676554636430},{"_id":"public/archives/2023/index.html","hash":"7f3cc3ce6733b53a79c0f0cdb1a93ff60a751d1b","modified":1677066379807},{"_id":"public/archives/2023/page/2/index.html","hash":"5d7752550377f46c7b7233fd7773c9362ec66673","modified":1677066379807},{"_id":"public/archives/2023/page/3/index.html","hash":"903d20b0fdfc658ea518abca709cf5d4bcf962f8","modified":1677066379807},{"_id":"public/archives/2023/01/index.html","hash":"071de7fa5197e59f7d8fab7505385d825fb054f3","modified":1677066379807},{"_id":"public/archives/2023/01/page/2/index.html","hash":"4e8160f70d2eb3949007b9e86755cc48f48e97e0","modified":1677066379807},{"_id":"public/archives/2023/01/page/3/index.html","hash":"d8fe8c94f1d0fff8e32f7343631342622a61ad4c","modified":1677066379807},{"_id":"public/tags/奇思妙想/index.html","hash":"95d1a549f0bd0b80fdb8bd9c412d149b6ef50f80","modified":1677066379808},{"_id":"public/tags/技术分享/index.html","hash":"56d88809424a28168ecbcbc26de6fbadb082aff2","modified":1677066379808},{"_id":"public/tags/技术分享/page/2/index.html","hash":"8448b83461cd0aef65ba2d1844f9d94fb5cef270","modified":1677066379808},{"_id":"public/tags/翻译文章/index.html","hash":"c6146289c8ae66f954f7980dd179219a002fff29","modified":1677066379808},{"_id":"public/tags/技术分享/page/3/index.html","hash":"381163b4a1d5f298d37f85e926b7fdae758cd263","modified":1677066379808},{"_id":"public/tags/hide/index.html","hash":"f9957fb67a22c387fd9a9b162e1141496054f4ce","modified":1676554636432},{"_id":"public/tags/周二技术周刊/index.html","hash":"89423fd1ef3b52544589fa559ec2c4515d3764aa","modified":1676554636432},{"_id":"public/tags/学习总结/index.html","hash":"239fd9455beb6eccb7ba2074ecd88c94d43e5e33","modified":1676554636432},{"_id":"public/tags/每日更新/index.html","hash":"0d1e7241e6003e676ccefa34804a0d57390f1899","modified":1677066379808},{"_id":"public/tags/每日更新/page/2/index.html","hash":"eaadb812b0e7dc776fc1b0d0e7c1f6498a852235","modified":1677066379808},{"_id":"public/tags/每日更新/page/3/index.html","hash":"1051afa0e8b9b15ad2deb6d67bb225919988c33b","modified":1677066379808},{"_id":"public/tags/动手实战/index.html","hash":"2ea4d4dd255ffa2a47c12ce669005a30d4eb71ca","modified":1676554636432},{"_id":"public/tags/短视频/index.html","hash":"3c9e73a1610e72d3aecb71fc690fe1b3661f9121","modified":1676554636433},{"_id":"public/tags/技术探鲜/index.html","hash":"84063a4066c83cc6181ca2017035ce81137346fc","modified":1676554636433},{"_id":"public/2023/01/29/today/20220129/index.html","hash":"3442b8b79f537e92e0b63a8511c7e896e0ab5940","modified":1675238634085},{"_id":"source/assets/img/20230130-1.png","hash":"9bb3169a95f3df957c8999bcb00eaeffa2280a7e","modified":1675086940684},{"_id":"source/_posts/study/face-test.md","hash":"8635c7b100402c0b1e0f78ba2773790c17c41086","modified":1675171370993},{"_id":"source/_posts/today/20220203.md","hash":"5b182b059ba7ebd4ee02369da2a7ce9babbfaf2a","modified":1675089808828},{"_id":"public/2023/01/30/study/face-test/index.html","hash":"618a453844d66d33db3874d5cfedd1aa0fd24ac9","modified":1675238634085},{"_id":"public/2023/01/06/today/20220203/index.html","hash":"e3f6ddbeef9d37368cf3334ed73a24ddd47f7985","modified":1675238634086},{"_id":"public/archives/page/5/index.html","hash":"5b920a78e23395a964208ab6f7cfad083d1b175e","modified":1677066379807},{"_id":"public/page/4/index.html","hash":"6623a287599b4ba3eae6c0ddaa3325c00266483b","modified":1677066379808},{"_id":"public/sitemap.xml","hash":"0305d37c8d9dbca2a9578d5f040c1d69b594ae1d","modified":1675864655812},{"_id":"public/baidusitemap.xml","hash":"3eb59561f21cd9692f7e9202ce5da36710fabd03","modified":1677066377726},{"_id":"source/_posts/today/20220205.md","hash":"6c8475792141f7074c3c158b49d1280565c516ed","modified":1675238814889},{"_id":"source/_posts/today/20220204.md","hash":"9ed0741a1adceb79cbea76bfd88ceb479ae6fd1c","modified":1675821292326},{"_id":"source/_posts/today/20220208.md","hash":"64e16a23fa7d5db5fba781f643517ff3b824e63d","modified":1675865991560},{"_id":"source/_posts/today/20220210.md","hash":"a8582f3b1841ed48c0eaf71ee58d4f25f36c89fa","modified":1675863303070},{"_id":"source/_posts/today/20220209.md","hash":"41cdbf02fe1369473f7660cc959b547b4608dfeb","modified":1675842170997},{"_id":"source/_posts/today/20220206.md","hash":"e2943c3605a8d6182d2b0c49905715e285358c92","modified":1675319909229},{"_id":"source/_posts/today/20220207.md","hash":"a5934cffb4d9190fa0b9b6d5fd3bfb191d7569bd","modified":1675435985325},{"_id":"source/_posts/today/20220211.md","hash":"689bd9253fab20f39e97ccc61dfdca96e90a3ddd","modified":1675863551553},{"_id":"source/_posts/assets/.DS_Store","hash":"63375a6e1c5861cd9e373a281414a4f1937e1161","modified":1675133337859},{"_id":"source/_posts/assets/img/20230124-1.png","hash":"7a639aa31750b3809975eb81606b5d0472c0ab12","modified":1674928285255},{"_id":"source/_posts/assets/img/avatar.jpg","hash":"837f04bb1d69b6a057b4d8c73c06df16ba531a0e","modified":1567517569349},{"_id":"source/_posts/assets/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1567517569350},{"_id":"source/_posts/assets/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1567517569350},{"_id":"source/_posts/assets/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1567517569350},{"_id":"source/_posts/assets/img/monorepo-polyrepo.svg","hash":"aaac6871e5ba7401e74c7979b272b86011dedce1","modified":1673101050788},{"_id":"source/_posts/assets/img/cmdb1.svg","hash":"6d8bfe57d1d1dd3d509360b24c0f9f8e448b2935","modified":1673272031151},{"_id":"source/_posts/assets/img/20230120-idea.png","hash":"483252243bacd3c9fe0eb9fd50c7cf8358a3c9aa","modified":1674225761066},{"_id":"source/_posts/assets/img/20230117-4.png","hash":"64459e252ef3f77f21a552a77722e1d04e0dc53c","modified":1674055622818},{"_id":"source/_posts/assets/img/20230117-3.png","hash":"826e79fdb61acf619bf93fbf1b9712d7a33e6769","modified":1674055049400},{"_id":"source/_posts/assets/img/20230117-1.png","hash":"529526ae4346752b51ea474f75ab47962a111dc7","modified":1674016700050},{"_id":"source/_posts/assets/img/alipay.png","hash":"cfd65543cc9dba76d83ae812d082dd7bb9353c00","modified":1567517569351},{"_id":"source/_posts/assets/img/weixin.png","hash":"a2eb598873c8cb070950caad2ad20fd2463eb8e1","modified":1567517569351},{"_id":"source/_posts/assets/img/20230130-1.png","hash":"9bb3169a95f3df957c8999bcb00eaeffa2280a7e","modified":1675086940684},{"_id":"source/_posts/assets/img/20230117-5.png","hash":"f8db6145f5d2c9c63ba6faf3b2791218f285f417","modified":1674055749214},{"_id":"source/_posts/assets/img/20230116.png","hash":"90fa53c69ed7ff2647e83416a2740fd70bb5bd9e","modified":1673881684653},{"_id":"source/_posts/assets/img/20230117-2.png","hash":"1743b86884b7dc1b5eb995f6c28e67e752f3a241","modified":1674016751021},{"_id":"source/_posts/assets/img/weixin-person.png","hash":"0e4b7cf2178cf086d477bff1e005b5251f24aa97","modified":1567517569355},{"_id":"source/_posts/img/20230124-1.png","hash":"7a639aa31750b3809975eb81606b5d0472c0ab12","modified":1675864486577},{"_id":"source/_posts/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1675864486581},{"_id":"source/_posts/img/cmdb1.svg","hash":"6d8bfe57d1d1dd3d509360b24c0f9f8e448b2935","modified":1675864486582},{"_id":"source/_posts/img/avatar.jpg","hash":"837f04bb1d69b6a057b4d8c73c06df16ba531a0e","modified":1675864486581},{"_id":"source/_posts/img/monorepo-polyrepo.svg","hash":"aaac6871e5ba7401e74c7979b272b86011dedce1","modified":1675864486583},{"_id":"source/_posts/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1675864486581},{"_id":"source/_posts/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1675864486583},{"_id":"source/_posts/img/20230120-idea.png","hash":"483252243bacd3c9fe0eb9fd50c7cf8358a3c9aa","modified":1675864486576},{"_id":"source/_posts/img/20230117-4.png","hash":"64459e252ef3f77f21a552a77722e1d04e0dc53c","modified":1675864486574},{"_id":"source/_posts/img/20230117-3.png","hash":"826e79fdb61acf619bf93fbf1b9712d7a33e6769","modified":1675864486574},{"_id":"source/_posts/img/20230117-5.png","hash":"f8db6145f5d2c9c63ba6faf3b2791218f285f417","modified":1675864486575},{"_id":"source/_posts/img/alipay.png","hash":"cfd65543cc9dba76d83ae812d082dd7bb9353c00","modified":1675864486580},{"_id":"source/_posts/img/20230117-1.png","hash":"529526ae4346752b51ea474f75ab47962a111dc7","modified":1675864486572},{"_id":"source/_posts/img/weixin.png","hash":"a2eb598873c8cb070950caad2ad20fd2463eb8e1","modified":1675864486586},{"_id":"source/_posts/img/20230130-1.png","hash":"9bb3169a95f3df957c8999bcb00eaeffa2280a7e","modified":1675864486579},{"_id":"source/_posts/img/20230116.png","hash":"90fa53c69ed7ff2647e83416a2740fd70bb5bd9e","modified":1675864486570},{"_id":"source/_posts/img/20230117-2.png","hash":"1743b86884b7dc1b5eb995f6c28e67e752f3a241","modified":1675864486573},{"_id":"source/_posts/img/weixin-person.png","hash":"0e4b7cf2178cf086d477bff1e005b5251f24aa97","modified":1675864486585},{"_id":"public/assets/img/20230124-1.png","hash":"01cb3d713f515661838380cb642e4a60d362fb2b","modified":1675864654225},{"_id":"public/assets/img/avatar.jpg","hash":"d8d4379b1d4bf9a1502de6ac6ba2e0dd5a1f0421","modified":1675864654233},{"_id":"public/assets/img/article-list-background.jpeg","hash":"aa6e0ca093f5f74f80ff2ab58520478733a467de","modified":1675864654296},{"_id":"public/assets/img/20230117-4.png","hash":"0ddf5149ce10731e454981f93aa7ad7a3af608c4","modified":1675864655153},{"_id":"public/assets/img/20230120-idea.png","hash":"44056878ad7507a43938f651b2414c66fedcc86a","modified":1675864655602},{"_id":"public/assets/img/20230117-1.png","hash":"46e6bdafb9a648d7473fbc59d6cc009604d3aa85","modified":1675864655753},{"_id":"public/assets/img/alipay.png","hash":"8cc39b7d4cd0e751a6f43d7e11fced8725218242","modified":1675864655753},{"_id":"public/baidu_urls.txt","hash":"3c0a5409f5ffaa414dedb419613d3fe912b87f93","modified":1677066377653},{"_id":"public/today/20220201.html","hash":"f1747f3b46addee023934ca2803e631a175e44b4","modified":1675864655914},{"_id":"public/today/20220131.html","hash":"5dd19b2019950d6f2a45ded968dedff0565a8e51","modified":1675864655932},{"_id":"public/study/face-test.html","hash":"703e69857ddafa460956269083a792735a3c0e71","modified":1677066379803},{"_id":"public/today/20220129.html","hash":"5b1aa4b64a2a5aa496c61559a0f5bbe669cbad89","modified":1675864656057},{"_id":"public/today/20220124.html","hash":"f2d7eaa922da60269a320d5a38cf61717b5bac62","modified":1675864656057},{"_id":"public/share/hexo-search.html","hash":"d91294e46ee62537d7642bcd7b5acd593ef651f3","modified":1677066379804},{"_id":"public/today/20220122.html","hash":"aaee46ea818282955fc6f92a14ab4e74edfb5261","modified":1675864656065},{"_id":"public/ideas/20230120.html","hash":"96808193ff408456e8f63d6be67c9ec64cb3d0b6","modified":1677066379804},{"_id":"public/today/20220119.html","hash":"dedf83fe051f90e6f69d35a69a43d67a9774cea7","modified":1675864656065},{"_id":"public/today/20220117.html","hash":"7dc6c5e30f96141f7d5f879c1e08dbcdd0ba4cf1","modified":1675864656065},{"_id":"public/today/20220116.html","hash":"35cde5208e977cd924cdbc7c47df9d585989e5e1","modified":1675864656065},{"_id":"public/today/20220111.html","hash":"e7334ac190399de46d40070323d80fae240e6f40","modified":1675864656065},{"_id":"public/today/20220110.html","hash":"7dfc72dd1baed3c5cfd8d9dc529cf7c00de7e817","modified":1675864656065},{"_id":"public/today/20220109.html","hash":"d4fc2b909c55b4f766529369a0e0d8bb1cb95dc8","modified":1675864656065},{"_id":"public/today/20220108.html","hash":"79d6ebd00c4d8fc32332104f7562275678f185c3","modified":1675864656065},{"_id":"public/today/20220107.html","hash":"3f1a3b1a3af229fa9e5951e35636be5c6e8c7f9c","modified":1675864656065},{"_id":"public/today/20220204.html","hash":"29723645c286d3d2931dbc3857641a46a7825ea5","modified":1675864656065},{"_id":"public/today/20220106.html","hash":"222a836ea0dd12900ae3c52763fbb9252c28d1fe","modified":1675864656065},{"_id":"public/today/20220205.html","hash":"08b6069b714dbfcda4dfa9d5386d59638e397727","modified":1675864656066},{"_id":"public/today/20220128.html","hash":"201b42a805de879d9b52c789244c50cf3c95ebc7","modified":1675864656066},{"_id":"public/today/20220203.html","hash":"fed11466bc8997c2ebf9d78edfe9f377cf06b0f4","modified":1675864656066},{"_id":"public/today/20220105.html","hash":"e5b8f3e6fde5808029cd7a9de5eddd30729e8634","modified":1675864656066},{"_id":"public/today/20220104.html","hash":"627fe6d0efe2cfb5ee2320553a0aa56d25786e86","modified":1675864656066},{"_id":"public/today/20220103.html","hash":"afeb4e65b365d4421e8f5ccd34907b7fabfa4e91","modified":1675864656066},{"_id":"public/share/page-notwork.html","hash":"94e26dad9c68a2f02d5a54abea6ff4a2d702f7b1","modified":1677066379806},{"_id":"public/share/tomcat-nowork.html","hash":"5870401ffe5abbdc2e60c7e6be0df6e42ceecff9","modified":1677066379806},{"_id":"public/study/react-test1.html","hash":"469d06fb4069073e1377b74312a8ce8b30d6281e","modified":1677066379806},{"_id":"public/wx/20190924.html","hash":"d4635e01dfc4bfd03331dbb518082457650e67a4","modified":1677066379806},{"_id":"public/ideas/list.html","hash":"80f45591a410280cac6690931709ec23cb929f6d","modified":1677066379806},{"_id":"public/wx/20190731.html","hash":"ebfcff4dba42524c9dfad258c4b4d67a74269167","modified":1677066379806},{"_id":"public/share/ios12-array-reverse.html","hash":"e319446081ccffcf01e5ea606a98a8045bf80dc1","modified":1677066379806},{"_id":"public/share/iOS11-fastclick-js.html","hash":"d8400c8255e53f77e7516a48910829558653f6b4","modified":1677066379806},{"_id":"public/translate/wait.html","hash":"7460445b79349d1b975459491ac4b2dc4849528d","modified":1677066379806},{"_id":"public/archives/2023/page/4/index.html","hash":"78f5cc55c6605076912225da0660fe860223043d","modified":1677066379807},{"_id":"public/archives/2023/01/page/4/index.html","hash":"ed746408a4b67a06e9cf2863e15919472e746c03","modified":1677066379807},{"_id":"public/today/20220208.html","hash":"35c88c7a5d9d2c14031a5d9893e8189a6612a186","modified":1675864910754},{"_id":"public/today/20220210.html","hash":"ba0669d4e1382a57dc842a8e029231eeea877ca5","modified":1675864656072},{"_id":"public/today/20220207.html","hash":"92a57d214eed60f62a1adff9b9489529b01b27fa","modified":1675864656072},{"_id":"public/today/20220206.html","hash":"5e1a1c8b5c70feda661867f8fbb8c14c174948b9","modified":1675864656072},{"_id":"public/today/20220209.html","hash":"4163b7c81a41e75b4094b3ab2128e1f29997ca1f","modified":1675864656072},{"_id":"public/today/20220211.html","hash":"af1cb5c4e70af376d0b9f935c94b6a0e4eced9de","modified":1675864656072},{"_id":"public/archives/2023/02/index.html","hash":"49544165ca568b60f1070e891ae834805606a4f6","modified":1677066379807},{"_id":"public/tags/技术分享/page/4/index.html","hash":"6ca4bc695ac1cb47234a81ac59e9640fb810a476","modified":1677066379808},{"_id":"public/tags/每日更新/page/4/index.html","hash":"601e5256bedd3703d62e39b5e22cc6be42a9e552","modified":1677066379808},{"_id":"public/img/alipay.jpg","hash":"bda816152f1d7e5e52755a079d196850e62d6c97","modified":1675864745944},{"_id":"source/_posts/lowcode/index.md","hash":"33d37c8c4447ed5d6224a4a2fce70b58ca5eb75e","modified":1676728148982},{"_id":"source/_posts/lowcode/sandbox.md","hash":"1e92bf90d3984806f06e0d2e86c1118f89ab656e","modified":1676206447461},{"_id":"source/_posts/translate/use-gpt3-auto-git-commit.md","hash":"23491b916eeb710983ae1ad7fbc8714365197c44","modified":1676377664530},{"_id":"source/_posts/today/20230103.md","hash":"43199ae5723d8b0734d9321e0c49d16df6cd47d7","modified":1673005165063},{"_id":"source/_posts/today/20230105.md","hash":"8248ab90d8ee93740ce027553ed243555b04104b","modified":1673005132268},{"_id":"source/_posts/today/20230104.md","hash":"f026c6f6e305856025d1569fc161d22f4193e709","modified":1673005152250},{"_id":"source/_posts/today/20230106.md","hash":"75c1e3377c0167a0f407ae89243ae39746a1f129","modified":1673015122991},{"_id":"source/_posts/today/20230108.md","hash":"c0b2477d0e6fa4c058a09bc0c3ba5c5a4c6195b4","modified":1673187801955},{"_id":"source/_posts/today/20230107.md","hash":"a97db8d888cdabd5da0920c8c4a8f4a04d88adb6","modified":1673101317419},{"_id":"source/_posts/today/20230110.md","hash":"023668c0a1dceee92bf5ab76deb1988ed695b607","modified":1674397085276},{"_id":"source/_posts/today/20230109.md","hash":"dbe44c369d70ba998f141c10c6e5b7a49f4630a2","modified":1673272020559},{"_id":"source/_posts/today/20230116.md","hash":"07dd763b4185faf57cede9f86167254cad41bb56","modified":1673882540566},{"_id":"source/_posts/today/20230111.md","hash":"9ee92aa9c877367ef0d55b2afd2179de4ea25173","modified":1676724318312},{"_id":"source/_posts/today/20230117.md","hash":"f957da85b5cce0ddec6ac9dfeac5696badca518a","modified":1674058405546},{"_id":"source/_posts/today/20230119.md","hash":"2544eeab4649b7a0f6cb144b00d0449e4dfd135a","modified":1674928586266},{"_id":"source/_posts/today/20230122.md","hash":"86df2772aa4229ef0cb9f1336f15754177d50a04","modified":1674928590263},{"_id":"source/_posts/today/20230124.md","hash":"d91a17efdf23654b631903cb963e5dc836e3c9ad","modified":1674985607797},{"_id":"source/_posts/today/20230131.md","hash":"c901d1f5974eddccc27ab295377e74eb1ffcb096","modified":1675321083831},{"_id":"source/_posts/today/20230129.md","hash":"c9d0d63080f17441ca009c44a6aaad3c824f5c0b","modified":1675089940163},{"_id":"source/_posts/today/20230208.md","hash":"1e21b34068d9fe98c17d9058baa0b162064e0079","modified":1675930917520},{"_id":"source/_posts/today/20230211.md","hash":"d3687a226eb23ca7505513fcf09bc4673cc71bd1","modified":1676118408461},{"_id":"source/_posts/today/20230209.md","hash":"6b19538d900305861590a16de3403a19a263d8cd","modified":1675953043918},{"_id":"source/_posts/today/20230212.md","hash":"99999af4f593f71222d394b6b1c789b1a984fe22","modified":1675919914057},{"_id":"source/_posts/today/20230128.md","hash":"af0abc9967ef2f62cc825c4154da80da25fb3c4b","modified":1676118017748},{"_id":"source/_posts/today/20230213.md","hash":"dcd40dfed6c89891e743949743a395c1a281f1e8","modified":1676340445227},{"_id":"source/_posts/today/20230214.md","hash":"9ed0741a1adceb79cbea76bfd88ceb479ae6fd1c","modified":1676118185360},{"_id":"source/_posts/today/20230215.md","hash":"453b89e05ae097ede74b5e60e9c846a99811857a","modified":1676888987750},{"_id":"source/_posts/today/20230216.md","hash":"83c8f985dc34f729040fc81046dde41ecc1464eb","modified":1676908560764},{"_id":"source/_posts/today/20230217.md","hash":"4b76dd4baf3bfef543b7d29985de8326dd7f648d","modified":1677065854740},{"_id":"source/_posts/today/20230218.md","hash":"a8582f3b1841ed48c0eaf71ee58d4f25f36c89fa","modified":1675863303070},{"_id":"source/_posts/lowcode/component.md","hash":"cf83f589302d8dae6ce3efb1f2b84dfa04f50eea","modified":1676294917860},{"_id":"source/_posts/today/20230219.md","hash":"a4bc5d0f0eed98974f34ea71e3f07dd9880c4edf","modified":1676898067048},{"_id":"source/_posts/ideas/20230215.md","hash":"7813bac80a42f1ec31002c0ac043949c5c23477f","modified":1676443568054},{"_id":"source/_posts/ideas/20230214.md","hash":"de2ce27048fba8df3365fbef70bd4b3ef4c3ee09","modified":1676381230323},{"_id":"source/_posts/today/20230220.md","hash":"41cdbf02fe1369473f7660cc959b547b4608dfeb","modified":1676296954662},{"_id":"source/_posts/today/20230221.md","hash":"d3687a226eb23ca7505513fcf09bc4673cc71bd1","modified":1676296996059},{"_id":"source/_posts/today/20230224.md","hash":"8cacfe6a79df8a862414b7a0798ab207dbecd1e5","modified":1676382553528},{"_id":"source/_posts/today/20230225.md","hash":"6c8475792141f7074c3c158b49d1280565c516ed","modified":1675238814889},{"_id":"source/_posts/today/20230223.md","hash":"9023bf7d23af77939b118d503bc6d6353e8bf631","modified":1676382086762},{"_id":"source/_posts/today/20230222.md","hash":"a66146f8df350b8bb886fb55b5a5c4b29d5994ec","modified":1676381869613},{"_id":"source/assets/drawio/lowcode.drawio","hash":"70a6e9f218cb2baf7f1307c5d793326ad41ebac5","modified":1676554601701},{"_id":"source/_posts/study/front-stack.md","hash":"183f9efaf78c8879a7ce6927345e2ba7b7119b32","modified":1676380594626},{"_id":"source/assets/img/idea-20230214-1.png","hash":"70e57fc740828852300c8f67ec78eefcdb2c85b0","modified":1676379356725},{"_id":"source/assets/img/idea-20230214-2.png","hash":"4a657fbec23a8b9924b19fb1905d346c14c02c6d","modified":1676379368152},{"_id":"source/assets/img/idea-20230214-3.png","hash":"3095c1f5b47425751865a5966ee5f7aced96a4b9","modified":1676379380290},{"_id":"public/translate/use-gpt3-auto-git-commit.html","hash":"2359e0845326140d7339ce4410acb68ccf3eaea5","modified":1677066379802},{"_id":"public/ideas/20230214.html","hash":"fb835722b944bb7e37f6b10d2232a26cde280436","modified":1677066379802},{"_id":"public/ideas/20230215.html","hash":"d13ebe8766d0fa48c52cda661d818e3f21aada1b","modified":1677066379802},{"_id":"public/lowcode/component.html","hash":"55e19d3a07cee7a37ce11770f08bb8bf275e93d7","modified":1677066379802},{"_id":"public/today/20230213.html","hash":"960c4f585ebc538882619b81068264523a0596c7","modified":1677066379802},{"_id":"public/today/20230208.html","hash":"af6cfd595ce07679ddc7aae796897ff859d868a4","modified":1677066379803},{"_id":"public/lowcode/sandbox.html","hash":"3145f88136929c2d32752258bec8d0df3a062b87","modified":1677066379803},{"_id":"public/today/20230131.html","hash":"d1b2d1d44fd1834826ef2d3ce0d70bea05715d19","modified":1677066379803},{"_id":"public/study/front-stack.html","hash":"e8f27d94b5f2911a738c5ef99779cb61945a2574","modified":1677066379802},{"_id":"public/today/20230129.html","hash":"5a68fcc8baf9884e00158b98599b8b7f5c3bd80f","modified":1677066379803},{"_id":"public/today/20230128.html","hash":"5fbbc7a1a3ce24bf29f71e809457589303a420af","modified":1677066379804},{"_id":"public/today/20230124.html","hash":"4157ecf57266f6b543651bc49a35ddf5a032c741","modified":1677066379804},{"_id":"public/lowcode/index.html","hash":"f54e4a8dc35a409309952e81f1b08bdb7b977bc5","modified":1677066379804},{"_id":"public/today/20230209.html","hash":"17d108f5bebe8e1532e3fbce05778e74541ce386","modified":1677066379803},{"_id":"public/today/20230122.html","hash":"bd56c7a53fb4a16701d13de7f42c845ef73771a2","modified":1677066379804},{"_id":"public/today/20230221.html","hash":"c109493b50b67a9e04217566db8fd7b11be0ebf2","modified":1677066379802},{"_id":"public/today/20230117.html","hash":"6fe983f6727e36eb4338891f6a5eec63bfe02d90","modified":1677066379805},{"_id":"public/today/20230119.html","hash":"1ea79a79a5d56f433b27bd1502080c7148aadb64","modified":1677066379805},{"_id":"public/today/20230116.html","hash":"0f45e43327ec26927c3b8af07e74af3c7cecd105","modified":1677066379805},{"_id":"public/today/20230111.html","hash":"1c7ff1cd5c71a4187c1fe7fd8a6917890d53ed58","modified":1677066379805},{"_id":"public/today/20230107.html","hash":"3cf627f4432661b3fe848cdeeb99d11df0e4ef7a","modified":1677066379805},{"_id":"public/today/20230215.html","hash":"acadf57a930b75377918f1dda45f09be460703c3","modified":1677066379802},{"_id":"public/today/20230106.html","hash":"debdb2e75c3a7452c1695624c00df3dc9bfefbaa","modified":1677066379805},{"_id":"public/today/20230110.html","hash":"6dbfffbc3a6a573899f09c2e6813661a95d4b658","modified":1677066379805},{"_id":"public/today/20230109.html","hash":"8b9e4e231c3082285a2f32a8dc25a18b7525cafb","modified":1677066379805},{"_id":"public/today/20230108.html","hash":"464581af49a1fd1f70e3bfa3a010477d8d1c2bf4","modified":1677066379805},{"_id":"public/today/20230217.html","hash":"c1f490b494fbf39277ba76233ded95616c8969e9","modified":1677066379802},{"_id":"public/today/20230216.html","hash":"2c0d692014eb63ec7b4da0ddb2086a79b868064f","modified":1677066379802},{"_id":"public/today/20230105.html","hash":"6d104fb862a1ae567ba98a0e436ad80eaaa48d03","modified":1677066379805},{"_id":"public/today/20230220.html","hash":"7b83f4e21904fb5602c46731ec22b6afbfdd8a14","modified":1677066379805},{"_id":"public/today/20230218.html","hash":"d5bbc87a9bf05956df4087c2148ec1ae863edb45","modified":1677066379805},{"_id":"public/today/20230219.html","hash":"e1eb96ac814b6d55efde263090f323a99ad9a8bf","modified":1677066379805},{"_id":"public/today/20230104.html","hash":"8ae37e7286bec532d8d73a04ef9542fd88a655b5","modified":1677066379806},{"_id":"public/today/20230103.html","hash":"fe3516836d79b09db47ca4cd68f8a3b267807265","modified":1677066379806},{"_id":"public/archives/2023/page/5/index.html","hash":"c4a7fe68100370f61686cf29eb47e8d61321713b","modified":1677066379807},{"_id":"public/archives/page/6/index.html","hash":"9ea81d60a8873eb48f8f1fc0dc0391b1950b685a","modified":1677066379807},{"_id":"public/page/5/index.html","hash":"409e7fcc92ded869bcb69cb3a2f9a7c02c6f4d98","modified":1677066379808},{"_id":"public/tags/低代码/index.html","hash":"d0eced8ffbca4e9454257fb09a2693d0d86dc885","modified":1676554636432},{"_id":"public/today/20230223.html","hash":"d6541015ee4b399efb5f41de671c18e9404da407","modified":1677066379803},{"_id":"public/today/20230222.html","hash":"d4c42c4a1f73fa7545c2a538571cf2bc76d9a120","modified":1677066379803},{"_id":"public/today/20230224.html","hash":"c10b047598bab06f1fd5696a80b1d61ff693e726","modified":1677066379802},{"_id":"public/today/20230225.html","hash":"fde5468f06dc32a27f744a4f35ced83d87f9ab4a","modified":1677066379805},{"_id":"public/archives/page/7/index.html","hash":"8eab4d79a93c4cb95f2460fa63c5e1089bbffc50","modified":1677066379807},{"_id":"public/archives/2023/page/6/index.html","hash":"6fd15b844960c8589e5effec51070c13a7fc9fee","modified":1677066379807},{"_id":"public/archives/2023/02/page/2/index.html","hash":"0fc4c5d1cf15b3da48bc8fd5938a59382c32cd47","modified":1677066379807},{"_id":"public/tags/技术分享/page/5/index.html","hash":"f6c55cec27df0f1cc4fb4170fe73d4d66ae60565","modified":1676554636437},{"_id":"public/assets/drawio/lowcode.drawio","hash":"70a6e9f218cb2baf7f1307c5d793326ad41ebac5","modified":1676554636437},{"_id":"public/assets/img/idea-20230214-1.png","hash":"70e57fc740828852300c8f67ec78eefcdb2c85b0","modified":1676554636451},{"_id":"public/assets/img/idea-20230214-2.png","hash":"4a657fbec23a8b9924b19fb1905d346c14c02c6d","modified":1676554636452},{"_id":"public/assets/img/idea-20230214-3.png","hash":"3095c1f5b47425751865a5966ee5f7aced96a4b9","modified":1676554636453},{"_id":"source/_posts/ideas/20230218.md","hash":"f166d27b95aa521216fb66e3e82189d540f4c958","modified":1676896587433},{"_id":"source/_posts/ideas/20230217.md","hash":"0b5ed0cbf5ecab8904811ec9486d79c0783dfc61","modified":1676618877293},{"_id":"source/_posts/translate/nuxt-next-nest-diff.md","hash":"78d8c627910b8a283796bac15d92612d4c339415","modified":1676723895005},{"_id":"source/assets/img/20230216-3.png","hash":"2df8f61b2af765c8a76a339160aaed90b341371f","modified":1676908404464},{"_id":"source/assets/img/20230215.png","hash":"d8e4c0a83997d45eac170b13c0d39546298a5f59","modified":1676888469971},{"_id":"source/assets/img/20230216-1.jpeg","hash":"031928e079d459a346f25ed9f21ef71b193cb532","modified":1676908018296},{"_id":"source/assets/img/20230216-2.png","hash":"78481b54d007764fd76a10a37b4f669ade50e830","modified":1676908259151},{"_id":"public/ideas/20230218.html","hash":"83101334ada1476e99b5c8fa41f3b00a6243d2f1","modified":1677066379801},{"_id":"public/ideas/20230217.html","hash":"2f8f89fe801a87c0aa7607e4d495db38b8247acf","modified":1677066379802},{"_id":"public/translate/nuxt-next-nest-diff.html","hash":"94af300bf0283437424c4c20b24c7883a54ed1e8","modified":1677066379802},{"_id":"public/archives/2023/02/page/3/index.html","hash":"1369a607bee906e424ec77171141aa1de214ef99","modified":1677066379807},{"_id":"public/page/6/index.html","hash":"b05dfbb2df43668329e0096208d05b92b2ed87c2","modified":1677066379808}],"Category":[],"Data":[],"Page":[{"layout":"false","comments":0,"_content":"<html>\n<head>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://leyar.me\" homePageName=\"返回主页\"></script>\n</body>\n</html>","source":"404.md","raw":"---\nlayout: false \ncomments: false\npermalink: /404.html\n---\n<html>\n<head>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://leyar.me\" homePageName=\"返回主页\"></script>\n</body>\n</html>","date":"2022-01-05T13:17:31.961Z","updated":"2019-09-03T13:36:56.573Z","path":"/404.html","title":"","_id":"cldikhjz60000wspc4t9d9txd","content":"<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://leyar.me\" homepagename=\"返回主页\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://leyar.me\" homepagename=\"返回主页\"></script>\n</body>\n</html>"}],"Post":[{"title":"奇思妙想录","date":"2019-09-03T13:51:01.000Z","_content":"\n# 2019-09-03\n\n## 一个智能识别语音和输出的白板软件引擎\n功能描述：\n- 通过人脸标识用户信息，得到当前输出用户\n- 通过语音识别输出用户所描述内容\n- 通过语义归类总结内容\n- 通过流程图或思维导图输出最终白板任务图\n\n<!-- more -->\n\n# 2019-09-01\n\n## npm包评价系统\n功能描述：\n- 通过cnpm或taobao搭建公有的npm包\n- 筛选有github开源仓库\n- 通过github的star数进行排名\n- 增加类似豆瓣评分和评价系统\n","source":"_posts/ideas/list.md","raw":"---\ntitle: 奇思妙想录\ndate: 2019-09-03 21:51:01\ntags:\n    - 奇思妙想\n---\n\n# 2019-09-03\n\n## 一个智能识别语音和输出的白板软件引擎\n功能描述：\n- 通过人脸标识用户信息，得到当前输出用户\n- 通过语音识别输出用户所描述内容\n- 通过语义归类总结内容\n- 通过流程图或思维导图输出最终白板任务图\n\n<!-- more -->\n\n# 2019-09-01\n\n## npm包评价系统\n功能描述：\n- 通过cnpm或taobao搭建公有的npm包\n- 筛选有github开源仓库\n- 通过github的star数进行排名\n- 增加类似豆瓣评分和评价系统\n","slug":"ideas/list","published":1,"updated":"2019-09-03T13:57:04.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk5h0001wspcw16wrmt2","content":"<h1 id=\"2019-09-03\"><a href=\"#2019-09-03\" class=\"headerlink\" title=\"2019-09-03\"></a>2019-09-03</h1><h2 id=\"一个智能识别语音和输出的白板软件引擎\"><a href=\"#一个智能识别语音和输出的白板软件引擎\" class=\"headerlink\" title=\"一个智能识别语音和输出的白板软件引擎\"></a>一个智能识别语音和输出的白板软件引擎</h2><p>功能描述：</p>\n<ul>\n<li>通过人脸标识用户信息，得到当前输出用户</li>\n<li>通过语音识别输出用户所描述内容</li>\n<li>通过语义归类总结内容</li>\n<li>通过流程图或思维导图输出最终白板任务图</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"2019-09-01\"><a href=\"#2019-09-01\" class=\"headerlink\" title=\"2019-09-01\"></a>2019-09-01</h1><h2 id=\"npm包评价系统\"><a href=\"#npm包评价系统\" class=\"headerlink\" title=\"npm包评价系统\"></a>npm包评价系统</h2><p>功能描述：</p>\n<ul>\n<li>通过cnpm或taobao搭建公有的npm包</li>\n<li>筛选有github开源仓库</li>\n<li>通过github的star数进行排名</li>\n<li>增加类似豆瓣评分和评价系统</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"2019-09-03\"><a href=\"#2019-09-03\" class=\"headerlink\" title=\"2019-09-03\"></a>2019-09-03</h1><h2 id=\"一个智能识别语音和输出的白板软件引擎\"><a href=\"#一个智能识别语音和输出的白板软件引擎\" class=\"headerlink\" title=\"一个智能识别语音和输出的白板软件引擎\"></a>一个智能识别语音和输出的白板软件引擎</h2><p>功能描述：</p>\n<ul>\n<li>通过人脸标识用户信息，得到当前输出用户</li>\n<li>通过语音识别输出用户所描述内容</li>\n<li>通过语义归类总结内容</li>\n<li>通过流程图或思维导图输出最终白板任务图</li>\n</ul>","more":"<h1 id=\"2019-09-01\"><a href=\"#2019-09-01\" class=\"headerlink\" title=\"2019-09-01\"></a>2019-09-01</h1><h2 id=\"npm包评价系统\"><a href=\"#npm包评价系统\" class=\"headerlink\" title=\"npm包评价系统\"></a>npm包评价系统</h2><p>功能描述：</p>\n<ul>\n<li>通过cnpm或taobao搭建公有的npm包</li>\n<li>筛选有github开源仓库</li>\n<li>通过github的star数进行排名</li>\n<li>增加类似豆瓣评分和评价系统</li>\n</ul>"},{"title":"有趣的工具收集","date":"2023-01-20T13:51:01.000Z","_content":"\n# Deprank js重要性排名\n\n一个 JS 工具，按照重要性对本项目的所有脚本进行排序。原理是计算依赖关系，被依赖最多的脚本最重要。\n\n官网：[Deprank](https://github.com/codemix/deprank)\n\n例子如下：\n\n```\n| Filename               | Lines | Dependents | PageRank |\n----------------------------------------------------------\n| fixtures/core.js       | 3     | 1          | 0.284098 |\n| fixtures/utils.js      | 4     | 3          | 0.268437 |\n| fixtures/user/user.js  | 4     | 1          | 0.132253 |\n| fixtures/todo.js       | 6     | 1          | 0.089796 |\n| fixtures/user/index.js | 1     | 1          | 0.089796 |\n| fixtures/concepts.js   | 4     | 1          | 0.079694 |\n| fixtures/index.js      | 4     | 0          | 0.055926 |\n```\n\n<!-- more -->\n\n# FFmpeg.guide流程图生成FFmpeg命令\n\n一个图形界面，用户拖曳生成线框，表示视频处理的各种命令节点。这个软件会根据节点线框，生成对应的 FFmpeg 命令。\n\n官网：[FFmpeg.guide](https://ffmpeg.guide/)\n\n![](https://camo.githubusercontent.com/88f4911c4947e769f79adb3f3d8133015be0ae4b1c46be98f0faa9f93454b60c/68747470733a2f2f63646e2e6265656b6b612e636f6d2f626c6f67696d672f61737365742f3230323231312f6267323032323131303331342e77656270)\n\n# blurhash 生成模糊缩略图的工具\n\n这个工具可以提取图片的颜色分布，生成一个哈希字符串。网页就可以用这个哈希，生成图片的模糊缩略图。\n\n官网：[blurhash](https://github.com/woltapp/blurhash)\n\njs应用:[https://github.com/Dens49/blurhash-js](https://github.com/Dens49/blurhash-js)\n\n例子如下：\n\n<img src=\"https://blurha.sh/12c2aca29ea896a628be.jpg\" width = \"269\" height = \"173\"/>\n<img src=\"/assets/img/20230120-idea.png\"  width = \"269\" height = \"173\"/>\n\n\n# iconbolt 免费svg icon网站\n有点类似阿里的iconfont，但是这个免费的，不需要登录直接使用。\n\n[iconbolt](https://www.iconbolt.com/)","source":"_posts/ideas/20230120.md","raw":"---\ntitle: 有趣的工具收集\ndate: 2023-01-20 21:51:01\ntags:\n    - 奇思妙想\n---\n\n# Deprank js重要性排名\n\n一个 JS 工具，按照重要性对本项目的所有脚本进行排序。原理是计算依赖关系，被依赖最多的脚本最重要。\n\n官网：[Deprank](https://github.com/codemix/deprank)\n\n例子如下：\n\n```\n| Filename               | Lines | Dependents | PageRank |\n----------------------------------------------------------\n| fixtures/core.js       | 3     | 1          | 0.284098 |\n| fixtures/utils.js      | 4     | 3          | 0.268437 |\n| fixtures/user/user.js  | 4     | 1          | 0.132253 |\n| fixtures/todo.js       | 6     | 1          | 0.089796 |\n| fixtures/user/index.js | 1     | 1          | 0.089796 |\n| fixtures/concepts.js   | 4     | 1          | 0.079694 |\n| fixtures/index.js      | 4     | 0          | 0.055926 |\n```\n\n<!-- more -->\n\n# FFmpeg.guide流程图生成FFmpeg命令\n\n一个图形界面，用户拖曳生成线框，表示视频处理的各种命令节点。这个软件会根据节点线框，生成对应的 FFmpeg 命令。\n\n官网：[FFmpeg.guide](https://ffmpeg.guide/)\n\n![](https://camo.githubusercontent.com/88f4911c4947e769f79adb3f3d8133015be0ae4b1c46be98f0faa9f93454b60c/68747470733a2f2f63646e2e6265656b6b612e636f6d2f626c6f67696d672f61737365742f3230323231312f6267323032323131303331342e77656270)\n\n# blurhash 生成模糊缩略图的工具\n\n这个工具可以提取图片的颜色分布，生成一个哈希字符串。网页就可以用这个哈希，生成图片的模糊缩略图。\n\n官网：[blurhash](https://github.com/woltapp/blurhash)\n\njs应用:[https://github.com/Dens49/blurhash-js](https://github.com/Dens49/blurhash-js)\n\n例子如下：\n\n<img src=\"https://blurha.sh/12c2aca29ea896a628be.jpg\" width = \"269\" height = \"173\"/>\n<img src=\"/assets/img/20230120-idea.png\"  width = \"269\" height = \"173\"/>\n\n\n# iconbolt 免费svg icon网站\n有点类似阿里的iconfont，但是这个免费的，不需要登录直接使用。\n\n[iconbolt](https://www.iconbolt.com/)","slug":"ideas/20230120","published":1,"updated":"2023-01-20T14:48:39.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk690002wspco34267kw","content":"<h1 id=\"Deprank-js重要性排名\"><a href=\"#Deprank-js重要性排名\" class=\"headerlink\" title=\"Deprank js重要性排名\"></a>Deprank js重要性排名</h1><p>一个 JS 工具，按照重要性对本项目的所有脚本进行排序。原理是计算依赖关系，被依赖最多的脚本最重要。</p>\n<p>官网：<a href=\"https://github.com/codemix/deprank\" target=\"_blank\" rel=\"noopener\">Deprank</a></p>\n<p>例子如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Filename               | Lines | Dependents | PageRank |</span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">| fixtures/core.js       | 3     | 1          | 0.284098 |</span><br><span class=\"line\">| fixtures/utils.js      | 4     | 3          | 0.268437 |</span><br><span class=\"line\">| fixtures/user/user.js  | 4     | 1          | 0.132253 |</span><br><span class=\"line\">| fixtures/todo.js       | 6     | 1          | 0.089796 |</span><br><span class=\"line\">| fixtures/user/index.js | 1     | 1          | 0.089796 |</span><br><span class=\"line\">| fixtures/concepts.js   | 4     | 1          | 0.079694 |</span><br><span class=\"line\">| fixtures/index.js      | 4     | 0          | 0.055926 |</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"FFmpeg-guide流程图生成FFmpeg命令\"><a href=\"#FFmpeg-guide流程图生成FFmpeg命令\" class=\"headerlink\" title=\"FFmpeg.guide流程图生成FFmpeg命令\"></a>FFmpeg.guide流程图生成FFmpeg命令</h1><p>一个图形界面，用户拖曳生成线框，表示视频处理的各种命令节点。这个软件会根据节点线框，生成对应的 FFmpeg 命令。</p>\n<p>官网：<a href=\"https://ffmpeg.guide/\" target=\"_blank\" rel=\"noopener\">FFmpeg.guide</a></p>\n<p><img src=\"https://camo.githubusercontent.com/88f4911c4947e769f79adb3f3d8133015be0ae4b1c46be98f0faa9f93454b60c/68747470733a2f2f63646e2e6265656b6b612e636f6d2f626c6f67696d672f61737365742f3230323231312f6267323032323131303331342e77656270\" alt></p>\n<h1 id=\"blurhash-生成模糊缩略图的工具\"><a href=\"#blurhash-生成模糊缩略图的工具\" class=\"headerlink\" title=\"blurhash 生成模糊缩略图的工具\"></a>blurhash 生成模糊缩略图的工具</h1><p>这个工具可以提取图片的颜色分布，生成一个哈希字符串。网页就可以用这个哈希，生成图片的模糊缩略图。</p>\n<p>官网：<a href=\"https://github.com/woltapp/blurhash\" target=\"_blank\" rel=\"noopener\">blurhash</a></p>\n<p>js应用:<a href=\"https://github.com/Dens49/blurhash-js\" target=\"_blank\" rel=\"noopener\">https://github.com/Dens49/blurhash-js</a></p>\n<p>例子如下：</p>\n<img src=\"https://blurha.sh/12c2aca29ea896a628be.jpg\" width=\"269\" height=\"173\">\n<img src=\"/assets/img/20230120-idea.png\" width=\"269\" height=\"173\">\n\n\n<h1 id=\"iconbolt-免费svg-icon网站\"><a href=\"#iconbolt-免费svg-icon网站\" class=\"headerlink\" title=\"iconbolt 免费svg icon网站\"></a>iconbolt 免费svg icon网站</h1><p>有点类似阿里的iconfont，但是这个免费的，不需要登录直接使用。</p>\n<p><a href=\"https://www.iconbolt.com/\" target=\"_blank\" rel=\"noopener\">iconbolt</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Deprank-js重要性排名\"><a href=\"#Deprank-js重要性排名\" class=\"headerlink\" title=\"Deprank js重要性排名\"></a>Deprank js重要性排名</h1><p>一个 JS 工具，按照重要性对本项目的所有脚本进行排序。原理是计算依赖关系，被依赖最多的脚本最重要。</p>\n<p>官网：<a href=\"https://github.com/codemix/deprank\" target=\"_blank\" rel=\"noopener\">Deprank</a></p>\n<p>例子如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Filename               | Lines | Dependents | PageRank |</span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\">| fixtures/core.js       | 3     | 1          | 0.284098 |</span><br><span class=\"line\">| fixtures/utils.js      | 4     | 3          | 0.268437 |</span><br><span class=\"line\">| fixtures/user/user.js  | 4     | 1          | 0.132253 |</span><br><span class=\"line\">| fixtures/todo.js       | 6     | 1          | 0.089796 |</span><br><span class=\"line\">| fixtures/user/index.js | 1     | 1          | 0.089796 |</span><br><span class=\"line\">| fixtures/concepts.js   | 4     | 1          | 0.079694 |</span><br><span class=\"line\">| fixtures/index.js      | 4     | 0          | 0.055926 |</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"FFmpeg-guide流程图生成FFmpeg命令\"><a href=\"#FFmpeg-guide流程图生成FFmpeg命令\" class=\"headerlink\" title=\"FFmpeg.guide流程图生成FFmpeg命令\"></a>FFmpeg.guide流程图生成FFmpeg命令</h1><p>一个图形界面，用户拖曳生成线框，表示视频处理的各种命令节点。这个软件会根据节点线框，生成对应的 FFmpeg 命令。</p>\n<p>官网：<a href=\"https://ffmpeg.guide/\" target=\"_blank\" rel=\"noopener\">FFmpeg.guide</a></p>\n<p><img src=\"https://camo.githubusercontent.com/88f4911c4947e769f79adb3f3d8133015be0ae4b1c46be98f0faa9f93454b60c/68747470733a2f2f63646e2e6265656b6b612e636f6d2f626c6f67696d672f61737365742f3230323231312f6267323032323131303331342e77656270\" alt></p>\n<h1 id=\"blurhash-生成模糊缩略图的工具\"><a href=\"#blurhash-生成模糊缩略图的工具\" class=\"headerlink\" title=\"blurhash 生成模糊缩略图的工具\"></a>blurhash 生成模糊缩略图的工具</h1><p>这个工具可以提取图片的颜色分布，生成一个哈希字符串。网页就可以用这个哈希，生成图片的模糊缩略图。</p>\n<p>官网：<a href=\"https://github.com/woltapp/blurhash\" target=\"_blank\" rel=\"noopener\">blurhash</a></p>\n<p>js应用:<a href=\"https://github.com/Dens49/blurhash-js\" target=\"_blank\" rel=\"noopener\">https://github.com/Dens49/blurhash-js</a></p>\n<p>例子如下：</p>\n<img src=\"https://blurha.sh/12c2aca29ea896a628be.jpg\" width=\"269\" height=\"173\">\n<img src=\"/assets/img/20230120-idea.png\" width=\"269\" height=\"173\">\n\n\n<h1 id=\"iconbolt-免费svg-icon网站\"><a href=\"#iconbolt-免费svg-icon网站\" class=\"headerlink\" title=\"iconbolt 免费svg icon网站\"></a>iconbolt 免费svg icon网站</h1><p>有点类似阿里的iconfont，但是这个免费的，不需要登录直接使用。</p>\n<p><a href=\"https://www.iconbolt.com/\" target=\"_blank\" rel=\"noopener\">iconbolt</a></p>"},{"title":"ios12 array.reverse问题","date":"2018-08-19T13:21:01.000Z","_content":"\n# 问题描述\niOS12发布之后，在测试中发现一个关于Array.reverse的问题，代码如下：\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n    <title>iOS 12 Safari bugs</title>\n    <script type=\"text/javascript\">\n    window.addEventListener(\"load\", function ()\n    {\n        let arr = [1, 2, 3, 4, 5];\n        alert(arr.join());\n\n        document.querySelector(\"button\").addEventListener(\"click\", function ()\n        {\n            arr.reverse();\n        });\n    });\n    </script>\n</head>\n<body>\n    <button>Array.reverse()</button>\n    <p style=\"color:red;\">test: click button and refresh page, code:</p>\n</body>\n</html>\n```\n问题描述：第一次进入刷新alert:`1,2,3,4`，第二次刷新就一直为alert`4,3,2,1`。\n\n# demo演示\n[未修复的demo](https://fanmingfei.github.io/array-reverse-ios12/origin.html)\n[已修复的demo](https://fanmingfei.github.io/array-reverse-ios12/fixed.html)\n\n<!-- more -->\n\n# 修复方法\n原理就是判断是否为iOS12版本，重写`Array.prototype.reverse`方法，代码如下：\n```\n(function(){\n    var ua = navigator.userAgent;\n    if (!ua.match(/(iPhone|iPad|iPod)/)) return;\n    var matched = ua.match(/OS ([\\d_\\.]+) like Mac OS X/);\n    if (!matched || !matched[1]) return;\n    if (matched[1].indexOf('12') !== 0) return;\n    //以上判断是否为iOS12版本\n    \n    //以下为修复代码\n    Array.prototype._reverse = Array.prototype.reverse;\n    //重写reverse方法\n    Array.prototype.reverse = function reverse() {\n        //重新设置数组长度 从而避免reverse方法改变数据后被缓存\n        if (Array.isArray(this)) this.length = this.length;\n        return Array.prototype._reverse.call(this);\n    }\n    var nonenum = {\n        enumerable: false\n    };\n    //设置Array原型链中的reverse方法不可枚举\n    Object.defineProperties(Array.prototype, {\n        _reverse: nonenum,\n        reverse: nonenum,\n    });\n})()\n```\n希望大家不要遇到该类生产问题咯！(否则你都不知道哪里出错了~~)\n\n# 参考资料\n-  [stackoverflow——iOS 12 Array.Reverse的Bug](https://stackoverflow.com/questions/52390368/array-state-will-be-cached-in-ios-12-safari-is-bug-or-feature/52392901#52392901)\n- [github中阿里同事——如何修复iOS12 Array.reverse的bug方案](https://github.com/fanmingfei/array-reverse-ios12/)\n","source":"_posts/share/ios12-array-reverse.md","raw":"---\ntitle: ios12 array.reverse问题\ndate: 2018-08-19 21:21:01\ntags:\n    - 技术分享\n---\n\n# 问题描述\niOS12发布之后，在测试中发现一个关于Array.reverse的问题，代码如下：\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n    <title>iOS 12 Safari bugs</title>\n    <script type=\"text/javascript\">\n    window.addEventListener(\"load\", function ()\n    {\n        let arr = [1, 2, 3, 4, 5];\n        alert(arr.join());\n\n        document.querySelector(\"button\").addEventListener(\"click\", function ()\n        {\n            arr.reverse();\n        });\n    });\n    </script>\n</head>\n<body>\n    <button>Array.reverse()</button>\n    <p style=\"color:red;\">test: click button and refresh page, code:</p>\n</body>\n</html>\n```\n问题描述：第一次进入刷新alert:`1,2,3,4`，第二次刷新就一直为alert`4,3,2,1`。\n\n# demo演示\n[未修复的demo](https://fanmingfei.github.io/array-reverse-ios12/origin.html)\n[已修复的demo](https://fanmingfei.github.io/array-reverse-ios12/fixed.html)\n\n<!-- more -->\n\n# 修复方法\n原理就是判断是否为iOS12版本，重写`Array.prototype.reverse`方法，代码如下：\n```\n(function(){\n    var ua = navigator.userAgent;\n    if (!ua.match(/(iPhone|iPad|iPod)/)) return;\n    var matched = ua.match(/OS ([\\d_\\.]+) like Mac OS X/);\n    if (!matched || !matched[1]) return;\n    if (matched[1].indexOf('12') !== 0) return;\n    //以上判断是否为iOS12版本\n    \n    //以下为修复代码\n    Array.prototype._reverse = Array.prototype.reverse;\n    //重写reverse方法\n    Array.prototype.reverse = function reverse() {\n        //重新设置数组长度 从而避免reverse方法改变数据后被缓存\n        if (Array.isArray(this)) this.length = this.length;\n        return Array.prototype._reverse.call(this);\n    }\n    var nonenum = {\n        enumerable: false\n    };\n    //设置Array原型链中的reverse方法不可枚举\n    Object.defineProperties(Array.prototype, {\n        _reverse: nonenum,\n        reverse: nonenum,\n    });\n})()\n```\n希望大家不要遇到该类生产问题咯！(否则你都不知道哪里出错了~~)\n\n# 参考资料\n-  [stackoverflow——iOS 12 Array.Reverse的Bug](https://stackoverflow.com/questions/52390368/array-state-will-be-cached-in-ios-12-safari-is-bug-or-feature/52392901#52392901)\n- [github中阿里同事——如何修复iOS12 Array.reverse的bug方案](https://github.com/fanmingfei/array-reverse-ios12/)\n","slug":"share/ios12-array-reverse","published":1,"updated":"2019-09-03T13:29:19.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk6g0004wspckaf4dmgc","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>iOS12发布之后，在测试中发现一个关于Array.reverse的问题，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;iOS 12 Safari bugs&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    window.addEventListener(&quot;load&quot;, function ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        let arr = [1, 2, 3, 4, 5];</span><br><span class=\"line\">        alert(arr.join());</span><br><span class=\"line\"></span><br><span class=\"line\">        document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;, function ()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr.reverse();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button&gt;Array.reverse()&lt;/button&gt;</span><br><span class=\"line\">    &lt;p style=&quot;color:red;&quot;&gt;test: click button and refresh page, code:&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>问题描述：第一次进入刷新alert:<code>1,2,3,4</code>，第二次刷新就一直为alert<code>4,3,2,1</code>。</p>\n<h1 id=\"demo演示\"><a href=\"#demo演示\" class=\"headerlink\" title=\"demo演示\"></a>demo演示</h1><p><a href=\"https://fanmingfei.github.io/array-reverse-ios12/origin.html\" target=\"_blank\" rel=\"noopener\">未修复的demo</a><br><a href=\"https://fanmingfei.github.io/array-reverse-ios12/fixed.html\" target=\"_blank\" rel=\"noopener\">已修复的demo</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h1><p>原理就是判断是否为iOS12版本，重写<code>Array.prototype.reverse</code>方法，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var ua = navigator.userAgent;</span><br><span class=\"line\">    if (!ua.match(/(iPhone|iPad|iPod)/)) return;</span><br><span class=\"line\">    var matched = ua.match(/OS ([\\d_\\.]+) like Mac OS X/);</span><br><span class=\"line\">    if (!matched || !matched[1]) return;</span><br><span class=\"line\">    if (matched[1].indexOf(&apos;12&apos;) !== 0) return;</span><br><span class=\"line\">    //以上判断是否为iOS12版本</span><br><span class=\"line\">    </span><br><span class=\"line\">    //以下为修复代码</span><br><span class=\"line\">    Array.prototype._reverse = Array.prototype.reverse;</span><br><span class=\"line\">    //重写reverse方法</span><br><span class=\"line\">    Array.prototype.reverse = function reverse() &#123;</span><br><span class=\"line\">        //重新设置数组长度 从而避免reverse方法改变数据后被缓存</span><br><span class=\"line\">        if (Array.isArray(this)) this.length = this.length;</span><br><span class=\"line\">        return Array.prototype._reverse.call(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var nonenum = &#123;</span><br><span class=\"line\">        enumerable: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //设置Array原型链中的reverse方法不可枚举</span><br><span class=\"line\">    Object.defineProperties(Array.prototype, &#123;</span><br><span class=\"line\">        _reverse: nonenum,</span><br><span class=\"line\">        reverse: nonenum,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>希望大家不要遇到该类生产问题咯！(否则你都不知道哪里出错了~~)</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/52390368/array-state-will-be-cached-in-ios-12-safari-is-bug-or-feature/52392901#52392901\" target=\"_blank\" rel=\"noopener\">stackoverflow——iOS 12 Array.Reverse的Bug</a></li>\n<li><a href=\"https://github.com/fanmingfei/array-reverse-ios12/\" target=\"_blank\" rel=\"noopener\">github中阿里同事——如何修复iOS12 Array.reverse的bug方案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>iOS12发布之后，在测试中发现一个关于Array.reverse的问题，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;iOS 12 Safari bugs&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    window.addEventListener(&quot;load&quot;, function ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        let arr = [1, 2, 3, 4, 5];</span><br><span class=\"line\">        alert(arr.join());</span><br><span class=\"line\"></span><br><span class=\"line\">        document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;, function ()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arr.reverse();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button&gt;Array.reverse()&lt;/button&gt;</span><br><span class=\"line\">    &lt;p style=&quot;color:red;&quot;&gt;test: click button and refresh page, code:&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>问题描述：第一次进入刷新alert:<code>1,2,3,4</code>，第二次刷新就一直为alert<code>4,3,2,1</code>。</p>\n<h1 id=\"demo演示\"><a href=\"#demo演示\" class=\"headerlink\" title=\"demo演示\"></a>demo演示</h1><p><a href=\"https://fanmingfei.github.io/array-reverse-ios12/origin.html\" target=\"_blank\" rel=\"noopener\">未修复的demo</a><br><a href=\"https://fanmingfei.github.io/array-reverse-ios12/fixed.html\" target=\"_blank\" rel=\"noopener\">已修复的demo</a></p>","more":"<h1 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h1><p>原理就是判断是否为iOS12版本，重写<code>Array.prototype.reverse</code>方法，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var ua = navigator.userAgent;</span><br><span class=\"line\">    if (!ua.match(/(iPhone|iPad|iPod)/)) return;</span><br><span class=\"line\">    var matched = ua.match(/OS ([\\d_\\.]+) like Mac OS X/);</span><br><span class=\"line\">    if (!matched || !matched[1]) return;</span><br><span class=\"line\">    if (matched[1].indexOf(&apos;12&apos;) !== 0) return;</span><br><span class=\"line\">    //以上判断是否为iOS12版本</span><br><span class=\"line\">    </span><br><span class=\"line\">    //以下为修复代码</span><br><span class=\"line\">    Array.prototype._reverse = Array.prototype.reverse;</span><br><span class=\"line\">    //重写reverse方法</span><br><span class=\"line\">    Array.prototype.reverse = function reverse() &#123;</span><br><span class=\"line\">        //重新设置数组长度 从而避免reverse方法改变数据后被缓存</span><br><span class=\"line\">        if (Array.isArray(this)) this.length = this.length;</span><br><span class=\"line\">        return Array.prototype._reverse.call(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var nonenum = &#123;</span><br><span class=\"line\">        enumerable: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //设置Array原型链中的reverse方法不可枚举</span><br><span class=\"line\">    Object.defineProperties(Array.prototype, &#123;</span><br><span class=\"line\">        _reverse: nonenum,</span><br><span class=\"line\">        reverse: nonenum,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>希望大家不要遇到该类生产问题咯！(否则你都不知道哪里出错了~~)</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/52390368/array-state-will-be-cached-in-ios-12-safari-is-bug-or-feature/52392901#52392901\" target=\"_blank\" rel=\"noopener\">stackoverflow——iOS 12 Array.Reverse的Bug</a></li>\n<li><a href=\"https://github.com/fanmingfei/array-reverse-ios12/\" target=\"_blank\" rel=\"noopener\">github中阿里同事——如何修复iOS12 Array.reverse的bug方案</a></li>\n</ul>"},{"title":"如何用自定义钩子重构 React 组件","date":"2017-09-03T13:51:01.000Z","_content":"\n# 参考资料\n\n[如何用自定义钩子重构 React 组件](https://codescene.com/engineering-blog/refactoring-components-in-react-with-custom-hooks)","source":"_posts/translate/wait.md","raw":"---\ntitle: 如何用自定义钩子重构 React 组件\ndate: 2017-09-03 21:51:01\ntags:\n    - 翻译文章\n    - hide\n---\n\n# 参考资料\n\n[如何用自定义钩子重构 React 组件](https://codescene.com/engineering-blog/refactoring-components-in-react-with-custom-hooks)","slug":"translate/wait","published":1,"updated":"2023-01-20T14:31:33.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk6h0005wspcvyepazkg","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://codescene.com/engineering-blog/refactoring-components-in-react-with-custom-hooks\" target=\"_blank\" rel=\"noopener\">如何用自定义钩子重构 React 组件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://codescene.com/engineering-blog/refactoring-components-in-react-with-custom-hooks\" target=\"_blank\" rel=\"noopener\">如何用自定义钩子重构 React 组件</a></p>\n"},{"title":"周二技术周刊 20190731期","date":"2019-07-31T13:03:43.000Z","description":"2019年上半年已经结束了，你还记得年初定的计划吗？","_content":"![好看的图片](https://pic.qqtn.com/up/2018-6/2018661629543719.jpg)\n# 一、技术知识\n## 1.1 蚂蚁金服前端框架和工程化实践\n作者：[阿里-云谦](https://github.com/sorrycc)\n简介：\n讲述阿里Umi 和 Bigfish框架的发展历史，已经作者技术团队在里面做的哪些事情。\n\n<!-- more -->\n\n### 总结\n**框架为什么能够成功的原因？**\n- 人：给使用者成就感和绩效——插件体系，插件体系是如何搭建的具体看原文详细介绍。\n- 业务和流程：简化业务和流程，让程序员不必要浪费太多时间上上面。\n- 开源：开源做地好，也更容易获得内部同学的认可。\n\n**资产市场分了四级:**\n- 组件，指通用组件，就是 antd，在下半年将要发布的 antd@4 里，我们会陆续提取更多通用组件到 antd 中。\n- 业务组件，不能提取通用组件的，我们会提到内部统一的业务组件仓库中。\n- 区块，由组件组成，可以想象成代码片段。\n- 页面模板，由区块组成\n\n>后续要做配置化方案，可以参考一下。\n\n**微前端方案**\n- 相对狭义的理解，是一个解决多套技术栈共存的方案，比如首页用 jQuery，订单页用 React，客户系统用 Vue。\n- 对微前端的理解是，他不仅是个技术方案，更是个解决流程、组织架构等问题的方案。\n\n>已有开源方案，乾坤:https://github.com/umijs/qiankun\n\n**前端永远不能忘记的：**\n- 优化：构建优化，性能优化等\n- 测试+监控：单测、UI 测试、e2e 测试和集成测试，基本方案是基于 Jest + test-react-library + Puppeteer\n\n***阅读时间：15~20分钟***\n\n[点击原文阅读→](https://mp.weixin.qq.com/s/6-yjR_CsHaWUI8YqLK25rA)\n\n## 1.2 哪些技术会决定前端开发者的未来发展？\n\n简介：\n大家有没有想过，通过学习Flutter，你的技术就提升了吗？\n\n很多人第一反应是『当然了，学了一门新技术，学了一门新语言，难道技术不是提升了吗？』。\n\n但是我觉得并没有，我其实依然在原地打转，**一个Java开发者学会了用Ruby增删改查并不能代表能力提高了，一个前端开发者用RN或者Flutter开发了简单的APP也不能说明水平提高了，只不过是用另一种语言再写了一遍UI而已，会用三种框架写页面，并不是什么高技术含量的事情，会三种不如深入一种。**\n\n##总结\n**归纳两点**\n\n- 我们有时候看似在学很多技术，其实这些技术并不能提升你，但是给你造成了『我学了新东西能力提升了』的自我感觉偏差\n- 不要盲目追寻社区的热点，很可能捡了芝麻丢了西瓜，要仔细思考这门技术对于你本身是否有提升，而不是被布道师们『洗脑』\n\n**处于趋势中的技术点**\n- `Flutter`，正是新框架，可以学习，但不要认为你的技术有了新的发展。\n- `TypeScript`，会越来越多人用，因为其规范JavaScript的语法，降低很多不必要的类型错误，以及更多重大开源项目使用与支持。\n- `图形技术`，将是未来所有前端程序员的痛点之一，进阶技术知识。\n- `编辑器领域技术`，包括但不限于：代码编辑器（WebIDE）、图形编辑器（在线的3d建模或者ps）、文本编辑器等。\n- `Serverless`是生产力上的直接提升，前端可以不考虑部署、运维、环境等场景，直接编写函数来实现后端逻辑的全干工程师。\n- `IOT`（物联网 Internet of Things），js in IOT是因为js开发群众多，但是IOT是低性能低功耗低内存的设备，与js相反，所以最后js又会沦为写业务，但是和在浏览器开发有什么区别呢？\n- `GraphQL`技术考验的是跨团队沟通协作能力，不是技术本身，干活是后端，得利的却是前端。\n- `AI In FE`，tfjs的问题，基于浏览器的深度学习框架，其实应用范围非常非常窄，目前主要科研阶段。\n\n>因此，个人需要学习可以尝试学习`TypeScript`,`图形技术`和`编辑器领域技术`，顺便可以了解一下`Flutter`去实现HelloWorld。\n\n原文阅读链接：\nhttps://juejin.im/post/5d1589c8e51d45776031b02e\n\n# 二、一周新闻\n\n## 2.1 npm 已落伍，下一代包管理器 Tink 正在孵化\n>迄今为止，npm 生态系统已经拥有了近 1,000,000 个软件包，是规模最大的包管理平台。但这个生态系统及软件包管理器在诞生时并没有考虑如此复杂的局面，它们原本是适用于以 Node.js 生态系统为中心的小型项目和软件包的平台。\n\n>现在是时候重新定义适合现代 Web 开发的包管理技术了，而答案就是 Tink：它同样来自于 npm 团队，是下一代的 JS 包管理方案。Tink 将带来前所未有的性能表现、与 Node.js 等已有技术的深度兼容性，以及非常适合现代 Web 开发者的用户体验。\n>https://www.infoq.cn/article/R*5JRVuOOHBRlw411PlZ\n\n## 2.2 GMTC 2019 参会感想\n>得知 GMTC 2019 在北京举行还是今年 3 月份 EE 协作文档 的前端同学，推荐我们团队去 GMTC 做个分享，所以也顺便组织团队成员一起去向业界大佬学习。\n>https://juejin.im/post/5d132ec16fb9a07efa092909\n\n# 三、玩遍前端\n\n## 3.1 git-js\n>一个可以在nodejs中去执行git命令的框架，大家可以尝试玩一下如何管理团队仓库，以及定制化的代码审核界面。\n>https://github.com/steveukx/git-js\n\n\n\n","source":"_posts/wx/20190731.md","raw":"---\ntitle: 周二技术周刊 20190731期\ndate: 2019-07-31 21:03:43\ndescription: 2019年上半年已经结束了，你还记得年初定的计划吗？\ntags:\n    - 周二技术周刊\n---\n![好看的图片](https://pic.qqtn.com/up/2018-6/2018661629543719.jpg)\n# 一、技术知识\n## 1.1 蚂蚁金服前端框架和工程化实践\n作者：[阿里-云谦](https://github.com/sorrycc)\n简介：\n讲述阿里Umi 和 Bigfish框架的发展历史，已经作者技术团队在里面做的哪些事情。\n\n<!-- more -->\n\n### 总结\n**框架为什么能够成功的原因？**\n- 人：给使用者成就感和绩效——插件体系，插件体系是如何搭建的具体看原文详细介绍。\n- 业务和流程：简化业务和流程，让程序员不必要浪费太多时间上上面。\n- 开源：开源做地好，也更容易获得内部同学的认可。\n\n**资产市场分了四级:**\n- 组件，指通用组件，就是 antd，在下半年将要发布的 antd@4 里，我们会陆续提取更多通用组件到 antd 中。\n- 业务组件，不能提取通用组件的，我们会提到内部统一的业务组件仓库中。\n- 区块，由组件组成，可以想象成代码片段。\n- 页面模板，由区块组成\n\n>后续要做配置化方案，可以参考一下。\n\n**微前端方案**\n- 相对狭义的理解，是一个解决多套技术栈共存的方案，比如首页用 jQuery，订单页用 React，客户系统用 Vue。\n- 对微前端的理解是，他不仅是个技术方案，更是个解决流程、组织架构等问题的方案。\n\n>已有开源方案，乾坤:https://github.com/umijs/qiankun\n\n**前端永远不能忘记的：**\n- 优化：构建优化，性能优化等\n- 测试+监控：单测、UI 测试、e2e 测试和集成测试，基本方案是基于 Jest + test-react-library + Puppeteer\n\n***阅读时间：15~20分钟***\n\n[点击原文阅读→](https://mp.weixin.qq.com/s/6-yjR_CsHaWUI8YqLK25rA)\n\n## 1.2 哪些技术会决定前端开发者的未来发展？\n\n简介：\n大家有没有想过，通过学习Flutter，你的技术就提升了吗？\n\n很多人第一反应是『当然了，学了一门新技术，学了一门新语言，难道技术不是提升了吗？』。\n\n但是我觉得并没有，我其实依然在原地打转，**一个Java开发者学会了用Ruby增删改查并不能代表能力提高了，一个前端开发者用RN或者Flutter开发了简单的APP也不能说明水平提高了，只不过是用另一种语言再写了一遍UI而已，会用三种框架写页面，并不是什么高技术含量的事情，会三种不如深入一种。**\n\n##总结\n**归纳两点**\n\n- 我们有时候看似在学很多技术，其实这些技术并不能提升你，但是给你造成了『我学了新东西能力提升了』的自我感觉偏差\n- 不要盲目追寻社区的热点，很可能捡了芝麻丢了西瓜，要仔细思考这门技术对于你本身是否有提升，而不是被布道师们『洗脑』\n\n**处于趋势中的技术点**\n- `Flutter`，正是新框架，可以学习，但不要认为你的技术有了新的发展。\n- `TypeScript`，会越来越多人用，因为其规范JavaScript的语法，降低很多不必要的类型错误，以及更多重大开源项目使用与支持。\n- `图形技术`，将是未来所有前端程序员的痛点之一，进阶技术知识。\n- `编辑器领域技术`，包括但不限于：代码编辑器（WebIDE）、图形编辑器（在线的3d建模或者ps）、文本编辑器等。\n- `Serverless`是生产力上的直接提升，前端可以不考虑部署、运维、环境等场景，直接编写函数来实现后端逻辑的全干工程师。\n- `IOT`（物联网 Internet of Things），js in IOT是因为js开发群众多，但是IOT是低性能低功耗低内存的设备，与js相反，所以最后js又会沦为写业务，但是和在浏览器开发有什么区别呢？\n- `GraphQL`技术考验的是跨团队沟通协作能力，不是技术本身，干活是后端，得利的却是前端。\n- `AI In FE`，tfjs的问题，基于浏览器的深度学习框架，其实应用范围非常非常窄，目前主要科研阶段。\n\n>因此，个人需要学习可以尝试学习`TypeScript`,`图形技术`和`编辑器领域技术`，顺便可以了解一下`Flutter`去实现HelloWorld。\n\n原文阅读链接：\nhttps://juejin.im/post/5d1589c8e51d45776031b02e\n\n# 二、一周新闻\n\n## 2.1 npm 已落伍，下一代包管理器 Tink 正在孵化\n>迄今为止，npm 生态系统已经拥有了近 1,000,000 个软件包，是规模最大的包管理平台。但这个生态系统及软件包管理器在诞生时并没有考虑如此复杂的局面，它们原本是适用于以 Node.js 生态系统为中心的小型项目和软件包的平台。\n\n>现在是时候重新定义适合现代 Web 开发的包管理技术了，而答案就是 Tink：它同样来自于 npm 团队，是下一代的 JS 包管理方案。Tink 将带来前所未有的性能表现、与 Node.js 等已有技术的深度兼容性，以及非常适合现代 Web 开发者的用户体验。\n>https://www.infoq.cn/article/R*5JRVuOOHBRlw411PlZ\n\n## 2.2 GMTC 2019 参会感想\n>得知 GMTC 2019 在北京举行还是今年 3 月份 EE 协作文档 的前端同学，推荐我们团队去 GMTC 做个分享，所以也顺便组织团队成员一起去向业界大佬学习。\n>https://juejin.im/post/5d132ec16fb9a07efa092909\n\n# 三、玩遍前端\n\n## 3.1 git-js\n>一个可以在nodejs中去执行git命令的框架，大家可以尝试玩一下如何管理团队仓库，以及定制化的代码审核界面。\n>https://github.com/steveukx/git-js\n\n\n\n","slug":"wx/20190731","published":1,"updated":"2019-09-03T13:26:27.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk6i0006wspc4l59t00h","content":"<p><img src=\"https://pic.qqtn.com/up/2018-6/2018661629543719.jpg\" alt=\"好看的图片\"></p>\n<h1 id=\"一、技术知识\"><a href=\"#一、技术知识\" class=\"headerlink\" title=\"一、技术知识\"></a>一、技术知识</h1><h2 id=\"1-1-蚂蚁金服前端框架和工程化实践\"><a href=\"#1-1-蚂蚁金服前端框架和工程化实践\" class=\"headerlink\" title=\"1.1 蚂蚁金服前端框架和工程化实践\"></a>1.1 蚂蚁金服前端框架和工程化实践</h2><p>作者：<a href=\"https://github.com/sorrycc\" target=\"_blank\" rel=\"noopener\">阿里-云谦</a><br>简介：<br>讲述阿里Umi 和 Bigfish框架的发展历史，已经作者技术团队在里面做的哪些事情。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>框架为什么能够成功的原因？</strong></p>\n<ul>\n<li>人：给使用者成就感和绩效——插件体系，插件体系是如何搭建的具体看原文详细介绍。</li>\n<li>业务和流程：简化业务和流程，让程序员不必要浪费太多时间上上面。</li>\n<li>开源：开源做地好，也更容易获得内部同学的认可。</li>\n</ul>\n<p><strong>资产市场分了四级:</strong></p>\n<ul>\n<li>组件，指通用组件，就是 antd，在下半年将要发布的 antd@4 里，我们会陆续提取更多通用组件到 antd 中。</li>\n<li>业务组件，不能提取通用组件的，我们会提到内部统一的业务组件仓库中。</li>\n<li>区块，由组件组成，可以想象成代码片段。</li>\n<li>页面模板，由区块组成</li>\n</ul>\n<blockquote>\n<p>后续要做配置化方案，可以参考一下。</p>\n</blockquote>\n<p><strong>微前端方案</strong></p>\n<ul>\n<li>相对狭义的理解，是一个解决多套技术栈共存的方案，比如首页用 jQuery，订单页用 React，客户系统用 Vue。</li>\n<li>对微前端的理解是，他不仅是个技术方案，更是个解决流程、组织架构等问题的方案。</li>\n</ul>\n<blockquote>\n<p>已有开源方案，乾坤:<a href=\"https://github.com/umijs/qiankun\" target=\"_blank\" rel=\"noopener\">https://github.com/umijs/qiankun</a></p>\n</blockquote>\n<p><strong>前端永远不能忘记的：</strong></p>\n<ul>\n<li>优化：构建优化，性能优化等</li>\n<li>测试+监控：单测、UI 测试、e2e 测试和集成测试，基本方案是基于 Jest + test-react-library + Puppeteer</li>\n</ul>\n<p><strong><em>阅读时间：15~20分钟</em></strong></p>\n<p><a href=\"https://mp.weixin.qq.com/s/6-yjR_CsHaWUI8YqLK25rA\" target=\"_blank\" rel=\"noopener\">点击原文阅读→</a></p>\n<h2 id=\"1-2-哪些技术会决定前端开发者的未来发展？\"><a href=\"#1-2-哪些技术会决定前端开发者的未来发展？\" class=\"headerlink\" title=\"1.2 哪些技术会决定前端开发者的未来发展？\"></a>1.2 哪些技术会决定前端开发者的未来发展？</h2><p>简介：<br>大家有没有想过，通过学习Flutter，你的技术就提升了吗？</p>\n<p>很多人第一反应是『当然了，学了一门新技术，学了一门新语言，难道技术不是提升了吗？』。</p>\n<p>但是我觉得并没有，我其实依然在原地打转，<strong>一个Java开发者学会了用Ruby增删改查并不能代表能力提高了，一个前端开发者用RN或者Flutter开发了简单的APP也不能说明水平提高了，只不过是用另一种语言再写了一遍UI而已，会用三种框架写页面，并不是什么高技术含量的事情，会三种不如深入一种。</strong></p>\n<p>##总结<br><strong>归纳两点</strong></p>\n<ul>\n<li>我们有时候看似在学很多技术，其实这些技术并不能提升你，但是给你造成了『我学了新东西能力提升了』的自我感觉偏差</li>\n<li>不要盲目追寻社区的热点，很可能捡了芝麻丢了西瓜，要仔细思考这门技术对于你本身是否有提升，而不是被布道师们『洗脑』</li>\n</ul>\n<p><strong>处于趋势中的技术点</strong></p>\n<ul>\n<li><code>Flutter</code>，正是新框架，可以学习，但不要认为你的技术有了新的发展。</li>\n<li><code>TypeScript</code>，会越来越多人用，因为其规范JavaScript的语法，降低很多不必要的类型错误，以及更多重大开源项目使用与支持。</li>\n<li><code>图形技术</code>，将是未来所有前端程序员的痛点之一，进阶技术知识。</li>\n<li><code>编辑器领域技术</code>，包括但不限于：代码编辑器（WebIDE）、图形编辑器（在线的3d建模或者ps）、文本编辑器等。</li>\n<li><code>Serverless</code>是生产力上的直接提升，前端可以不考虑部署、运维、环境等场景，直接编写函数来实现后端逻辑的全干工程师。</li>\n<li><code>IOT</code>（物联网 Internet of Things），js in IOT是因为js开发群众多，但是IOT是低性能低功耗低内存的设备，与js相反，所以最后js又会沦为写业务，但是和在浏览器开发有什么区别呢？</li>\n<li><code>GraphQL</code>技术考验的是跨团队沟通协作能力，不是技术本身，干活是后端，得利的却是前端。</li>\n<li><code>AI In FE</code>，tfjs的问题，基于浏览器的深度学习框架，其实应用范围非常非常窄，目前主要科研阶段。</li>\n</ul>\n<blockquote>\n<p>因此，个人需要学习可以尝试学习<code>TypeScript</code>,<code>图形技术</code>和<code>编辑器领域技术</code>，顺便可以了解一下<code>Flutter</code>去实现HelloWorld。</p>\n</blockquote>\n<p>原文阅读链接：<br><a href=\"https://juejin.im/post/5d1589c8e51d45776031b02e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d1589c8e51d45776031b02e</a></p>\n<h1 id=\"二、一周新闻\"><a href=\"#二、一周新闻\" class=\"headerlink\" title=\"二、一周新闻\"></a>二、一周新闻</h1><h2 id=\"2-1-npm-已落伍，下一代包管理器-Tink-正在孵化\"><a href=\"#2-1-npm-已落伍，下一代包管理器-Tink-正在孵化\" class=\"headerlink\" title=\"2.1 npm 已落伍，下一代包管理器 Tink 正在孵化\"></a>2.1 npm 已落伍，下一代包管理器 Tink 正在孵化</h2><blockquote>\n<p>迄今为止，npm 生态系统已经拥有了近 1,000,000 个软件包，是规模最大的包管理平台。但这个生态系统及软件包管理器在诞生时并没有考虑如此复杂的局面，它们原本是适用于以 Node.js 生态系统为中心的小型项目和软件包的平台。</p>\n</blockquote>\n<blockquote>\n<p>现在是时候重新定义适合现代 Web 开发的包管理技术了，而答案就是 Tink：它同样来自于 npm 团队，是下一代的 JS 包管理方案。Tink 将带来前所未有的性能表现、与 Node.js 等已有技术的深度兼容性，以及非常适合现代 Web 开发者的用户体验。<br><a href=\"https://www.infoq.cn/article/R*5JRVuOOHBRlw411PlZ\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/R*5JRVuOOHBRlw411PlZ</a></p>\n</blockquote>\n<h2 id=\"2-2-GMTC-2019-参会感想\"><a href=\"#2-2-GMTC-2019-参会感想\" class=\"headerlink\" title=\"2.2 GMTC 2019 参会感想\"></a>2.2 GMTC 2019 参会感想</h2><blockquote>\n<p>得知 GMTC 2019 在北京举行还是今年 3 月份 EE 协作文档 的前端同学，推荐我们团队去 GMTC 做个分享，所以也顺便组织团队成员一起去向业界大佬学习。<br><a href=\"https://juejin.im/post/5d132ec16fb9a07efa092909\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d132ec16fb9a07efa092909</a></p>\n</blockquote>\n<h1 id=\"三、玩遍前端\"><a href=\"#三、玩遍前端\" class=\"headerlink\" title=\"三、玩遍前端\"></a>三、玩遍前端</h1><h2 id=\"3-1-git-js\"><a href=\"#3-1-git-js\" class=\"headerlink\" title=\"3.1 git-js\"></a>3.1 git-js</h2><blockquote>\n<p>一个可以在nodejs中去执行git命令的框架，大家可以尝试玩一下如何管理团队仓库，以及定制化的代码审核界面。<br><a href=\"https://github.com/steveukx/git-js\" target=\"_blank\" rel=\"noopener\">https://github.com/steveukx/git-js</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://pic.qqtn.com/up/2018-6/2018661629543719.jpg\" alt=\"好看的图片\"></p>\n<h1 id=\"一、技术知识\"><a href=\"#一、技术知识\" class=\"headerlink\" title=\"一、技术知识\"></a>一、技术知识</h1><h2 id=\"1-1-蚂蚁金服前端框架和工程化实践\"><a href=\"#1-1-蚂蚁金服前端框架和工程化实践\" class=\"headerlink\" title=\"1.1 蚂蚁金服前端框架和工程化实践\"></a>1.1 蚂蚁金服前端框架和工程化实践</h2><p>作者：<a href=\"https://github.com/sorrycc\" target=\"_blank\" rel=\"noopener\">阿里-云谦</a><br>简介：<br>讲述阿里Umi 和 Bigfish框架的发展历史，已经作者技术团队在里面做的哪些事情。</p>","more":"<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>框架为什么能够成功的原因？</strong></p>\n<ul>\n<li>人：给使用者成就感和绩效——插件体系，插件体系是如何搭建的具体看原文详细介绍。</li>\n<li>业务和流程：简化业务和流程，让程序员不必要浪费太多时间上上面。</li>\n<li>开源：开源做地好，也更容易获得内部同学的认可。</li>\n</ul>\n<p><strong>资产市场分了四级:</strong></p>\n<ul>\n<li>组件，指通用组件，就是 antd，在下半年将要发布的 antd@4 里，我们会陆续提取更多通用组件到 antd 中。</li>\n<li>业务组件，不能提取通用组件的，我们会提到内部统一的业务组件仓库中。</li>\n<li>区块，由组件组成，可以想象成代码片段。</li>\n<li>页面模板，由区块组成</li>\n</ul>\n<blockquote>\n<p>后续要做配置化方案，可以参考一下。</p>\n</blockquote>\n<p><strong>微前端方案</strong></p>\n<ul>\n<li>相对狭义的理解，是一个解决多套技术栈共存的方案，比如首页用 jQuery，订单页用 React，客户系统用 Vue。</li>\n<li>对微前端的理解是，他不仅是个技术方案，更是个解决流程、组织架构等问题的方案。</li>\n</ul>\n<blockquote>\n<p>已有开源方案，乾坤:<a href=\"https://github.com/umijs/qiankun\" target=\"_blank\" rel=\"noopener\">https://github.com/umijs/qiankun</a></p>\n</blockquote>\n<p><strong>前端永远不能忘记的：</strong></p>\n<ul>\n<li>优化：构建优化，性能优化等</li>\n<li>测试+监控：单测、UI 测试、e2e 测试和集成测试，基本方案是基于 Jest + test-react-library + Puppeteer</li>\n</ul>\n<p><strong><em>阅读时间：15~20分钟</em></strong></p>\n<p><a href=\"https://mp.weixin.qq.com/s/6-yjR_CsHaWUI8YqLK25rA\" target=\"_blank\" rel=\"noopener\">点击原文阅读→</a></p>\n<h2 id=\"1-2-哪些技术会决定前端开发者的未来发展？\"><a href=\"#1-2-哪些技术会决定前端开发者的未来发展？\" class=\"headerlink\" title=\"1.2 哪些技术会决定前端开发者的未来发展？\"></a>1.2 哪些技术会决定前端开发者的未来发展？</h2><p>简介：<br>大家有没有想过，通过学习Flutter，你的技术就提升了吗？</p>\n<p>很多人第一反应是『当然了，学了一门新技术，学了一门新语言，难道技术不是提升了吗？』。</p>\n<p>但是我觉得并没有，我其实依然在原地打转，<strong>一个Java开发者学会了用Ruby增删改查并不能代表能力提高了，一个前端开发者用RN或者Flutter开发了简单的APP也不能说明水平提高了，只不过是用另一种语言再写了一遍UI而已，会用三种框架写页面，并不是什么高技术含量的事情，会三种不如深入一种。</strong></p>\n<p>##总结<br><strong>归纳两点</strong></p>\n<ul>\n<li>我们有时候看似在学很多技术，其实这些技术并不能提升你，但是给你造成了『我学了新东西能力提升了』的自我感觉偏差</li>\n<li>不要盲目追寻社区的热点，很可能捡了芝麻丢了西瓜，要仔细思考这门技术对于你本身是否有提升，而不是被布道师们『洗脑』</li>\n</ul>\n<p><strong>处于趋势中的技术点</strong></p>\n<ul>\n<li><code>Flutter</code>，正是新框架，可以学习，但不要认为你的技术有了新的发展。</li>\n<li><code>TypeScript</code>，会越来越多人用，因为其规范JavaScript的语法，降低很多不必要的类型错误，以及更多重大开源项目使用与支持。</li>\n<li><code>图形技术</code>，将是未来所有前端程序员的痛点之一，进阶技术知识。</li>\n<li><code>编辑器领域技术</code>，包括但不限于：代码编辑器（WebIDE）、图形编辑器（在线的3d建模或者ps）、文本编辑器等。</li>\n<li><code>Serverless</code>是生产力上的直接提升，前端可以不考虑部署、运维、环境等场景，直接编写函数来实现后端逻辑的全干工程师。</li>\n<li><code>IOT</code>（物联网 Internet of Things），js in IOT是因为js开发群众多，但是IOT是低性能低功耗低内存的设备，与js相反，所以最后js又会沦为写业务，但是和在浏览器开发有什么区别呢？</li>\n<li><code>GraphQL</code>技术考验的是跨团队沟通协作能力，不是技术本身，干活是后端，得利的却是前端。</li>\n<li><code>AI In FE</code>，tfjs的问题，基于浏览器的深度学习框架，其实应用范围非常非常窄，目前主要科研阶段。</li>\n</ul>\n<blockquote>\n<p>因此，个人需要学习可以尝试学习<code>TypeScript</code>,<code>图形技术</code>和<code>编辑器领域技术</code>，顺便可以了解一下<code>Flutter</code>去实现HelloWorld。</p>\n</blockquote>\n<p>原文阅读链接：<br><a href=\"https://juejin.im/post/5d1589c8e51d45776031b02e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d1589c8e51d45776031b02e</a></p>\n<h1 id=\"二、一周新闻\"><a href=\"#二、一周新闻\" class=\"headerlink\" title=\"二、一周新闻\"></a>二、一周新闻</h1><h2 id=\"2-1-npm-已落伍，下一代包管理器-Tink-正在孵化\"><a href=\"#2-1-npm-已落伍，下一代包管理器-Tink-正在孵化\" class=\"headerlink\" title=\"2.1 npm 已落伍，下一代包管理器 Tink 正在孵化\"></a>2.1 npm 已落伍，下一代包管理器 Tink 正在孵化</h2><blockquote>\n<p>迄今为止，npm 生态系统已经拥有了近 1,000,000 个软件包，是规模最大的包管理平台。但这个生态系统及软件包管理器在诞生时并没有考虑如此复杂的局面，它们原本是适用于以 Node.js 生态系统为中心的小型项目和软件包的平台。</p>\n</blockquote>\n<blockquote>\n<p>现在是时候重新定义适合现代 Web 开发的包管理技术了，而答案就是 Tink：它同样来自于 npm 团队，是下一代的 JS 包管理方案。Tink 将带来前所未有的性能表现、与 Node.js 等已有技术的深度兼容性，以及非常适合现代 Web 开发者的用户体验。<br><a href=\"https://www.infoq.cn/article/R*5JRVuOOHBRlw411PlZ\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/R*5JRVuOOHBRlw411PlZ</a></p>\n</blockquote>\n<h2 id=\"2-2-GMTC-2019-参会感想\"><a href=\"#2-2-GMTC-2019-参会感想\" class=\"headerlink\" title=\"2.2 GMTC 2019 参会感想\"></a>2.2 GMTC 2019 参会感想</h2><blockquote>\n<p>得知 GMTC 2019 在北京举行还是今年 3 月份 EE 协作文档 的前端同学，推荐我们团队去 GMTC 做个分享，所以也顺便组织团队成员一起去向业界大佬学习。<br><a href=\"https://juejin.im/post/5d132ec16fb9a07efa092909\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d132ec16fb9a07efa092909</a></p>\n</blockquote>\n<h1 id=\"三、玩遍前端\"><a href=\"#三、玩遍前端\" class=\"headerlink\" title=\"三、玩遍前端\"></a>三、玩遍前端</h1><h2 id=\"3-1-git-js\"><a href=\"#3-1-git-js\" class=\"headerlink\" title=\"3.1 git-js\"></a>3.1 git-js</h2><blockquote>\n<p>一个可以在nodejs中去执行git命令的框架，大家可以尝试玩一下如何管理团队仓库，以及定制化的代码审核界面。<br><a href=\"https://github.com/steveukx/git-js\" target=\"_blank\" rel=\"noopener\">https://github.com/steveukx/git-js</a></p>\n</blockquote>"},{"title":"React与Jest的单元测试(1)","date":"2019-09-25T14:00:00.000Z","_content":"\n# 什么是单元测试\n如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。\n\n单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。\n\n<!--more-->\n## 测试覆盖率\n在github的开源项目经常会有单元测试覆盖率，长得比如`vuejs`框架，如下图所示：\n![image.png](http://ww1.sinaimg.cn/large/68c990d9gy1g7c48fwqh5j21aa0ec408.jpg)\n\n- 上图中的 build passing 表示 travis build 通过了，用绿色背景显示，表明很安全。\n- npm v2.6.10 表示最新版本是 v2.6.10，用蓝色背景显示，表明是稳定的版本。\n- downloads 4.7m/month 表示最近一个月 npm 里的下载数量为 4.7万 次。\n- coverage 97% 表示测试覆盖率达到了 100%，用蓝绿色背景显示，表明虽通过测试但是还存在未测试到地方。\n\n测试覆盖率就是运行的测试覆盖了多少代码里的逻辑，下一篇我们讲到如何建立github的测试覆盖率。\n<!-- https://juejin.im/entry/58c51defa22b9d0058ac1980 -->\n\n明白上面的概念后我们就开始进入学习。\n# 学习\n## Jest、Enzyme 介绍\nJest 是 Facebook 发布的一个开源的、基于 `Jasmine` 框架的 JavaScript 单元测试工具。提供了包括内置的测试环境 DOM API 支持、断言库、Mock 库等，还包含了 Spapshot Testing、 Instant Feedback 等特性。\n\nAirbnb开源的 React 测试类库 Enzyme 提供了一套简洁强大的 API，并通过 jQuery 风格的方式进行DOM 处理，开发体验十分友好。不仅在开源社区有超高人气，同时也获得了React 官方的推荐。\n\n## 创建项目\n通过`create-react-app`去创建项目，步骤如下：\n\n1. `create-react-app test-app`后，等待几分钟安装依赖完成\n2. 项目自带`jest`测试框架，但是还需要安装其他测试框架\n3. 安装`yarn add enzyme enzyme-adapter-react-16 react-test-renderer`\n\n## 示例项目\n在项目中我们将实现一个待办事项，并进行TTD开发。\n\n需求描述：在页面中有个输入框，并允许进行点击新增待办事项和删除事项。\n\n[项目源码可以点击这里进行克隆]()\n\n\n\n## jest常用API\n\n- describe(name, fn)：描述块，讲一组功能相关的测试用例组合在一起\n- it(name, fn, timeout)：别名test，用来放测试用例\n- afterAll(fn, timeout)：所有测试用例跑完以后执行的方法\n- beforeAll(fn, timeout)：所有测试用例执行之前执行的方法\n- afterEach(fn)：在每个测试用例执行完后执行的方法\n- beforeEach(fn)：在每个测试用例执行之前需要执行的方法\n","source":"_posts/study/react-test1.md","raw":"---\ntitle: React与Jest的单元测试(1)\ndate: 2019-09-25 22:00:00\ntags:\n    - 学习总结\n---\n\n# 什么是单元测试\n如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。\n\n单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。\n\n<!--more-->\n## 测试覆盖率\n在github的开源项目经常会有单元测试覆盖率，长得比如`vuejs`框架，如下图所示：\n![image.png](http://ww1.sinaimg.cn/large/68c990d9gy1g7c48fwqh5j21aa0ec408.jpg)\n\n- 上图中的 build passing 表示 travis build 通过了，用绿色背景显示，表明很安全。\n- npm v2.6.10 表示最新版本是 v2.6.10，用蓝色背景显示，表明是稳定的版本。\n- downloads 4.7m/month 表示最近一个月 npm 里的下载数量为 4.7万 次。\n- coverage 97% 表示测试覆盖率达到了 100%，用蓝绿色背景显示，表明虽通过测试但是还存在未测试到地方。\n\n测试覆盖率就是运行的测试覆盖了多少代码里的逻辑，下一篇我们讲到如何建立github的测试覆盖率。\n<!-- https://juejin.im/entry/58c51defa22b9d0058ac1980 -->\n\n明白上面的概念后我们就开始进入学习。\n# 学习\n## Jest、Enzyme 介绍\nJest 是 Facebook 发布的一个开源的、基于 `Jasmine` 框架的 JavaScript 单元测试工具。提供了包括内置的测试环境 DOM API 支持、断言库、Mock 库等，还包含了 Spapshot Testing、 Instant Feedback 等特性。\n\nAirbnb开源的 React 测试类库 Enzyme 提供了一套简洁强大的 API，并通过 jQuery 风格的方式进行DOM 处理，开发体验十分友好。不仅在开源社区有超高人气，同时也获得了React 官方的推荐。\n\n## 创建项目\n通过`create-react-app`去创建项目，步骤如下：\n\n1. `create-react-app test-app`后，等待几分钟安装依赖完成\n2. 项目自带`jest`测试框架，但是还需要安装其他测试框架\n3. 安装`yarn add enzyme enzyme-adapter-react-16 react-test-renderer`\n\n## 示例项目\n在项目中我们将实现一个待办事项，并进行TTD开发。\n\n需求描述：在页面中有个输入框，并允许进行点击新增待办事项和删除事项。\n\n[项目源码可以点击这里进行克隆]()\n\n\n\n## jest常用API\n\n- describe(name, fn)：描述块，讲一组功能相关的测试用例组合在一起\n- it(name, fn, timeout)：别名test，用来放测试用例\n- afterAll(fn, timeout)：所有测试用例跑完以后执行的方法\n- beforeAll(fn, timeout)：所有测试用例执行之前执行的方法\n- afterEach(fn)：在每个测试用例执行完后执行的方法\n- beforeEach(fn)：在每个测试用例执行之前需要执行的方法\n","slug":"study/react-test1","published":1,"updated":"2022-12-29T03:13:46.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk6p0009wspc2hzocv82","content":"<h1 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h1><p>如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。</p>\n<p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p>\n<a id=\"more\"></a>\n<h2 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h2><p>在github的开源项目经常会有单元测试覆盖率，长得比如<code>vuejs</code>框架，如下图所示：<br><img src=\"http://ww1.sinaimg.cn/large/68c990d9gy1g7c48fwqh5j21aa0ec408.jpg\" alt=\"image.png\"></p>\n<ul>\n<li>上图中的 build passing 表示 travis build 通过了，用绿色背景显示，表明很安全。</li>\n<li>npm v2.6.10 表示最新版本是 v2.6.10，用蓝色背景显示，表明是稳定的版本。</li>\n<li>downloads 4.7m/month 表示最近一个月 npm 里的下载数量为 4.7万 次。</li>\n<li>coverage 97% 表示测试覆盖率达到了 100%，用蓝绿色背景显示，表明虽通过测试但是还存在未测试到地方。</li>\n</ul>\n<p>测试覆盖率就是运行的测试覆盖了多少代码里的逻辑，下一篇我们讲到如何建立github的测试覆盖率。</p>\n<!-- https://juejin.im/entry/58c51defa22b9d0058ac1980 -->\n\n<p>明白上面的概念后我们就开始进入学习。</p>\n<h1 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h1><h2 id=\"Jest、Enzyme-介绍\"><a href=\"#Jest、Enzyme-介绍\" class=\"headerlink\" title=\"Jest、Enzyme 介绍\"></a>Jest、Enzyme 介绍</h2><p>Jest 是 Facebook 发布的一个开源的、基于 <code>Jasmine</code> 框架的 JavaScript 单元测试工具。提供了包括内置的测试环境 DOM API 支持、断言库、Mock 库等，还包含了 Spapshot Testing、 Instant Feedback 等特性。</p>\n<p>Airbnb开源的 React 测试类库 Enzyme 提供了一套简洁强大的 API，并通过 jQuery 风格的方式进行DOM 处理，开发体验十分友好。不仅在开源社区有超高人气，同时也获得了React 官方的推荐。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>通过<code>create-react-app</code>去创建项目，步骤如下：</p>\n<ol>\n<li><code>create-react-app test-app</code>后，等待几分钟安装依赖完成</li>\n<li>项目自带<code>jest</code>测试框架，但是还需要安装其他测试框架</li>\n<li>安装<code>yarn add enzyme enzyme-adapter-react-16 react-test-renderer</code></li>\n</ol>\n<h2 id=\"示例项目\"><a href=\"#示例项目\" class=\"headerlink\" title=\"示例项目\"></a>示例项目</h2><p>在项目中我们将实现一个待办事项，并进行TTD开发。</p>\n<p>需求描述：在页面中有个输入框，并允许进行点击新增待办事项和删除事项。</p>\n<p><a href>项目源码可以点击这里进行克隆</a></p>\n<h2 id=\"jest常用API\"><a href=\"#jest常用API\" class=\"headerlink\" title=\"jest常用API\"></a>jest常用API</h2><ul>\n<li>describe(name, fn)：描述块，讲一组功能相关的测试用例组合在一起</li>\n<li>it(name, fn, timeout)：别名test，用来放测试用例</li>\n<li>afterAll(fn, timeout)：所有测试用例跑完以后执行的方法</li>\n<li>beforeAll(fn, timeout)：所有测试用例执行之前执行的方法</li>\n<li>afterEach(fn)：在每个测试用例执行完后执行的方法</li>\n<li>beforeEach(fn)：在每个测试用例执行之前需要执行的方法</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h1><p>如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。</p>\n<p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p>","more":"<h2 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h2><p>在github的开源项目经常会有单元测试覆盖率，长得比如<code>vuejs</code>框架，如下图所示：<br><img src=\"http://ww1.sinaimg.cn/large/68c990d9gy1g7c48fwqh5j21aa0ec408.jpg\" alt=\"image.png\"></p>\n<ul>\n<li>上图中的 build passing 表示 travis build 通过了，用绿色背景显示，表明很安全。</li>\n<li>npm v2.6.10 表示最新版本是 v2.6.10，用蓝色背景显示，表明是稳定的版本。</li>\n<li>downloads 4.7m/month 表示最近一个月 npm 里的下载数量为 4.7万 次。</li>\n<li>coverage 97% 表示测试覆盖率达到了 100%，用蓝绿色背景显示，表明虽通过测试但是还存在未测试到地方。</li>\n</ul>\n<p>测试覆盖率就是运行的测试覆盖了多少代码里的逻辑，下一篇我们讲到如何建立github的测试覆盖率。</p>\n<!-- https://juejin.im/entry/58c51defa22b9d0058ac1980 -->\n\n<p>明白上面的概念后我们就开始进入学习。</p>\n<h1 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h1><h2 id=\"Jest、Enzyme-介绍\"><a href=\"#Jest、Enzyme-介绍\" class=\"headerlink\" title=\"Jest、Enzyme 介绍\"></a>Jest、Enzyme 介绍</h2><p>Jest 是 Facebook 发布的一个开源的、基于 <code>Jasmine</code> 框架的 JavaScript 单元测试工具。提供了包括内置的测试环境 DOM API 支持、断言库、Mock 库等，还包含了 Spapshot Testing、 Instant Feedback 等特性。</p>\n<p>Airbnb开源的 React 测试类库 Enzyme 提供了一套简洁强大的 API，并通过 jQuery 风格的方式进行DOM 处理，开发体验十分友好。不仅在开源社区有超高人气，同时也获得了React 官方的推荐。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>通过<code>create-react-app</code>去创建项目，步骤如下：</p>\n<ol>\n<li><code>create-react-app test-app</code>后，等待几分钟安装依赖完成</li>\n<li>项目自带<code>jest</code>测试框架，但是还需要安装其他测试框架</li>\n<li>安装<code>yarn add enzyme enzyme-adapter-react-16 react-test-renderer</code></li>\n</ol>\n<h2 id=\"示例项目\"><a href=\"#示例项目\" class=\"headerlink\" title=\"示例项目\"></a>示例项目</h2><p>在项目中我们将实现一个待办事项，并进行TTD开发。</p>\n<p>需求描述：在页面中有个输入框，并允许进行点击新增待办事项和删除事项。</p>\n<p><a href>项目源码可以点击这里进行克隆</a></p>\n<h2 id=\"jest常用API\"><a href=\"#jest常用API\" class=\"headerlink\" title=\"jest常用API\"></a>jest常用API</h2><ul>\n<li>describe(name, fn)：描述块，讲一组功能相关的测试用例组合在一起</li>\n<li>it(name, fn, timeout)：别名test，用来放测试用例</li>\n<li>afterAll(fn, timeout)：所有测试用例跑完以后执行的方法</li>\n<li>beforeAll(fn, timeout)：所有测试用例执行之前执行的方法</li>\n<li>afterEach(fn)：在每个测试用例执行完后执行的方法</li>\n<li>beforeEach(fn)：在每个测试用例执行之前需要执行的方法</li>\n</ul>"},{"title":"周二技术周刊 20190924期","date":"2019-09-24T11:23:43.000Z","description":"国庆快来了，7天长假前再学习一下前端知识点，周二技术周刊将持续更新。","_content":"![好看的图片](http://ww1.sinaimg.cn/large/68c990d9gy1g7au94i5grj21pe14x7wi.jpg)\n\n# 一、技术知识\n\n## 《降低软件复杂性一般原则和方法》\n简介：\n\n本篇文章是围绕着“降低复杂性”这个主题展开的，很多重要的结论来源于John Ousterhout的著作《A Philosophy of Software Design》，作者觉得很有共鸣，就做了一些相关话题的延伸、补充了一些实例。虽说是”一般原则“，也不意味着是绝对的真理，整理出来，只是为了引发大家对软件设计的思考。\n\n<!-- more -->\n\n### 读后心得\n\n**现代系统复杂性解决原则**\n\n- 由于互联网的变化过快，系统是无法一次性满足的，都是通过一个个功能模块衍生迭代，系统才会逐步成型；\n- 专业化分工和代码复用是促成了软件生产率的提升的准则，由专业的人负责专业的事；\n- 分模块是从垂直方向来分解系统，如：微服务。分模块降低了单模块的复杂性，但是也会引入新的复杂性，例如模块与模块的交互；\n- 完善文档和注释，因为代码能够描述程序的工作流程和结果，却很难描述开发人员的思路。\n\n> 好的注释能够帮助解决软件复杂性问题，尤其是认知负担和不可知问题（Unknown Unknowns）。\n\n**设计技术方案前的两个问题**\n\n- 其一，为什么该方案可行？\n- 其二，在已有资源限制下，为什么该方案是最优的？\n- 为了回答第一个问题，我们需要在技术方案里补充架构图、接口设计和时间人力估算。\n- 而要回答第二个问题，需要我们在关键点或争议处提供二到三种方案，并给出建议方案，这样才有说服力。\n\n**技术方案设计原则**\n\n- 复杂系统最好的设计原则就是严格分层——内部的层只对相邻的层次可见，这样就可以将一个复杂问题分解成增量步骤序列，分层系统最有名的实例是TCP/IP网络模型。\n- 复杂性下沉，永远对用户友好的设计就是好设计。\n- 异常错误处理原则就是：尽可能减少需要处理异常的可能性。而最佳实践就是确保错误终结，例如删除一个并不存在的文件，与其上报文件不存在的异常，不如什么都不做。确保文件不存在就好了。\n\n***阅读时间：15~20分钟***\n\n其他更多关于软件设计原则可以前往:\n\n> [https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html](https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html)\n\n# 十大 npm 最佳安全指南，教你如何避免安全漏洞！\n简介：\n\n你重视 npm 漏洞吗？无论是前端还是后端开发人员，都应该重视 npm 的安全性最佳实践。开源代码的安全审查是提升安全性的关键所在，其中 npm 包的安全性应该是首要考虑因素，因为我们发现即使是官方的 npm 命令行工具也很容易受到攻击。\n\n本文提供的这份备忘列表中，我们将列出针对开源维护人员和开发人员的十大最佳安全实践和生产力提示。\n\n## 快速阅读\n\n**十大安全指南**\n\n1. 不要把秘密发布到 npm 存储库上\n2. 强制锁文件\n3. 忽略运行脚本，最小化攻击面\n4. 评估 npm 项目的健康状况\n5. 审核开源依赖项中的漏洞(使用 Snyk 扫描安全漏洞)\n6. 使用本地 npm 代理\n7. 负责任地披露安全漏洞\n8. 启用 2FA\n9. 使用 npm 作者令牌\n10. 了解模块命名约定和域名仿冒攻击\n\n喜欢阅读或者对安全更加注意，请点击下方链接前往阅读：\n\n>[https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu](https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu)\n\n# 把网站升级到http/2\n\n\n# 二、一周新闻\n\n## Vue 3.0 最新进展，Composition API\n本文主要分以下几个主题讨论最新的Composition API：\n\n- reactive API\n- ref API\n- watch API变化\n- computed API变化\n- 生命周期钩子变化\n- TypeScript和JSX支持\n\nComposition API 可谓是修复了 Function API 诸多问题而提供的最新“修正案”，下面来看比起之前的vue-function-api，究竟修改了些什么呢？请前往阅读：\n\n> [https://juejin.im/post/5d836458f265da03d871f6e9](https://juejin.im/post/5d836458f265da03d871f6e9)\n\n# 三、玩遍前端\n\n## 小tips: 元素focus页面不滚动不定位的JS处理\n全新的API参数preventScroll，感觉请阅读原文：\n\n>[https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/](https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/)\n\n\n## 浏览器的一些“滚动”行为鉴赏\n应该你遇到所有的“滚动”事件的相关问题和现象都可以在这篇文章里找到了：\n\n>[https://juejin.im/post/5d75adfbe51d4561e84fcc9c](https://juejin.im/post/5d75adfbe51d4561e84fcc9c)","source":"_posts/wx/20190924.md","raw":"---\ntitle: 周二技术周刊 20190924期\ndate: 2019-09-24 19:23:43\ndescription: 国庆快来了，7天长假前再学习一下前端知识点，周二技术周刊将持续更新。\ntags:\n    - 周二技术周刊\n---\n![好看的图片](http://ww1.sinaimg.cn/large/68c990d9gy1g7au94i5grj21pe14x7wi.jpg)\n\n# 一、技术知识\n\n## 《降低软件复杂性一般原则和方法》\n简介：\n\n本篇文章是围绕着“降低复杂性”这个主题展开的，很多重要的结论来源于John Ousterhout的著作《A Philosophy of Software Design》，作者觉得很有共鸣，就做了一些相关话题的延伸、补充了一些实例。虽说是”一般原则“，也不意味着是绝对的真理，整理出来，只是为了引发大家对软件设计的思考。\n\n<!-- more -->\n\n### 读后心得\n\n**现代系统复杂性解决原则**\n\n- 由于互联网的变化过快，系统是无法一次性满足的，都是通过一个个功能模块衍生迭代，系统才会逐步成型；\n- 专业化分工和代码复用是促成了软件生产率的提升的准则，由专业的人负责专业的事；\n- 分模块是从垂直方向来分解系统，如：微服务。分模块降低了单模块的复杂性，但是也会引入新的复杂性，例如模块与模块的交互；\n- 完善文档和注释，因为代码能够描述程序的工作流程和结果，却很难描述开发人员的思路。\n\n> 好的注释能够帮助解决软件复杂性问题，尤其是认知负担和不可知问题（Unknown Unknowns）。\n\n**设计技术方案前的两个问题**\n\n- 其一，为什么该方案可行？\n- 其二，在已有资源限制下，为什么该方案是最优的？\n- 为了回答第一个问题，我们需要在技术方案里补充架构图、接口设计和时间人力估算。\n- 而要回答第二个问题，需要我们在关键点或争议处提供二到三种方案，并给出建议方案，这样才有说服力。\n\n**技术方案设计原则**\n\n- 复杂系统最好的设计原则就是严格分层——内部的层只对相邻的层次可见，这样就可以将一个复杂问题分解成增量步骤序列，分层系统最有名的实例是TCP/IP网络模型。\n- 复杂性下沉，永远对用户友好的设计就是好设计。\n- 异常错误处理原则就是：尽可能减少需要处理异常的可能性。而最佳实践就是确保错误终结，例如删除一个并不存在的文件，与其上报文件不存在的异常，不如什么都不做。确保文件不存在就好了。\n\n***阅读时间：15~20分钟***\n\n其他更多关于软件设计原则可以前往:\n\n> [https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html](https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html)\n\n# 十大 npm 最佳安全指南，教你如何避免安全漏洞！\n简介：\n\n你重视 npm 漏洞吗？无论是前端还是后端开发人员，都应该重视 npm 的安全性最佳实践。开源代码的安全审查是提升安全性的关键所在，其中 npm 包的安全性应该是首要考虑因素，因为我们发现即使是官方的 npm 命令行工具也很容易受到攻击。\n\n本文提供的这份备忘列表中，我们将列出针对开源维护人员和开发人员的十大最佳安全实践和生产力提示。\n\n## 快速阅读\n\n**十大安全指南**\n\n1. 不要把秘密发布到 npm 存储库上\n2. 强制锁文件\n3. 忽略运行脚本，最小化攻击面\n4. 评估 npm 项目的健康状况\n5. 审核开源依赖项中的漏洞(使用 Snyk 扫描安全漏洞)\n6. 使用本地 npm 代理\n7. 负责任地披露安全漏洞\n8. 启用 2FA\n9. 使用 npm 作者令牌\n10. 了解模块命名约定和域名仿冒攻击\n\n喜欢阅读或者对安全更加注意，请点击下方链接前往阅读：\n\n>[https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu](https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu)\n\n# 把网站升级到http/2\n\n\n# 二、一周新闻\n\n## Vue 3.0 最新进展，Composition API\n本文主要分以下几个主题讨论最新的Composition API：\n\n- reactive API\n- ref API\n- watch API变化\n- computed API变化\n- 生命周期钩子变化\n- TypeScript和JSX支持\n\nComposition API 可谓是修复了 Function API 诸多问题而提供的最新“修正案”，下面来看比起之前的vue-function-api，究竟修改了些什么呢？请前往阅读：\n\n> [https://juejin.im/post/5d836458f265da03d871f6e9](https://juejin.im/post/5d836458f265da03d871f6e9)\n\n# 三、玩遍前端\n\n## 小tips: 元素focus页面不滚动不定位的JS处理\n全新的API参数preventScroll，感觉请阅读原文：\n\n>[https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/](https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/)\n\n\n## 浏览器的一些“滚动”行为鉴赏\n应该你遇到所有的“滚动”事件的相关问题和现象都可以在这篇文章里找到了：\n\n>[https://juejin.im/post/5d75adfbe51d4561e84fcc9c](https://juejin.im/post/5d75adfbe51d4561e84fcc9c)","slug":"wx/20190924","published":1,"updated":"2019-09-24T13:25:41.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk6u000awspcrykhqeby","content":"<p><img src=\"http://ww1.sinaimg.cn/large/68c990d9gy1g7au94i5grj21pe14x7wi.jpg\" alt=\"好看的图片\"></p>\n<h1 id=\"一、技术知识\"><a href=\"#一、技术知识\" class=\"headerlink\" title=\"一、技术知识\"></a>一、技术知识</h1><h2 id=\"《降低软件复杂性一般原则和方法》\"><a href=\"#《降低软件复杂性一般原则和方法》\" class=\"headerlink\" title=\"《降低软件复杂性一般原则和方法》\"></a>《降低软件复杂性一般原则和方法》</h2><p>简介：</p>\n<p>本篇文章是围绕着“降低复杂性”这个主题展开的，很多重要的结论来源于John Ousterhout的著作《A Philosophy of Software Design》，作者觉得很有共鸣，就做了一些相关话题的延伸、补充了一些实例。虽说是”一般原则“，也不意味着是绝对的真理，整理出来，只是为了引发大家对软件设计的思考。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"读后心得\"><a href=\"#读后心得\" class=\"headerlink\" title=\"读后心得\"></a>读后心得</h3><p><strong>现代系统复杂性解决原则</strong></p>\n<ul>\n<li>由于互联网的变化过快，系统是无法一次性满足的，都是通过一个个功能模块衍生迭代，系统才会逐步成型；</li>\n<li>专业化分工和代码复用是促成了软件生产率的提升的准则，由专业的人负责专业的事；</li>\n<li>分模块是从垂直方向来分解系统，如：微服务。分模块降低了单模块的复杂性，但是也会引入新的复杂性，例如模块与模块的交互；</li>\n<li>完善文档和注释，因为代码能够描述程序的工作流程和结果，却很难描述开发人员的思路。</li>\n</ul>\n<blockquote>\n<p>好的注释能够帮助解决软件复杂性问题，尤其是认知负担和不可知问题（Unknown Unknowns）。</p>\n</blockquote>\n<p><strong>设计技术方案前的两个问题</strong></p>\n<ul>\n<li>其一，为什么该方案可行？</li>\n<li>其二，在已有资源限制下，为什么该方案是最优的？</li>\n<li>为了回答第一个问题，我们需要在技术方案里补充架构图、接口设计和时间人力估算。</li>\n<li>而要回答第二个问题，需要我们在关键点或争议处提供二到三种方案，并给出建议方案，这样才有说服力。</li>\n</ul>\n<p><strong>技术方案设计原则</strong></p>\n<ul>\n<li>复杂系统最好的设计原则就是严格分层——内部的层只对相邻的层次可见，这样就可以将一个复杂问题分解成增量步骤序列，分层系统最有名的实例是TCP/IP网络模型。</li>\n<li>复杂性下沉，永远对用户友好的设计就是好设计。</li>\n<li>异常错误处理原则就是：尽可能减少需要处理异常的可能性。而最佳实践就是确保错误终结，例如删除一个并不存在的文件，与其上报文件不存在的异常，不如什么都不做。确保文件不存在就好了。</li>\n</ul>\n<p><strong><em>阅读时间：15~20分钟</em></strong></p>\n<p>其他更多关于软件设计原则可以前往:</p>\n<blockquote>\n<p><a href=\"https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html</a></p>\n</blockquote>\n<h1 id=\"十大-npm-最佳安全指南，教你如何避免安全漏洞！\"><a href=\"#十大-npm-最佳安全指南，教你如何避免安全漏洞！\" class=\"headerlink\" title=\"十大 npm 最佳安全指南，教你如何避免安全漏洞！\"></a>十大 npm 最佳安全指南，教你如何避免安全漏洞！</h1><p>简介：</p>\n<p>你重视 npm 漏洞吗？无论是前端还是后端开发人员，都应该重视 npm 的安全性最佳实践。开源代码的安全审查是提升安全性的关键所在，其中 npm 包的安全性应该是首要考虑因素，因为我们发现即使是官方的 npm 命令行工具也很容易受到攻击。</p>\n<p>本文提供的这份备忘列表中，我们将列出针对开源维护人员和开发人员的十大最佳安全实践和生产力提示。</p>\n<h2 id=\"快速阅读\"><a href=\"#快速阅读\" class=\"headerlink\" title=\"快速阅读\"></a>快速阅读</h2><p><strong>十大安全指南</strong></p>\n<ol>\n<li>不要把秘密发布到 npm 存储库上</li>\n<li>强制锁文件</li>\n<li>忽略运行脚本，最小化攻击面</li>\n<li>评估 npm 项目的健康状况</li>\n<li>审核开源依赖项中的漏洞(使用 Snyk 扫描安全漏洞)</li>\n<li>使用本地 npm 代理</li>\n<li>负责任地披露安全漏洞</li>\n<li>启用 2FA</li>\n<li>使用 npm 作者令牌</li>\n<li>了解模块命名约定和域名仿冒攻击</li>\n</ol>\n<p>喜欢阅读或者对安全更加注意，请点击下方链接前往阅读：</p>\n<blockquote>\n<p><a href=\"https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu</a></p>\n</blockquote>\n<h1 id=\"把网站升级到http-2\"><a href=\"#把网站升级到http-2\" class=\"headerlink\" title=\"把网站升级到http/2\"></a>把网站升级到http/2</h1><h1 id=\"二、一周新闻\"><a href=\"#二、一周新闻\" class=\"headerlink\" title=\"二、一周新闻\"></a>二、一周新闻</h1><h2 id=\"Vue-3-0-最新进展，Composition-API\"><a href=\"#Vue-3-0-最新进展，Composition-API\" class=\"headerlink\" title=\"Vue 3.0 最新进展，Composition API\"></a>Vue 3.0 最新进展，Composition API</h2><p>本文主要分以下几个主题讨论最新的Composition API：</p>\n<ul>\n<li>reactive API</li>\n<li>ref API</li>\n<li>watch API变化</li>\n<li>computed API变化</li>\n<li>生命周期钩子变化</li>\n<li>TypeScript和JSX支持</li>\n</ul>\n<p>Composition API 可谓是修复了 Function API 诸多问题而提供的最新“修正案”，下面来看比起之前的vue-function-api，究竟修改了些什么呢？请前往阅读：</p>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5d836458f265da03d871f6e9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d836458f265da03d871f6e9</a></p>\n</blockquote>\n<h1 id=\"三、玩遍前端\"><a href=\"#三、玩遍前端\" class=\"headerlink\" title=\"三、玩遍前端\"></a>三、玩遍前端</h1><h2 id=\"小tips-元素focus页面不滚动不定位的JS处理\"><a href=\"#小tips-元素focus页面不滚动不定位的JS处理\" class=\"headerlink\" title=\"小tips: 元素focus页面不滚动不定位的JS处理\"></a>小tips: 元素focus页面不滚动不定位的JS处理</h2><p>全新的API参数preventScroll，感觉请阅读原文：</p>\n<blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/</a></p>\n</blockquote>\n<h2 id=\"浏览器的一些“滚动”行为鉴赏\"><a href=\"#浏览器的一些“滚动”行为鉴赏\" class=\"headerlink\" title=\"浏览器的一些“滚动”行为鉴赏\"></a>浏览器的一些“滚动”行为鉴赏</h2><p>应该你遇到所有的“滚动”事件的相关问题和现象都可以在这篇文章里找到了：</p>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5d75adfbe51d4561e84fcc9c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d75adfbe51d4561e84fcc9c</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://ww1.sinaimg.cn/large/68c990d9gy1g7au94i5grj21pe14x7wi.jpg\" alt=\"好看的图片\"></p>\n<h1 id=\"一、技术知识\"><a href=\"#一、技术知识\" class=\"headerlink\" title=\"一、技术知识\"></a>一、技术知识</h1><h2 id=\"《降低软件复杂性一般原则和方法》\"><a href=\"#《降低软件复杂性一般原则和方法》\" class=\"headerlink\" title=\"《降低软件复杂性一般原则和方法》\"></a>《降低软件复杂性一般原则和方法》</h2><p>简介：</p>\n<p>本篇文章是围绕着“降低复杂性”这个主题展开的，很多重要的结论来源于John Ousterhout的著作《A Philosophy of Software Design》，作者觉得很有共鸣，就做了一些相关话题的延伸、补充了一些实例。虽说是”一般原则“，也不意味着是绝对的真理，整理出来，只是为了引发大家对软件设计的思考。</p>","more":"<h3 id=\"读后心得\"><a href=\"#读后心得\" class=\"headerlink\" title=\"读后心得\"></a>读后心得</h3><p><strong>现代系统复杂性解决原则</strong></p>\n<ul>\n<li>由于互联网的变化过快，系统是无法一次性满足的，都是通过一个个功能模块衍生迭代，系统才会逐步成型；</li>\n<li>专业化分工和代码复用是促成了软件生产率的提升的准则，由专业的人负责专业的事；</li>\n<li>分模块是从垂直方向来分解系统，如：微服务。分模块降低了单模块的复杂性，但是也会引入新的复杂性，例如模块与模块的交互；</li>\n<li>完善文档和注释，因为代码能够描述程序的工作流程和结果，却很难描述开发人员的思路。</li>\n</ul>\n<blockquote>\n<p>好的注释能够帮助解决软件复杂性问题，尤其是认知负担和不可知问题（Unknown Unknowns）。</p>\n</blockquote>\n<p><strong>设计技术方案前的两个问题</strong></p>\n<ul>\n<li>其一，为什么该方案可行？</li>\n<li>其二，在已有资源限制下，为什么该方案是最优的？</li>\n<li>为了回答第一个问题，我们需要在技术方案里补充架构图、接口设计和时间人力估算。</li>\n<li>而要回答第二个问题，需要我们在关键点或争议处提供二到三种方案，并给出建议方案，这样才有说服力。</li>\n</ul>\n<p><strong>技术方案设计原则</strong></p>\n<ul>\n<li>复杂系统最好的设计原则就是严格分层——内部的层只对相邻的层次可见，这样就可以将一个复杂问题分解成增量步骤序列，分层系统最有名的实例是TCP/IP网络模型。</li>\n<li>复杂性下沉，永远对用户友好的设计就是好设计。</li>\n<li>异常错误处理原则就是：尽可能减少需要处理异常的可能性。而最佳实践就是确保错误终结，例如删除一个并不存在的文件，与其上报文件不存在的异常，不如什么都不做。确保文件不存在就好了。</li>\n</ul>\n<p><strong><em>阅读时间：15~20分钟</em></strong></p>\n<p>其他更多关于软件设计原则可以前往:</p>\n<blockquote>\n<p><a href=\"https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2019/09/19/common-method-of-reduce-complexity.html</a></p>\n</blockquote>\n<h1 id=\"十大-npm-最佳安全指南，教你如何避免安全漏洞！\"><a href=\"#十大-npm-最佳安全指南，教你如何避免安全漏洞！\" class=\"headerlink\" title=\"十大 npm 最佳安全指南，教你如何避免安全漏洞！\"></a>十大 npm 最佳安全指南，教你如何避免安全漏洞！</h1><p>简介：</p>\n<p>你重视 npm 漏洞吗？无论是前端还是后端开发人员，都应该重视 npm 的安全性最佳实践。开源代码的安全审查是提升安全性的关键所在，其中 npm 包的安全性应该是首要考虑因素，因为我们发现即使是官方的 npm 命令行工具也很容易受到攻击。</p>\n<p>本文提供的这份备忘列表中，我们将列出针对开源维护人员和开发人员的十大最佳安全实践和生产力提示。</p>\n<h2 id=\"快速阅读\"><a href=\"#快速阅读\" class=\"headerlink\" title=\"快速阅读\"></a>快速阅读</h2><p><strong>十大安全指南</strong></p>\n<ol>\n<li>不要把秘密发布到 npm 存储库上</li>\n<li>强制锁文件</li>\n<li>忽略运行脚本，最小化攻击面</li>\n<li>评估 npm 项目的健康状况</li>\n<li>审核开源依赖项中的漏洞(使用 Snyk 扫描安全漏洞)</li>\n<li>使用本地 npm 代理</li>\n<li>负责任地披露安全漏洞</li>\n<li>启用 2FA</li>\n<li>使用 npm 作者令牌</li>\n<li>了解模块命名约定和域名仿冒攻击</li>\n</ol>\n<p>喜欢阅读或者对安全更加注意，请点击下方链接前往阅读：</p>\n<blockquote>\n<p><a href=\"https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/SI05RvA2QaeLhPx0kWmu</a></p>\n</blockquote>\n<h1 id=\"把网站升级到http-2\"><a href=\"#把网站升级到http-2\" class=\"headerlink\" title=\"把网站升级到http/2\"></a>把网站升级到http/2</h1><h1 id=\"二、一周新闻\"><a href=\"#二、一周新闻\" class=\"headerlink\" title=\"二、一周新闻\"></a>二、一周新闻</h1><h2 id=\"Vue-3-0-最新进展，Composition-API\"><a href=\"#Vue-3-0-最新进展，Composition-API\" class=\"headerlink\" title=\"Vue 3.0 最新进展，Composition API\"></a>Vue 3.0 最新进展，Composition API</h2><p>本文主要分以下几个主题讨论最新的Composition API：</p>\n<ul>\n<li>reactive API</li>\n<li>ref API</li>\n<li>watch API变化</li>\n<li>computed API变化</li>\n<li>生命周期钩子变化</li>\n<li>TypeScript和JSX支持</li>\n</ul>\n<p>Composition API 可谓是修复了 Function API 诸多问题而提供的最新“修正案”，下面来看比起之前的vue-function-api，究竟修改了些什么呢？请前往阅读：</p>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5d836458f265da03d871f6e9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d836458f265da03d871f6e9</a></p>\n</blockquote>\n<h1 id=\"三、玩遍前端\"><a href=\"#三、玩遍前端\" class=\"headerlink\" title=\"三、玩遍前端\"></a>三、玩遍前端</h1><h2 id=\"小tips-元素focus页面不滚动不定位的JS处理\"><a href=\"#小tips-元素focus页面不滚动不定位的JS处理\" class=\"headerlink\" title=\"小tips: 元素focus页面不滚动不定位的JS处理\"></a>小tips: 元素focus页面不滚动不定位的JS处理</h2><p>全新的API参数preventScroll，感觉请阅读原文：</p>\n<blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2019/09/js-focus-preventscroll/</a></p>\n</blockquote>\n<h2 id=\"浏览器的一些“滚动”行为鉴赏\"><a href=\"#浏览器的一些“滚动”行为鉴赏\" class=\"headerlink\" title=\"浏览器的一些“滚动”行为鉴赏\"></a>浏览器的一些“滚动”行为鉴赏</h2><p>应该你遇到所有的“滚动”事件的相关问题和现象都可以在这篇文章里找到了：</p>\n<blockquote>\n<p><a href=\"https://juejin.im/post/5d75adfbe51d4561e84fcc9c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d75adfbe51d4561e84fcc9c</a></p>\n</blockquote>"},{"title":"hexo Yilia主题支持搜索功能","date":"2023-01-22T13:51:01.000Z","_content":"\n# 介绍\n\n当hexo的文章越来越多，依靠标题和tag去搜索有点不够用，因此需要支持搜索功能，hexo查询主要依赖本地索引文件生成，具体步骤如下：\n\n- 安装插件: `npm install --save hexo-generator-search`\n- 根目录下的_config.yml中添加如下配置即可\n\n<!-- more -->\n\n```yaml\nsearch:\n  path: search.xml\n  field: all\n```\n- 添加搜索框，在主题目录`themes/yilia/layout/layout.ejs`下的`<div id=\"wrapper\" class=\"body-wrap\">`后面添加如下代码：\n\n```html\n<% if(theme.search) { %>\n  <div class=\"page-header\" style=\"\">\n      <%# 《集成本地搜索 %>\n      <script type=\"text/javascript\" src=\"/js/search.js\"></script>\n      <div id=\"local-search\" class=\"local-search local-search-plugin\" style=\"\">\n        <input type=\"search\" placeholder=\"站内搜索\" id=\"local-search-input\" class=\"local-search-input-cls\" style=\"\">\n        <i id=\"local-search-icon-search\" class=\"icon\" aria-hidden=\"true\" title=\"站内搜索\">🔍</i>\n        <div id=\"local-search-result\" class=\"local-search-result-cls\"></div>\n      </div>\n  \n      <script type=\"text/javascript\" src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n      <script>\n          if ($('.local-search').size()) {\n            $.getScript('/search/search.js', function() {\n              searchFunc(\"/search.xml\", 'local-search-input', 'local-search-result');\n            });\n          }\n      </script>\n      <%# 集成本地搜索》 %>\n  </div>\n  <% } %>\n  <div id=\"wrapper\" class=\"body-wrap\">\n```\n\n- 新建`themes/yilia/source/search`目录，同时新增`search.js`和`search.css`文件\n\n代码如下：\n\n**search.js**\n```javascript\n// A local search script with the help of hexo-generator-search\n// Copyright (C) 2015 \n// Joseph Pan <http://github.com/wzpan>\n// Shuhao Mao <http://github.com/maoshuhao>\n// This library is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as\n// published by the Free Software Foundation; either version 2.1 of the\n// License, or (at your option) any later version.\n// \n// This library is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n// \n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n// 02110-1301 USA\n// \n\nvar searchFunc = function (path, search_id, content_id) {\n    'use strict';\n    var BTN = \"<i id='local-search-close'>x</i>\";\n    $.ajax({\n        url: path,\n        dataType: \"xml\",\n        success: function (xmlResponse) {\n            // get the contents from search data\n            var datas = $(\"entry\", xmlResponse).map(function () {\n                return {\n                    title: $(\"title\", this).text(),\n                    content: $(\"content\", this).text(),\n                    url: $(\"url\", this).text()\n                };\n            }).get();\n\n            var $input = document.getElementById(search_id);\n            var $resultContent = document.getElementById(content_id);\n\n            $input.addEventListener('input', function () {\n                var str = '<ul class=\\\"search-result-list\\\">';\n                var keywords = this.value.trim().toLowerCase().split(/[\\s\\-]+/);\n                $resultContent.innerHTML = \"\";\n                if (this.value.trim().length <= 0) {\n                    return;\n                }\n                // perform local searching\n                datas.forEach(function (data) {\n                    var isMatch = true;\n                    var content_index = [];\n                    if (!data.title || data.title.trim() === '') {\n                        data.title = \"Untitled\";\n                    }\n                    var data_title = data.title.trim().toLowerCase();\n                    var data_content = data.content.trim().replace(/<[^>]+>/g, \"\").toLowerCase();\n                    var data_url = data.url;\n                    var index_title = -1;\n                    var index_content = -1;\n                    var first_occur = -1;\n                    // only match artiles with not empty contents\n                    if (data_content !== '') {\n                        keywords.forEach(function (keyword, i) {\n                            index_title = data_title.indexOf(keyword);\n                            index_content = data_content.indexOf(keyword);\n\n                            if (index_title < 0 && index_content < 0) {\n                                isMatch = false;\n                            } else {\n                                if (index_content < 0) {\n                                    index_content = 0;\n                                }\n                                if (i == 0) {\n                                    first_occur = index_content;\n                                }\n                                // content_index.push({index_content:index_content, keyword_len:keyword_len});\n                            }\n                        });\n                    } else {\n                        isMatch = false;\n                    }\n                    // show search results\n                    if (isMatch) {\n                        str += \"<li><a href='\" + data_url +\n                            \"' class='search-result-title'>\" + data_title + \"</a>\";\n                        var content = data.content.trim().replace(/<[^>]+>/g, \"\");\n                        if (first_occur >= 0) {\n                            // cut out 100 characters\n                            var start = first_occur - 20;\n                            var end = first_occur + 80;\n\n                            if (start < 0) {\n                                start = 0;\n                            }\n\n                            if (start == 0) {\n                                end = 100;\n                            }\n\n                            if (end > content.length) {\n                                end = content.length;\n                            }\n\n                            var match_content = content.substr(start, end);\n\n                            // highlight all keywords\n                            keywords.forEach(function (keyword) {\n                                var regS = new RegExp(keyword, \"gi\");\n                                match_content = match_content.replace(regS,\n                                    \"<em class=\\\"search-keyword\\\">\" +\n                                    keyword + \"</em>\");\n                            });\n\n                            str += \"<p class=\\\"search-result\\\">\" + match_content +\n                                \"...</p>\"\n                        }\n                        str += \"</li>\";\n                    }\n                });\n                str += \"</ul>\";\n                if (str.indexOf('<li>') === -1) {\n                    return $resultContent.innerHTML = BTN +\n                        \"<ul><span class='local-search-empty'>没有找到内容，更换下搜索词试试吧~<span></ul>\";\n                }\n                $resultContent.innerHTML = BTN + str;\n            });\n        }\n    });\n    $(document).on('click', '#local-search-close', function () {\n        $('#local-search-input').val('');\n        $('#local-search-result').html('');\n    });\n    $(document).on('focus', '#local-search', function () {\n        $('#local-search-icon-search').html('❌');\n        $('#local-search-icon-search').attr('id', 'local-search-icon-close');\n        //console.log(\"66666\");\n    });\n    $(document).on('click', '#local-search-icon-close', function () {\n        $('#local-search-input').val('');\n        $('#local-search-result').html('');\n        $('#local-search-icon-close').html('🔍');\n        $('#local-search-icon-close').attr('id', 'local-search-icon-search');\n        //console.log(\"1111\");\n    });\n}\n```\n\n**search.css**\n```css\n.local-search {\n    margin:16px 30px;\n    position: relative;\n}\n.local-search-input-cls {\n    width: 80%;\n    /* margin: 10px 0; */\n    padding: 8px 12px;\n    border-radius: 4px;\n    border: 2px solid #4d4d4d;\n    color: #666;\n    font-size: 14px\n}\n.local-search-input-cls::-webkit-input-placeholder {\n    color: #2d2626;\n}\n.local-search-input-cls::-moz-input-placeholder {\n    color: #2d2626;\n}\n.local-search-input-cls::-ms-input-placeholder {\n    color: #2d2626;\n}\n#local-search-close {\n    content:'x';\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    background: #fff;\n    color: #888;\n    border-radius: 100%;\n    line-height: 16px;\n    text-align: center;\n    font-size: 16px;\n    font-family: consolas;\n    border: 1px solid #ccc;\n    display: block;\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    font-style: normal;\n    font-weight: 400;\n    transform: rotateZ(0);\n    transition: all .3s\n}\n#local-search-close:hover {\n    border-color: #666;\n    color: #222;\n    transform: rotateZ(180deg);\n    transition: all .3s\n}\n.local-search-result-cls {\n    position: absolute;\n    z-index: 99;\n    width: 100%;\n    /* top: 50px; */\n    right: -16px;\n}\n.local-search-result-cls .local-search-empty {\n    color: #888;\n    line-height: 44px;\n    text-align: center;\n    display: block;\n    font-size: 16px;\n    font-weight: 400\n}\n.local-search-result-cls ul {\n    width: 360px;\n    max-height: 450px;\n    min-height: 0;\n    height: auto;\n    overflow-y: auto;\n    border: 1px solid #ccc;\n    padding: 10px 20px;\n    background: rgba(255, 255, 255, 0.9);\n    box-shadow: 3px 4px 10px #7dc3d8;\n    margin-top: 20px;\n}\n.local-search-result-cls ul li {\n    text-align: left;\n    border-bottom: 1px solid #bdb7b7;\n    padding-bottom: 20px;\n    margin-bottom: 20px;\n    line-height: 30px;\n    font-weight: 400\n}\n.local-search-result-cls ul li:last-child {\n    border-bottom: none;\n    margin-bottom: 0\n}\n.local-search-result-cls ul li a {\n    margin-top: 20px;\n    font-size: 16px;\n    text-decoration:none;\n    transition: all .3s\n}\n.local-search-result-cls ul li a:hover {\n    text-decoration:underline;\n}\n.local-search-result-cls ul li p {\n    margin-top: 10px;\n    font-size: 14px;\n    max-height: 124px;\n    overflow: hidden\n}\n.local-search-result-cls ul li em.search-keyword {\n    color: #e58c7c;\n    font-weight:bold;\n}\n.local-search-plugin .local-search-input-cls {\n    opacity: .6;\n    width: 80%;\n    transition: all .3s\n}\n.local-search-plugin .local-search-input-cls:hover {\n    opacity: 1;\n    width: 80%;\n    transition: all .3s\n}\n.local-search-plugin .icon {\n    position: relative;\n    left: -30px;\n    color: #999;\n    cursor: pointer\n}\n```\n# 参考资料\n\n[为Hexo博客Yilia主题添加本地站内搜索功能](https://gaomf.cn/2016/10/10/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2Yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/)","source":"_posts/share/hexo-search.md","raw":"---\ntitle: hexo Yilia主题支持搜索功能\ndate: 2023-01-22 21:51:01\ntags:\n    - 技术分享\n---\n\n# 介绍\n\n当hexo的文章越来越多，依靠标题和tag去搜索有点不够用，因此需要支持搜索功能，hexo查询主要依赖本地索引文件生成，具体步骤如下：\n\n- 安装插件: `npm install --save hexo-generator-search`\n- 根目录下的_config.yml中添加如下配置即可\n\n<!-- more -->\n\n```yaml\nsearch:\n  path: search.xml\n  field: all\n```\n- 添加搜索框，在主题目录`themes/yilia/layout/layout.ejs`下的`<div id=\"wrapper\" class=\"body-wrap\">`后面添加如下代码：\n\n```html\n<% if(theme.search) { %>\n  <div class=\"page-header\" style=\"\">\n      <%# 《集成本地搜索 %>\n      <script type=\"text/javascript\" src=\"/js/search.js\"></script>\n      <div id=\"local-search\" class=\"local-search local-search-plugin\" style=\"\">\n        <input type=\"search\" placeholder=\"站内搜索\" id=\"local-search-input\" class=\"local-search-input-cls\" style=\"\">\n        <i id=\"local-search-icon-search\" class=\"icon\" aria-hidden=\"true\" title=\"站内搜索\">🔍</i>\n        <div id=\"local-search-result\" class=\"local-search-result-cls\"></div>\n      </div>\n  \n      <script type=\"text/javascript\" src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n      <script>\n          if ($('.local-search').size()) {\n            $.getScript('/search/search.js', function() {\n              searchFunc(\"/search.xml\", 'local-search-input', 'local-search-result');\n            });\n          }\n      </script>\n      <%# 集成本地搜索》 %>\n  </div>\n  <% } %>\n  <div id=\"wrapper\" class=\"body-wrap\">\n```\n\n- 新建`themes/yilia/source/search`目录，同时新增`search.js`和`search.css`文件\n\n代码如下：\n\n**search.js**\n```javascript\n// A local search script with the help of hexo-generator-search\n// Copyright (C) 2015 \n// Joseph Pan <http://github.com/wzpan>\n// Shuhao Mao <http://github.com/maoshuhao>\n// This library is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as\n// published by the Free Software Foundation; either version 2.1 of the\n// License, or (at your option) any later version.\n// \n// This library is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n// \n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n// 02110-1301 USA\n// \n\nvar searchFunc = function (path, search_id, content_id) {\n    'use strict';\n    var BTN = \"<i id='local-search-close'>x</i>\";\n    $.ajax({\n        url: path,\n        dataType: \"xml\",\n        success: function (xmlResponse) {\n            // get the contents from search data\n            var datas = $(\"entry\", xmlResponse).map(function () {\n                return {\n                    title: $(\"title\", this).text(),\n                    content: $(\"content\", this).text(),\n                    url: $(\"url\", this).text()\n                };\n            }).get();\n\n            var $input = document.getElementById(search_id);\n            var $resultContent = document.getElementById(content_id);\n\n            $input.addEventListener('input', function () {\n                var str = '<ul class=\\\"search-result-list\\\">';\n                var keywords = this.value.trim().toLowerCase().split(/[\\s\\-]+/);\n                $resultContent.innerHTML = \"\";\n                if (this.value.trim().length <= 0) {\n                    return;\n                }\n                // perform local searching\n                datas.forEach(function (data) {\n                    var isMatch = true;\n                    var content_index = [];\n                    if (!data.title || data.title.trim() === '') {\n                        data.title = \"Untitled\";\n                    }\n                    var data_title = data.title.trim().toLowerCase();\n                    var data_content = data.content.trim().replace(/<[^>]+>/g, \"\").toLowerCase();\n                    var data_url = data.url;\n                    var index_title = -1;\n                    var index_content = -1;\n                    var first_occur = -1;\n                    // only match artiles with not empty contents\n                    if (data_content !== '') {\n                        keywords.forEach(function (keyword, i) {\n                            index_title = data_title.indexOf(keyword);\n                            index_content = data_content.indexOf(keyword);\n\n                            if (index_title < 0 && index_content < 0) {\n                                isMatch = false;\n                            } else {\n                                if (index_content < 0) {\n                                    index_content = 0;\n                                }\n                                if (i == 0) {\n                                    first_occur = index_content;\n                                }\n                                // content_index.push({index_content:index_content, keyword_len:keyword_len});\n                            }\n                        });\n                    } else {\n                        isMatch = false;\n                    }\n                    // show search results\n                    if (isMatch) {\n                        str += \"<li><a href='\" + data_url +\n                            \"' class='search-result-title'>\" + data_title + \"</a>\";\n                        var content = data.content.trim().replace(/<[^>]+>/g, \"\");\n                        if (first_occur >= 0) {\n                            // cut out 100 characters\n                            var start = first_occur - 20;\n                            var end = first_occur + 80;\n\n                            if (start < 0) {\n                                start = 0;\n                            }\n\n                            if (start == 0) {\n                                end = 100;\n                            }\n\n                            if (end > content.length) {\n                                end = content.length;\n                            }\n\n                            var match_content = content.substr(start, end);\n\n                            // highlight all keywords\n                            keywords.forEach(function (keyword) {\n                                var regS = new RegExp(keyword, \"gi\");\n                                match_content = match_content.replace(regS,\n                                    \"<em class=\\\"search-keyword\\\">\" +\n                                    keyword + \"</em>\");\n                            });\n\n                            str += \"<p class=\\\"search-result\\\">\" + match_content +\n                                \"...</p>\"\n                        }\n                        str += \"</li>\";\n                    }\n                });\n                str += \"</ul>\";\n                if (str.indexOf('<li>') === -1) {\n                    return $resultContent.innerHTML = BTN +\n                        \"<ul><span class='local-search-empty'>没有找到内容，更换下搜索词试试吧~<span></ul>\";\n                }\n                $resultContent.innerHTML = BTN + str;\n            });\n        }\n    });\n    $(document).on('click', '#local-search-close', function () {\n        $('#local-search-input').val('');\n        $('#local-search-result').html('');\n    });\n    $(document).on('focus', '#local-search', function () {\n        $('#local-search-icon-search').html('❌');\n        $('#local-search-icon-search').attr('id', 'local-search-icon-close');\n        //console.log(\"66666\");\n    });\n    $(document).on('click', '#local-search-icon-close', function () {\n        $('#local-search-input').val('');\n        $('#local-search-result').html('');\n        $('#local-search-icon-close').html('🔍');\n        $('#local-search-icon-close').attr('id', 'local-search-icon-search');\n        //console.log(\"1111\");\n    });\n}\n```\n\n**search.css**\n```css\n.local-search {\n    margin:16px 30px;\n    position: relative;\n}\n.local-search-input-cls {\n    width: 80%;\n    /* margin: 10px 0; */\n    padding: 8px 12px;\n    border-radius: 4px;\n    border: 2px solid #4d4d4d;\n    color: #666;\n    font-size: 14px\n}\n.local-search-input-cls::-webkit-input-placeholder {\n    color: #2d2626;\n}\n.local-search-input-cls::-moz-input-placeholder {\n    color: #2d2626;\n}\n.local-search-input-cls::-ms-input-placeholder {\n    color: #2d2626;\n}\n#local-search-close {\n    content:'x';\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    background: #fff;\n    color: #888;\n    border-radius: 100%;\n    line-height: 16px;\n    text-align: center;\n    font-size: 16px;\n    font-family: consolas;\n    border: 1px solid #ccc;\n    display: block;\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    font-style: normal;\n    font-weight: 400;\n    transform: rotateZ(0);\n    transition: all .3s\n}\n#local-search-close:hover {\n    border-color: #666;\n    color: #222;\n    transform: rotateZ(180deg);\n    transition: all .3s\n}\n.local-search-result-cls {\n    position: absolute;\n    z-index: 99;\n    width: 100%;\n    /* top: 50px; */\n    right: -16px;\n}\n.local-search-result-cls .local-search-empty {\n    color: #888;\n    line-height: 44px;\n    text-align: center;\n    display: block;\n    font-size: 16px;\n    font-weight: 400\n}\n.local-search-result-cls ul {\n    width: 360px;\n    max-height: 450px;\n    min-height: 0;\n    height: auto;\n    overflow-y: auto;\n    border: 1px solid #ccc;\n    padding: 10px 20px;\n    background: rgba(255, 255, 255, 0.9);\n    box-shadow: 3px 4px 10px #7dc3d8;\n    margin-top: 20px;\n}\n.local-search-result-cls ul li {\n    text-align: left;\n    border-bottom: 1px solid #bdb7b7;\n    padding-bottom: 20px;\n    margin-bottom: 20px;\n    line-height: 30px;\n    font-weight: 400\n}\n.local-search-result-cls ul li:last-child {\n    border-bottom: none;\n    margin-bottom: 0\n}\n.local-search-result-cls ul li a {\n    margin-top: 20px;\n    font-size: 16px;\n    text-decoration:none;\n    transition: all .3s\n}\n.local-search-result-cls ul li a:hover {\n    text-decoration:underline;\n}\n.local-search-result-cls ul li p {\n    margin-top: 10px;\n    font-size: 14px;\n    max-height: 124px;\n    overflow: hidden\n}\n.local-search-result-cls ul li em.search-keyword {\n    color: #e58c7c;\n    font-weight:bold;\n}\n.local-search-plugin .local-search-input-cls {\n    opacity: .6;\n    width: 80%;\n    transition: all .3s\n}\n.local-search-plugin .local-search-input-cls:hover {\n    opacity: 1;\n    width: 80%;\n    transition: all .3s\n}\n.local-search-plugin .icon {\n    position: relative;\n    left: -30px;\n    color: #999;\n    cursor: pointer\n}\n```\n# 参考资料\n\n[为Hexo博客Yilia主题添加本地站内搜索功能](https://gaomf.cn/2016/10/10/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2Yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/)","slug":"share/hexo-search","published":1,"updated":"2023-01-22T15:26:09.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk97002awspc8pb7nd3l","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>当hexo的文章越来越多，依靠标题和tag去搜索有点不够用，因此需要支持搜索功能，hexo查询主要依赖本地索引文件生成，具体步骤如下：</p>\n<ul>\n<li>安装插件: <code>npm install --save hexo-generator-search</code></li>\n<li>根目录下的_config.yml中添加如下配置即可</li>\n</ul>\n<a id=\"more\"></a>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">all</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加搜索框，在主题目录<code>themes/yilia/layout/layout.ejs</code>下的<code>&lt;div id=&quot;wrapper&quot; class=&quot;body-wrap&quot;&gt;</code>后面添加如下代码：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">theme.search</span>) &#123; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%#</span> 《集成本地搜索 %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/search.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"local-search local-search-plugin\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"站内搜索\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search-input\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"local-search-input-cls\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search-icon-search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"站内搜索\"</span>&gt;</span>🔍<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search-result\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"local-search-result-cls\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> ($(<span class=\"string\">'.local-search'</span>).size()) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $.getScript(<span class=\"string\">'/search/search.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              searchFunc(<span class=\"string\">\"/search.xml\"</span>, <span class=\"string\">'local-search-input'</span>, <span class=\"string\">'local-search-result'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%#</span> 集成本地搜索》 %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body-wrap\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建<code>themes/yilia/source/search</code>目录，同时新增<code>search.js</code>和<code>search.css</code>文件</li>\n</ul>\n<p>代码如下：</p>\n<p><strong>search.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A local search script with the help of hexo-generator-search</span></span><br><span class=\"line\"><span class=\"comment\">// Copyright (C) 2015 </span></span><br><span class=\"line\"><span class=\"comment\">// Joseph Pan &lt;http://github.com/wzpan&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Shuhao Mao &lt;http://github.com/maoshuhao&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// This library is free software; you can redistribute it and/or modify</span></span><br><span class=\"line\"><span class=\"comment\">// it under the terms of the GNU Lesser General Public License as</span></span><br><span class=\"line\"><span class=\"comment\">// published by the Free Software Foundation; either version 2.1 of the</span></span><br><span class=\"line\"><span class=\"comment\">// License, or (at your option) any later version.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// This library is distributed in the hope that it will be useful, but</span></span><br><span class=\"line\"><span class=\"comment\">// WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></span><br><span class=\"line\"><span class=\"comment\">// Lesser General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// You should have received a copy of the GNU Lesser General Public</span></span><br><span class=\"line\"><span class=\"comment\">// License along with this library; if not, write to the Free Software</span></span><br><span class=\"line\"><span class=\"comment\">// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span></span><br><span class=\"line\"><span class=\"comment\">// 02110-1301 USA</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path, search_id, content_id</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> BTN = <span class=\"string\">\"&lt;i id='local-search-close'&gt;x&lt;/i&gt;\"</span>;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: path,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"xml\"</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xmlResponse</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// get the contents from search data</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> datas = $(<span class=\"string\">\"entry\"</span>, xmlResponse).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    title: $(<span class=\"string\">\"title\"</span>, <span class=\"keyword\">this</span>).text(),</span><br><span class=\"line\">                    content: $(<span class=\"string\">\"content\"</span>, <span class=\"keyword\">this</span>).text(),</span><br><span class=\"line\">                    url: $(<span class=\"string\">\"url\"</span>, <span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;).get();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> $input = <span class=\"built_in\">document</span>.getElementById(search_id);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> $resultContent = <span class=\"built_in\">document</span>.getElementById(content_id);</span><br><span class=\"line\"></span><br><span class=\"line\">            $input.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> str = <span class=\"string\">'&lt;ul class=\\\"search-result-list\\\"&gt;'</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> keywords = <span class=\"keyword\">this</span>.value.trim().toLowerCase().split(<span class=\"regexp\">/[\\s\\-]+/</span>);</span><br><span class=\"line\">                $resultContent.innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.value.trim().length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// perform local searching</span></span><br><span class=\"line\">                datas.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> isMatch = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> content_index = [];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!data.title || data.title.trim() === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                        data.title = <span class=\"string\">\"Untitled\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> data_title = data.title.trim().toLowerCase();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> data_content = data.content.trim().replace(<span class=\"regexp\">/&lt;[^&gt;]+&gt;/g</span>, <span class=\"string\">\"\"</span>).toLowerCase();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> data_url = data.url;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> index_title = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> index_content = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> first_occur = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// only match artiles with not empty contents</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (data_content !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                        keywords.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keyword, i</span>) </span>&#123;</span><br><span class=\"line\">                            index_title = data_title.indexOf(keyword);</span><br><span class=\"line\">                            index_content = data_content.indexOf(keyword);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (index_title &lt; <span class=\"number\">0</span> &amp;&amp; index_content &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                isMatch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (index_content &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                    index_content = <span class=\"number\">0</span>;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                    first_occur = index_content;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"comment\">// content_index.push(&#123;index_content:index_content, keyword_len:keyword_len&#125;);</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        isMatch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// show search results</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isMatch) &#123;</span><br><span class=\"line\">                        str += <span class=\"string\">\"&lt;li&gt;&lt;a href='\"</span> + data_url +</span><br><span class=\"line\">                            <span class=\"string\">\"' class='search-result-title'&gt;\"</span> + data_title + <span class=\"string\">\"&lt;/a&gt;\"</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> content = data.content.trim().replace(<span class=\"regexp\">/&lt;[^&gt;]+&gt;/g</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (first_occur &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// cut out 100 characters</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> start = first_occur - <span class=\"number\">20</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> end = first_occur + <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (start &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                start = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (start == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                end = <span class=\"number\">100</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (end &gt; content.length) &#123;</span><br><span class=\"line\">                                end = content.length;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> match_content = content.substr(start, end);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// highlight all keywords</span></span><br><span class=\"line\">                            keywords.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keyword</span>) </span>&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">var</span> regS = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(keyword, <span class=\"string\">\"gi\"</span>);</span><br><span class=\"line\">                                match_content = match_content.replace(regS,</span><br><span class=\"line\">                                    <span class=\"string\">\"&lt;em class=\\\"search-keyword\\\"&gt;\"</span> +</span><br><span class=\"line\">                                    keyword + <span class=\"string\">\"&lt;/em&gt;\"</span>);</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                            str += <span class=\"string\">\"&lt;p class=\\\"search-result\\\"&gt;\"</span> + match_content +</span><br><span class=\"line\">                                <span class=\"string\">\"...&lt;/p&gt;\"</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        str += <span class=\"string\">\"&lt;/li&gt;\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                str += <span class=\"string\">\"&lt;/ul&gt;\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">'&lt;li&gt;'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> $resultContent.innerHTML = BTN +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;ul&gt;&lt;span class='local-search-empty'&gt;没有找到内容，更换下搜索词试试吧~&lt;span&gt;&lt;/ul&gt;\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                $resultContent.innerHTML = BTN + str;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#local-search-close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-input'</span>).val(<span class=\"string\">''</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-result'</span>).html(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'focus'</span>, <span class=\"string\">'#local-search'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-search'</span>).html(<span class=\"string\">'❌'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-search'</span>).attr(<span class=\"string\">'id'</span>, <span class=\"string\">'local-search-icon-close'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"66666\");</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#local-search-icon-close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-input'</span>).val(<span class=\"string\">''</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-result'</span>).html(<span class=\"string\">''</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-close'</span>).html(<span class=\"string\">'🔍'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-close'</span>).attr(<span class=\"string\">'id'</span>, <span class=\"string\">'local-search-icon-search'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"1111\");</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>search.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.local-search</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">16px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* margin: 10px 0; */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span> <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#4d4d4d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#2d2626</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">::-moz-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#2d2626</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">::-ms-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#2d2626</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#local-search-close</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">'x'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: consolas;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateZ</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#local-search-close</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#222</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateZ</span>(180deg);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">99</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* top: 50px; */</span></span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-class\">.local-search-empty</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">44px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">360px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-height</span>: <span class=\"number\">450px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-y</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.9);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">4px</span> <span class=\"number\">10px</span> <span class=\"number\">#7dc3d8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#bdb7b7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-height</span>: <span class=\"number\">124px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">em</span><span class=\"selector-class\">.search-keyword</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#e58c7c</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-plugin</span> <span class=\"selector-class\">.local-search-input-cls</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: .<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-plugin</span> <span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-plugin</span> <span class=\"selector-class\">.icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://gaomf.cn/2016/10/10/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2Yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">为Hexo博客Yilia主题添加本地站内搜索功能</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>当hexo的文章越来越多，依靠标题和tag去搜索有点不够用，因此需要支持搜索功能，hexo查询主要依赖本地索引文件生成，具体步骤如下：</p>\n<ul>\n<li>安装插件: <code>npm install --save hexo-generator-search</code></li>\n<li>根目录下的_config.yml中添加如下配置即可</li>\n</ul>","more":"<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">all</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加搜索框，在主题目录<code>themes/yilia/layout/layout.ejs</code>下的<code>&lt;div id=&quot;wrapper&quot; class=&quot;body-wrap&quot;&gt;</code>后面添加如下代码：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span>(<span class=\"attr\">theme.search</span>) &#123; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page-header\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%#</span> 《集成本地搜索 %&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/search.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"local-search local-search-plugin\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"站内搜索\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search-input\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"local-search-input-cls\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search-icon-search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"站内搜索\"</span>&gt;</span>🔍<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"local-search-result\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"local-search-result-cls\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> ($(<span class=\"string\">'.local-search'</span>).size()) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $.getScript(<span class=\"string\">'/search/search.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">              searchFunc(<span class=\"string\">\"/search.xml\"</span>, <span class=\"string\">'local-search-input'</span>, <span class=\"string\">'local-search-result'</span>);</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">%#</span> 集成本地搜索》 %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body-wrap\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建<code>themes/yilia/source/search</code>目录，同时新增<code>search.js</code>和<code>search.css</code>文件</li>\n</ul>\n<p>代码如下：</p>\n<p><strong>search.js</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A local search script with the help of hexo-generator-search</span></span><br><span class=\"line\"><span class=\"comment\">// Copyright (C) 2015 </span></span><br><span class=\"line\"><span class=\"comment\">// Joseph Pan &lt;http://github.com/wzpan&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Shuhao Mao &lt;http://github.com/maoshuhao&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// This library is free software; you can redistribute it and/or modify</span></span><br><span class=\"line\"><span class=\"comment\">// it under the terms of the GNU Lesser General Public License as</span></span><br><span class=\"line\"><span class=\"comment\">// published by the Free Software Foundation; either version 2.1 of the</span></span><br><span class=\"line\"><span class=\"comment\">// License, or (at your option) any later version.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// This library is distributed in the hope that it will be useful, but</span></span><br><span class=\"line\"><span class=\"comment\">// WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></span><br><span class=\"line\"><span class=\"comment\">// Lesser General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// You should have received a copy of the GNU Lesser General Public</span></span><br><span class=\"line\"><span class=\"comment\">// License along with this library; if not, write to the Free Software</span></span><br><span class=\"line\"><span class=\"comment\">// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span></span><br><span class=\"line\"><span class=\"comment\">// 02110-1301 USA</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> searchFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path, search_id, content_id</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> BTN = <span class=\"string\">\"&lt;i id='local-search-close'&gt;x&lt;/i&gt;\"</span>;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: path,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"xml\"</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xmlResponse</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// get the contents from search data</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> datas = $(<span class=\"string\">\"entry\"</span>, xmlResponse).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    title: $(<span class=\"string\">\"title\"</span>, <span class=\"keyword\">this</span>).text(),</span><br><span class=\"line\">                    content: $(<span class=\"string\">\"content\"</span>, <span class=\"keyword\">this</span>).text(),</span><br><span class=\"line\">                    url: $(<span class=\"string\">\"url\"</span>, <span class=\"keyword\">this</span>).text()</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;).get();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> $input = <span class=\"built_in\">document</span>.getElementById(search_id);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> $resultContent = <span class=\"built_in\">document</span>.getElementById(content_id);</span><br><span class=\"line\"></span><br><span class=\"line\">            $input.addEventListener(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> str = <span class=\"string\">'&lt;ul class=\\\"search-result-list\\\"&gt;'</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> keywords = <span class=\"keyword\">this</span>.value.trim().toLowerCase().split(<span class=\"regexp\">/[\\s\\-]+/</span>);</span><br><span class=\"line\">                $resultContent.innerHTML = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.value.trim().length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// perform local searching</span></span><br><span class=\"line\">                datas.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> isMatch = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> content_index = [];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!data.title || data.title.trim() === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                        data.title = <span class=\"string\">\"Untitled\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> data_title = data.title.trim().toLowerCase();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> data_content = data.content.trim().replace(<span class=\"regexp\">/&lt;[^&gt;]+&gt;/g</span>, <span class=\"string\">\"\"</span>).toLowerCase();</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> data_url = data.url;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> index_title = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> index_content = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> first_occur = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// only match artiles with not empty contents</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (data_content !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">                        keywords.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keyword, i</span>) </span>&#123;</span><br><span class=\"line\">                            index_title = data_title.indexOf(keyword);</span><br><span class=\"line\">                            index_content = data_content.indexOf(keyword);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (index_title &lt; <span class=\"number\">0</span> &amp;&amp; index_content &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                isMatch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (index_content &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                    index_content = <span class=\"number\">0</span>;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                    first_occur = index_content;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"comment\">// content_index.push(&#123;index_content:index_content, keyword_len:keyword_len&#125;);</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        isMatch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// show search results</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isMatch) &#123;</span><br><span class=\"line\">                        str += <span class=\"string\">\"&lt;li&gt;&lt;a href='\"</span> + data_url +</span><br><span class=\"line\">                            <span class=\"string\">\"' class='search-result-title'&gt;\"</span> + data_title + <span class=\"string\">\"&lt;/a&gt;\"</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> content = data.content.trim().replace(<span class=\"regexp\">/&lt;[^&gt;]+&gt;/g</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (first_occur &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// cut out 100 characters</span></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> start = first_occur - <span class=\"number\">20</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">var</span> end = first_occur + <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (start &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                start = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (start == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                end = <span class=\"number\">100</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (end &gt; content.length) &#123;</span><br><span class=\"line\">                                end = content.length;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">var</span> match_content = content.substr(start, end);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// highlight all keywords</span></span><br><span class=\"line\">                            keywords.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keyword</span>) </span>&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">var</span> regS = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(keyword, <span class=\"string\">\"gi\"</span>);</span><br><span class=\"line\">                                match_content = match_content.replace(regS,</span><br><span class=\"line\">                                    <span class=\"string\">\"&lt;em class=\\\"search-keyword\\\"&gt;\"</span> +</span><br><span class=\"line\">                                    keyword + <span class=\"string\">\"&lt;/em&gt;\"</span>);</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                            str += <span class=\"string\">\"&lt;p class=\\\"search-result\\\"&gt;\"</span> + match_content +</span><br><span class=\"line\">                                <span class=\"string\">\"...&lt;/p&gt;\"</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        str += <span class=\"string\">\"&lt;/li&gt;\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                str += <span class=\"string\">\"&lt;/ul&gt;\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">'&lt;li&gt;'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> $resultContent.innerHTML = BTN +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;ul&gt;&lt;span class='local-search-empty'&gt;没有找到内容，更换下搜索词试试吧~&lt;span&gt;&lt;/ul&gt;\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                $resultContent.innerHTML = BTN + str;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#local-search-close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-input'</span>).val(<span class=\"string\">''</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-result'</span>).html(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'focus'</span>, <span class=\"string\">'#local-search'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-search'</span>).html(<span class=\"string\">'❌'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-search'</span>).attr(<span class=\"string\">'id'</span>, <span class=\"string\">'local-search-icon-close'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"66666\");</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $(<span class=\"built_in\">document</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#local-search-icon-close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-input'</span>).val(<span class=\"string\">''</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-result'</span>).html(<span class=\"string\">''</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-close'</span>).html(<span class=\"string\">'🔍'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'#local-search-icon-close'</span>).attr(<span class=\"string\">'id'</span>, <span class=\"string\">'local-search-icon-search'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"1111\");</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>search.css</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.local-search</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">16px</span> <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* margin: 10px 0; */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span> <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#4d4d4d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#2d2626</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">::-moz-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#2d2626</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">::-ms-input-placeholder</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#2d2626</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#local-search-close</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">'x'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: consolas;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateZ</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#local-search-close</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#222</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotateZ</span>(180deg);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">99</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"comment\">/* top: 50px; */</span></span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-class\">.local-search-empty</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">44px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">360px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-height</span>: <span class=\"number\">450px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-y</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.9);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">3px</span> <span class=\"number\">4px</span> <span class=\"number\">10px</span> <span class=\"number\">#7dc3d8</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#bdb7b7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:none;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">max-height</span>: <span class=\"number\">124px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-result-cls</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">em</span><span class=\"selector-class\">.search-keyword</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#e58c7c</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-plugin</span> <span class=\"selector-class\">.local-search-input-cls</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: .<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-plugin</span> <span class=\"selector-class\">.local-search-input-cls</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.local-search-plugin</span> <span class=\"selector-class\">.icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://gaomf.cn/2016/10/10/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2Yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">为Hexo博客Yilia主题添加本地站内搜索功能</a></p>"},{"title":"java tomcat服务无缘无故挂掉分析和解决方案","date":"2022-12-17T13:21:01.000Z","_content":"\n# 背景\n最近有同事反应有时候xxx系统有时候会时不时出现服务异常提示，一上机器，发现xxx服务进程不在，重启服务后又恢复了，所以这边就需要去跟进问题。\n\n# 问题定位\njava tomcat服务挂掉原因，主要怀疑方向有这几个：\n1. 服务器被人重启，导致服务没有起来\n2. 错误异常导致程序挂掉\n3. 服务器占用内存过高，Linux强制退出程序\n4. 其他原因\n下面就开始逐一排查\n\n<!--more-->\n\n## 服务器重启\n如何查看服务器是否被重启，主要依据下面的命令：\n\n`who -b`查看最后一次重启时间\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1aca3c9b441642a5b913e2ea7778efe1~tplv-k3u1fbpfcp-watermark.image?)\n`last reboot` 查看服务器历史重启\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fb16e2d74b74654a20289db8a0c31c4~tplv-k3u1fbpfcp-watermark.image?)\n\n发现服务器重启时间是几个月前的事，因此可以排除。\n\n## 错误异常导致程序挂掉\njava服务采用spring log分级日志，直接看对应时间点日志，并没有发现什么，因此可以排除掉。\n\n## 服务器占用内存过高，Linux强制退出程序\n如何查看服务器系统日志，可以查看文件：`/var/log/messages`。\n> message日志包含了系统启动时的引导消息，以及系统运行时的其他状态消息。IO 错误、网络错误和其他系统错误都会记录到这个文件中。\n\n如何排查呢？执行以下命令：\n`cat /var/log/messages | grep java`\n然后发现有下面日志：\n```shell\nOut of memory: Kill process 9682 (java) score 9 or sacrifice child\n```\n因此判断由于内存占用过高，java服务被系统误杀了。\n既然定位到问题根源，那么为了更好的解决问题，我们继续追踪问题，为什么系统会kill java服务，而不杀掉其他进程呢？这里就需要了解一下Linux Out of Memory (OOM) killer机制。\n\n# Linux OOM机制\n## 是什么\nLinux内核设计的一种机制，在内存不足的时候，会选择一个占用内存较大的进程并kill掉这个进程，以满足系统内存申请需求。\n## 触发机制\n触发条件：内存不足，为什么会出现内存不足，这里涉及到Linux内存结构和使用机制：\n1. 物理内存结构\n2. overcommit机制\n3. OOM killer机制\n\n### Linux内存结构\n这里就简单讲一下，具体描述可以google一下Linux物理内存结构。\nLinux物理内存结构，Linux内核会把物理内存按照`node（节点） > zone（分区）> page (内存页)`三级结构进行划分，俗称内存管理系统，然后CPU会根据这种内存管理系统去调用内存。简单介绍以下概念：\n- node节点：每个CPU都有自己的node内存节点，可以多个也可以单个，单个叫UMA架构，多个叫NUMA架构\n- zone分区：每个Node划分很多zone，每个zone都有自己的功能定义，这种只是从软件层面划分定义。zone里还有一个概念叫分配价值链\n\t-  分配价值链： 普通的内存分配会有一个“价值”的层次结构\n- page内存页：属于zone下面的内存页，每个页基础大小是4K，他们维护在一个叫free_area的数组结构中\n下面是从网上找的Linux物理内存结构图：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cca72d58e9a94f978d8cedf43a06a834~tplv-k3u1fbpfcp-watermark.image?)\n\n### 虚拟内存(swap空间)\n相对于物理内存，在 Linux 下还有一个虚拟内存的概念，虚拟内存是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存。用作虚拟内存的磁盘空间被称为`交换空间`（又称 `swap 空间`）。\n\n了解Linux物理内存结构，我们明白Linux 的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。\n\nLinux 内存运行机制:\n- Linux 系统会不时地进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux 也会交换出暂时不用的内存页面，因为这样可以大大节省等待交换所需的时间\n- Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，Linux 内核根据“最近最经常使用”算法，仅仅将一些不经常使用的页面文件交换到虚拟内存\n\n虚拟内存是允许设置大小，这也是解决OMM killer的一种解决方案，具体可以看后面的解决方案。\n\n### overcommit机制\n\n有了虚拟内存的存在，那么进程就可以向系统申请比物理剩余内存更大的使用内存：\n\n> 在实际申请内存的时候，比如申请1G，并不会在物理区域中分配1G的真实物理内存，而是分配1G的虚拟内存，等到需要的时候才去真正申请物理内存，也就是说申请不等于分配\n\n这就是overcommit机制，允许进程申请比物理内存实际大的内存。但是这会面临一个问题，当进程真正需要这么多内存怎么办，Linux的解决方案就是OOM killer。\n\n当然，overcommit也允许设置几种值(vm.overcommit_memory)：\n- 0 – Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存\n- 1 – Always overcommit. 允许overcommit，对内存申请来者不拒。\n- 2 – Don’t overcommit. 禁止overcommit。\n\n## OOM killer机制\n讲完overcommit，终于来到本文重点，OOM killer机制，这应该是很多Linux系统部署服务，开发者所要面临头疼地方。\nOOM killer，全称 Out Of Memory Killer，俗称内存溢出杀手。它是如何执行的呢?\n\n> OMM killer机制：linux会为每个进程算一个分数，最终他会将分数最高的进程kill\n\n有三个进程设置值可以影响到分数值，可手动设置，但是基本上都不会用上，仅用来了解或者临时解决方案：\n- `/proc/<pid>/oom_score_adj`, 取值范围为-1000到1000， 如果将该值设置为-1000，则进程永远不会被杀死，因为此时 badness score 永远返回0\n- `/proc/<pid>/oom_adj`, 取值是-17到+15，取值越高，越容易被干掉。如果是-17，则表示不能被kill\n- `/proc/<pid>/oom_score`, 是系统综合进程的内存消耗量、CPU时间(utime + stime)、存活时间(uptime - start time)和oom_adj计算出的，消耗内存越多分越高。\n\n除了这三个值，还有一种计算方式：子进程内存：Linux在计算进程的内存消耗的时候，会将子进程所耗内存的一半同时算到父进程中。这样，那些子进程比较多的进程就要小心了。\n\n### 如何确定进程是被OOM killer干掉的\njava tomcat查看之前的进程id或进程名，可以通过命令`ps -ef | grep java`获取到。\n其次，查找系统日志`grep \"Out of memory\" /var/log/messages`，对比一下进程id或进程名，进行判断。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e8bc25d25784a47ad2f4c2780581d1d~tplv-k3u1fbpfcp-watermark.image?)\n\n\n\n# 解决方案\n\n## 关闭OOM机制(不推荐，可作为临时解决方案)\n执行以下命令：\n```shell\nsysctl -w vm.overcommit_memory=2\n```\n或者\n```shell\necho \"vm.overcommit_memory=2\" >> /etc/sysctl.conf\n```\n\n或者修改进程oom_score_adj值：\n\n```shell\nsudo echo -1000 > /proc/$pid/oom_score_adj\n```\n或者修改进程oom_adj值:\n- /proc/PID/oom_adj文件，将其置位-17\n\n## 设置java进程最大占用内存(推荐)\njava tomcat服务在启用进程的时候可以设置占用最大内存，具体数值可以参考当前服务器所剩余的内存设置，具体设置如下：\n```shell\njava -Xms512m -Xmx512m -jar xxx.jar\n```\n- Xms: 最小内存\n- Xmx: 最大内存\ntomcat可以在`TOMCAT_HOME/bin/catalina.sh`中设置:\n```shell\n# 在cygwin=false前\nJAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\"\n```\n\n## java守护进程(推荐)\n除了设置最大占用内存设置，还可以增加守护进程从而避免服务异常挂掉进行重启，主要有两种方案：\n1. 第一种常用，通过设置`crontab`脚本去守护。\n2. 第二种是Java `jsvc`方案，利用启动守护进程去监控控制服务进程，从而避免进程无缘无故挂掉自动重启，tomcat本身已有`daemon.sh`，可以直接该脚本即可。\n\n## 优化代码(有能力者可以采用)\n这个可能需要具体问题具体分析了，优化代码占用内存，java网上有很多方案，大家各自采纳符合自己的方案即可。\n\n## 申请更多内存(土豪随意)\n既然是内存不够，那么就直接申请更多资源，就可以满足了，看来还是有钱就能更快解决问题。\n","source":"_posts/share/tomcat-nowork.md","raw":"---\ntitle: java tomcat服务无缘无故挂掉分析和解决方案\ndate: 2022-12-17 21:21:01\ntags:\n    - 技术分享\n---\n\n# 背景\n最近有同事反应有时候xxx系统有时候会时不时出现服务异常提示，一上机器，发现xxx服务进程不在，重启服务后又恢复了，所以这边就需要去跟进问题。\n\n# 问题定位\njava tomcat服务挂掉原因，主要怀疑方向有这几个：\n1. 服务器被人重启，导致服务没有起来\n2. 错误异常导致程序挂掉\n3. 服务器占用内存过高，Linux强制退出程序\n4. 其他原因\n下面就开始逐一排查\n\n<!--more-->\n\n## 服务器重启\n如何查看服务器是否被重启，主要依据下面的命令：\n\n`who -b`查看最后一次重启时间\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1aca3c9b441642a5b913e2ea7778efe1~tplv-k3u1fbpfcp-watermark.image?)\n`last reboot` 查看服务器历史重启\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fb16e2d74b74654a20289db8a0c31c4~tplv-k3u1fbpfcp-watermark.image?)\n\n发现服务器重启时间是几个月前的事，因此可以排除。\n\n## 错误异常导致程序挂掉\njava服务采用spring log分级日志，直接看对应时间点日志，并没有发现什么，因此可以排除掉。\n\n## 服务器占用内存过高，Linux强制退出程序\n如何查看服务器系统日志，可以查看文件：`/var/log/messages`。\n> message日志包含了系统启动时的引导消息，以及系统运行时的其他状态消息。IO 错误、网络错误和其他系统错误都会记录到这个文件中。\n\n如何排查呢？执行以下命令：\n`cat /var/log/messages | grep java`\n然后发现有下面日志：\n```shell\nOut of memory: Kill process 9682 (java) score 9 or sacrifice child\n```\n因此判断由于内存占用过高，java服务被系统误杀了。\n既然定位到问题根源，那么为了更好的解决问题，我们继续追踪问题，为什么系统会kill java服务，而不杀掉其他进程呢？这里就需要了解一下Linux Out of Memory (OOM) killer机制。\n\n# Linux OOM机制\n## 是什么\nLinux内核设计的一种机制，在内存不足的时候，会选择一个占用内存较大的进程并kill掉这个进程，以满足系统内存申请需求。\n## 触发机制\n触发条件：内存不足，为什么会出现内存不足，这里涉及到Linux内存结构和使用机制：\n1. 物理内存结构\n2. overcommit机制\n3. OOM killer机制\n\n### Linux内存结构\n这里就简单讲一下，具体描述可以google一下Linux物理内存结构。\nLinux物理内存结构，Linux内核会把物理内存按照`node（节点） > zone（分区）> page (内存页)`三级结构进行划分，俗称内存管理系统，然后CPU会根据这种内存管理系统去调用内存。简单介绍以下概念：\n- node节点：每个CPU都有自己的node内存节点，可以多个也可以单个，单个叫UMA架构，多个叫NUMA架构\n- zone分区：每个Node划分很多zone，每个zone都有自己的功能定义，这种只是从软件层面划分定义。zone里还有一个概念叫分配价值链\n\t-  分配价值链： 普通的内存分配会有一个“价值”的层次结构\n- page内存页：属于zone下面的内存页，每个页基础大小是4K，他们维护在一个叫free_area的数组结构中\n下面是从网上找的Linux物理内存结构图：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cca72d58e9a94f978d8cedf43a06a834~tplv-k3u1fbpfcp-watermark.image?)\n\n### 虚拟内存(swap空间)\n相对于物理内存，在 Linux 下还有一个虚拟内存的概念，虚拟内存是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存。用作虚拟内存的磁盘空间被称为`交换空间`（又称 `swap 空间`）。\n\n了解Linux物理内存结构，我们明白Linux 的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。\n\nLinux 内存运行机制:\n- Linux 系统会不时地进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux 也会交换出暂时不用的内存页面，因为这样可以大大节省等待交换所需的时间\n- Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，Linux 内核根据“最近最经常使用”算法，仅仅将一些不经常使用的页面文件交换到虚拟内存\n\n虚拟内存是允许设置大小，这也是解决OMM killer的一种解决方案，具体可以看后面的解决方案。\n\n### overcommit机制\n\n有了虚拟内存的存在，那么进程就可以向系统申请比物理剩余内存更大的使用内存：\n\n> 在实际申请内存的时候，比如申请1G，并不会在物理区域中分配1G的真实物理内存，而是分配1G的虚拟内存，等到需要的时候才去真正申请物理内存，也就是说申请不等于分配\n\n这就是overcommit机制，允许进程申请比物理内存实际大的内存。但是这会面临一个问题，当进程真正需要这么多内存怎么办，Linux的解决方案就是OOM killer。\n\n当然，overcommit也允许设置几种值(vm.overcommit_memory)：\n- 0 – Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存\n- 1 – Always overcommit. 允许overcommit，对内存申请来者不拒。\n- 2 – Don’t overcommit. 禁止overcommit。\n\n## OOM killer机制\n讲完overcommit，终于来到本文重点，OOM killer机制，这应该是很多Linux系统部署服务，开发者所要面临头疼地方。\nOOM killer，全称 Out Of Memory Killer，俗称内存溢出杀手。它是如何执行的呢?\n\n> OMM killer机制：linux会为每个进程算一个分数，最终他会将分数最高的进程kill\n\n有三个进程设置值可以影响到分数值，可手动设置，但是基本上都不会用上，仅用来了解或者临时解决方案：\n- `/proc/<pid>/oom_score_adj`, 取值范围为-1000到1000， 如果将该值设置为-1000，则进程永远不会被杀死，因为此时 badness score 永远返回0\n- `/proc/<pid>/oom_adj`, 取值是-17到+15，取值越高，越容易被干掉。如果是-17，则表示不能被kill\n- `/proc/<pid>/oom_score`, 是系统综合进程的内存消耗量、CPU时间(utime + stime)、存活时间(uptime - start time)和oom_adj计算出的，消耗内存越多分越高。\n\n除了这三个值，还有一种计算方式：子进程内存：Linux在计算进程的内存消耗的时候，会将子进程所耗内存的一半同时算到父进程中。这样，那些子进程比较多的进程就要小心了。\n\n### 如何确定进程是被OOM killer干掉的\njava tomcat查看之前的进程id或进程名，可以通过命令`ps -ef | grep java`获取到。\n其次，查找系统日志`grep \"Out of memory\" /var/log/messages`，对比一下进程id或进程名，进行判断。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e8bc25d25784a47ad2f4c2780581d1d~tplv-k3u1fbpfcp-watermark.image?)\n\n\n\n# 解决方案\n\n## 关闭OOM机制(不推荐，可作为临时解决方案)\n执行以下命令：\n```shell\nsysctl -w vm.overcommit_memory=2\n```\n或者\n```shell\necho \"vm.overcommit_memory=2\" >> /etc/sysctl.conf\n```\n\n或者修改进程oom_score_adj值：\n\n```shell\nsudo echo -1000 > /proc/$pid/oom_score_adj\n```\n或者修改进程oom_adj值:\n- /proc/PID/oom_adj文件，将其置位-17\n\n## 设置java进程最大占用内存(推荐)\njava tomcat服务在启用进程的时候可以设置占用最大内存，具体数值可以参考当前服务器所剩余的内存设置，具体设置如下：\n```shell\njava -Xms512m -Xmx512m -jar xxx.jar\n```\n- Xms: 最小内存\n- Xmx: 最大内存\ntomcat可以在`TOMCAT_HOME/bin/catalina.sh`中设置:\n```shell\n# 在cygwin=false前\nJAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\"\n```\n\n## java守护进程(推荐)\n除了设置最大占用内存设置，还可以增加守护进程从而避免服务异常挂掉进行重启，主要有两种方案：\n1. 第一种常用，通过设置`crontab`脚本去守护。\n2. 第二种是Java `jsvc`方案，利用启动守护进程去监控控制服务进程，从而避免进程无缘无故挂掉自动重启，tomcat本身已有`daemon.sh`，可以直接该脚本即可。\n\n## 优化代码(有能力者可以采用)\n这个可能需要具体问题具体分析了，优化代码占用内存，java网上有很多方案，大家各自采纳符合自己的方案即可。\n\n## 申请更多内存(土豪随意)\n既然是内存不够，那么就直接申请更多资源，就可以满足了，看来还是有钱就能更快解决问题。\n","slug":"share/tomcat-nowork","published":1,"updated":"2022-12-29T03:13:06.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk99002bwspcl2oxpeet","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近有同事反应有时候xxx系统有时候会时不时出现服务异常提示，一上机器，发现xxx服务进程不在，重启服务后又恢复了，所以这边就需要去跟进问题。</p>\n<h1 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h1><p>java tomcat服务挂掉原因，主要怀疑方向有这几个：</p>\n<ol>\n<li>服务器被人重启，导致服务没有起来</li>\n<li>错误异常导致程序挂掉</li>\n<li>服务器占用内存过高，Linux强制退出程序</li>\n<li>其他原因<br>下面就开始逐一排查</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"服务器重启\"><a href=\"#服务器重启\" class=\"headerlink\" title=\"服务器重启\"></a>服务器重启</h2><p>如何查看服务器是否被重启，主要依据下面的命令：</p>\n<p><code>who -b</code>查看最后一次重启时间</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1aca3c9b441642a5b913e2ea7778efe1~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"><br><code>last reboot</code> 查看服务器历史重启</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fb16e2d74b74654a20289db8a0c31c4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>发现服务器重启时间是几个月前的事，因此可以排除。</p>\n<h2 id=\"错误异常导致程序挂掉\"><a href=\"#错误异常导致程序挂掉\" class=\"headerlink\" title=\"错误异常导致程序挂掉\"></a>错误异常导致程序挂掉</h2><p>java服务采用spring log分级日志，直接看对应时间点日志，并没有发现什么，因此可以排除掉。</p>\n<h2 id=\"服务器占用内存过高，Linux强制退出程序\"><a href=\"#服务器占用内存过高，Linux强制退出程序\" class=\"headerlink\" title=\"服务器占用内存过高，Linux强制退出程序\"></a>服务器占用内存过高，Linux强制退出程序</h2><p>如何查看服务器系统日志，可以查看文件：<code>/var/log/messages</code>。</p>\n<blockquote>\n<p>message日志包含了系统启动时的引导消息，以及系统运行时的其他状态消息。IO 错误、网络错误和其他系统错误都会记录到这个文件中。</p>\n</blockquote>\n<p>如何排查呢？执行以下命令：<br><code>cat /var/log/messages | grep java</code><br>然后发现有下面日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out of memory: Kill process 9682 (java) score 9 or sacrifice child</span><br></pre></td></tr></table></figure>\n\n<p>因此判断由于内存占用过高，java服务被系统误杀了。<br>既然定位到问题根源，那么为了更好的解决问题，我们继续追踪问题，为什么系统会kill java服务，而不杀掉其他进程呢？这里就需要了解一下Linux Out of Memory (OOM) killer机制。</p>\n<h1 id=\"Linux-OOM机制\"><a href=\"#Linux-OOM机制\" class=\"headerlink\" title=\"Linux OOM机制\"></a>Linux OOM机制</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>Linux内核设计的一种机制，在内存不足的时候，会选择一个占用内存较大的进程并kill掉这个进程，以满足系统内存申请需求。</p>\n<h2 id=\"触发机制\"><a href=\"#触发机制\" class=\"headerlink\" title=\"触发机制\"></a>触发机制</h2><p>触发条件：内存不足，为什么会出现内存不足，这里涉及到Linux内存结构和使用机制：</p>\n<ol>\n<li>物理内存结构</li>\n<li>overcommit机制</li>\n<li>OOM killer机制</li>\n</ol>\n<h3 id=\"Linux内存结构\"><a href=\"#Linux内存结构\" class=\"headerlink\" title=\"Linux内存结构\"></a>Linux内存结构</h3><p>这里就简单讲一下，具体描述可以google一下Linux物理内存结构。<br>Linux物理内存结构，Linux内核会把物理内存按照<code>node（节点） &gt; zone（分区）&gt; page (内存页)</code>三级结构进行划分，俗称内存管理系统，然后CPU会根据这种内存管理系统去调用内存。简单介绍以下概念：</p>\n<ul>\n<li>node节点：每个CPU都有自己的node内存节点，可以多个也可以单个，单个叫UMA架构，多个叫NUMA架构</li>\n<li>zone分区：每个Node划分很多zone，每个zone都有自己的功能定义，这种只是从软件层面划分定义。zone里还有一个概念叫分配价值链<ul>\n<li>分配价值链： 普通的内存分配会有一个“价值”的层次结构</li>\n</ul>\n</li>\n<li>page内存页：属于zone下面的内存页，每个页基础大小是4K，他们维护在一个叫free_area的数组结构中<br>下面是从网上找的Linux物理内存结构图：</li>\n</ul>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cca72d58e9a94f978d8cedf43a06a834~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"虚拟内存-swap空间\"><a href=\"#虚拟内存-swap空间\" class=\"headerlink\" title=\"虚拟内存(swap空间)\"></a>虚拟内存(swap空间)</h3><p>相对于物理内存，在 Linux 下还有一个虚拟内存的概念，虚拟内存是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存。用作虚拟内存的磁盘空间被称为<code>交换空间</code>（又称 <code>swap 空间</code>）。</p>\n<p>了解Linux物理内存结构，我们明白Linux 的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p>\n<p>Linux 内存运行机制:</p>\n<ul>\n<li>Linux 系统会不时地进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux 也会交换出暂时不用的内存页面，因为这样可以大大节省等待交换所需的时间</li>\n<li>Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，Linux 内核根据“最近最经常使用”算法，仅仅将一些不经常使用的页面文件交换到虚拟内存</li>\n</ul>\n<p>虚拟内存是允许设置大小，这也是解决OMM killer的一种解决方案，具体可以看后面的解决方案。</p>\n<h3 id=\"overcommit机制\"><a href=\"#overcommit机制\" class=\"headerlink\" title=\"overcommit机制\"></a>overcommit机制</h3><p>有了虚拟内存的存在，那么进程就可以向系统申请比物理剩余内存更大的使用内存：</p>\n<blockquote>\n<p>在实际申请内存的时候，比如申请1G，并不会在物理区域中分配1G的真实物理内存，而是分配1G的虚拟内存，等到需要的时候才去真正申请物理内存，也就是说申请不等于分配</p>\n</blockquote>\n<p>这就是overcommit机制，允许进程申请比物理内存实际大的内存。但是这会面临一个问题，当进程真正需要这么多内存怎么办，Linux的解决方案就是OOM killer。</p>\n<p>当然，overcommit也允许设置几种值(vm.overcommit_memory)：</p>\n<ul>\n<li>0 – Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存</li>\n<li>1 – Always overcommit. 允许overcommit，对内存申请来者不拒。</li>\n<li>2 – Don’t overcommit. 禁止overcommit。</li>\n</ul>\n<h2 id=\"OOM-killer机制\"><a href=\"#OOM-killer机制\" class=\"headerlink\" title=\"OOM killer机制\"></a>OOM killer机制</h2><p>讲完overcommit，终于来到本文重点，OOM killer机制，这应该是很多Linux系统部署服务，开发者所要面临头疼地方。<br>OOM killer，全称 Out Of Memory Killer，俗称内存溢出杀手。它是如何执行的呢?</p>\n<blockquote>\n<p>OMM killer机制：linux会为每个进程算一个分数，最终他会将分数最高的进程kill</p>\n</blockquote>\n<p>有三个进程设置值可以影响到分数值，可手动设置，但是基本上都不会用上，仅用来了解或者临时解决方案：</p>\n<ul>\n<li><code>/proc/&lt;pid&gt;/oom_score_adj</code>, 取值范围为-1000到1000， 如果将该值设置为-1000，则进程永远不会被杀死，因为此时 badness score 永远返回0</li>\n<li><code>/proc/&lt;pid&gt;/oom_adj</code>, 取值是-17到+15，取值越高，越容易被干掉。如果是-17，则表示不能被kill</li>\n<li><code>/proc/&lt;pid&gt;/oom_score</code>, 是系统综合进程的内存消耗量、CPU时间(utime + stime)、存活时间(uptime - start time)和oom_adj计算出的，消耗内存越多分越高。</li>\n</ul>\n<p>除了这三个值，还有一种计算方式：子进程内存：Linux在计算进程的内存消耗的时候，会将子进程所耗内存的一半同时算到父进程中。这样，那些子进程比较多的进程就要小心了。</p>\n<h3 id=\"如何确定进程是被OOM-killer干掉的\"><a href=\"#如何确定进程是被OOM-killer干掉的\" class=\"headerlink\" title=\"如何确定进程是被OOM killer干掉的\"></a>如何确定进程是被OOM killer干掉的</h3><p>java tomcat查看之前的进程id或进程名，可以通过命令<code>ps -ef | grep java</code>获取到。<br>其次，查找系统日志<code>grep &quot;Out of memory&quot; /var/log/messages</code>，对比一下进程id或进程名，进行判断。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e8bc25d25784a47ad2f4c2780581d1d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"关闭OOM机制-不推荐，可作为临时解决方案\"><a href=\"#关闭OOM机制-不推荐，可作为临时解决方案\" class=\"headerlink\" title=\"关闭OOM机制(不推荐，可作为临时解决方案)\"></a>关闭OOM机制(不推荐，可作为临时解决方案)</h2><p>执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w vm.overcommit_memory=2</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"vm.overcommit_memory=2\" &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n\n<p>或者修改进程oom_score_adj值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo echo -1000 &gt; /proc/$pid/oom_score_adj</span><br></pre></td></tr></table></figure>\n\n<p>或者修改进程oom_adj值:</p>\n<ul>\n<li>/proc/PID/oom_adj文件，将其置位-17</li>\n</ul>\n<h2 id=\"设置java进程最大占用内存-推荐\"><a href=\"#设置java进程最大占用内存-推荐\" class=\"headerlink\" title=\"设置java进程最大占用内存(推荐)\"></a>设置java进程最大占用内存(推荐)</h2><p>java tomcat服务在启用进程的时候可以设置占用最大内存，具体数值可以参考当前服务器所剩余的内存设置，具体设置如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms512m -Xmx512m -jar xxx.jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Xms: 最小内存</li>\n<li>Xmx: 最大内存<br>tomcat可以在<code>TOMCAT_HOME/bin/catalina.sh</code>中设置:<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在cygwin=<span class=\"literal\">false</span>前</span></span><br><span class=\"line\">JAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\"</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"java守护进程-推荐\"><a href=\"#java守护进程-推荐\" class=\"headerlink\" title=\"java守护进程(推荐)\"></a>java守护进程(推荐)</h2><p>除了设置最大占用内存设置，还可以增加守护进程从而避免服务异常挂掉进行重启，主要有两种方案：</p>\n<ol>\n<li>第一种常用，通过设置<code>crontab</code>脚本去守护。</li>\n<li>第二种是Java <code>jsvc</code>方案，利用启动守护进程去监控控制服务进程，从而避免进程无缘无故挂掉自动重启，tomcat本身已有<code>daemon.sh</code>，可以直接该脚本即可。</li>\n</ol>\n<h2 id=\"优化代码-有能力者可以采用\"><a href=\"#优化代码-有能力者可以采用\" class=\"headerlink\" title=\"优化代码(有能力者可以采用)\"></a>优化代码(有能力者可以采用)</h2><p>这个可能需要具体问题具体分析了，优化代码占用内存，java网上有很多方案，大家各自采纳符合自己的方案即可。</p>\n<h2 id=\"申请更多内存-土豪随意\"><a href=\"#申请更多内存-土豪随意\" class=\"headerlink\" title=\"申请更多内存(土豪随意)\"></a>申请更多内存(土豪随意)</h2><p>既然是内存不够，那么就直接申请更多资源，就可以满足了，看来还是有钱就能更快解决问题。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近有同事反应有时候xxx系统有时候会时不时出现服务异常提示，一上机器，发现xxx服务进程不在，重启服务后又恢复了，所以这边就需要去跟进问题。</p>\n<h1 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h1><p>java tomcat服务挂掉原因，主要怀疑方向有这几个：</p>\n<ol>\n<li>服务器被人重启，导致服务没有起来</li>\n<li>错误异常导致程序挂掉</li>\n<li>服务器占用内存过高，Linux强制退出程序</li>\n<li>其他原因<br>下面就开始逐一排查</li>\n</ol>","more":"<h2 id=\"服务器重启\"><a href=\"#服务器重启\" class=\"headerlink\" title=\"服务器重启\"></a>服务器重启</h2><p>如何查看服务器是否被重启，主要依据下面的命令：</p>\n<p><code>who -b</code>查看最后一次重启时间</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1aca3c9b441642a5b913e2ea7778efe1~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"><br><code>last reboot</code> 查看服务器历史重启</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fb16e2d74b74654a20289db8a0c31c4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>发现服务器重启时间是几个月前的事，因此可以排除。</p>\n<h2 id=\"错误异常导致程序挂掉\"><a href=\"#错误异常导致程序挂掉\" class=\"headerlink\" title=\"错误异常导致程序挂掉\"></a>错误异常导致程序挂掉</h2><p>java服务采用spring log分级日志，直接看对应时间点日志，并没有发现什么，因此可以排除掉。</p>\n<h2 id=\"服务器占用内存过高，Linux强制退出程序\"><a href=\"#服务器占用内存过高，Linux强制退出程序\" class=\"headerlink\" title=\"服务器占用内存过高，Linux强制退出程序\"></a>服务器占用内存过高，Linux强制退出程序</h2><p>如何查看服务器系统日志，可以查看文件：<code>/var/log/messages</code>。</p>\n<blockquote>\n<p>message日志包含了系统启动时的引导消息，以及系统运行时的其他状态消息。IO 错误、网络错误和其他系统错误都会记录到这个文件中。</p>\n</blockquote>\n<p>如何排查呢？执行以下命令：<br><code>cat /var/log/messages | grep java</code><br>然后发现有下面日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out of memory: Kill process 9682 (java) score 9 or sacrifice child</span><br></pre></td></tr></table></figure>\n\n<p>因此判断由于内存占用过高，java服务被系统误杀了。<br>既然定位到问题根源，那么为了更好的解决问题，我们继续追踪问题，为什么系统会kill java服务，而不杀掉其他进程呢？这里就需要了解一下Linux Out of Memory (OOM) killer机制。</p>\n<h1 id=\"Linux-OOM机制\"><a href=\"#Linux-OOM机制\" class=\"headerlink\" title=\"Linux OOM机制\"></a>Linux OOM机制</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>Linux内核设计的一种机制，在内存不足的时候，会选择一个占用内存较大的进程并kill掉这个进程，以满足系统内存申请需求。</p>\n<h2 id=\"触发机制\"><a href=\"#触发机制\" class=\"headerlink\" title=\"触发机制\"></a>触发机制</h2><p>触发条件：内存不足，为什么会出现内存不足，这里涉及到Linux内存结构和使用机制：</p>\n<ol>\n<li>物理内存结构</li>\n<li>overcommit机制</li>\n<li>OOM killer机制</li>\n</ol>\n<h3 id=\"Linux内存结构\"><a href=\"#Linux内存结构\" class=\"headerlink\" title=\"Linux内存结构\"></a>Linux内存结构</h3><p>这里就简单讲一下，具体描述可以google一下Linux物理内存结构。<br>Linux物理内存结构，Linux内核会把物理内存按照<code>node（节点） &gt; zone（分区）&gt; page (内存页)</code>三级结构进行划分，俗称内存管理系统，然后CPU会根据这种内存管理系统去调用内存。简单介绍以下概念：</p>\n<ul>\n<li>node节点：每个CPU都有自己的node内存节点，可以多个也可以单个，单个叫UMA架构，多个叫NUMA架构</li>\n<li>zone分区：每个Node划分很多zone，每个zone都有自己的功能定义，这种只是从软件层面划分定义。zone里还有一个概念叫分配价值链<ul>\n<li>分配价值链： 普通的内存分配会有一个“价值”的层次结构</li>\n</ul>\n</li>\n<li>page内存页：属于zone下面的内存页，每个页基础大小是4K，他们维护在一个叫free_area的数组结构中<br>下面是从网上找的Linux物理内存结构图：</li>\n</ul>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cca72d58e9a94f978d8cedf43a06a834~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"虚拟内存-swap空间\"><a href=\"#虚拟内存-swap空间\" class=\"headerlink\" title=\"虚拟内存(swap空间)\"></a>虚拟内存(swap空间)</h3><p>相对于物理内存，在 Linux 下还有一个虚拟内存的概念，虚拟内存是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存。用作虚拟内存的磁盘空间被称为<code>交换空间</code>（又称 <code>swap 空间</code>）。</p>\n<p>了解Linux物理内存结构，我们明白Linux 的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p>\n<p>Linux 内存运行机制:</p>\n<ul>\n<li>Linux 系统会不时地进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux 也会交换出暂时不用的内存页面，因为这样可以大大节省等待交换所需的时间</li>\n<li>Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，Linux 内核根据“最近最经常使用”算法，仅仅将一些不经常使用的页面文件交换到虚拟内存</li>\n</ul>\n<p>虚拟内存是允许设置大小，这也是解决OMM killer的一种解决方案，具体可以看后面的解决方案。</p>\n<h3 id=\"overcommit机制\"><a href=\"#overcommit机制\" class=\"headerlink\" title=\"overcommit机制\"></a>overcommit机制</h3><p>有了虚拟内存的存在，那么进程就可以向系统申请比物理剩余内存更大的使用内存：</p>\n<blockquote>\n<p>在实际申请内存的时候，比如申请1G，并不会在物理区域中分配1G的真实物理内存，而是分配1G的虚拟内存，等到需要的时候才去真正申请物理内存，也就是说申请不等于分配</p>\n</blockquote>\n<p>这就是overcommit机制，允许进程申请比物理内存实际大的内存。但是这会面临一个问题，当进程真正需要这么多内存怎么办，Linux的解决方案就是OOM killer。</p>\n<p>当然，overcommit也允许设置几种值(vm.overcommit_memory)：</p>\n<ul>\n<li>0 – Heuristic overcommit handling. 这是缺省值，它允许overcommit，但过于明目张胆的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存</li>\n<li>1 – Always overcommit. 允许overcommit，对内存申请来者不拒。</li>\n<li>2 – Don’t overcommit. 禁止overcommit。</li>\n</ul>\n<h2 id=\"OOM-killer机制\"><a href=\"#OOM-killer机制\" class=\"headerlink\" title=\"OOM killer机制\"></a>OOM killer机制</h2><p>讲完overcommit，终于来到本文重点，OOM killer机制，这应该是很多Linux系统部署服务，开发者所要面临头疼地方。<br>OOM killer，全称 Out Of Memory Killer，俗称内存溢出杀手。它是如何执行的呢?</p>\n<blockquote>\n<p>OMM killer机制：linux会为每个进程算一个分数，最终他会将分数最高的进程kill</p>\n</blockquote>\n<p>有三个进程设置值可以影响到分数值，可手动设置，但是基本上都不会用上，仅用来了解或者临时解决方案：</p>\n<ul>\n<li><code>/proc/&lt;pid&gt;/oom_score_adj</code>, 取值范围为-1000到1000， 如果将该值设置为-1000，则进程永远不会被杀死，因为此时 badness score 永远返回0</li>\n<li><code>/proc/&lt;pid&gt;/oom_adj</code>, 取值是-17到+15，取值越高，越容易被干掉。如果是-17，则表示不能被kill</li>\n<li><code>/proc/&lt;pid&gt;/oom_score</code>, 是系统综合进程的内存消耗量、CPU时间(utime + stime)、存活时间(uptime - start time)和oom_adj计算出的，消耗内存越多分越高。</li>\n</ul>\n<p>除了这三个值，还有一种计算方式：子进程内存：Linux在计算进程的内存消耗的时候，会将子进程所耗内存的一半同时算到父进程中。这样，那些子进程比较多的进程就要小心了。</p>\n<h3 id=\"如何确定进程是被OOM-killer干掉的\"><a href=\"#如何确定进程是被OOM-killer干掉的\" class=\"headerlink\" title=\"如何确定进程是被OOM killer干掉的\"></a>如何确定进程是被OOM killer干掉的</h3><p>java tomcat查看之前的进程id或进程名，可以通过命令<code>ps -ef | grep java</code>获取到。<br>其次，查找系统日志<code>grep &quot;Out of memory&quot; /var/log/messages</code>，对比一下进程id或进程名，进行判断。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e8bc25d25784a47ad2f4c2780581d1d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"关闭OOM机制-不推荐，可作为临时解决方案\"><a href=\"#关闭OOM机制-不推荐，可作为临时解决方案\" class=\"headerlink\" title=\"关闭OOM机制(不推荐，可作为临时解决方案)\"></a>关闭OOM机制(不推荐，可作为临时解决方案)</h2><p>执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w vm.overcommit_memory=2</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"vm.overcommit_memory=2\" &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n\n<p>或者修改进程oom_score_adj值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo echo -1000 &gt; /proc/$pid/oom_score_adj</span><br></pre></td></tr></table></figure>\n\n<p>或者修改进程oom_adj值:</p>\n<ul>\n<li>/proc/PID/oom_adj文件，将其置位-17</li>\n</ul>\n<h2 id=\"设置java进程最大占用内存-推荐\"><a href=\"#设置java进程最大占用内存-推荐\" class=\"headerlink\" title=\"设置java进程最大占用内存(推荐)\"></a>设置java进程最大占用内存(推荐)</h2><p>java tomcat服务在启用进程的时候可以设置占用最大内存，具体数值可以参考当前服务器所剩余的内存设置，具体设置如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms512m -Xmx512m -jar xxx.jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Xms: 最小内存</li>\n<li>Xmx: 最大内存<br>tomcat可以在<code>TOMCAT_HOME/bin/catalina.sh</code>中设置:<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在cygwin=<span class=\"literal\">false</span>前</span></span><br><span class=\"line\">JAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\"</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"java守护进程-推荐\"><a href=\"#java守护进程-推荐\" class=\"headerlink\" title=\"java守护进程(推荐)\"></a>java守护进程(推荐)</h2><p>除了设置最大占用内存设置，还可以增加守护进程从而避免服务异常挂掉进行重启，主要有两种方案：</p>\n<ol>\n<li>第一种常用，通过设置<code>crontab</code>脚本去守护。</li>\n<li>第二种是Java <code>jsvc</code>方案，利用启动守护进程去监控控制服务进程，从而避免进程无缘无故挂掉自动重启，tomcat本身已有<code>daemon.sh</code>，可以直接该脚本即可。</li>\n</ol>\n<h2 id=\"优化代码-有能力者可以采用\"><a href=\"#优化代码-有能力者可以采用\" class=\"headerlink\" title=\"优化代码(有能力者可以采用)\"></a>优化代码(有能力者可以采用)</h2><p>这个可能需要具体问题具体分析了，优化代码占用内存，java网上有很多方案，大家各自采纳符合自己的方案即可。</p>\n<h2 id=\"申请更多内存-土豪随意\"><a href=\"#申请更多内存-土豪随意\" class=\"headerlink\" title=\"申请更多内存(土豪随意)\"></a>申请更多内存(土豪随意)</h2><p>既然是内存不够，那么就直接申请更多资源，就可以满足了，看来还是有钱就能更快解决问题。</p>"},{"title":"浏览器页面卡住定位分析","date":"2022-12-26T13:21:01.000Z","_content":"\n# 背景\n有童鞋在xxx系统页面反馈，遇到在弹出框后整个页面卡住无法使用的情况，属于必现问题。因此需要跟踪定位问题。\n\n# 问题定位\n一般在浏览器遇到这种问题，基本上都某段逻辑进入死循环导致浏览器内核处理不过来导致的页面卡住动，这个时候需要使用Chrome开发调试工具进行跟踪定位的。\n\n<!--more-->\n\n## chrome source调试工具\n按照`F12`或者`Command + Alt + J`可以打开浏览器的调试工具，然后找到`Source` 或 `源代码`Tab页。如下图所示：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/106719ede96442b7a262bba5a68c9775~tplv-k3u1fbpfcp-watermark.image?)\n\n### 步骤一：点击`=`按钮，进入调试模式：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb7c6dc349554dd284aca3684d281323~tplv-k3u1fbpfcp-watermark.image?)\n\n### 步骤二：调试代码，查看卡住代码段：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b758994a5bb04938bc035b397465ab8b~tplv-k3u1fbpfcp-watermark.image?)\n\n### 步骤三： 定位代码段\n确定是哪段代码后，就可以开始分析代码段是属于哪里，最终找到classname，定位到是属于水印插件导致。\n\n# 问题分析(水印插件)\n## 为什么？\n为什么水印插件会导致页面进行死循环呢？这个就要跟踪到水印插件，目前采用的`@pansy/watermark`开源插件，然后找到其github issues，看看有没有相关issues。果不其然，还真的找到了，如下：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95eab9a9613d4e409ad09f906acf9d33~tplv-k3u1fbpfcp-watermark.image?)\n\n[全局水印与其它遮罩层冲突](https://github.com/pansyjs/watermark/issues/129)\n那么接下来就开始跟踪他们的代码进行具体分析。\n\n# 水印插件实现原理\n在上面调试问题的时候，我们有看到一段代码`MoutationRecord`，其实这已经算是水印插件的重要实现原理之一了。\n\n看了插件源代码，其实就几千行代码，水印插件实现原理有几个点：\n1. 利用`Shadow DOM`或者`div`DOM节点去插入水印，利用z-index显示到最前方\n2. 同时设置`pointer-events: none;`禁止任何操作，包括：选择、点击等，实现不阻碍其他元素操作\n3. 利用canvas生成水印图片(base64)\n4. 设置水印节点背景图片为水印图片(base64)\n5. 使用MutationObserver监听dom元素变化重复渲染生成水印图片，防止水印被人为删除\n其中涉及到几个关键技术点为:\n- `pointer-events: none`\n- 通过canvas生成图片\n- MutationObserver监听\n当然，还有`Shadow DOM`和canvas等技术点也可以自己去研究学习，后面再用一些篇章详细讲解。\n\n## pointer-events\n从MDN中它是这么定义的：\n>** `pointer-events` ** CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 [target (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)。\n\n简单解释一下，就是可以通过该属性设置DOM元素的鼠标事件，很多对应值都是给svg响应鼠标事件范围所设置的。\n\n这里重点解释一下`auto`、`none`两种值：\n> `auto`:与 `pointer-events` 属性未指定时的表现效果相同，对于 SVG 内容，该值与 `visiblePainted` 效果相同\n> \n> `none`:元素永远不会成为鼠标事件的[target (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)。但是，当其后代元素的 `pointer-events` 属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。\n\n简单说，`auto`是默认值，可以触发该元素本身就有的鼠标事件。\n`none`则代表取消该元素原有的鼠标事件，可以直接透过该元素直接触发下方元素鼠标事件。\n举个例子：\n```htlm\n<style>\na[href=\"http://example.com\"] {\n  pointer-events: none;\n}\n</style>\n<ul>\n<li><a href=\"https://developer.mozilla.org/\">MDN</a></li>\n<li>\n<!-- 点击链接 http://example.com 时，不会跳转 -->\n<a href=\"http://example.com\">example.com</a></li>\n</ul>\n```\n\n## MutationObserver监听\n\n### 定义\nMDN定义：\n> [`MutationObserver`](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver) 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n\n简单说，就是可以监听某个DOM节点下元素发生变化触发的事件。\n支持方法：\n- `disconnect()`，注销监听方法\n- `observe()`,开始监听\n- `takeRecords()`, 取消通知队列\n\n具体使用案例(来自MDN)：\n```\n// 选择需要观察变动的节点\nconst targetNode = document.getElementById('some-id');\n\n// 观察器的配置（需要观察什么变动）\nconst config = { attributes: true, childList: true, subtree: true };\n\n// 当观察到变动时执行的回调函数\nconst callback = function(mutationsList, observer) {\n    // Use traditional 'for loops' for IE 11\n    for(let mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n            console.log('A child node has been added or removed.');\n        }\n        else if (mutation.type === 'attributes') {\n            console.log('The ' + mutation.attributeName + ' attribute was modified.');\n        }\n    }\n};\n\n// 创建一个观察器实例并传入回调函数\nconst observer = new MutationObserver(callback);\n\n// 以上述配置开始观察目标节点\nobserver.observe(targetNode, config);\n\n// 之后，可停止观察\nobserver.disconnect();\n```\n\n### 常用场景\n- 防止第三方注入js文件（运营商劫持）\n- 防止删除前端生成的水印\n- 用来处理页面的敏感数据\n- Vue.$nextTick的实现微任务原理\n\n所以从问题定位中，分析水印陷入死循环很可能就是这一部分代码。\n\n## 定位问题\n回到最开始，我们是什么时候会遇到页面卡顿，当页面出现弹框的时候，会出现页面卡顿。\n\n同时找到插件的issues(查看issue也是一种快速解决问题的途径)，描述如下:\n\n>vue版本使用全局水印 `:is-body=\"true\"`  并且开启保护模式的情况下,触发带遮罩的事件就会导致页面无响应,且无法恢复;\n带遮罩的事件如对话框弹窗/图片点击放大;\n测试后发现关闭保护模式 `watermark.options.monitor = false` ,或者不使用全局水印没有出现该问题;\n[这里可以看全文](https://github.com/pansyjs/watermark/issues/129)\n\n### 定位到源码\n\n`watermark/packages/core/src/index.ts`，第244行，代码如下：\n```javascript\n\n...\n\nif (MutationObserver &amp;&amp; this.options.monitor) {\n      this.mutationObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          if (this._isAgainRender(mutation)) {\n            this.destroy();\n            this._render();\n            return;\n          }\n        });\n      });\n      this.mutationObserver.observe(this.container, observeOptions);\n      this.shadowRoot && this.mutationObserver.observe(this.shadowRoot, observeOptions);\n    }\n```\n\n结合上面`MutationObserver`的作用，主要是监听某个DOM容器内节点变化，然后重新渲染水印，从而避免水印被人删除。\n\n那么我们可以很简单的猜测一下，在弹框出来后，会触发`MutationObserver`，然后`_render函数`改变dom，又会触发自己本身的dom节点变化，再触发`MutationObserver`，导致陷入死循环。\n\n目前执行顺序：\n1. body容器被监听到DOM节点变化，触发`MutationObserver`事件\n2. `MutationObserver`事件返回参数`mutations`是一个数组，可能会重复执行`_render`函数\n3. 多次`_render`函数会继续注册`MutationObserver`事件，导致后续body容器变更持续被监听到，进入死循环逻辑中\n\n因此，只需要保证多次`MutationObserver`事件只触发一次`_render`函数，即可避免死循环逻辑。\n\n### 问题解决\n\n直接下载源码，放到本地调试（过程忽略），最终代码暂时如下：\n```javascript\n... \nif (MutationObserver &amp;&amp; this.options.monitor) {\n      this.mutationObserver = new MutationObserver(mutations => {\n\t  this.mutationObserver = new MutationObserver(mutations => {\n        // 避免多次执行render函数，导致多次注册MutationObserver 从而进入死循环逻辑\n        let lastMoutation;\n        mutations.forEach(mutation => {\n          if (this._isAgainRender(mutation)) {\n            lastMoutation = mutation;\n            return;\n          }\n        });\n        if(lastMoutation){\n          this.destroy();\n          this._render();\n        }\n      });\n      this.mutationObserver.observe(this.container, observeOptions);\n      this.shadowRoot &amp;&amp; this.mutationObserver.observe(this.shadowRoot, observeOptions);\n    }\n...\n```\n后面可以研究一下`为什么forEach || map函数无法跳出循环？`\n\n最后可以提交PR到开源github，这里面也有一些东西可以了解一下，[如何在github上为开源项目提交PR？](https://stephenzhou.net/2019/04/23/git-pr-tsg/)。\n\n这里是我提交的PR,[全局水印与其它遮罩层冲突 [issue 129]](https://github.com/pansyjs/watermark/pull/136)\n\n#参考资料\n[MutationObserver MDN资料](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)","source":"_posts/share/page-notwork.md","raw":"---\ntitle: 浏览器页面卡住定位分析\ndate: 2022-12-26 21:21:01\ntags:\n    - 技术分享\n---\n\n# 背景\n有童鞋在xxx系统页面反馈，遇到在弹出框后整个页面卡住无法使用的情况，属于必现问题。因此需要跟踪定位问题。\n\n# 问题定位\n一般在浏览器遇到这种问题，基本上都某段逻辑进入死循环导致浏览器内核处理不过来导致的页面卡住动，这个时候需要使用Chrome开发调试工具进行跟踪定位的。\n\n<!--more-->\n\n## chrome source调试工具\n按照`F12`或者`Command + Alt + J`可以打开浏览器的调试工具，然后找到`Source` 或 `源代码`Tab页。如下图所示：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/106719ede96442b7a262bba5a68c9775~tplv-k3u1fbpfcp-watermark.image?)\n\n### 步骤一：点击`=`按钮，进入调试模式：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb7c6dc349554dd284aca3684d281323~tplv-k3u1fbpfcp-watermark.image?)\n\n### 步骤二：调试代码，查看卡住代码段：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b758994a5bb04938bc035b397465ab8b~tplv-k3u1fbpfcp-watermark.image?)\n\n### 步骤三： 定位代码段\n确定是哪段代码后，就可以开始分析代码段是属于哪里，最终找到classname，定位到是属于水印插件导致。\n\n# 问题分析(水印插件)\n## 为什么？\n为什么水印插件会导致页面进行死循环呢？这个就要跟踪到水印插件，目前采用的`@pansy/watermark`开源插件，然后找到其github issues，看看有没有相关issues。果不其然，还真的找到了，如下：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95eab9a9613d4e409ad09f906acf9d33~tplv-k3u1fbpfcp-watermark.image?)\n\n[全局水印与其它遮罩层冲突](https://github.com/pansyjs/watermark/issues/129)\n那么接下来就开始跟踪他们的代码进行具体分析。\n\n# 水印插件实现原理\n在上面调试问题的时候，我们有看到一段代码`MoutationRecord`，其实这已经算是水印插件的重要实现原理之一了。\n\n看了插件源代码，其实就几千行代码，水印插件实现原理有几个点：\n1. 利用`Shadow DOM`或者`div`DOM节点去插入水印，利用z-index显示到最前方\n2. 同时设置`pointer-events: none;`禁止任何操作，包括：选择、点击等，实现不阻碍其他元素操作\n3. 利用canvas生成水印图片(base64)\n4. 设置水印节点背景图片为水印图片(base64)\n5. 使用MutationObserver监听dom元素变化重复渲染生成水印图片，防止水印被人为删除\n其中涉及到几个关键技术点为:\n- `pointer-events: none`\n- 通过canvas生成图片\n- MutationObserver监听\n当然，还有`Shadow DOM`和canvas等技术点也可以自己去研究学习，后面再用一些篇章详细讲解。\n\n## pointer-events\n从MDN中它是这么定义的：\n>** `pointer-events` ** CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 [target (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)。\n\n简单解释一下，就是可以通过该属性设置DOM元素的鼠标事件，很多对应值都是给svg响应鼠标事件范围所设置的。\n\n这里重点解释一下`auto`、`none`两种值：\n> `auto`:与 `pointer-events` 属性未指定时的表现效果相同，对于 SVG 内容，该值与 `visiblePainted` 效果相同\n> \n> `none`:元素永远不会成为鼠标事件的[target (en-US)](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)。但是，当其后代元素的 `pointer-events` 属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。\n\n简单说，`auto`是默认值，可以触发该元素本身就有的鼠标事件。\n`none`则代表取消该元素原有的鼠标事件，可以直接透过该元素直接触发下方元素鼠标事件。\n举个例子：\n```htlm\n<style>\na[href=\"http://example.com\"] {\n  pointer-events: none;\n}\n</style>\n<ul>\n<li><a href=\"https://developer.mozilla.org/\">MDN</a></li>\n<li>\n<!-- 点击链接 http://example.com 时，不会跳转 -->\n<a href=\"http://example.com\">example.com</a></li>\n</ul>\n```\n\n## MutationObserver监听\n\n### 定义\nMDN定义：\n> [`MutationObserver`](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver) 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n\n简单说，就是可以监听某个DOM节点下元素发生变化触发的事件。\n支持方法：\n- `disconnect()`，注销监听方法\n- `observe()`,开始监听\n- `takeRecords()`, 取消通知队列\n\n具体使用案例(来自MDN)：\n```\n// 选择需要观察变动的节点\nconst targetNode = document.getElementById('some-id');\n\n// 观察器的配置（需要观察什么变动）\nconst config = { attributes: true, childList: true, subtree: true };\n\n// 当观察到变动时执行的回调函数\nconst callback = function(mutationsList, observer) {\n    // Use traditional 'for loops' for IE 11\n    for(let mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n            console.log('A child node has been added or removed.');\n        }\n        else if (mutation.type === 'attributes') {\n            console.log('The ' + mutation.attributeName + ' attribute was modified.');\n        }\n    }\n};\n\n// 创建一个观察器实例并传入回调函数\nconst observer = new MutationObserver(callback);\n\n// 以上述配置开始观察目标节点\nobserver.observe(targetNode, config);\n\n// 之后，可停止观察\nobserver.disconnect();\n```\n\n### 常用场景\n- 防止第三方注入js文件（运营商劫持）\n- 防止删除前端生成的水印\n- 用来处理页面的敏感数据\n- Vue.$nextTick的实现微任务原理\n\n所以从问题定位中，分析水印陷入死循环很可能就是这一部分代码。\n\n## 定位问题\n回到最开始，我们是什么时候会遇到页面卡顿，当页面出现弹框的时候，会出现页面卡顿。\n\n同时找到插件的issues(查看issue也是一种快速解决问题的途径)，描述如下:\n\n>vue版本使用全局水印 `:is-body=\"true\"`  并且开启保护模式的情况下,触发带遮罩的事件就会导致页面无响应,且无法恢复;\n带遮罩的事件如对话框弹窗/图片点击放大;\n测试后发现关闭保护模式 `watermark.options.monitor = false` ,或者不使用全局水印没有出现该问题;\n[这里可以看全文](https://github.com/pansyjs/watermark/issues/129)\n\n### 定位到源码\n\n`watermark/packages/core/src/index.ts`，第244行，代码如下：\n```javascript\n\n...\n\nif (MutationObserver &amp;&amp; this.options.monitor) {\n      this.mutationObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          if (this._isAgainRender(mutation)) {\n            this.destroy();\n            this._render();\n            return;\n          }\n        });\n      });\n      this.mutationObserver.observe(this.container, observeOptions);\n      this.shadowRoot && this.mutationObserver.observe(this.shadowRoot, observeOptions);\n    }\n```\n\n结合上面`MutationObserver`的作用，主要是监听某个DOM容器内节点变化，然后重新渲染水印，从而避免水印被人删除。\n\n那么我们可以很简单的猜测一下，在弹框出来后，会触发`MutationObserver`，然后`_render函数`改变dom，又会触发自己本身的dom节点变化，再触发`MutationObserver`，导致陷入死循环。\n\n目前执行顺序：\n1. body容器被监听到DOM节点变化，触发`MutationObserver`事件\n2. `MutationObserver`事件返回参数`mutations`是一个数组，可能会重复执行`_render`函数\n3. 多次`_render`函数会继续注册`MutationObserver`事件，导致后续body容器变更持续被监听到，进入死循环逻辑中\n\n因此，只需要保证多次`MutationObserver`事件只触发一次`_render`函数，即可避免死循环逻辑。\n\n### 问题解决\n\n直接下载源码，放到本地调试（过程忽略），最终代码暂时如下：\n```javascript\n... \nif (MutationObserver &amp;&amp; this.options.monitor) {\n      this.mutationObserver = new MutationObserver(mutations => {\n\t  this.mutationObserver = new MutationObserver(mutations => {\n        // 避免多次执行render函数，导致多次注册MutationObserver 从而进入死循环逻辑\n        let lastMoutation;\n        mutations.forEach(mutation => {\n          if (this._isAgainRender(mutation)) {\n            lastMoutation = mutation;\n            return;\n          }\n        });\n        if(lastMoutation){\n          this.destroy();\n          this._render();\n        }\n      });\n      this.mutationObserver.observe(this.container, observeOptions);\n      this.shadowRoot &amp;&amp; this.mutationObserver.observe(this.shadowRoot, observeOptions);\n    }\n...\n```\n后面可以研究一下`为什么forEach || map函数无法跳出循环？`\n\n最后可以提交PR到开源github，这里面也有一些东西可以了解一下，[如何在github上为开源项目提交PR？](https://stephenzhou.net/2019/04/23/git-pr-tsg/)。\n\n这里是我提交的PR,[全局水印与其它遮罩层冲突 [issue 129]](https://github.com/pansyjs/watermark/pull/136)\n\n#参考资料\n[MutationObserver MDN资料](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)","slug":"share/page-notwork","published":1,"updated":"2022-12-29T03:15:01.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhk9n002dwspckqib8jr6","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>有童鞋在xxx系统页面反馈，遇到在弹出框后整个页面卡住无法使用的情况，属于必现问题。因此需要跟踪定位问题。</p>\n<h1 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h1><p>一般在浏览器遇到这种问题，基本上都某段逻辑进入死循环导致浏览器内核处理不过来导致的页面卡住动，这个时候需要使用Chrome开发调试工具进行跟踪定位的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"chrome-source调试工具\"><a href=\"#chrome-source调试工具\" class=\"headerlink\" title=\"chrome source调试工具\"></a>chrome source调试工具</h2><p>按照<code>F12</code>或者<code>Command + Alt + J</code>可以打开浏览器的调试工具，然后找到<code>Source</code> 或 <code>源代码</code>Tab页。如下图所示：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/106719ede96442b7a262bba5a68c9775~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"步骤一：点击-按钮，进入调试模式：\"><a href=\"#步骤一：点击-按钮，进入调试模式：\" class=\"headerlink\" title=\"步骤一：点击=按钮，进入调试模式：\"></a>步骤一：点击<code>=</code>按钮，进入调试模式：</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb7c6dc349554dd284aca3684d281323~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"步骤二：调试代码，查看卡住代码段：\"><a href=\"#步骤二：调试代码，查看卡住代码段：\" class=\"headerlink\" title=\"步骤二：调试代码，查看卡住代码段：\"></a>步骤二：调试代码，查看卡住代码段：</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b758994a5bb04938bc035b397465ab8b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"步骤三：-定位代码段\"><a href=\"#步骤三：-定位代码段\" class=\"headerlink\" title=\"步骤三： 定位代码段\"></a>步骤三： 定位代码段</h3><p>确定是哪段代码后，就可以开始分析代码段是属于哪里，最终找到classname，定位到是属于水印插件导致。</p>\n<h1 id=\"问题分析-水印插件\"><a href=\"#问题分析-水印插件\" class=\"headerlink\" title=\"问题分析(水印插件)\"></a>问题分析(水印插件)</h1><h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>为什么水印插件会导致页面进行死循环呢？这个就要跟踪到水印插件，目前采用的<code>@pansy/watermark</code>开源插件，然后找到其github issues，看看有没有相关issues。果不其然，还真的找到了，如下：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95eab9a9613d4e409ad09f906acf9d33~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><a href=\"https://github.com/pansyjs/watermark/issues/129\" target=\"_blank\" rel=\"noopener\">全局水印与其它遮罩层冲突</a><br>那么接下来就开始跟踪他们的代码进行具体分析。</p>\n<h1 id=\"水印插件实现原理\"><a href=\"#水印插件实现原理\" class=\"headerlink\" title=\"水印插件实现原理\"></a>水印插件实现原理</h1><p>在上面调试问题的时候，我们有看到一段代码<code>MoutationRecord</code>，其实这已经算是水印插件的重要实现原理之一了。</p>\n<p>看了插件源代码，其实就几千行代码，水印插件实现原理有几个点：</p>\n<ol>\n<li>利用<code>Shadow DOM</code>或者<code>div</code>DOM节点去插入水印，利用z-index显示到最前方</li>\n<li>同时设置<code>pointer-events: none;</code>禁止任何操作，包括：选择、点击等，实现不阻碍其他元素操作</li>\n<li>利用canvas生成水印图片(base64)</li>\n<li>设置水印节点背景图片为水印图片(base64)</li>\n<li>使用MutationObserver监听dom元素变化重复渲染生成水印图片，防止水印被人为删除<br>其中涉及到几个关键技术点为:</li>\n</ol>\n<ul>\n<li><code>pointer-events: none</code></li>\n<li>通过canvas生成图片</li>\n<li>MutationObserver监听<br>当然，还有<code>Shadow DOM</code>和canvas等技术点也可以自己去研究学习，后面再用一些篇章详细讲解。</li>\n</ul>\n<h2 id=\"pointer-events\"><a href=\"#pointer-events\" class=\"headerlink\" title=\"pointer-events\"></a>pointer-events</h2><p>从MDN中它是这么定义的：</p>\n<blockquote>\n<p>** <code>pointer-events</code> ** CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\" target=\"_blank\" rel=\"noopener\">target (en-US)</a>。</p>\n</blockquote>\n<p>简单解释一下，就是可以通过该属性设置DOM元素的鼠标事件，很多对应值都是给svg响应鼠标事件范围所设置的。</p>\n<p>这里重点解释一下<code>auto</code>、<code>none</code>两种值：</p>\n<blockquote>\n<p><code>auto</code>:与 <code>pointer-events</code> 属性未指定时的表现效果相同，对于 SVG 内容，该值与 <code>visiblePainted</code> 效果相同</p>\n<p><code>none</code>:元素永远不会成为鼠标事件的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\" target=\"_blank\" rel=\"noopener\">target (en-US)</a>。但是，当其后代元素的 <code>pointer-events</code> 属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</p>\n</blockquote>\n<p>简单说，<code>auto</code>是默认值，可以触发该元素本身就有的鼠标事件。<br><code>none</code>则代表取消该元素原有的鼠标事件，可以直接透过该元素直接触发下方元素鼠标事件。<br>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">a[href=&quot;http://example.com&quot;] &#123;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">&lt;!-- 点击链接 http://example.com 时，不会跳转 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;http://example.com&quot;&gt;example.com&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MutationObserver监听\"><a href=\"#MutationObserver监听\" class=\"headerlink\" title=\"MutationObserver监听\"></a>MutationObserver监听</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MDN定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\"><code>MutationObserver</code></a> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>\n</blockquote>\n<p>简单说，就是可以监听某个DOM节点下元素发生变化触发的事件。<br>支持方法：</p>\n<ul>\n<li><code>disconnect()</code>，注销监听方法</li>\n<li><code>observe()</code>,开始监听</li>\n<li><code>takeRecords()</code>, 取消通知队列</li>\n</ul>\n<p>具体使用案例(来自MDN)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 选择需要观察变动的节点</span><br><span class=\"line\">const targetNode = document.getElementById(&apos;some-id&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 观察器的配置（需要观察什么变动）</span><br><span class=\"line\">const config = &#123; attributes: true, childList: true, subtree: true &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当观察到变动时执行的回调函数</span><br><span class=\"line\">const callback = function(mutationsList, observer) &#123;</span><br><span class=\"line\">    // Use traditional &apos;for loops&apos; for IE 11</span><br><span class=\"line\">    for(let mutation of mutationsList) &#123;</span><br><span class=\"line\">        if (mutation.type === &apos;childList&apos;) &#123;</span><br><span class=\"line\">            console.log(&apos;A child node has been added or removed.&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (mutation.type === &apos;attributes&apos;) &#123;</span><br><span class=\"line\">            console.log(&apos;The &apos; + mutation.attributeName + &apos; attribute was modified.&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个观察器实例并传入回调函数</span><br><span class=\"line\">const observer = new MutationObserver(callback);</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上述配置开始观察目标节点</span><br><span class=\"line\">observer.observe(targetNode, config);</span><br><span class=\"line\"></span><br><span class=\"line\">// 之后，可停止观察</span><br><span class=\"line\">observer.disconnect();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用场景\"><a href=\"#常用场景\" class=\"headerlink\" title=\"常用场景\"></a>常用场景</h3><ul>\n<li>防止第三方注入js文件（运营商劫持）</li>\n<li>防止删除前端生成的水印</li>\n<li>用来处理页面的敏感数据</li>\n<li>Vue.$nextTick的实现微任务原理</li>\n</ul>\n<p>所以从问题定位中，分析水印陷入死循环很可能就是这一部分代码。</p>\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p>回到最开始，我们是什么时候会遇到页面卡顿，当页面出现弹框的时候，会出现页面卡顿。</p>\n<p>同时找到插件的issues(查看issue也是一种快速解决问题的途径)，描述如下:</p>\n<blockquote>\n<p>vue版本使用全局水印 <code>:is-body=&quot;true&quot;</code>  并且开启保护模式的情况下,触发带遮罩的事件就会导致页面无响应,且无法恢复;<br>带遮罩的事件如对话框弹窗/图片点击放大;<br>测试后发现关闭保护模式 <code>watermark.options.monitor = false</code> ,或者不使用全局水印没有出现该问题;<br><a href=\"https://github.com/pansyjs/watermark/issues/129\" target=\"_blank\" rel=\"noopener\">这里可以看全文</a></p>\n</blockquote>\n<h3 id=\"定位到源码\"><a href=\"#定位到源码\" class=\"headerlink\" title=\"定位到源码\"></a>定位到源码</h3><p><code>watermark/packages/core/src/index.ts</code>，第244行，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (MutationObserver &amp;amp;&amp;amp; <span class=\"keyword\">this</span>.options.monitor) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">mutations</span> =&gt;</span> &#123;</span><br><span class=\"line\">        mutations.forEach(<span class=\"function\"><span class=\"params\">mutation</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._isAgainRender(mutation)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.destroy();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._render();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.container, observeOptions);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.shadowRoot &amp;&amp; <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.shadowRoot, observeOptions);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>结合上面<code>MutationObserver</code>的作用，主要是监听某个DOM容器内节点变化，然后重新渲染水印，从而避免水印被人删除。</p>\n<p>那么我们可以很简单的猜测一下，在弹框出来后，会触发<code>MutationObserver</code>，然后<code>_render函数</code>改变dom，又会触发自己本身的dom节点变化，再触发<code>MutationObserver</code>，导致陷入死循环。</p>\n<p>目前执行顺序：</p>\n<ol>\n<li>body容器被监听到DOM节点变化，触发<code>MutationObserver</code>事件</li>\n<li><code>MutationObserver</code>事件返回参数<code>mutations</code>是一个数组，可能会重复执行<code>_render</code>函数</li>\n<li>多次<code>_render</code>函数会继续注册<code>MutationObserver</code>事件，导致后续body容器变更持续被监听到，进入死循环逻辑中</li>\n</ol>\n<p>因此，只需要保证多次<code>MutationObserver</code>事件只触发一次<code>_render</code>函数，即可避免死循环逻辑。</p>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><p>直接下载源码，放到本地调试（过程忽略），最终代码暂时如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... </span><br><span class=\"line\"><span class=\"keyword\">if</span> (MutationObserver &amp;amp;&amp;amp; <span class=\"keyword\">this</span>.options.monitor) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">mutations</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">this</span>.mutationObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">mutations</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 避免多次执行render函数，导致多次注册MutationObserver 从而进入死循环逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> lastMoutation;</span><br><span class=\"line\">        mutations.forEach(<span class=\"function\"><span class=\"params\">mutation</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._isAgainRender(mutation)) &#123;</span><br><span class=\"line\">            lastMoutation = mutation;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lastMoutation)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.destroy();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._render();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.container, observeOptions);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.shadowRoot &amp;amp;&amp;amp; <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.shadowRoot, observeOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>后面可以研究一下<code>为什么forEach || map函数无法跳出循环？</code></p>\n<p>最后可以提交PR到开源github，这里面也有一些东西可以了解一下，<a href=\"https://stephenzhou.net/2019/04/23/git-pr-tsg/\" target=\"_blank\" rel=\"noopener\">如何在github上为开源项目提交PR？</a>。</p>\n<p>这里是我提交的PR,<a href=\"https://github.com/pansyjs/watermark/pull/136\" target=\"_blank\" rel=\"noopener\">全局水印与其它遮罩层冲突 [issue 129]</a></p>\n<p>#参考资料<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\">MutationObserver MDN资料</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>有童鞋在xxx系统页面反馈，遇到在弹出框后整个页面卡住无法使用的情况，属于必现问题。因此需要跟踪定位问题。</p>\n<h1 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h1><p>一般在浏览器遇到这种问题，基本上都某段逻辑进入死循环导致浏览器内核处理不过来导致的页面卡住动，这个时候需要使用Chrome开发调试工具进行跟踪定位的。</p>","more":"<h2 id=\"chrome-source调试工具\"><a href=\"#chrome-source调试工具\" class=\"headerlink\" title=\"chrome source调试工具\"></a>chrome source调试工具</h2><p>按照<code>F12</code>或者<code>Command + Alt + J</code>可以打开浏览器的调试工具，然后找到<code>Source</code> 或 <code>源代码</code>Tab页。如下图所示：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/106719ede96442b7a262bba5a68c9775~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"步骤一：点击-按钮，进入调试模式：\"><a href=\"#步骤一：点击-按钮，进入调试模式：\" class=\"headerlink\" title=\"步骤一：点击=按钮，进入调试模式：\"></a>步骤一：点击<code>=</code>按钮，进入调试模式：</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb7c6dc349554dd284aca3684d281323~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"步骤二：调试代码，查看卡住代码段：\"><a href=\"#步骤二：调试代码，查看卡住代码段：\" class=\"headerlink\" title=\"步骤二：调试代码，查看卡住代码段：\"></a>步骤二：调试代码，查看卡住代码段：</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b758994a5bb04938bc035b397465ab8b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h3 id=\"步骤三：-定位代码段\"><a href=\"#步骤三：-定位代码段\" class=\"headerlink\" title=\"步骤三： 定位代码段\"></a>步骤三： 定位代码段</h3><p>确定是哪段代码后，就可以开始分析代码段是属于哪里，最终找到classname，定位到是属于水印插件导致。</p>\n<h1 id=\"问题分析-水印插件\"><a href=\"#问题分析-水印插件\" class=\"headerlink\" title=\"问题分析(水印插件)\"></a>问题分析(水印插件)</h1><h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>为什么水印插件会导致页面进行死循环呢？这个就要跟踪到水印插件，目前采用的<code>@pansy/watermark</code>开源插件，然后找到其github issues，看看有没有相关issues。果不其然，还真的找到了，如下：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95eab9a9613d4e409ad09f906acf9d33~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p><a href=\"https://github.com/pansyjs/watermark/issues/129\" target=\"_blank\" rel=\"noopener\">全局水印与其它遮罩层冲突</a><br>那么接下来就开始跟踪他们的代码进行具体分析。</p>\n<h1 id=\"水印插件实现原理\"><a href=\"#水印插件实现原理\" class=\"headerlink\" title=\"水印插件实现原理\"></a>水印插件实现原理</h1><p>在上面调试问题的时候，我们有看到一段代码<code>MoutationRecord</code>，其实这已经算是水印插件的重要实现原理之一了。</p>\n<p>看了插件源代码，其实就几千行代码，水印插件实现原理有几个点：</p>\n<ol>\n<li>利用<code>Shadow DOM</code>或者<code>div</code>DOM节点去插入水印，利用z-index显示到最前方</li>\n<li>同时设置<code>pointer-events: none;</code>禁止任何操作，包括：选择、点击等，实现不阻碍其他元素操作</li>\n<li>利用canvas生成水印图片(base64)</li>\n<li>设置水印节点背景图片为水印图片(base64)</li>\n<li>使用MutationObserver监听dom元素变化重复渲染生成水印图片，防止水印被人为删除<br>其中涉及到几个关键技术点为:</li>\n</ol>\n<ul>\n<li><code>pointer-events: none</code></li>\n<li>通过canvas生成图片</li>\n<li>MutationObserver监听<br>当然，还有<code>Shadow DOM</code>和canvas等技术点也可以自己去研究学习，后面再用一些篇章详细讲解。</li>\n</ul>\n<h2 id=\"pointer-events\"><a href=\"#pointer-events\" class=\"headerlink\" title=\"pointer-events\"></a>pointer-events</h2><p>从MDN中它是这么定义的：</p>\n<blockquote>\n<p>** <code>pointer-events</code> ** CSS 属性指定在什么情况下 (如果有) 某个特定的图形元素可以成为鼠标事件的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\" target=\"_blank\" rel=\"noopener\">target (en-US)</a>。</p>\n</blockquote>\n<p>简单解释一下，就是可以通过该属性设置DOM元素的鼠标事件，很多对应值都是给svg响应鼠标事件范围所设置的。</p>\n<p>这里重点解释一下<code>auto</code>、<code>none</code>两种值：</p>\n<blockquote>\n<p><code>auto</code>:与 <code>pointer-events</code> 属性未指定时的表现效果相同，对于 SVG 内容，该值与 <code>visiblePainted</code> 效果相同</p>\n<p><code>none</code>:元素永远不会成为鼠标事件的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\" target=\"_blank\" rel=\"noopener\">target (en-US)</a>。但是，当其后代元素的 <code>pointer-events</code> 属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</p>\n</blockquote>\n<p>简单说，<code>auto</code>是默认值，可以触发该元素本身就有的鼠标事件。<br><code>none</code>则代表取消该元素原有的鼠标事件，可以直接透过该元素直接触发下方元素鼠标事件。<br>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">a[href=&quot;http://example.com&quot;] &#123;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">&lt;!-- 点击链接 http://example.com 时，不会跳转 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;http://example.com&quot;&gt;example.com&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MutationObserver监听\"><a href=\"#MutationObserver监听\" class=\"headerlink\" title=\"MutationObserver监听\"></a>MutationObserver监听</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>MDN定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\"><code>MutationObserver</code></a> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>\n</blockquote>\n<p>简单说，就是可以监听某个DOM节点下元素发生变化触发的事件。<br>支持方法：</p>\n<ul>\n<li><code>disconnect()</code>，注销监听方法</li>\n<li><code>observe()</code>,开始监听</li>\n<li><code>takeRecords()</code>, 取消通知队列</li>\n</ul>\n<p>具体使用案例(来自MDN)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 选择需要观察变动的节点</span><br><span class=\"line\">const targetNode = document.getElementById(&apos;some-id&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 观察器的配置（需要观察什么变动）</span><br><span class=\"line\">const config = &#123; attributes: true, childList: true, subtree: true &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 当观察到变动时执行的回调函数</span><br><span class=\"line\">const callback = function(mutationsList, observer) &#123;</span><br><span class=\"line\">    // Use traditional &apos;for loops&apos; for IE 11</span><br><span class=\"line\">    for(let mutation of mutationsList) &#123;</span><br><span class=\"line\">        if (mutation.type === &apos;childList&apos;) &#123;</span><br><span class=\"line\">            console.log(&apos;A child node has been added or removed.&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (mutation.type === &apos;attributes&apos;) &#123;</span><br><span class=\"line\">            console.log(&apos;The &apos; + mutation.attributeName + &apos; attribute was modified.&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个观察器实例并传入回调函数</span><br><span class=\"line\">const observer = new MutationObserver(callback);</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上述配置开始观察目标节点</span><br><span class=\"line\">observer.observe(targetNode, config);</span><br><span class=\"line\"></span><br><span class=\"line\">// 之后，可停止观察</span><br><span class=\"line\">observer.disconnect();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用场景\"><a href=\"#常用场景\" class=\"headerlink\" title=\"常用场景\"></a>常用场景</h3><ul>\n<li>防止第三方注入js文件（运营商劫持）</li>\n<li>防止删除前端生成的水印</li>\n<li>用来处理页面的敏感数据</li>\n<li>Vue.$nextTick的实现微任务原理</li>\n</ul>\n<p>所以从问题定位中，分析水印陷入死循环很可能就是这一部分代码。</p>\n<h2 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h2><p>回到最开始，我们是什么时候会遇到页面卡顿，当页面出现弹框的时候，会出现页面卡顿。</p>\n<p>同时找到插件的issues(查看issue也是一种快速解决问题的途径)，描述如下:</p>\n<blockquote>\n<p>vue版本使用全局水印 <code>:is-body=&quot;true&quot;</code>  并且开启保护模式的情况下,触发带遮罩的事件就会导致页面无响应,且无法恢复;<br>带遮罩的事件如对话框弹窗/图片点击放大;<br>测试后发现关闭保护模式 <code>watermark.options.monitor = false</code> ,或者不使用全局水印没有出现该问题;<br><a href=\"https://github.com/pansyjs/watermark/issues/129\" target=\"_blank\" rel=\"noopener\">这里可以看全文</a></p>\n</blockquote>\n<h3 id=\"定位到源码\"><a href=\"#定位到源码\" class=\"headerlink\" title=\"定位到源码\"></a>定位到源码</h3><p><code>watermark/packages/core/src/index.ts</code>，第244行，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (MutationObserver &amp;amp;&amp;amp; <span class=\"keyword\">this</span>.options.monitor) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">mutations</span> =&gt;</span> &#123;</span><br><span class=\"line\">        mutations.forEach(<span class=\"function\"><span class=\"params\">mutation</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._isAgainRender(mutation)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.destroy();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._render();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.container, observeOptions);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.shadowRoot &amp;&amp; <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.shadowRoot, observeOptions);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>结合上面<code>MutationObserver</code>的作用，主要是监听某个DOM容器内节点变化，然后重新渲染水印，从而避免水印被人删除。</p>\n<p>那么我们可以很简单的猜测一下，在弹框出来后，会触发<code>MutationObserver</code>，然后<code>_render函数</code>改变dom，又会触发自己本身的dom节点变化，再触发<code>MutationObserver</code>，导致陷入死循环。</p>\n<p>目前执行顺序：</p>\n<ol>\n<li>body容器被监听到DOM节点变化，触发<code>MutationObserver</code>事件</li>\n<li><code>MutationObserver</code>事件返回参数<code>mutations</code>是一个数组，可能会重复执行<code>_render</code>函数</li>\n<li>多次<code>_render</code>函数会继续注册<code>MutationObserver</code>事件，导致后续body容器变更持续被监听到，进入死循环逻辑中</li>\n</ol>\n<p>因此，只需要保证多次<code>MutationObserver</code>事件只触发一次<code>_render</code>函数，即可避免死循环逻辑。</p>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><p>直接下载源码，放到本地调试（过程忽略），最终代码暂时如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... </span><br><span class=\"line\"><span class=\"keyword\">if</span> (MutationObserver &amp;amp;&amp;amp; <span class=\"keyword\">this</span>.options.monitor) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">mutations</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">this</span>.mutationObserver = <span class=\"keyword\">new</span> MutationObserver(<span class=\"function\"><span class=\"params\">mutations</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 避免多次执行render函数，导致多次注册MutationObserver 从而进入死循环逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> lastMoutation;</span><br><span class=\"line\">        mutations.forEach(<span class=\"function\"><span class=\"params\">mutation</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._isAgainRender(mutation)) &#123;</span><br><span class=\"line\">            lastMoutation = mutation;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lastMoutation)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.destroy();</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._render();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.container, observeOptions);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.shadowRoot &amp;amp;&amp;amp; <span class=\"keyword\">this</span>.mutationObserver.observe(<span class=\"keyword\">this</span>.shadowRoot, observeOptions);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>后面可以研究一下<code>为什么forEach || map函数无法跳出循环？</code></p>\n<p>最后可以提交PR到开源github，这里面也有一些东西可以了解一下，<a href=\"https://stephenzhou.net/2019/04/23/git-pr-tsg/\" target=\"_blank\" rel=\"noopener\">如何在github上为开源项目提交PR？</a>。</p>\n<p>这里是我提交的PR,<a href=\"https://github.com/pansyjs/watermark/pull/136\" target=\"_blank\" rel=\"noopener\">全局水印与其它遮罩层冲突 [issue 129]</a></p>\n<p>#参考资料<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\">MutationObserver MDN资料</a></p>"},{"title":"iOS11.3 fastclick.js相关bug","date":"2018-08-04T13:21:01.000Z","_content":"\n最近遇到奇异的bug,在ios 11.3移动端页面 input输入框第一次触摸可以弹起键盘，后续再触摸需要很难弹起键盘，或者需要在输入框停一会才能弹起键盘。\n##  bug复现条件：\n一、ios 11.3中app的webview为 UI WebView\n二、在项目中使用了FastClick.js，页面包括输入框.\n\n## 发现源头问题：\n在碰到问题脑子第一想法这不就是click延迟300ms的现象吗？所以就想到是不是FastClick.js导致，注释掉后发现bug现象消失了，代码如下：\n\n```javascript\ndefine(['zepto'], function ($) {\n 'use strict';\n // FastClick.attach(document.body);\n ...\n});\n```\n\n但是这是为什么呢？我们一起看看为什么要加上FastClick，这个库解决了什么问题？\n\n<!-- more -->\n\n* click 300ms延迟：浏览器click会比touch延迟300ms触发\n* click穿透现象：当两个div同处一个position，上层div绑定touch，下层div绑定click,当上层div触发touch消失后，可能会触发下层div的click事件\n既然Fastclick是为了解决这两类问题，其实现原理如下图所示：\n![fastclick原理](https://upload-images.jianshu.io/upload_images/11733108-a045cb92752f7ae8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nfastclick利用捕获顶层dom元素(如：body，html等)的click事件，拦截所有的click请求进行判断：是否有touch触发、是否需要阻碍click事件(stopImmediatePropagation)等。\n\n## 分析问题解决方案：\n步骤一：input无法聚焦弹出键盘，fastclick中有一块判断当前元素targetElement是否需要needsFocus，看看其方法的实现：\n```javascript\nFastClick.prototype.needsFocus = function(target) { //判断当前元素是否需要focus\n        switch (target.nodeName.toLowerCase()) {\n            case 'textarea':\n                return true;\n            case 'select':\n                return !deviceIsAndroid;\n            case 'input':\n                switch (target.type) {\n                    case 'button':\n                    case 'checkbox':\n                    case 'file':\n                    case 'image':\n                    case 'radio':\n                    case 'submit':\n                        return false;\n                }\n                // No point in attempting to focus disabled inputs\n                return !target.disabled && !target.readOnly;\n            default:\n                return (/\\bneedsfocus\\b/).test(target.className);\n        }\n};\n```\n步骤二：看到needsFocus下执行了什么？在touchEnd方法中，代码块如下：\n```javascript\nif (this.needsFocus(targetElement)) {if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {\n this.targetElement = null;\n return false;\n }\n this.focus(targetElement); //调用focus进行聚焦\n this.sendClick(targetElement, event);\n  \n if (!deviceIsIOS || targetTagName !== 'select') {\n this.targetElement = null;\n event.preventDefault();\n }\n return false;\n }\n```\n步骤三：focus方法分析（包含解决方案），如下：\n```javascript\nFastClick.prototype.focus = function(targetElement) {\n        var length;\n        //兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError\n        //这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法\n        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month' && targetElement.type !== 'email') {\n            length = targetElement.value.length;\n            targetElement.setSelectionRange(length, length);\n            /*修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘*/\n            targetElement.focus();\n        } else {\n            targetElement.focus();\n        }\n    };\n```\n## 原理分析\nOK，上真机iphoneX验证bug已经消失了，但是我们并不知道为什么在ios 11.3会出现该问题，秉着探索真理的一颗心（ZZZZ），到github去查看FastClick的issues列表，果然发现早有人提出bug了，如下图：\n![fastclick issues](https://upload-images.jianshu.io/upload_images/11733108-dc00511b626e3496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下方有评论如下：\nA：说framework7框架那边已经有解决方案啦，[点击这里](https://github.com/framework7io/framework7/issues/2314#issuecomment-377778034)。\n![frameword7问题解决](https://upload-images.jianshu.io/upload_images/11733108-2e17af0f0c9a7474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n另外一位仁兄的解决方案和我类似，修改focus方法。\n![focus解决方案](https://upload-images.jianshu.io/upload_images/11733108-829a9db17ea2e4b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n因此跳到framework的issue中的解决方案，解决方案：[点击这里](https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios)，描述如下：\n![解决方案描述](https://upload-images.jianshu.io/upload_images/11733108-443f9d4c26e32cd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n跳过去stackoverflow后，其实根本源头已经查到了，ios 11.3更新 Safari 11.1，支持新web API :允许对事件支持 `{passive: false}`被动模式，减少滚动屏幕的性能损耗和奔溃。\n\n## passive mode解析\n那么新的问题来了，{passive: false}是什么玩意？来，我们先看看它的使用方式：\n```javascript\ndocument.addEventListener('touchmove', function(e) {\n    e.preventDefault();\n}, { passive: false });\n```\n按照以往我们对添加事件监听的方法三个参数的认知，如下：\n```javascript\ndocument.addEventListener(type , callback, capture); //type是事件类型，callback是执行函数， capture是否进行捕获/冒泡，默认为false\n```\n\nPassive event listeners是2016年Google I/O 上同 PWA 概念一起被提出，但是同PWA不同，Passive event listeners 的作用很简单，如果用简单一句话来解释就是：提升页面滑动的流畅度。\n```javascript\ntarget.addEventListener(type, listener[, options]);\n \n/**\noptions 可选\n一个指定有关 listener 属性的可选参数对象。\n可用的选项如下：\ncapture:  Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。\nonce:  Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。\npassive: Boolean，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。\n*/\n \n//示例代码\ntarget.addEventListener('touchstart', function(e){\n   e.preventDefault() // 无效，报错\n}, {passive: true});\n```\n为什么增加支持这个属性会导致添加fastclick后input输入框很难弹出键盘？\n\n在ios更新日志了，写到了“Updated root document touch event listeners to use passive mode improving scrolling performance and reducing crashes.”\n\n翻译过来就是：针对document的touch事件监听添加passive配置，即是：{passive: true}，会永远不调用event.preventDefault()，以此来提高滚动性能。\n\n源头推测：\n\nfastclick是采用拦截click和监听touch事件去实现的，里面包括对tagetElement的focus方法重写，因此在11.3之前可能event.preventDefault生效了，同时用setSelectionRange是可以聚焦input的。\n\n \n\n另外一个bug也是由这个导致的是：\n\n在iOS11.3的UI webview使用fastclick.js，页面有个按钮点击事件，当app或锁屏超过几分钟时间，回到页面会导致click事件失效。\n\n解决方案为：\n```javascript\nvar passiveListener = (function checkPassiveListener() {\n            //判断浏览器是否支持 {passive: true}\n            var supportsPassive = false;\n            try {\n                var opts = Object.defineProperty({}, 'passive', {\n                    get: function() {\n                        supportsPassive = true;\n                    }\n                });\n                window.addEventListener('testPassiveListener', null, opts);\n            } catch (e) {\n                supportsPassive = false;\n            }\n            return supportsPassive;\n}());\nvar activeListener = passiveListener ? {passive:false} : false;\nlayer.addEventListener('click', this.onClick, true);\nlayer.addEventListener('touchstart', this.onTouchStart, passiveListener);\nlayer.addEventListener('touchmove', this.onTouchMove, passiveListener);\nlayer.addEventListener('touchend', this.onTouchEnd, passiveListener);\nlayer.addEventListener('touchcancel', this.onTouchCancel, passiveListener);\n```\n\n## 参考资料\n* [《EventTarget.addEventListener()增加passive属性说明——web MDN API网站》](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)\n* [《fastclick github issues#548》](https://github.com/ftlabs/fastclick/issues/548)\n* [《stackoverflow ——touchmove e.preventDefault失效问题》](https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios)\n* [《Safari 11.1更新日志》](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html)\n\n","source":"_posts/share/iOS11-fastclick-js.md","raw":"---\ntitle: iOS11.3 fastclick.js相关bug\ndate: 2018-08-04 21:21:01\ntags:\n    - 技术分享\n---\n\n最近遇到奇异的bug,在ios 11.3移动端页面 input输入框第一次触摸可以弹起键盘，后续再触摸需要很难弹起键盘，或者需要在输入框停一会才能弹起键盘。\n##  bug复现条件：\n一、ios 11.3中app的webview为 UI WebView\n二、在项目中使用了FastClick.js，页面包括输入框.\n\n## 发现源头问题：\n在碰到问题脑子第一想法这不就是click延迟300ms的现象吗？所以就想到是不是FastClick.js导致，注释掉后发现bug现象消失了，代码如下：\n\n```javascript\ndefine(['zepto'], function ($) {\n 'use strict';\n // FastClick.attach(document.body);\n ...\n});\n```\n\n但是这是为什么呢？我们一起看看为什么要加上FastClick，这个库解决了什么问题？\n\n<!-- more -->\n\n* click 300ms延迟：浏览器click会比touch延迟300ms触发\n* click穿透现象：当两个div同处一个position，上层div绑定touch，下层div绑定click,当上层div触发touch消失后，可能会触发下层div的click事件\n既然Fastclick是为了解决这两类问题，其实现原理如下图所示：\n![fastclick原理](https://upload-images.jianshu.io/upload_images/11733108-a045cb92752f7ae8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nfastclick利用捕获顶层dom元素(如：body，html等)的click事件，拦截所有的click请求进行判断：是否有touch触发、是否需要阻碍click事件(stopImmediatePropagation)等。\n\n## 分析问题解决方案：\n步骤一：input无法聚焦弹出键盘，fastclick中有一块判断当前元素targetElement是否需要needsFocus，看看其方法的实现：\n```javascript\nFastClick.prototype.needsFocus = function(target) { //判断当前元素是否需要focus\n        switch (target.nodeName.toLowerCase()) {\n            case 'textarea':\n                return true;\n            case 'select':\n                return !deviceIsAndroid;\n            case 'input':\n                switch (target.type) {\n                    case 'button':\n                    case 'checkbox':\n                    case 'file':\n                    case 'image':\n                    case 'radio':\n                    case 'submit':\n                        return false;\n                }\n                // No point in attempting to focus disabled inputs\n                return !target.disabled && !target.readOnly;\n            default:\n                return (/\\bneedsfocus\\b/).test(target.className);\n        }\n};\n```\n步骤二：看到needsFocus下执行了什么？在touchEnd方法中，代码块如下：\n```javascript\nif (this.needsFocus(targetElement)) {if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {\n this.targetElement = null;\n return false;\n }\n this.focus(targetElement); //调用focus进行聚焦\n this.sendClick(targetElement, event);\n  \n if (!deviceIsIOS || targetTagName !== 'select') {\n this.targetElement = null;\n event.preventDefault();\n }\n return false;\n }\n```\n步骤三：focus方法分析（包含解决方案），如下：\n```javascript\nFastClick.prototype.focus = function(targetElement) {\n        var length;\n        //兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError\n        //这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法\n        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month' && targetElement.type !== 'email') {\n            length = targetElement.value.length;\n            targetElement.setSelectionRange(length, length);\n            /*修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘*/\n            targetElement.focus();\n        } else {\n            targetElement.focus();\n        }\n    };\n```\n## 原理分析\nOK，上真机iphoneX验证bug已经消失了，但是我们并不知道为什么在ios 11.3会出现该问题，秉着探索真理的一颗心（ZZZZ），到github去查看FastClick的issues列表，果然发现早有人提出bug了，如下图：\n![fastclick issues](https://upload-images.jianshu.io/upload_images/11733108-dc00511b626e3496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下方有评论如下：\nA：说framework7框架那边已经有解决方案啦，[点击这里](https://github.com/framework7io/framework7/issues/2314#issuecomment-377778034)。\n![frameword7问题解决](https://upload-images.jianshu.io/upload_images/11733108-2e17af0f0c9a7474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n另外一位仁兄的解决方案和我类似，修改focus方法。\n![focus解决方案](https://upload-images.jianshu.io/upload_images/11733108-829a9db17ea2e4b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n因此跳到framework的issue中的解决方案，解决方案：[点击这里](https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios)，描述如下：\n![解决方案描述](https://upload-images.jianshu.io/upload_images/11733108-443f9d4c26e32cd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n跳过去stackoverflow后，其实根本源头已经查到了，ios 11.3更新 Safari 11.1，支持新web API :允许对事件支持 `{passive: false}`被动模式，减少滚动屏幕的性能损耗和奔溃。\n\n## passive mode解析\n那么新的问题来了，{passive: false}是什么玩意？来，我们先看看它的使用方式：\n```javascript\ndocument.addEventListener('touchmove', function(e) {\n    e.preventDefault();\n}, { passive: false });\n```\n按照以往我们对添加事件监听的方法三个参数的认知，如下：\n```javascript\ndocument.addEventListener(type , callback, capture); //type是事件类型，callback是执行函数， capture是否进行捕获/冒泡，默认为false\n```\n\nPassive event listeners是2016年Google I/O 上同 PWA 概念一起被提出，但是同PWA不同，Passive event listeners 的作用很简单，如果用简单一句话来解释就是：提升页面滑动的流畅度。\n```javascript\ntarget.addEventListener(type, listener[, options]);\n \n/**\noptions 可选\n一个指定有关 listener 属性的可选参数对象。\n可用的选项如下：\ncapture:  Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。\nonce:  Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。\npassive: Boolean，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。\n*/\n \n//示例代码\ntarget.addEventListener('touchstart', function(e){\n   e.preventDefault() // 无效，报错\n}, {passive: true});\n```\n为什么增加支持这个属性会导致添加fastclick后input输入框很难弹出键盘？\n\n在ios更新日志了，写到了“Updated root document touch event listeners to use passive mode improving scrolling performance and reducing crashes.”\n\n翻译过来就是：针对document的touch事件监听添加passive配置，即是：{passive: true}，会永远不调用event.preventDefault()，以此来提高滚动性能。\n\n源头推测：\n\nfastclick是采用拦截click和监听touch事件去实现的，里面包括对tagetElement的focus方法重写，因此在11.3之前可能event.preventDefault生效了，同时用setSelectionRange是可以聚焦input的。\n\n \n\n另外一个bug也是由这个导致的是：\n\n在iOS11.3的UI webview使用fastclick.js，页面有个按钮点击事件，当app或锁屏超过几分钟时间，回到页面会导致click事件失效。\n\n解决方案为：\n```javascript\nvar passiveListener = (function checkPassiveListener() {\n            //判断浏览器是否支持 {passive: true}\n            var supportsPassive = false;\n            try {\n                var opts = Object.defineProperty({}, 'passive', {\n                    get: function() {\n                        supportsPassive = true;\n                    }\n                });\n                window.addEventListener('testPassiveListener', null, opts);\n            } catch (e) {\n                supportsPassive = false;\n            }\n            return supportsPassive;\n}());\nvar activeListener = passiveListener ? {passive:false} : false;\nlayer.addEventListener('click', this.onClick, true);\nlayer.addEventListener('touchstart', this.onTouchStart, passiveListener);\nlayer.addEventListener('touchmove', this.onTouchMove, passiveListener);\nlayer.addEventListener('touchend', this.onTouchEnd, passiveListener);\nlayer.addEventListener('touchcancel', this.onTouchCancel, passiveListener);\n```\n\n## 参考资料\n* [《EventTarget.addEventListener()增加passive属性说明——web MDN API网站》](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)\n* [《fastclick github issues#548》](https://github.com/ftlabs/fastclick/issues/548)\n* [《stackoverflow ——touchmove e.preventDefault失效问题》](https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios)\n* [《Safari 11.1更新日志》](https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html)\n\n","slug":"share/iOS11-fastclick-js","published":1,"updated":"2022-12-30T07:14:34.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldikhkap002wwspc55wjiuu4","content":"<p>最近遇到奇异的bug,在ios 11.3移动端页面 input输入框第一次触摸可以弹起键盘，后续再触摸需要很难弹起键盘，或者需要在输入框停一会才能弹起键盘。</p>\n<h2 id=\"bug复现条件：\"><a href=\"#bug复现条件：\" class=\"headerlink\" title=\"bug复现条件：\"></a>bug复现条件：</h2><p>一、ios 11.3中app的webview为 UI WebView<br>二、在项目中使用了FastClick.js，页面包括输入框.</p>\n<h2 id=\"发现源头问题：\"><a href=\"#发现源头问题：\" class=\"headerlink\" title=\"发现源头问题：\"></a>发现源头问题：</h2><p>在碰到问题脑子第一想法这不就是click延迟300ms的现象吗？所以就想到是不是FastClick.js导致，注释掉后发现bug现象消失了，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'zepto'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\"> 'use strict'</span>;</span><br><span class=\"line\"> <span class=\"comment\">// FastClick.attach(document.body);</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>但是这是为什么呢？我们一起看看为什么要加上FastClick，这个库解决了什么问题？</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>click 300ms延迟：浏览器click会比touch延迟300ms触发</li>\n<li>click穿透现象：当两个div同处一个position，上层div绑定touch，下层div绑定click,当上层div触发touch消失后，可能会触发下层div的click事件<br>既然Fastclick是为了解决这两类问题，其实现原理如下图所示：<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-a045cb92752f7ae8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fastclick原理\"></li>\n</ul>\n<p>fastclick利用捕获顶层dom元素(如：body，html等)的click事件，拦截所有的click请求进行判断：是否有touch触发、是否需要阻碍click事件(stopImmediatePropagation)等。</p>\n<h2 id=\"分析问题解决方案：\"><a href=\"#分析问题解决方案：\" class=\"headerlink\" title=\"分析问题解决方案：\"></a>分析问题解决方案：</h2><p>步骤一：input无法聚焦弹出键盘，fastclick中有一块判断当前元素targetElement是否需要needsFocus，看看其方法的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FastClick.prototype.needsFocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123; <span class=\"comment\">//判断当前元素是否需要focus</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (target.nodeName.toLowerCase()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'textarea'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'select'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> !deviceIsAndroid;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'input'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (target.type) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'button'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'checkbox'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'file'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'image'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'radio'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'submit'</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// No point in attempting to focus disabled inputs</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> !target.disabled &amp;&amp; !target.readOnly;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"regexp\">/\\bneedsfocus\\b/</span>).test(target.className);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：看到needsFocus下执行了什么？在touchEnd方法中，代码块如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.needsFocus(targetElement)) &#123;<span class=\"keyword\">if</span> ((event.timeStamp - trackingClickStart) &gt; <span class=\"number\">100</span> || (deviceIsIOS &amp;&amp; <span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span> &amp;&amp; targetTagName === <span class=\"string\">'input'</span>)) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.targetElement = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.focus(targetElement); <span class=\"comment\">//调用focus进行聚焦</span></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.sendClick(targetElement, event);</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!deviceIsIOS || targetTagName !== <span class=\"string\">'select'</span>) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.targetElement = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> event.preventDefault();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>步骤三：focus方法分析（包含解决方案），如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FastClick.prototype.focus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetElement</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length;</span><br><span class=\"line\">        <span class=\"comment\">//兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError</span></span><br><span class=\"line\">        <span class=\"comment\">//这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (deviceIsIOS &amp;&amp; targetElement.setSelectionRange &amp;&amp; targetElement.type.indexOf(<span class=\"string\">'date'</span>) !== <span class=\"number\">0</span> &amp;&amp; targetElement.type !== <span class=\"string\">'time'</span> &amp;&amp; targetElement.type !== <span class=\"string\">'month'</span> &amp;&amp; targetElement.type !== <span class=\"string\">'email'</span>) &#123;</span><br><span class=\"line\">            length = targetElement.value.length;</span><br><span class=\"line\">            targetElement.setSelectionRange(length, length);</span><br><span class=\"line\">            <span class=\"comment\">/*修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘*/</span></span><br><span class=\"line\">            targetElement.focus();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            targetElement.focus();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>OK，上真机iphoneX验证bug已经消失了，但是我们并不知道为什么在ios 11.3会出现该问题，秉着探索真理的一颗心（ZZZZ），到github去查看FastClick的issues列表，果然发现早有人提出bug了，如下图：<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-dc00511b626e3496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fastclick issues\"></p>\n<p>下方有评论如下：<br>A：说framework7框架那边已经有解决方案啦，<a href=\"https://github.com/framework7io/framework7/issues/2314#issuecomment-377778034\" target=\"_blank\" rel=\"noopener\">点击这里</a>。<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-2e17af0f0c9a7474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"frameword7问题解决\"></p>\n<p>另外一位仁兄的解决方案和我类似，修改focus方法。<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-829a9db17ea2e4b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"focus解决方案\"></p>\n<p>因此跳到framework的issue中的解决方案，解决方案：<a href=\"https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios\" target=\"_blank\" rel=\"noopener\">点击这里</a>，描述如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-443f9d4c26e32cd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"解决方案描述\"></p>\n<p>跳过去stackoverflow后，其实根本源头已经查到了，ios 11.3更新 Safari 11.1，支持新web API :允许对事件支持 <code>{passive: false}</code>被动模式，减少滚动屏幕的性能损耗和奔溃。</p>\n<h2 id=\"passive-mode解析\"><a href=\"#passive-mode解析\" class=\"headerlink\" title=\"passive mode解析\"></a>passive mode解析</h2><p>那么新的问题来了，{passive: false}是什么玩意？来，我们先看看它的使用方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;, &#123; <span class=\"attr\">passive</span>: <span class=\"literal\">false</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>按照以往我们对添加事件监听的方法三个参数的认知，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(type , callback, capture); <span class=\"comment\">//type是事件类型，callback是执行函数， capture是否进行捕获/冒泡，默认为false</span></span><br></pre></td></tr></table></figure>\n\n<p>Passive event listeners是2016年Google I/O 上同 PWA 概念一起被提出，但是同PWA不同，Passive event listeners 的作用很简单，如果用简单一句话来解释就是：提升页面滑动的流畅度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">options 可选</span></span><br><span class=\"line\"><span class=\"comment\">一个指定有关 listener 属性的可选参数对象。</span></span><br><span class=\"line\"><span class=\"comment\">可用的选项如下：</span></span><br><span class=\"line\"><span class=\"comment\">capture:  Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。</span></span><br><span class=\"line\"><span class=\"comment\">once:  Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。</span></span><br><span class=\"line\"><span class=\"comment\">passive: Boolean，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\">target.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">   e.preventDefault() <span class=\"comment\">// 无效，报错</span></span><br><span class=\"line\">&#125;, &#123;<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>为什么增加支持这个属性会导致添加fastclick后input输入框很难弹出键盘？</p>\n<p>在ios更新日志了，写到了“Updated root document touch event listeners to use passive mode improving scrolling performance and reducing crashes.”</p>\n<p>翻译过来就是：针对document的touch事件监听添加passive配置，即是：{passive: true}，会永远不调用event.preventDefault()，以此来提高滚动性能。</p>\n<p>源头推测：</p>\n<p>fastclick是采用拦截click和监听touch事件去实现的，里面包括对tagetElement的focus方法重写，因此在11.3之前可能event.preventDefault生效了，同时用setSelectionRange是可以聚焦input的。</p>\n<p>另外一个bug也是由这个导致的是：</p>\n<p>在iOS11.3的UI webview使用fastclick.js，页面有个按钮点击事件，当app或锁屏超过几分钟时间，回到页面会导致click事件失效。</p>\n<p>解决方案为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> passiveListener = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPassiveListener</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断浏览器是否支持 &#123;passive: true&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> supportsPassive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> opts = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">'passive'</span>, &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">                        supportsPassive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'testPassiveListener'</span>, <span class=\"literal\">null</span>, opts);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                supportsPassive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> supportsPassive;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"keyword\">var</span> activeListener = passiveListener ? &#123;<span class=\"attr\">passive</span>:<span class=\"literal\">false</span>&#125; : <span class=\"literal\">false</span>;</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClick, <span class=\"literal\">true</span>);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"keyword\">this</span>.onTouchStart, passiveListener);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"keyword\">this</span>.onTouchMove, passiveListener);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchend'</span>, <span class=\"keyword\">this</span>.onTouchEnd, passiveListener);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchcancel'</span>, <span class=\"keyword\">this</span>.onTouchCancel, passiveListener);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener\" target=\"_blank\" rel=\"noopener\">《EventTarget.addEventListener()增加passive属性说明——web MDN API网站》</a></li>\n<li><a href=\"https://github.com/ftlabs/fastclick/issues/548\" target=\"_blank\" rel=\"noopener\">《fastclick github issues#548》</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios\" target=\"_blank\" rel=\"noopener\">《stackoverflow ——touchmove e.preventDefault失效问题》</a></li>\n<li><a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html\" target=\"_blank\" rel=\"noopener\">《Safari 11.1更新日志》</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近遇到奇异的bug,在ios 11.3移动端页面 input输入框第一次触摸可以弹起键盘，后续再触摸需要很难弹起键盘，或者需要在输入框停一会才能弹起键盘。</p>\n<h2 id=\"bug复现条件：\"><a href=\"#bug复现条件：\" class=\"headerlink\" title=\"bug复现条件：\"></a>bug复现条件：</h2><p>一、ios 11.3中app的webview为 UI WebView<br>二、在项目中使用了FastClick.js，页面包括输入框.</p>\n<h2 id=\"发现源头问题：\"><a href=\"#发现源头问题：\" class=\"headerlink\" title=\"发现源头问题：\"></a>发现源头问题：</h2><p>在碰到问题脑子第一想法这不就是click延迟300ms的现象吗？所以就想到是不是FastClick.js导致，注释掉后发现bug现象消失了，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'zepto'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\"> 'use strict'</span>;</span><br><span class=\"line\"> <span class=\"comment\">// FastClick.attach(document.body);</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>但是这是为什么呢？我们一起看看为什么要加上FastClick，这个库解决了什么问题？</p>","more":"<ul>\n<li>click 300ms延迟：浏览器click会比touch延迟300ms触发</li>\n<li>click穿透现象：当两个div同处一个position，上层div绑定touch，下层div绑定click,当上层div触发touch消失后，可能会触发下层div的click事件<br>既然Fastclick是为了解决这两类问题，其实现原理如下图所示：<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-a045cb92752f7ae8.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fastclick原理\"></li>\n</ul>\n<p>fastclick利用捕获顶层dom元素(如：body，html等)的click事件，拦截所有的click请求进行判断：是否有touch触发、是否需要阻碍click事件(stopImmediatePropagation)等。</p>\n<h2 id=\"分析问题解决方案：\"><a href=\"#分析问题解决方案：\" class=\"headerlink\" title=\"分析问题解决方案：\"></a>分析问题解决方案：</h2><p>步骤一：input无法聚焦弹出键盘，fastclick中有一块判断当前元素targetElement是否需要needsFocus，看看其方法的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FastClick.prototype.needsFocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123; <span class=\"comment\">//判断当前元素是否需要focus</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (target.nodeName.toLowerCase()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'textarea'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'select'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> !deviceIsAndroid;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'input'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (target.type) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'button'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'checkbox'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'file'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'image'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'radio'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'submit'</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// No point in attempting to focus disabled inputs</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> !target.disabled &amp;&amp; !target.readOnly;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"regexp\">/\\bneedsfocus\\b/</span>).test(target.className);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：看到needsFocus下执行了什么？在touchEnd方法中，代码块如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.needsFocus(targetElement)) &#123;<span class=\"keyword\">if</span> ((event.timeStamp - trackingClickStart) &gt; <span class=\"number\">100</span> || (deviceIsIOS &amp;&amp; <span class=\"built_in\">window</span>.top !== <span class=\"built_in\">window</span> &amp;&amp; targetTagName === <span class=\"string\">'input'</span>)) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.targetElement = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.focus(targetElement); <span class=\"comment\">//调用focus进行聚焦</span></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.sendClick(targetElement, event);</span><br><span class=\"line\">  </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!deviceIsIOS || targetTagName !== <span class=\"string\">'select'</span>) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.targetElement = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> event.preventDefault();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>步骤三：focus方法分析（包含解决方案），如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FastClick.prototype.focus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetElement</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length;</span><br><span class=\"line\">        <span class=\"comment\">//兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError</span></span><br><span class=\"line\">        <span class=\"comment\">//这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (deviceIsIOS &amp;&amp; targetElement.setSelectionRange &amp;&amp; targetElement.type.indexOf(<span class=\"string\">'date'</span>) !== <span class=\"number\">0</span> &amp;&amp; targetElement.type !== <span class=\"string\">'time'</span> &amp;&amp; targetElement.type !== <span class=\"string\">'month'</span> &amp;&amp; targetElement.type !== <span class=\"string\">'email'</span>) &#123;</span><br><span class=\"line\">            length = targetElement.value.length;</span><br><span class=\"line\">            targetElement.setSelectionRange(length, length);</span><br><span class=\"line\">            <span class=\"comment\">/*修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘*/</span></span><br><span class=\"line\">            targetElement.focus();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            targetElement.focus();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>OK，上真机iphoneX验证bug已经消失了，但是我们并不知道为什么在ios 11.3会出现该问题，秉着探索真理的一颗心（ZZZZ），到github去查看FastClick的issues列表，果然发现早有人提出bug了，如下图：<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-dc00511b626e3496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fastclick issues\"></p>\n<p>下方有评论如下：<br>A：说framework7框架那边已经有解决方案啦，<a href=\"https://github.com/framework7io/framework7/issues/2314#issuecomment-377778034\" target=\"_blank\" rel=\"noopener\">点击这里</a>。<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-2e17af0f0c9a7474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"frameword7问题解决\"></p>\n<p>另外一位仁兄的解决方案和我类似，修改focus方法。<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-829a9db17ea2e4b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"focus解决方案\"></p>\n<p>因此跳到framework的issue中的解决方案，解决方案：<a href=\"https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios\" target=\"_blank\" rel=\"noopener\">点击这里</a>，描述如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/11733108-443f9d4c26e32cd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"解决方案描述\"></p>\n<p>跳过去stackoverflow后，其实根本源头已经查到了，ios 11.3更新 Safari 11.1，支持新web API :允许对事件支持 <code>{passive: false}</code>被动模式，减少滚动屏幕的性能损耗和奔溃。</p>\n<h2 id=\"passive-mode解析\"><a href=\"#passive-mode解析\" class=\"headerlink\" title=\"passive mode解析\"></a>passive mode解析</h2><p>那么新的问题来了，{passive: false}是什么玩意？来，我们先看看它的使用方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">&#125;, &#123; <span class=\"attr\">passive</span>: <span class=\"literal\">false</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>按照以往我们对添加事件监听的方法三个参数的认知，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(type , callback, capture); <span class=\"comment\">//type是事件类型，callback是执行函数， capture是否进行捕获/冒泡，默认为false</span></span><br></pre></td></tr></table></figure>\n\n<p>Passive event listeners是2016年Google I/O 上同 PWA 概念一起被提出，但是同PWA不同，Passive event listeners 的作用很简单，如果用简单一句话来解释就是：提升页面滑动的流畅度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.addEventListener(type, listener[, options]);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">options 可选</span></span><br><span class=\"line\"><span class=\"comment\">一个指定有关 listener 属性的可选参数对象。</span></span><br><span class=\"line\"><span class=\"comment\">可用的选项如下：</span></span><br><span class=\"line\"><span class=\"comment\">capture:  Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。</span></span><br><span class=\"line\"><span class=\"comment\">once:  Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。</span></span><br><span class=\"line\"><span class=\"comment\">passive: Boolean，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\">target.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">   e.preventDefault() <span class=\"comment\">// 无效，报错</span></span><br><span class=\"line\">&#125;, &#123;<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>为什么增加支持这个属性会导致添加fastclick后input输入框很难弹出键盘？</p>\n<p>在ios更新日志了，写到了“Updated root document touch event listeners to use passive mode improving scrolling performance and reducing crashes.”</p>\n<p>翻译过来就是：针对document的touch事件监听添加passive配置，即是：{passive: true}，会永远不调用event.preventDefault()，以此来提高滚动性能。</p>\n<p>源头推测：</p>\n<p>fastclick是采用拦截click和监听touch事件去实现的，里面包括对tagetElement的focus方法重写，因此在11.3之前可能event.preventDefault生效了，同时用setSelectionRange是可以聚焦input的。</p>\n<p>另外一个bug也是由这个导致的是：</p>\n<p>在iOS11.3的UI webview使用fastclick.js，页面有个按钮点击事件，当app或锁屏超过几分钟时间，回到页面会导致click事件失效。</p>\n<p>解决方案为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> passiveListener = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPassiveListener</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断浏览器是否支持 &#123;passive: true&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> supportsPassive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> opts = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">'passive'</span>, &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">                        supportsPassive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'testPassiveListener'</span>, <span class=\"literal\">null</span>, opts);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                supportsPassive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> supportsPassive;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"keyword\">var</span> activeListener = passiveListener ? &#123;<span class=\"attr\">passive</span>:<span class=\"literal\">false</span>&#125; : <span class=\"literal\">false</span>;</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClick, <span class=\"literal\">true</span>);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"keyword\">this</span>.onTouchStart, passiveListener);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"keyword\">this</span>.onTouchMove, passiveListener);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchend'</span>, <span class=\"keyword\">this</span>.onTouchEnd, passiveListener);</span><br><span class=\"line\">layer.addEventListener(<span class=\"string\">'touchcancel'</span>, <span class=\"keyword\">this</span>.onTouchCancel, passiveListener);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener\" target=\"_blank\" rel=\"noopener\">《EventTarget.addEventListener()增加passive属性说明——web MDN API网站》</a></li>\n<li><a href=\"https://github.com/ftlabs/fastclick/issues/548\" target=\"_blank\" rel=\"noopener\">《fastclick github issues#548》</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios\" target=\"_blank\" rel=\"noopener\">《stackoverflow ——touchmove e.preventDefault失效问题》</a></li>\n<li><a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html\" target=\"_blank\" rel=\"noopener\">《Safari 11.1更新日志》</a></li>\n</ul>"},{"title":"前端面试题目收集(持续更新)","date":"2023-01-30T14:00:00.000Z","_content":"\n主要以下几方面去收集？\n\n- 八股文，主要针对理论基础知识\n- 框架类，主要针对React/Vue等\n- 编程题，主要针对各种常用方法进行手动编写\n- 算法题，主要是各类算法题进行汇总\n\n<!-- more -->\n\n# 八股文\n\n- dom树是怎么生成的\n- 浏览器缓存\n- 一个页面在浏览器加载经历哪些阶段\n- TCP三次握手 四次挥手为什么？\n- 为什么跨域？跨域实现方案\n- 浏览器渲染机制、重绘、重排\n- script标签defer和async的区别\n\n# JS\n\n- v8垃圾回收\n- JS上下文执行栈和闭包\n- JS的模块化\n- JS的类型检查，如何判断Array数组类型\n- JS原型、原型链\n- JS Event Loop\n- JS new 实现一个对象过程\n- JS forEach和map的区别，如何跳出循环\n- JS 数组有哪些方法会影响自身，哪些方法不会影响自身\n\n# CSS\n\n- CSS 样式优先级(#,.等选择器)\n- CSS BFC\n- CSS 垂直居中\n- CSS 层叠上下文和层叠顺序\n- flex布局\n- CSS 响应式布局\n\n\n# 框架类\n\n# 通用问题\n- 如何看React和Vue\n- 生命周期\n- 路由实现机制\n- diff算法和key的作用\n- 数据绑定原理\n- 虚拟 DOM 实现原理\n- 组件通信\n- Hook的实现原理\n- session与cookie的区别\n- 性能优化完整方案\n- 10个1m的文件 和 1个10m的文件 在浏览器哪个传输比较快\n\n## React\n\n- Fiber架构是什么\n- Hook函数的作用是什么\n- setState是异步还是同步，如果要获取更新后的state应该怎么做\n\n## Vue\n\n- Vue2和Vue3的区别\n- Vue3的组合式 API是什么？有什么好处？\n- Vue3中如何开发函数式组件？\n- nextTick 的原理是什么？\n- Vue通讯机制\n- computed与watch\n\n\n# TypeScript\n\n- TypeScript是什么？有什么特性或者好处？\n- TypeScript 的缺点是什么？\n- Typescript 中的装饰器是什么？\n- TypeScript 如何设计 Class 的声明？\n- TypeScript 中 type 和 interface 的区别?\n- TypeScript 枚举是什么？\n- 简单介绍一下 TypeScript 模块的加载机制？\n- TypeScript 的 tsconfig.json 中有哪些配置项信息？\n- 如何初始化一个Typescript项目？\n\n# 工程化\n\n- 目前市面上主流的构建工具有哪些？ webpack和 vite对比?\n\n\n# 编码题\n\n- 深浅拷贝\n- Promise和Promise.all实现 \n- throttle节流 和 debounce防抖\n- 如何通过原型实现继承\n\n# 算法题\n\n- 排序题\n- 去重题\n- 反转题\n  \n具体可以参考这些:\n\n- [算法面试】leetcode最常见的150道前端面试题 --- 简单题上](https://juejin.cn/post/6987320619394138148)","source":"_posts/study/face-test.md","raw":"---\ntitle: 前端面试题目收集(持续更新)\ndate: 2023-01-30 22:00:00\ntags:\n    - 学习总结\n---\n\n主要以下几方面去收集？\n\n- 八股文，主要针对理论基础知识\n- 框架类，主要针对React/Vue等\n- 编程题，主要针对各种常用方法进行手动编写\n- 算法题，主要是各类算法题进行汇总\n\n<!-- more -->\n\n# 八股文\n\n- dom树是怎么生成的\n- 浏览器缓存\n- 一个页面在浏览器加载经历哪些阶段\n- TCP三次握手 四次挥手为什么？\n- 为什么跨域？跨域实现方案\n- 浏览器渲染机制、重绘、重排\n- script标签defer和async的区别\n\n# JS\n\n- v8垃圾回收\n- JS上下文执行栈和闭包\n- JS的模块化\n- JS的类型检查，如何判断Array数组类型\n- JS原型、原型链\n- JS Event Loop\n- JS new 实现一个对象过程\n- JS forEach和map的区别，如何跳出循环\n- JS 数组有哪些方法会影响自身，哪些方法不会影响自身\n\n# CSS\n\n- CSS 样式优先级(#,.等选择器)\n- CSS BFC\n- CSS 垂直居中\n- CSS 层叠上下文和层叠顺序\n- flex布局\n- CSS 响应式布局\n\n\n# 框架类\n\n# 通用问题\n- 如何看React和Vue\n- 生命周期\n- 路由实现机制\n- diff算法和key的作用\n- 数据绑定原理\n- 虚拟 DOM 实现原理\n- 组件通信\n- Hook的实现原理\n- session与cookie的区别\n- 性能优化完整方案\n- 10个1m的文件 和 1个10m的文件 在浏览器哪个传输比较快\n\n## React\n\n- Fiber架构是什么\n- Hook函数的作用是什么\n- setState是异步还是同步，如果要获取更新后的state应该怎么做\n\n## Vue\n\n- Vue2和Vue3的区别\n- Vue3的组合式 API是什么？有什么好处？\n- Vue3中如何开发函数式组件？\n- nextTick 的原理是什么？\n- Vue通讯机制\n- computed与watch\n\n\n# TypeScript\n\n- TypeScript是什么？有什么特性或者好处？\n- TypeScript 的缺点是什么？\n- Typescript 中的装饰器是什么？\n- TypeScript 如何设计 Class 的声明？\n- TypeScript 中 type 和 interface 的区别?\n- TypeScript 枚举是什么？\n- 简单介绍一下 TypeScript 模块的加载机制？\n- TypeScript 的 tsconfig.json 中有哪些配置项信息？\n- 如何初始化一个Typescript项目？\n\n# 工程化\n\n- 目前市面上主流的构建工具有哪些？ webpack和 vite对比?\n\n\n# 编码题\n\n- 深浅拷贝\n- Promise和Promise.all实现 \n- throttle节流 和 debounce防抖\n- 如何通过原型实现继承\n\n# 算法题\n\n- 排序题\n- 去重题\n- 反转题\n  \n具体可以参考这些:\n\n- [算法面试】leetcode最常见的150道前端面试题 --- 简单题上](https://juejin.cn/post/6987320619394138148)","slug":"study/face-test","published":1,"updated":"2023-01-31T13:22:50.993Z","_id":"cldixgpby00062cpc7g4hhs6c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>主要以下几方面去收集？</p>\n<ul>\n<li>八股文，主要针对理论基础知识</li>\n<li>框架类，主要针对React/Vue等</li>\n<li>编程题，主要针对各种常用方法进行手动编写</li>\n<li>算法题，主要是各类算法题进行汇总</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"八股文\"><a href=\"#八股文\" class=\"headerlink\" title=\"八股文\"></a>八股文</h1><ul>\n<li>dom树是怎么生成的</li>\n<li>浏览器缓存</li>\n<li>一个页面在浏览器加载经历哪些阶段</li>\n<li>TCP三次握手 四次挥手为什么？</li>\n<li>为什么跨域？跨域实现方案</li>\n<li>浏览器渲染机制、重绘、重排</li>\n<li>script标签defer和async的区别</li>\n</ul>\n<h1 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h1><ul>\n<li>v8垃圾回收</li>\n<li>JS上下文执行栈和闭包</li>\n<li>JS的模块化</li>\n<li>JS的类型检查，如何判断Array数组类型</li>\n<li>JS原型、原型链</li>\n<li>JS Event Loop</li>\n<li>JS new 实现一个对象过程</li>\n<li>JS forEach和map的区别，如何跳出循环</li>\n<li>JS 数组有哪些方法会影响自身，哪些方法不会影响自身</li>\n</ul>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><ul>\n<li>CSS 样式优先级(#,.等选择器)</li>\n<li>CSS BFC</li>\n<li>CSS 垂直居中</li>\n<li>CSS 层叠上下文和层叠顺序</li>\n<li>flex布局</li>\n<li>CSS 响应式布局</li>\n</ul>\n<h1 id=\"框架类\"><a href=\"#框架类\" class=\"headerlink\" title=\"框架类\"></a>框架类</h1><h1 id=\"通用问题\"><a href=\"#通用问题\" class=\"headerlink\" title=\"通用问题\"></a>通用问题</h1><ul>\n<li>如何看React和Vue</li>\n<li>生命周期</li>\n<li>路由实现机制</li>\n<li>diff算法和key的作用</li>\n<li>数据绑定原理</li>\n<li>虚拟 DOM 实现原理</li>\n<li>组件通信</li>\n<li>Hook的实现原理</li>\n<li>session与cookie的区别</li>\n<li>性能优化完整方案</li>\n<li>10个1m的文件 和 1个10m的文件 在浏览器哪个传输比较快</li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li>Fiber架构是什么</li>\n<li>Hook函数的作用是什么</li>\n<li>setState是异步还是同步，如果要获取更新后的state应该怎么做</li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li>Vue2和Vue3的区别</li>\n<li>Vue3的组合式 API是什么？有什么好处？</li>\n<li>Vue3中如何开发函数式组件？</li>\n<li>nextTick 的原理是什么？</li>\n<li>Vue通讯机制</li>\n<li>computed与watch</li>\n</ul>\n<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><ul>\n<li>TypeScript是什么？有什么特性或者好处？</li>\n<li>TypeScript 的缺点是什么？</li>\n<li>Typescript 中的装饰器是什么？</li>\n<li>TypeScript 如何设计 Class 的声明？</li>\n<li>TypeScript 中 type 和 interface 的区别?</li>\n<li>TypeScript 枚举是什么？</li>\n<li>简单介绍一下 TypeScript 模块的加载机制？</li>\n<li>TypeScript 的 tsconfig.json 中有哪些配置项信息？</li>\n<li>如何初始化一个Typescript项目？</li>\n</ul>\n<h1 id=\"工程化\"><a href=\"#工程化\" class=\"headerlink\" title=\"工程化\"></a>工程化</h1><ul>\n<li>目前市面上主流的构建工具有哪些？ webpack和 vite对比?</li>\n</ul>\n<h1 id=\"编码题\"><a href=\"#编码题\" class=\"headerlink\" title=\"编码题\"></a>编码题</h1><ul>\n<li>深浅拷贝</li>\n<li>Promise和Promise.all实现 </li>\n<li>throttle节流 和 debounce防抖</li>\n<li>如何通过原型实现继承</li>\n</ul>\n<h1 id=\"算法题\"><a href=\"#算法题\" class=\"headerlink\" title=\"算法题\"></a>算法题</h1><ul>\n<li>排序题</li>\n<li>去重题</li>\n<li>反转题</li>\n</ul>\n<p>具体可以参考这些:</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6987320619394138148\" target=\"_blank\" rel=\"noopener\">算法面试】leetcode最常见的150道前端面试题 — 简单题上</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>主要以下几方面去收集？</p>\n<ul>\n<li>八股文，主要针对理论基础知识</li>\n<li>框架类，主要针对React/Vue等</li>\n<li>编程题，主要针对各种常用方法进行手动编写</li>\n<li>算法题，主要是各类算法题进行汇总</li>\n</ul>","more":"<h1 id=\"八股文\"><a href=\"#八股文\" class=\"headerlink\" title=\"八股文\"></a>八股文</h1><ul>\n<li>dom树是怎么生成的</li>\n<li>浏览器缓存</li>\n<li>一个页面在浏览器加载经历哪些阶段</li>\n<li>TCP三次握手 四次挥手为什么？</li>\n<li>为什么跨域？跨域实现方案</li>\n<li>浏览器渲染机制、重绘、重排</li>\n<li>script标签defer和async的区别</li>\n</ul>\n<h1 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h1><ul>\n<li>v8垃圾回收</li>\n<li>JS上下文执行栈和闭包</li>\n<li>JS的模块化</li>\n<li>JS的类型检查，如何判断Array数组类型</li>\n<li>JS原型、原型链</li>\n<li>JS Event Loop</li>\n<li>JS new 实现一个对象过程</li>\n<li>JS forEach和map的区别，如何跳出循环</li>\n<li>JS 数组有哪些方法会影响自身，哪些方法不会影响自身</li>\n</ul>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><ul>\n<li>CSS 样式优先级(#,.等选择器)</li>\n<li>CSS BFC</li>\n<li>CSS 垂直居中</li>\n<li>CSS 层叠上下文和层叠顺序</li>\n<li>flex布局</li>\n<li>CSS 响应式布局</li>\n</ul>\n<h1 id=\"框架类\"><a href=\"#框架类\" class=\"headerlink\" title=\"框架类\"></a>框架类</h1><h1 id=\"通用问题\"><a href=\"#通用问题\" class=\"headerlink\" title=\"通用问题\"></a>通用问题</h1><ul>\n<li>如何看React和Vue</li>\n<li>生命周期</li>\n<li>路由实现机制</li>\n<li>diff算法和key的作用</li>\n<li>数据绑定原理</li>\n<li>虚拟 DOM 实现原理</li>\n<li>组件通信</li>\n<li>Hook的实现原理</li>\n<li>session与cookie的区别</li>\n<li>性能优化完整方案</li>\n<li>10个1m的文件 和 1个10m的文件 在浏览器哪个传输比较快</li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li>Fiber架构是什么</li>\n<li>Hook函数的作用是什么</li>\n<li>setState是异步还是同步，如果要获取更新后的state应该怎么做</li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li>Vue2和Vue3的区别</li>\n<li>Vue3的组合式 API是什么？有什么好处？</li>\n<li>Vue3中如何开发函数式组件？</li>\n<li>nextTick 的原理是什么？</li>\n<li>Vue通讯机制</li>\n<li>computed与watch</li>\n</ul>\n<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><ul>\n<li>TypeScript是什么？有什么特性或者好处？</li>\n<li>TypeScript 的缺点是什么？</li>\n<li>Typescript 中的装饰器是什么？</li>\n<li>TypeScript 如何设计 Class 的声明？</li>\n<li>TypeScript 中 type 和 interface 的区别?</li>\n<li>TypeScript 枚举是什么？</li>\n<li>简单介绍一下 TypeScript 模块的加载机制？</li>\n<li>TypeScript 的 tsconfig.json 中有哪些配置项信息？</li>\n<li>如何初始化一个Typescript项目？</li>\n</ul>\n<h1 id=\"工程化\"><a href=\"#工程化\" class=\"headerlink\" title=\"工程化\"></a>工程化</h1><ul>\n<li>目前市面上主流的构建工具有哪些？ webpack和 vite对比?</li>\n</ul>\n<h1 id=\"编码题\"><a href=\"#编码题\" class=\"headerlink\" title=\"编码题\"></a>编码题</h1><ul>\n<li>深浅拷贝</li>\n<li>Promise和Promise.all实现 </li>\n<li>throttle节流 和 debounce防抖</li>\n<li>如何通过原型实现继承</li>\n</ul>\n<h1 id=\"算法题\"><a href=\"#算法题\" class=\"headerlink\" title=\"算法题\"></a>算法题</h1><ul>\n<li>排序题</li>\n<li>去重题</li>\n<li>反转题</li>\n</ul>\n<p>具体可以参考这些:</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6987320619394138148\" target=\"_blank\" rel=\"noopener\">算法面试】leetcode最常见的150道前端面试题 — 简单题上</a></li>\n</ul>"},{"title":"有了GPT-3，再也不用手写commit message(翻译)","date":"2023-02-14T04:51:01.000Z","_content":"\n> 本文翻译的目的，主要想了解GPT3是什么，以及目前大家使用GPT3用来做什么，以及如何开发GPT3。\n\n# GPT-3\n\nGPT-3是一个很多人或公司正在使用的协助开发的工具，比如：编写脚本、命令行等操作。\n\n> GPT-3指的是生成型预训练变换模型3（英语：Generative Pre-trained Transformer 3，简称GPT-3）是一个自回归语言模型，目的是为了使用深度学习生成人类可以理解的自然语言[1]。GPT-3是由在旧金山的人工智能公司OpenAI训练与开发，模型设计基于谷歌开发的变换语言模型。GPT-3的神经网路包含1750亿个参数，为有史以来参数最多的神经网路模型[2]。OpenAI于2020年5月发表GPT-3的论文，在次月为少量公司与开发人团释出应用程式介面的测试版。微软在2020年9月22日宣布取得了GPT-3的独家授权。 —— [维基百科 GPT-3](https://zh.wikipedia.org/zh/GPT-3)\n\n使用`gitcommit`,你将不需要花费时间去写git commit。 下面就让学习如何安装 `gptcommit`，以及享受一下GPT-3帮你写git commit。\n\n<!-- more -->\n\n# 背景\n\n首先，我们先了解一下 git commit， git commit提交信息，是程序员与程序员之间交流他们开发代码的重要信息，特别在code review中。\n尤其当代码发生重大变化或者写的代码极为复杂，我们需要一一详细描述代码块功能，非常的耗时而且无聊。\n平时开发代码后，由于一不小心容易写`fix: bug`之类的提交记录，很想修改后，但是又没有什么好的办法。\n同时复杂的这些随意的话术对code review也很难理解这段代码的真正含义是什么。\n更糟糕的是，如果提交记录是`fix: 修复文案错误`等，会让code review更加毫无意义，甚至忽略掉需要code review的地方。\n所以问题是写 git commit很费时，而且描述不准确又容易造成不必要误会，那么使用`gptcommit`会让你摆脱这些烦恼。\n\n# 安装教程(几分钟)\n\n## 环境准备\n在安装`gptcommit`之前，你需要先准备以下几个环境：\n\n- [Cargo](https://rustup.rs/), `Rust`语言的包管理器\n- [OpenAI API Keys](https://platform.openai.com/account/api-keys), OpenAI的密钥\n\n**安装Rust**\n\nLinux或Mac安装命令如下：\n```shell\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\n**OpenAI API Keys获取方式**\n\n国内没法正常访问，以下两种方式：\n- 这里去淘宝买一个API key\n- 或者翻墙出去购买一个\n\n## 安装步骤\n\n1. 使用`cargo`安装`gptcommit`\n```shell\ncargo install --locked gptcommit\n```\n\n2. 在本地某个仓库里安装执行一下命令，主要是初始化`gptcommit` git hook。这里需要你对这些仓库有git push的权限。\n```shell\ngptcommit install\n```\n\n3. 设置全局变量`OPENAI_API_KEY`\n```shell\nexport OPENAI_API_KEY=\"sk-...\"\n```\n也可以直接将变量设置到全局文件中，如`~/.bashrc`, `~/.zshrc`\n\n## demo实战\n\n如果使用了后，会生成如下git commit:\n\n```\nDemo #1: the full installation and commit workflow, editing multiple rust files\nDemo #2: a one-line change to a string inside a rust file.\nDemo #3: Modifying non-code files, in this case a README.\n```\n\n## 参考对象\n\n`gptcommit`参考之前的很受欢迎的commit 工具：\n\n- [https://github.com/RomanHotsiy/commitgpt](https://github.com/RomanHotsiy/commitgpt)\n\n`commitgpt`目前已无法使用，因为它使用第三方的OpenAI API Key，由于官方OpenAI访问次数受限，必须要求每个用户都用自己的API key。\n\n`gptcommit`集成了 git hook，可以直接用来git flow工作流的最后一步，同时，由于使用Rust，它执行速度会更快。\n\n同时还参考[gpt-commit-summarizer](https://github.com/KanHarI/gpt-commit-summarizer)工具，它是直接作用在github Action持续集成中，而不是git 工作流。\n总结commit记录是发生在PR阶段，而不是每次 commit。\n该操作会直接将PR操作的commit进行汇总，然后直接提交，不需要再code review。\n\n`gptcommit`参考`gpt-commit-summarizer`的设计点，但是主要针对是git commit的提交信息进行总结。\n\n## 背后原理\n\ngit commit提交劫持主要分为两个部分：\n\n首先，会将每个文件单独汇总，然后到OpenAI去生成commit 信息记录。\n\n其次，汇总所有文件修改内容，也有两个要点，分别是：\n\n- 告诉AI生成一个修改的标题\n- 同时要生成修改的一些要点内容\n\n最终输出的提交记录如下：\n\n```\n[title]\n\n- [summary point 1]\n- [summary point 2...]\n\n[/changed/file A]\n- [file summary point 1]\n- [file summary point 2...]\n[/changed/file B...]\n- [file summary point 1...]\n...\n\n```\n\n## 项目实战\n接下来就在项目中实战吧。\n执行命令`cargo install --locked gptcommit`安装或到[github 仓库](https://github.com/zurawiki/gptcommit)中去查看更多信息。\n当然，你需要先在OpenAI里注册一个账号，同时拥有一个API key才能正在使用起来。\n\nGithub地址： [https://github.com/zurawiki/gptcommit](https://github.com/zurawiki/gptcommit)\n\n# 下一步计划\n\n后面也打算做一下更加有趣的功能：\n\n- 如何利用GPT-3去实现更加自动化 git flow工作流？\n- 如何跳过哪些大的总结?\n- 如何收集用户反馈，将commit信息更加有效？\n\n最后，如果在使用过程有任何问题或者建议，请到Github开源地址写一个issue给我，我会很快处理。\n\n# 参考资料\n\n- 原文地址：[Never write a commit message again (with the help of GPT-3)](https://zura.wiki/post/never-write-a-commit-message-again-with-the-help-of-gpt-3/)\n","source":"_posts/translate/use-gpt3-auto-git-commit.md","raw":"---\ntitle: 有了GPT-3，再也不用手写commit message(翻译)\ndate: 2023-02-14 12:51:01\ntags:\n    - 翻译文章\n---\n\n> 本文翻译的目的，主要想了解GPT3是什么，以及目前大家使用GPT3用来做什么，以及如何开发GPT3。\n\n# GPT-3\n\nGPT-3是一个很多人或公司正在使用的协助开发的工具，比如：编写脚本、命令行等操作。\n\n> GPT-3指的是生成型预训练变换模型3（英语：Generative Pre-trained Transformer 3，简称GPT-3）是一个自回归语言模型，目的是为了使用深度学习生成人类可以理解的自然语言[1]。GPT-3是由在旧金山的人工智能公司OpenAI训练与开发，模型设计基于谷歌开发的变换语言模型。GPT-3的神经网路包含1750亿个参数，为有史以来参数最多的神经网路模型[2]。OpenAI于2020年5月发表GPT-3的论文，在次月为少量公司与开发人团释出应用程式介面的测试版。微软在2020年9月22日宣布取得了GPT-3的独家授权。 —— [维基百科 GPT-3](https://zh.wikipedia.org/zh/GPT-3)\n\n使用`gitcommit`,你将不需要花费时间去写git commit。 下面就让学习如何安装 `gptcommit`，以及享受一下GPT-3帮你写git commit。\n\n<!-- more -->\n\n# 背景\n\n首先，我们先了解一下 git commit， git commit提交信息，是程序员与程序员之间交流他们开发代码的重要信息，特别在code review中。\n尤其当代码发生重大变化或者写的代码极为复杂，我们需要一一详细描述代码块功能，非常的耗时而且无聊。\n平时开发代码后，由于一不小心容易写`fix: bug`之类的提交记录，很想修改后，但是又没有什么好的办法。\n同时复杂的这些随意的话术对code review也很难理解这段代码的真正含义是什么。\n更糟糕的是，如果提交记录是`fix: 修复文案错误`等，会让code review更加毫无意义，甚至忽略掉需要code review的地方。\n所以问题是写 git commit很费时，而且描述不准确又容易造成不必要误会，那么使用`gptcommit`会让你摆脱这些烦恼。\n\n# 安装教程(几分钟)\n\n## 环境准备\n在安装`gptcommit`之前，你需要先准备以下几个环境：\n\n- [Cargo](https://rustup.rs/), `Rust`语言的包管理器\n- [OpenAI API Keys](https://platform.openai.com/account/api-keys), OpenAI的密钥\n\n**安装Rust**\n\nLinux或Mac安装命令如下：\n```shell\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\n**OpenAI API Keys获取方式**\n\n国内没法正常访问，以下两种方式：\n- 这里去淘宝买一个API key\n- 或者翻墙出去购买一个\n\n## 安装步骤\n\n1. 使用`cargo`安装`gptcommit`\n```shell\ncargo install --locked gptcommit\n```\n\n2. 在本地某个仓库里安装执行一下命令，主要是初始化`gptcommit` git hook。这里需要你对这些仓库有git push的权限。\n```shell\ngptcommit install\n```\n\n3. 设置全局变量`OPENAI_API_KEY`\n```shell\nexport OPENAI_API_KEY=\"sk-...\"\n```\n也可以直接将变量设置到全局文件中，如`~/.bashrc`, `~/.zshrc`\n\n## demo实战\n\n如果使用了后，会生成如下git commit:\n\n```\nDemo #1: the full installation and commit workflow, editing multiple rust files\nDemo #2: a one-line change to a string inside a rust file.\nDemo #3: Modifying non-code files, in this case a README.\n```\n\n## 参考对象\n\n`gptcommit`参考之前的很受欢迎的commit 工具：\n\n- [https://github.com/RomanHotsiy/commitgpt](https://github.com/RomanHotsiy/commitgpt)\n\n`commitgpt`目前已无法使用，因为它使用第三方的OpenAI API Key，由于官方OpenAI访问次数受限，必须要求每个用户都用自己的API key。\n\n`gptcommit`集成了 git hook，可以直接用来git flow工作流的最后一步，同时，由于使用Rust，它执行速度会更快。\n\n同时还参考[gpt-commit-summarizer](https://github.com/KanHarI/gpt-commit-summarizer)工具，它是直接作用在github Action持续集成中，而不是git 工作流。\n总结commit记录是发生在PR阶段，而不是每次 commit。\n该操作会直接将PR操作的commit进行汇总，然后直接提交，不需要再code review。\n\n`gptcommit`参考`gpt-commit-summarizer`的设计点，但是主要针对是git commit的提交信息进行总结。\n\n## 背后原理\n\ngit commit提交劫持主要分为两个部分：\n\n首先，会将每个文件单独汇总，然后到OpenAI去生成commit 信息记录。\n\n其次，汇总所有文件修改内容，也有两个要点，分别是：\n\n- 告诉AI生成一个修改的标题\n- 同时要生成修改的一些要点内容\n\n最终输出的提交记录如下：\n\n```\n[title]\n\n- [summary point 1]\n- [summary point 2...]\n\n[/changed/file A]\n- [file summary point 1]\n- [file summary point 2...]\n[/changed/file B...]\n- [file summary point 1...]\n...\n\n```\n\n## 项目实战\n接下来就在项目中实战吧。\n执行命令`cargo install --locked gptcommit`安装或到[github 仓库](https://github.com/zurawiki/gptcommit)中去查看更多信息。\n当然，你需要先在OpenAI里注册一个账号，同时拥有一个API key才能正在使用起来。\n\nGithub地址： [https://github.com/zurawiki/gptcommit](https://github.com/zurawiki/gptcommit)\n\n# 下一步计划\n\n后面也打算做一下更加有趣的功能：\n\n- 如何利用GPT-3去实现更加自动化 git flow工作流？\n- 如何跳过哪些大的总结?\n- 如何收集用户反馈，将commit信息更加有效？\n\n最后，如果在使用过程有任何问题或者建议，请到Github开源地址写一个issue给我，我会很快处理。\n\n# 参考资料\n\n- 原文地址：[Never write a commit message again (with the help of GPT-3)](https://zura.wiki/post/never-write-a-commit-message-again-with-the-help-of-gpt-3/)\n","slug":"translate/use-gpt3-auto-git-commit","published":1,"updated":"2023-02-14T12:27:44.530Z","_id":"cldwn2x430006nxpcs2zl2zst","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文翻译的目的，主要想了解GPT3是什么，以及目前大家使用GPT3用来做什么，以及如何开发GPT3。</p>\n</blockquote>\n<h1 id=\"GPT-3\"><a href=\"#GPT-3\" class=\"headerlink\" title=\"GPT-3\"></a>GPT-3</h1><p>GPT-3是一个很多人或公司正在使用的协助开发的工具，比如：编写脚本、命令行等操作。</p>\n<blockquote>\n<p>GPT-3指的是生成型预训练变换模型3（英语：Generative Pre-trained Transformer 3，简称GPT-3）是一个自回归语言模型，目的是为了使用深度学习生成人类可以理解的自然语言[1]。GPT-3是由在旧金山的人工智能公司OpenAI训练与开发，模型设计基于谷歌开发的变换语言模型。GPT-3的神经网路包含1750亿个参数，为有史以来参数最多的神经网路模型[2]。OpenAI于2020年5月发表GPT-3的论文，在次月为少量公司与开发人团释出应用程式介面的测试版。微软在2020年9月22日宣布取得了GPT-3的独家授权。 —— <a href=\"https://zh.wikipedia.org/zh/GPT-3\" target=\"_blank\" rel=\"noopener\">维基百科 GPT-3</a></p>\n</blockquote>\n<p>使用<code>gitcommit</code>,你将不需要花费时间去写git commit。 下面就让学习如何安装 <code>gptcommit</code>，以及享受一下GPT-3帮你写git commit。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>首先，我们先了解一下 git commit， git commit提交信息，是程序员与程序员之间交流他们开发代码的重要信息，特别在code review中。<br>尤其当代码发生重大变化或者写的代码极为复杂，我们需要一一详细描述代码块功能，非常的耗时而且无聊。<br>平时开发代码后，由于一不小心容易写<code>fix: bug</code>之类的提交记录，很想修改后，但是又没有什么好的办法。<br>同时复杂的这些随意的话术对code review也很难理解这段代码的真正含义是什么。<br>更糟糕的是，如果提交记录是<code>fix: 修复文案错误</code>等，会让code review更加毫无意义，甚至忽略掉需要code review的地方。<br>所以问题是写 git commit很费时，而且描述不准确又容易造成不必要误会，那么使用<code>gptcommit</code>会让你摆脱这些烦恼。</p>\n<h1 id=\"安装教程-几分钟\"><a href=\"#安装教程-几分钟\" class=\"headerlink\" title=\"安装教程(几分钟)\"></a>安装教程(几分钟)</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>在安装<code>gptcommit</code>之前，你需要先准备以下几个环境：</p>\n<ul>\n<li><a href=\"https://rustup.rs/\" target=\"_blank\" rel=\"noopener\">Cargo</a>, <code>Rust</code>语言的包管理器</li>\n<li><a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\" rel=\"noopener\">OpenAI API Keys</a>, OpenAI的密钥</li>\n</ul>\n<p><strong>安装Rust</strong></p>\n<p>Linux或Mac安装命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>OpenAI API Keys获取方式</strong></p>\n<p>国内没法正常访问，以下两种方式：</p>\n<ul>\n<li>这里去淘宝买一个API key</li>\n<li>或者翻墙出去购买一个</li>\n</ul>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li><p>使用<code>cargo</code>安装<code>gptcommit</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo install --locked gptcommit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地某个仓库里安装执行一下命令，主要是初始化<code>gptcommit</code> git hook。这里需要你对这些仓库有git push的权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gptcommit install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置全局变量<code>OPENAI_API_KEY</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export OPENAI_API_KEY=\"sk-...\"</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>也可以直接将变量设置到全局文件中，如<code>~/.bashrc</code>, <code>~/.zshrc</code></p>\n<h2 id=\"demo实战\"><a href=\"#demo实战\" class=\"headerlink\" title=\"demo实战\"></a>demo实战</h2><p>如果使用了后，会生成如下git commit:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo #1: the full installation and commit workflow, editing multiple rust files</span><br><span class=\"line\">Demo #2: a one-line change to a string inside a rust file.</span><br><span class=\"line\">Demo #3: Modifying non-code files, in this case a README.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考对象\"><a href=\"#参考对象\" class=\"headerlink\" title=\"参考对象\"></a>参考对象</h2><p><code>gptcommit</code>参考之前的很受欢迎的commit 工具：</p>\n<ul>\n<li><a href=\"https://github.com/RomanHotsiy/commitgpt\" target=\"_blank\" rel=\"noopener\">https://github.com/RomanHotsiy/commitgpt</a></li>\n</ul>\n<p><code>commitgpt</code>目前已无法使用，因为它使用第三方的OpenAI API Key，由于官方OpenAI访问次数受限，必须要求每个用户都用自己的API key。</p>\n<p><code>gptcommit</code>集成了 git hook，可以直接用来git flow工作流的最后一步，同时，由于使用Rust，它执行速度会更快。</p>\n<p>同时还参考<a href=\"https://github.com/KanHarI/gpt-commit-summarizer\" target=\"_blank\" rel=\"noopener\">gpt-commit-summarizer</a>工具，它是直接作用在github Action持续集成中，而不是git 工作流。<br>总结commit记录是发生在PR阶段，而不是每次 commit。<br>该操作会直接将PR操作的commit进行汇总，然后直接提交，不需要再code review。</p>\n<p><code>gptcommit</code>参考<code>gpt-commit-summarizer</code>的设计点，但是主要针对是git commit的提交信息进行总结。</p>\n<h2 id=\"背后原理\"><a href=\"#背后原理\" class=\"headerlink\" title=\"背后原理\"></a>背后原理</h2><p>git commit提交劫持主要分为两个部分：</p>\n<p>首先，会将每个文件单独汇总，然后到OpenAI去生成commit 信息记录。</p>\n<p>其次，汇总所有文件修改内容，也有两个要点，分别是：</p>\n<ul>\n<li>告诉AI生成一个修改的标题</li>\n<li>同时要生成修改的一些要点内容</li>\n</ul>\n<p>最终输出的提交记录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[title]</span><br><span class=\"line\"></span><br><span class=\"line\">- [summary point 1]</span><br><span class=\"line\">- [summary point 2...]</span><br><span class=\"line\"></span><br><span class=\"line\">[/changed/file A]</span><br><span class=\"line\">- [file summary point 1]</span><br><span class=\"line\">- [file summary point 2...]</span><br><span class=\"line\">[/changed/file B...]</span><br><span class=\"line\">- [file summary point 1...]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目实战\"><a href=\"#项目实战\" class=\"headerlink\" title=\"项目实战\"></a>项目实战</h2><p>接下来就在项目中实战吧。<br>执行命令<code>cargo install --locked gptcommit</code>安装或到<a href=\"https://github.com/zurawiki/gptcommit\" target=\"_blank\" rel=\"noopener\">github 仓库</a>中去查看更多信息。<br>当然，你需要先在OpenAI里注册一个账号，同时拥有一个API key才能正在使用起来。</p>\n<p>Github地址： <a href=\"https://github.com/zurawiki/gptcommit\" target=\"_blank\" rel=\"noopener\">https://github.com/zurawiki/gptcommit</a></p>\n<h1 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h1><p>后面也打算做一下更加有趣的功能：</p>\n<ul>\n<li>如何利用GPT-3去实现更加自动化 git flow工作流？</li>\n<li>如何跳过哪些大的总结?</li>\n<li>如何收集用户反馈，将commit信息更加有效？</li>\n</ul>\n<p>最后，如果在使用过程有任何问题或者建议，请到Github开源地址写一个issue给我，我会很快处理。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>原文地址：<a href=\"https://zura.wiki/post/never-write-a-commit-message-again-with-the-help-of-gpt-3/\" target=\"_blank\" rel=\"noopener\">Never write a commit message again (with the help of GPT-3)</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文翻译的目的，主要想了解GPT3是什么，以及目前大家使用GPT3用来做什么，以及如何开发GPT3。</p>\n</blockquote>\n<h1 id=\"GPT-3\"><a href=\"#GPT-3\" class=\"headerlink\" title=\"GPT-3\"></a>GPT-3</h1><p>GPT-3是一个很多人或公司正在使用的协助开发的工具，比如：编写脚本、命令行等操作。</p>\n<blockquote>\n<p>GPT-3指的是生成型预训练变换模型3（英语：Generative Pre-trained Transformer 3，简称GPT-3）是一个自回归语言模型，目的是为了使用深度学习生成人类可以理解的自然语言[1]。GPT-3是由在旧金山的人工智能公司OpenAI训练与开发，模型设计基于谷歌开发的变换语言模型。GPT-3的神经网路包含1750亿个参数，为有史以来参数最多的神经网路模型[2]。OpenAI于2020年5月发表GPT-3的论文，在次月为少量公司与开发人团释出应用程式介面的测试版。微软在2020年9月22日宣布取得了GPT-3的独家授权。 —— <a href=\"https://zh.wikipedia.org/zh/GPT-3\" target=\"_blank\" rel=\"noopener\">维基百科 GPT-3</a></p>\n</blockquote>\n<p>使用<code>gitcommit</code>,你将不需要花费时间去写git commit。 下面就让学习如何安装 <code>gptcommit</code>，以及享受一下GPT-3帮你写git commit。</p>","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>首先，我们先了解一下 git commit， git commit提交信息，是程序员与程序员之间交流他们开发代码的重要信息，特别在code review中。<br>尤其当代码发生重大变化或者写的代码极为复杂，我们需要一一详细描述代码块功能，非常的耗时而且无聊。<br>平时开发代码后，由于一不小心容易写<code>fix: bug</code>之类的提交记录，很想修改后，但是又没有什么好的办法。<br>同时复杂的这些随意的话术对code review也很难理解这段代码的真正含义是什么。<br>更糟糕的是，如果提交记录是<code>fix: 修复文案错误</code>等，会让code review更加毫无意义，甚至忽略掉需要code review的地方。<br>所以问题是写 git commit很费时，而且描述不准确又容易造成不必要误会，那么使用<code>gptcommit</code>会让你摆脱这些烦恼。</p>\n<h1 id=\"安装教程-几分钟\"><a href=\"#安装教程-几分钟\" class=\"headerlink\" title=\"安装教程(几分钟)\"></a>安装教程(几分钟)</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>在安装<code>gptcommit</code>之前，你需要先准备以下几个环境：</p>\n<ul>\n<li><a href=\"https://rustup.rs/\" target=\"_blank\" rel=\"noopener\">Cargo</a>, <code>Rust</code>语言的包管理器</li>\n<li><a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\" rel=\"noopener\">OpenAI API Keys</a>, OpenAI的密钥</li>\n</ul>\n<p><strong>安装Rust</strong></p>\n<p>Linux或Mac安装命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>OpenAI API Keys获取方式</strong></p>\n<p>国内没法正常访问，以下两种方式：</p>\n<ul>\n<li>这里去淘宝买一个API key</li>\n<li>或者翻墙出去购买一个</li>\n</ul>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li><p>使用<code>cargo</code>安装<code>gptcommit</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo install --locked gptcommit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地某个仓库里安装执行一下命令，主要是初始化<code>gptcommit</code> git hook。这里需要你对这些仓库有git push的权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gptcommit install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置全局变量<code>OPENAI_API_KEY</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export OPENAI_API_KEY=\"sk-...\"</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>也可以直接将变量设置到全局文件中，如<code>~/.bashrc</code>, <code>~/.zshrc</code></p>\n<h2 id=\"demo实战\"><a href=\"#demo实战\" class=\"headerlink\" title=\"demo实战\"></a>demo实战</h2><p>如果使用了后，会生成如下git commit:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo #1: the full installation and commit workflow, editing multiple rust files</span><br><span class=\"line\">Demo #2: a one-line change to a string inside a rust file.</span><br><span class=\"line\">Demo #3: Modifying non-code files, in this case a README.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考对象\"><a href=\"#参考对象\" class=\"headerlink\" title=\"参考对象\"></a>参考对象</h2><p><code>gptcommit</code>参考之前的很受欢迎的commit 工具：</p>\n<ul>\n<li><a href=\"https://github.com/RomanHotsiy/commitgpt\" target=\"_blank\" rel=\"noopener\">https://github.com/RomanHotsiy/commitgpt</a></li>\n</ul>\n<p><code>commitgpt</code>目前已无法使用，因为它使用第三方的OpenAI API Key，由于官方OpenAI访问次数受限，必须要求每个用户都用自己的API key。</p>\n<p><code>gptcommit</code>集成了 git hook，可以直接用来git flow工作流的最后一步，同时，由于使用Rust，它执行速度会更快。</p>\n<p>同时还参考<a href=\"https://github.com/KanHarI/gpt-commit-summarizer\" target=\"_blank\" rel=\"noopener\">gpt-commit-summarizer</a>工具，它是直接作用在github Action持续集成中，而不是git 工作流。<br>总结commit记录是发生在PR阶段，而不是每次 commit。<br>该操作会直接将PR操作的commit进行汇总，然后直接提交，不需要再code review。</p>\n<p><code>gptcommit</code>参考<code>gpt-commit-summarizer</code>的设计点，但是主要针对是git commit的提交信息进行总结。</p>\n<h2 id=\"背后原理\"><a href=\"#背后原理\" class=\"headerlink\" title=\"背后原理\"></a>背后原理</h2><p>git commit提交劫持主要分为两个部分：</p>\n<p>首先，会将每个文件单独汇总，然后到OpenAI去生成commit 信息记录。</p>\n<p>其次，汇总所有文件修改内容，也有两个要点，分别是：</p>\n<ul>\n<li>告诉AI生成一个修改的标题</li>\n<li>同时要生成修改的一些要点内容</li>\n</ul>\n<p>最终输出的提交记录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[title]</span><br><span class=\"line\"></span><br><span class=\"line\">- [summary point 1]</span><br><span class=\"line\">- [summary point 2...]</span><br><span class=\"line\"></span><br><span class=\"line\">[/changed/file A]</span><br><span class=\"line\">- [file summary point 1]</span><br><span class=\"line\">- [file summary point 2...]</span><br><span class=\"line\">[/changed/file B...]</span><br><span class=\"line\">- [file summary point 1...]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目实战\"><a href=\"#项目实战\" class=\"headerlink\" title=\"项目实战\"></a>项目实战</h2><p>接下来就在项目中实战吧。<br>执行命令<code>cargo install --locked gptcommit</code>安装或到<a href=\"https://github.com/zurawiki/gptcommit\" target=\"_blank\" rel=\"noopener\">github 仓库</a>中去查看更多信息。<br>当然，你需要先在OpenAI里注册一个账号，同时拥有一个API key才能正在使用起来。</p>\n<p>Github地址： <a href=\"https://github.com/zurawiki/gptcommit\" target=\"_blank\" rel=\"noopener\">https://github.com/zurawiki/gptcommit</a></p>\n<h1 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h1><p>后面也打算做一下更加有趣的功能：</p>\n<ul>\n<li>如何利用GPT-3去实现更加自动化 git flow工作流？</li>\n<li>如何跳过哪些大的总结?</li>\n<li>如何收集用户反馈，将commit信息更加有效？</li>\n</ul>\n<p>最后，如果在使用过程有任何问题或者建议，请到Github开源地址写一个issue给我，我会很快处理。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>原文地址：<a href=\"https://zura.wiki/post/never-write-a-commit-message-again-with-the-help-of-gpt-3/\" target=\"_blank\" rel=\"noopener\">Never write a commit message again (with the help of GPT-3)</a></li>\n</ul>"},{"title":"【引导页】功能实现原理分析","date":"2023-01-03T10:00:01.000Z","_content":"\n\n什么是引导页，就是引导用户对一些新功能使用说明UI展示。\n\n遇到这种需求，一般的想法是：\n\n- 有没有办法可以快速实现\n- 有时间对其背后原理研究一番\n\n## 快速接入\n按照常用框架`Vue` `React` `原生js`进行分类，罗列一些开源比较好的框架使用。\n\n<!-- more -->\n### Vue\n\n#### vue-tour\n\n\n[vue-tour](https://github.com/pulsardev/vue-tour) 适用于Vue2,\n\n> Vue Tour是一个轻量级、简单且可定制的导游插件，可与Vue.js一起使用。它提供了一种快速而简单的方法来指导用户完成您的应用程序。\n\n使用方法：\n\n```javascript\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport VueTour from 'vue-tour'\n\nrequire('vue-tour/dist/vue-tour.css')\n\nVue.use(VueTour)\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n\n// 这里使用vue组件\n<template>\n  <div>\n    <div id=\"v-step-0\">A DOM element on your page. The first step will pop on this element because its ID is 'v-step-0'.</div>\n    <div class=\"v-step-1\">A DOM element on your page. The second step will pop on this element because its ID is 'v-step-1'.</div>\n    <div data-v-step=\"2\">A DOM element on your page. The third and final step will pop on this element because its ID is 'v-step-2'.</div>\n\n    <v-tour name=\"myTour\" :steps=\"steps\"></v-tour>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'my-tour',\n    data () {\n      return {\n        steps: [\n          {\n            target: '#v-step-0',  // 使用 document.querySelector() 查询DOM节点\n            header: {\n              title: 'Get Started',\n            },\n            content: `Discover <strong>Vue Tour</strong>!`\n          },\n          {\n            target: '.v-step-1',\n            content: 'An awesome plugin made with Vue.js!'\n          },\n          {\n            target: '[data-v-step=\"2\"]',\n            content: 'Try it, you\\'ll love it!<br>You can put HTML in the steps and completely customize the DOM to suit your needs.',\n            params: {\n              placement: 'top' // 展示方位 包括: top/bottom/left/right等\n            }\n          }\n        ]\n      }\n    },\n    mounted: function () {\n      this.$tours['myTour'].start()\n    }\n  }\n</script>\n```\n\n\n### React\n\nReact的生态比较丰富，插件也比较多，google React Tour就可以找到很多，下面罗列一下github上star较多的几个\n\n- [react-joyride](https://github.com/gilbarbara/react-joyride)：使用方便快捷的引导页插件\n- [reactour](https://github.com/elrumordelaluz/reactour)： 功能更加丰富的React引导组件，分成好几种组件：`@reactour/tour` `@reactour/mask` `@reactour/popover` `@reactour/utils`等\n\n\n### 原生js\n原生js实现的引导页插件，比较有名有driver.js、intro.js和shepherd.js\n\n#### driver.js\n\n> **`driver.js`** 是一个强大而轻量级的普通 JavaScript 引擎，可在整个页面上驱动用户的注意力，只有 4kb 左右的体积，并且没有外部依赖，不仅高度可定制，还可以支持所有主流浏览器。\n\ngithub地址: [driver.js](https://github.com/kamranahmedse/driver.js)\n\n使用demo教程：\n```javascript\nimport Driver from 'driver.js';\nimport 'driver.js/dist/driver.min.css';\n\n// 高亮某个dom节点\nconst driver = new Driver();\ndriver.highlight({\n  element: '#some-element',\n  popover: {\n    title: 'Title for the Popover',\n    description: 'Description for it',\n    position: 'left',\n    offset: 20,\n  }\n});\n\n// 步骤\nconst driver = new Driver();\n\n// Define the steps for introduction\ndriver.defineSteps([\n  {\n    element: '#first-element-introduction',\n    popover: {\n      className: 'first-step-popover-class',\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'left'\n    }\n  },\n  {\n    element: '#second-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'top'\n    }\n  },\n  {\n    element: '#third-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'right'\n    }\n  },\n]);\n\n// Start the introduction\ndriver.start();\n```\n\n\n#### intro.js\n> **`intro.js`** 是是一个开源的 vanilla Javascript/CSS 库，用于添加分步介绍或提示，大小在 10kB左右，属于轻量级的且无外部依赖。\n\ngithub地址: [intro.js](https://github.com/usablica/intro.js/)\n\n使用demo教程：\n```javascript\nimport introJs from 'intro.js'\nimport 'intro.js/introjs.css'\n\n// 使用HTML属性\n<a href='http://google.com/' data-intro='Hello step one!'></a>\n\n// 使用JSON配置\n<section class=\"nav-menu\">\n    <ul>\n        <li id=\"step1\">步骤一</li>\n        <li id=\"step2\">步骤2</li>\n    </ul>\n</section>\n// 配置\nintroJs().setOptions({\n  steps: [{\n    title: 'Welcome',\n    intro: 'Hello World! 👋'\n  },\n  {\n    element: document.querySelector('#step1'),\n    intro: 'This step focuses on an image'\n  },\n  {\n    title: 'Farewell!',\n    element:document.querySelector('#step2'),,\n    intro: 'And this is our final step!'\n  }]\n}).start();\n\n```\n\n#### shepherd.js\n\n> **`shepherd.js`** 包含的 API 众多，大多场景都可以通过其对应的配置得到，缺点就是整体的包体积较大，并且配置也比较复杂，配置复杂的内容一般都需要进行二次封装，将可变和不可变的配置项进行抽离\n\ngithub地址: [shepherd.js](https://github.com/shipshapecode/shepherd)\n使用demo教程：\n```javascript\nimport Shepherd from 'shepherd.js';\n\n// 初始化配置\nconst tour = new Shepherd.Tour({\n  defaultStepOptions: {\n    cancelIcon: {\n      enabled: true\n    },\n    classes: 'class-1 class-2',\n    scrollTo: { behavior: 'smooth', block: 'center' }\n  }\n});\n\n// 添加步骤指引\ntour.addStep({\n  title: 'Creating a Shepherd Tour',\n  text: `Creating a Shepherd tour is easy. too!\\\n  Just create a \\`Tour\\` instance, and add as many steps as you want.`,\n  attachTo: {\n    element: '.hero-example',\n    on: 'bottom'\n  },\n  buttons: [\n    {\n      action() {\n        return this.back();\n      },\n      classes: 'shepherd-button-secondary',\n      text: 'Back'\n    },\n    {\n      action() {\n        return this.next();\n      },\n      text: 'Next'\n    }\n  ],\n  id: 'creating'\n});\n\n// 展示指引\ntour.start();\n```\n\n## 实现原理\n引导页从它展示方式说起，要实现可以分为以下几个步骤：\n1. **高亮部分**，通过`el.cloneNode(true)`复制元素节点，将节点复制到蒙层\n2. **引导部分**，展示引导框，并将引导框与高亮部分进行定位\n3. **过度动画**，通过设置`transition`实现\n4. **页面监听**，当页面发生变化的时候，引导页需要重新渲染计算\n\n具体实现可以点击查看源码[tour.js](/code/tour.js)。\n\n## 参考资料\n\n- [不使用第三方库怎么实现【前端引导页】功能？](https://mp.weixin.qq.com/s/-O_AnG2pc5H5hLcwu9PTCA)","source":"_posts/today/20230103.md","raw":"---\ntitle: 【引导页】功能实现原理分析\ndate: 2023-01-03 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n\n什么是引导页，就是引导用户对一些新功能使用说明UI展示。\n\n遇到这种需求，一般的想法是：\n\n- 有没有办法可以快速实现\n- 有时间对其背后原理研究一番\n\n## 快速接入\n按照常用框架`Vue` `React` `原生js`进行分类，罗列一些开源比较好的框架使用。\n\n<!-- more -->\n### Vue\n\n#### vue-tour\n\n\n[vue-tour](https://github.com/pulsardev/vue-tour) 适用于Vue2,\n\n> Vue Tour是一个轻量级、简单且可定制的导游插件，可与Vue.js一起使用。它提供了一种快速而简单的方法来指导用户完成您的应用程序。\n\n使用方法：\n\n```javascript\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport VueTour from 'vue-tour'\n\nrequire('vue-tour/dist/vue-tour.css')\n\nVue.use(VueTour)\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n\n// 这里使用vue组件\n<template>\n  <div>\n    <div id=\"v-step-0\">A DOM element on your page. The first step will pop on this element because its ID is 'v-step-0'.</div>\n    <div class=\"v-step-1\">A DOM element on your page. The second step will pop on this element because its ID is 'v-step-1'.</div>\n    <div data-v-step=\"2\">A DOM element on your page. The third and final step will pop on this element because its ID is 'v-step-2'.</div>\n\n    <v-tour name=\"myTour\" :steps=\"steps\"></v-tour>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'my-tour',\n    data () {\n      return {\n        steps: [\n          {\n            target: '#v-step-0',  // 使用 document.querySelector() 查询DOM节点\n            header: {\n              title: 'Get Started',\n            },\n            content: `Discover <strong>Vue Tour</strong>!`\n          },\n          {\n            target: '.v-step-1',\n            content: 'An awesome plugin made with Vue.js!'\n          },\n          {\n            target: '[data-v-step=\"2\"]',\n            content: 'Try it, you\\'ll love it!<br>You can put HTML in the steps and completely customize the DOM to suit your needs.',\n            params: {\n              placement: 'top' // 展示方位 包括: top/bottom/left/right等\n            }\n          }\n        ]\n      }\n    },\n    mounted: function () {\n      this.$tours['myTour'].start()\n    }\n  }\n</script>\n```\n\n\n### React\n\nReact的生态比较丰富，插件也比较多，google React Tour就可以找到很多，下面罗列一下github上star较多的几个\n\n- [react-joyride](https://github.com/gilbarbara/react-joyride)：使用方便快捷的引导页插件\n- [reactour](https://github.com/elrumordelaluz/reactour)： 功能更加丰富的React引导组件，分成好几种组件：`@reactour/tour` `@reactour/mask` `@reactour/popover` `@reactour/utils`等\n\n\n### 原生js\n原生js实现的引导页插件，比较有名有driver.js、intro.js和shepherd.js\n\n#### driver.js\n\n> **`driver.js`** 是一个强大而轻量级的普通 JavaScript 引擎，可在整个页面上驱动用户的注意力，只有 4kb 左右的体积，并且没有外部依赖，不仅高度可定制，还可以支持所有主流浏览器。\n\ngithub地址: [driver.js](https://github.com/kamranahmedse/driver.js)\n\n使用demo教程：\n```javascript\nimport Driver from 'driver.js';\nimport 'driver.js/dist/driver.min.css';\n\n// 高亮某个dom节点\nconst driver = new Driver();\ndriver.highlight({\n  element: '#some-element',\n  popover: {\n    title: 'Title for the Popover',\n    description: 'Description for it',\n    position: 'left',\n    offset: 20,\n  }\n});\n\n// 步骤\nconst driver = new Driver();\n\n// Define the steps for introduction\ndriver.defineSteps([\n  {\n    element: '#first-element-introduction',\n    popover: {\n      className: 'first-step-popover-class',\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'left'\n    }\n  },\n  {\n    element: '#second-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'top'\n    }\n  },\n  {\n    element: '#third-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'right'\n    }\n  },\n]);\n\n// Start the introduction\ndriver.start();\n```\n\n\n#### intro.js\n> **`intro.js`** 是是一个开源的 vanilla Javascript/CSS 库，用于添加分步介绍或提示，大小在 10kB左右，属于轻量级的且无外部依赖。\n\ngithub地址: [intro.js](https://github.com/usablica/intro.js/)\n\n使用demo教程：\n```javascript\nimport introJs from 'intro.js'\nimport 'intro.js/introjs.css'\n\n// 使用HTML属性\n<a href='http://google.com/' data-intro='Hello step one!'></a>\n\n// 使用JSON配置\n<section class=\"nav-menu\">\n    <ul>\n        <li id=\"step1\">步骤一</li>\n        <li id=\"step2\">步骤2</li>\n    </ul>\n</section>\n// 配置\nintroJs().setOptions({\n  steps: [{\n    title: 'Welcome',\n    intro: 'Hello World! 👋'\n  },\n  {\n    element: document.querySelector('#step1'),\n    intro: 'This step focuses on an image'\n  },\n  {\n    title: 'Farewell!',\n    element:document.querySelector('#step2'),,\n    intro: 'And this is our final step!'\n  }]\n}).start();\n\n```\n\n#### shepherd.js\n\n> **`shepherd.js`** 包含的 API 众多，大多场景都可以通过其对应的配置得到，缺点就是整体的包体积较大，并且配置也比较复杂，配置复杂的内容一般都需要进行二次封装，将可变和不可变的配置项进行抽离\n\ngithub地址: [shepherd.js](https://github.com/shipshapecode/shepherd)\n使用demo教程：\n```javascript\nimport Shepherd from 'shepherd.js';\n\n// 初始化配置\nconst tour = new Shepherd.Tour({\n  defaultStepOptions: {\n    cancelIcon: {\n      enabled: true\n    },\n    classes: 'class-1 class-2',\n    scrollTo: { behavior: 'smooth', block: 'center' }\n  }\n});\n\n// 添加步骤指引\ntour.addStep({\n  title: 'Creating a Shepherd Tour',\n  text: `Creating a Shepherd tour is easy. too!\\\n  Just create a \\`Tour\\` instance, and add as many steps as you want.`,\n  attachTo: {\n    element: '.hero-example',\n    on: 'bottom'\n  },\n  buttons: [\n    {\n      action() {\n        return this.back();\n      },\n      classes: 'shepherd-button-secondary',\n      text: 'Back'\n    },\n    {\n      action() {\n        return this.next();\n      },\n      text: 'Next'\n    }\n  ],\n  id: 'creating'\n});\n\n// 展示指引\ntour.start();\n```\n\n## 实现原理\n引导页从它展示方式说起，要实现可以分为以下几个步骤：\n1. **高亮部分**，通过`el.cloneNode(true)`复制元素节点，将节点复制到蒙层\n2. **引导部分**，展示引导框，并将引导框与高亮部分进行定位\n3. **过度动画**，通过设置`transition`实现\n4. **页面监听**，当页面发生变化的时候，引导页需要重新渲染计算\n\n具体实现可以点击查看源码[tour.js](/code/tour.js)。\n\n## 参考资料\n\n- [不使用第三方库怎么实现【前端引导页】功能？](https://mp.weixin.qq.com/s/-O_AnG2pc5H5hLcwu9PTCA)","slug":"today/20230103","published":1,"updated":"2023-01-06T11:39:25.063Z","_id":"cldztepwt0008nxpc9qooiw8n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>什么是引导页，就是引导用户对一些新功能使用说明UI展示。</p>\n<p>遇到这种需求，一般的想法是：</p>\n<ul>\n<li>有没有办法可以快速实现</li>\n<li>有时间对其背后原理研究一番</li>\n</ul>\n<h2 id=\"快速接入\"><a href=\"#快速接入\" class=\"headerlink\" title=\"快速接入\"></a>快速接入</h2><p>按照常用框架<code>Vue</code> <code>React</code> <code>原生js</code>进行分类，罗列一些开源比较好的框架使用。</p>\n<a id=\"more\"></a>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><h4 id=\"vue-tour\"><a href=\"#vue-tour\" class=\"headerlink\" title=\"vue-tour\"></a>vue-tour</h4><p><a href=\"https://github.com/pulsardev/vue-tour\" target=\"_blank\" rel=\"noopener\">vue-tour</a> 适用于Vue2,</p>\n<blockquote>\n<p>Vue Tour是一个轻量级、简单且可定制的导游插件，可与Vue.js一起使用。它提供了一种快速而简单的方法来指导用户完成您的应用程序。</p>\n</blockquote>\n<p>使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueTour <span class=\"keyword\">from</span> <span class=\"string\">'vue-tour'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-tour/dist/vue-tour.css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueTour)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里使用vue组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"v-step-0\"</span>&gt;A DOM element on your page. The first step will pop on <span class=\"keyword\">this</span> element because its ID is <span class=\"string\">'v-step-0'</span>.&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"v-step-1\"&gt;A DOM element on your page. The second step will pop on this element because its ID is 'v-step-1'.&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div data-v-step=<span class=\"string\">\"2\"</span>&gt;A DOM element on your page. The third and final step will pop on <span class=\"keyword\">this</span> element because its ID is <span class=\"string\">'v-step-2'</span>.&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;v-tour name=\"myTour\" :steps=\"steps\"&gt;&lt;/</span>v-tour&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'my-tour'</span>,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        steps: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            target: <span class=\"string\">'#v-step-0'</span>,  <span class=\"comment\">// 使用 document.querySelector() 查询DOM节点</span></span><br><span class=\"line\">            header: &#123;</span><br><span class=\"line\">              title: <span class=\"string\">'Get Started'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            content: <span class=\"string\">`Discover &lt;strong&gt;Vue Tour&lt;/strong&gt;!`</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            target: <span class=\"string\">'.v-step-1'</span>,</span><br><span class=\"line\">            content: <span class=\"string\">'An awesome plugin made with Vue.js!'</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            target: <span class=\"string\">'[data-v-step=\"2\"]'</span>,</span><br><span class=\"line\">            content: <span class=\"string\">'Try it, you\\'ll love it!&lt;br&gt;You can put HTML in the steps and completely customize the DOM to suit your needs.'</span>,</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">              placement: <span class=\"string\">'top'</span> <span class=\"comment\">// 展示方位 包括: top/bottom/left/right等</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$tours[<span class=\"string\">'myTour'</span>].start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React的生态比较丰富，插件也比较多，google React Tour就可以找到很多，下面罗列一下github上star较多的几个</p>\n<ul>\n<li><a href=\"https://github.com/gilbarbara/react-joyride\" target=\"_blank\" rel=\"noopener\">react-joyride</a>：使用方便快捷的引导页插件</li>\n<li><a href=\"https://github.com/elrumordelaluz/reactour\" target=\"_blank\" rel=\"noopener\">reactour</a>： 功能更加丰富的React引导组件，分成好几种组件：<code>@reactour/tour</code> <code>@reactour/mask</code> <code>@reactour/popover</code> <code>@reactour/utils</code>等</li>\n</ul>\n<h3 id=\"原生js\"><a href=\"#原生js\" class=\"headerlink\" title=\"原生js\"></a>原生js</h3><p>原生js实现的引导页插件，比较有名有driver.js、intro.js和shepherd.js</p>\n<h4 id=\"driver-js\"><a href=\"#driver-js\" class=\"headerlink\" title=\"driver.js\"></a>driver.js</h4><blockquote>\n<p><strong><code>driver.js</code></strong> 是一个强大而轻量级的普通 JavaScript 引擎，可在整个页面上驱动用户的注意力，只有 4kb 左右的体积，并且没有外部依赖，不仅高度可定制，还可以支持所有主流浏览器。</p>\n</blockquote>\n<p>github地址: <a href=\"https://github.com/kamranahmedse/driver.js\" target=\"_blank\" rel=\"noopener\">driver.js</a></p>\n<p>使用demo教程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Driver <span class=\"keyword\">from</span> <span class=\"string\">'driver.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'driver.js/dist/driver.min.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高亮某个dom节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> driver = <span class=\"keyword\">new</span> Driver();</span><br><span class=\"line\">driver.highlight(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">'#some-element'</span>,</span><br><span class=\"line\">  popover: &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Title for the Popover'</span>,</span><br><span class=\"line\">    description: <span class=\"string\">'Description for it'</span>,</span><br><span class=\"line\">    position: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">    offset: <span class=\"number\">20</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 步骤</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> driver = <span class=\"keyword\">new</span> Driver();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define the steps for introduction</span></span><br><span class=\"line\">driver.defineSteps([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'#first-element-introduction'</span>,</span><br><span class=\"line\">    popover: &#123;</span><br><span class=\"line\">      className: <span class=\"string\">'first-step-popover-class'</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'Title on Popover'</span>,</span><br><span class=\"line\">      description: <span class=\"string\">'Body of the popover'</span>,</span><br><span class=\"line\">      position: <span class=\"string\">'left'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'#second-element-introduction'</span>,</span><br><span class=\"line\">    popover: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Title on Popover'</span>,</span><br><span class=\"line\">      description: <span class=\"string\">'Body of the popover'</span>,</span><br><span class=\"line\">      position: <span class=\"string\">'top'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'#third-element-introduction'</span>,</span><br><span class=\"line\">    popover: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Title on Popover'</span>,</span><br><span class=\"line\">      description: <span class=\"string\">'Body of the popover'</span>,</span><br><span class=\"line\">      position: <span class=\"string\">'right'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Start the introduction</span></span><br><span class=\"line\">driver.start();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"intro-js\"><a href=\"#intro-js\" class=\"headerlink\" title=\"intro.js\"></a>intro.js</h4><blockquote>\n<p><strong><code>intro.js</code></strong> 是是一个开源的 vanilla Javascript/CSS 库，用于添加分步介绍或提示，大小在 10kB左右，属于轻量级的且无外部依赖。</p>\n</blockquote>\n<p>github地址: <a href=\"https://github.com/usablica/intro.js/\" target=\"_blank\" rel=\"noopener\">intro.js</a></p>\n<p>使用demo教程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> introJs <span class=\"keyword\">from</span> <span class=\"string\">'intro.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'intro.js/introjs.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用HTML属性</span></span><br><span class=\"line\">&lt;a href=<span class=\"string\">'http://google.com/'</span> data-intro=<span class=\"string\">'Hello step one!'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用JSON配置</span></span><br><span class=\"line\">&lt;section <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"nav-menu\"</span>&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li id=<span class=\"string\">\"step1\"</span>&gt;步骤一&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li id=\"step2\"&gt;步骤2&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>section&gt;</span><br><span class=\"line\"><span class=\"comment\">// 配置</span></span><br><span class=\"line\">introJs().setOptions(&#123;</span><br><span class=\"line\">  steps: [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Welcome'</span>,</span><br><span class=\"line\">    intro: <span class=\"string\">'Hello World! 👋'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#step1'</span>),</span><br><span class=\"line\">    intro: <span class=\"string\">'This step focuses on an image'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Farewell!'</span>,</span><br><span class=\"line\">    element:<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#step2'</span>),,</span><br><span class=\"line\">    intro: <span class=\"string\">'And this is our final step!'</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"shepherd-js\"><a href=\"#shepherd-js\" class=\"headerlink\" title=\"shepherd.js\"></a>shepherd.js</h4><blockquote>\n<p><strong><code>shepherd.js</code></strong> 包含的 API 众多，大多场景都可以通过其对应的配置得到，缺点就是整体的包体积较大，并且配置也比较复杂，配置复杂的内容一般都需要进行二次封装，将可变和不可变的配置项进行抽离</p>\n</blockquote>\n<p>github地址: <a href=\"https://github.com/shipshapecode/shepherd\" target=\"_blank\" rel=\"noopener\">shepherd.js</a><br>使用demo教程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Shepherd <span class=\"keyword\">from</span> <span class=\"string\">'shepherd.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tour = <span class=\"keyword\">new</span> Shepherd.Tour(&#123;</span><br><span class=\"line\">  defaultStepOptions: &#123;</span><br><span class=\"line\">    cancelIcon: &#123;</span><br><span class=\"line\">      enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    classes: <span class=\"string\">'class-1 class-2'</span>,</span><br><span class=\"line\">    scrollTo: &#123; <span class=\"attr\">behavior</span>: <span class=\"string\">'smooth'</span>, <span class=\"attr\">block</span>: <span class=\"string\">'center'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加步骤指引</span></span><br><span class=\"line\">tour.addStep(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Creating a Shepherd Tour'</span>,</span><br><span class=\"line\">  text: <span class=\"string\">`Creating a Shepherd tour is easy. too!\\</span></span><br><span class=\"line\"><span class=\"string\">  Just create a \\`Tour\\` instance, and add as many steps as you want.`</span>,</span><br><span class=\"line\">  attachTo: &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'.hero-example'</span>,</span><br><span class=\"line\">    on: <span class=\"string\">'bottom'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  buttons: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      action() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.back();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      classes: <span class=\"string\">'shepherd-button-secondary'</span>,</span><br><span class=\"line\">      text: <span class=\"string\">'Back'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      action() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.next();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      text: <span class=\"string\">'Next'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  id: <span class=\"string\">'creating'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 展示指引</span></span><br><span class=\"line\">tour.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>引导页从它展示方式说起，要实现可以分为以下几个步骤：</p>\n<ol>\n<li><strong>高亮部分</strong>，通过<code>el.cloneNode(true)</code>复制元素节点，将节点复制到蒙层</li>\n<li><strong>引导部分</strong>，展示引导框，并将引导框与高亮部分进行定位</li>\n<li><strong>过度动画</strong>，通过设置<code>transition</code>实现</li>\n<li><strong>页面监听</strong>，当页面发生变化的时候，引导页需要重新渲染计算</li>\n</ol>\n<p>具体实现可以点击查看源码<a href=\"/code/tour.js\">tour.js</a>。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/-O_AnG2pc5H5hLcwu9PTCA\" target=\"_blank\" rel=\"noopener\">不使用第三方库怎么实现【前端引导页】功能？</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>什么是引导页，就是引导用户对一些新功能使用说明UI展示。</p>\n<p>遇到这种需求，一般的想法是：</p>\n<ul>\n<li>有没有办法可以快速实现</li>\n<li>有时间对其背后原理研究一番</li>\n</ul>\n<h2 id=\"快速接入\"><a href=\"#快速接入\" class=\"headerlink\" title=\"快速接入\"></a>快速接入</h2><p>按照常用框架<code>Vue</code> <code>React</code> <code>原生js</code>进行分类，罗列一些开源比较好的框架使用。</p>","more":"<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><h4 id=\"vue-tour\"><a href=\"#vue-tour\" class=\"headerlink\" title=\"vue-tour\"></a>vue-tour</h4><p><a href=\"https://github.com/pulsardev/vue-tour\" target=\"_blank\" rel=\"noopener\">vue-tour</a> 适用于Vue2,</p>\n<blockquote>\n<p>Vue Tour是一个轻量级、简单且可定制的导游插件，可与Vue.js一起使用。它提供了一种快速而简单的方法来指导用户完成您的应用程序。</p>\n</blockquote>\n<p>使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueTour <span class=\"keyword\">from</span> <span class=\"string\">'vue-tour'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-tour/dist/vue-tour.css'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueTour)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里使用vue组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"v-step-0\"</span>&gt;A DOM element on your page. The first step will pop on <span class=\"keyword\">this</span> element because its ID is <span class=\"string\">'v-step-0'</span>.&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"v-step-1\"&gt;A DOM element on your page. The second step will pop on this element because its ID is 'v-step-1'.&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div data-v-step=<span class=\"string\">\"2\"</span>&gt;A DOM element on your page. The third and final step will pop on <span class=\"keyword\">this</span> element because its ID is <span class=\"string\">'v-step-2'</span>.&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;v-tour name=\"myTour\" :steps=\"steps\"&gt;&lt;/</span>v-tour&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'my-tour'</span>,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        steps: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            target: <span class=\"string\">'#v-step-0'</span>,  <span class=\"comment\">// 使用 document.querySelector() 查询DOM节点</span></span><br><span class=\"line\">            header: &#123;</span><br><span class=\"line\">              title: <span class=\"string\">'Get Started'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            content: <span class=\"string\">`Discover &lt;strong&gt;Vue Tour&lt;/strong&gt;!`</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            target: <span class=\"string\">'.v-step-1'</span>,</span><br><span class=\"line\">            content: <span class=\"string\">'An awesome plugin made with Vue.js!'</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            target: <span class=\"string\">'[data-v-step=\"2\"]'</span>,</span><br><span class=\"line\">            content: <span class=\"string\">'Try it, you\\'ll love it!&lt;br&gt;You can put HTML in the steps and completely customize the DOM to suit your needs.'</span>,</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">              placement: <span class=\"string\">'top'</span> <span class=\"comment\">// 展示方位 包括: top/bottom/left/right等</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$tours[<span class=\"string\">'myTour'</span>].start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><p>React的生态比较丰富，插件也比较多，google React Tour就可以找到很多，下面罗列一下github上star较多的几个</p>\n<ul>\n<li><a href=\"https://github.com/gilbarbara/react-joyride\" target=\"_blank\" rel=\"noopener\">react-joyride</a>：使用方便快捷的引导页插件</li>\n<li><a href=\"https://github.com/elrumordelaluz/reactour\" target=\"_blank\" rel=\"noopener\">reactour</a>： 功能更加丰富的React引导组件，分成好几种组件：<code>@reactour/tour</code> <code>@reactour/mask</code> <code>@reactour/popover</code> <code>@reactour/utils</code>等</li>\n</ul>\n<h3 id=\"原生js\"><a href=\"#原生js\" class=\"headerlink\" title=\"原生js\"></a>原生js</h3><p>原生js实现的引导页插件，比较有名有driver.js、intro.js和shepherd.js</p>\n<h4 id=\"driver-js\"><a href=\"#driver-js\" class=\"headerlink\" title=\"driver.js\"></a>driver.js</h4><blockquote>\n<p><strong><code>driver.js</code></strong> 是一个强大而轻量级的普通 JavaScript 引擎，可在整个页面上驱动用户的注意力，只有 4kb 左右的体积，并且没有外部依赖，不仅高度可定制，还可以支持所有主流浏览器。</p>\n</blockquote>\n<p>github地址: <a href=\"https://github.com/kamranahmedse/driver.js\" target=\"_blank\" rel=\"noopener\">driver.js</a></p>\n<p>使用demo教程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Driver <span class=\"keyword\">from</span> <span class=\"string\">'driver.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'driver.js/dist/driver.min.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高亮某个dom节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> driver = <span class=\"keyword\">new</span> Driver();</span><br><span class=\"line\">driver.highlight(&#123;</span><br><span class=\"line\">  element: <span class=\"string\">'#some-element'</span>,</span><br><span class=\"line\">  popover: &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Title for the Popover'</span>,</span><br><span class=\"line\">    description: <span class=\"string\">'Description for it'</span>,</span><br><span class=\"line\">    position: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">    offset: <span class=\"number\">20</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 步骤</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> driver = <span class=\"keyword\">new</span> Driver();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define the steps for introduction</span></span><br><span class=\"line\">driver.defineSteps([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'#first-element-introduction'</span>,</span><br><span class=\"line\">    popover: &#123;</span><br><span class=\"line\">      className: <span class=\"string\">'first-step-popover-class'</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'Title on Popover'</span>,</span><br><span class=\"line\">      description: <span class=\"string\">'Body of the popover'</span>,</span><br><span class=\"line\">      position: <span class=\"string\">'left'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'#second-element-introduction'</span>,</span><br><span class=\"line\">    popover: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Title on Popover'</span>,</span><br><span class=\"line\">      description: <span class=\"string\">'Body of the popover'</span>,</span><br><span class=\"line\">      position: <span class=\"string\">'top'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'#third-element-introduction'</span>,</span><br><span class=\"line\">    popover: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Title on Popover'</span>,</span><br><span class=\"line\">      description: <span class=\"string\">'Body of the popover'</span>,</span><br><span class=\"line\">      position: <span class=\"string\">'right'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Start the introduction</span></span><br><span class=\"line\">driver.start();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"intro-js\"><a href=\"#intro-js\" class=\"headerlink\" title=\"intro.js\"></a>intro.js</h4><blockquote>\n<p><strong><code>intro.js</code></strong> 是是一个开源的 vanilla Javascript/CSS 库，用于添加分步介绍或提示，大小在 10kB左右，属于轻量级的且无外部依赖。</p>\n</blockquote>\n<p>github地址: <a href=\"https://github.com/usablica/intro.js/\" target=\"_blank\" rel=\"noopener\">intro.js</a></p>\n<p>使用demo教程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> introJs <span class=\"keyword\">from</span> <span class=\"string\">'intro.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'intro.js/introjs.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用HTML属性</span></span><br><span class=\"line\">&lt;a href=<span class=\"string\">'http://google.com/'</span> data-intro=<span class=\"string\">'Hello step one!'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用JSON配置</span></span><br><span class=\"line\">&lt;section <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"nav-menu\"</span>&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li id=<span class=\"string\">\"step1\"</span>&gt;步骤一&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;li id=\"step2\"&gt;步骤2&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>section&gt;</span><br><span class=\"line\"><span class=\"comment\">// 配置</span></span><br><span class=\"line\">introJs().setOptions(&#123;</span><br><span class=\"line\">  steps: [&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Welcome'</span>,</span><br><span class=\"line\">    intro: <span class=\"string\">'Hello World! 👋'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    element: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#step1'</span>),</span><br><span class=\"line\">    intro: <span class=\"string\">'This step focuses on an image'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Farewell!'</span>,</span><br><span class=\"line\">    element:<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#step2'</span>),,</span><br><span class=\"line\">    intro: <span class=\"string\">'And this is our final step!'</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"shepherd-js\"><a href=\"#shepherd-js\" class=\"headerlink\" title=\"shepherd.js\"></a>shepherd.js</h4><blockquote>\n<p><strong><code>shepherd.js</code></strong> 包含的 API 众多，大多场景都可以通过其对应的配置得到，缺点就是整体的包体积较大，并且配置也比较复杂，配置复杂的内容一般都需要进行二次封装，将可变和不可变的配置项进行抽离</p>\n</blockquote>\n<p>github地址: <a href=\"https://github.com/shipshapecode/shepherd\" target=\"_blank\" rel=\"noopener\">shepherd.js</a><br>使用demo教程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Shepherd <span class=\"keyword\">from</span> <span class=\"string\">'shepherd.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tour = <span class=\"keyword\">new</span> Shepherd.Tour(&#123;</span><br><span class=\"line\">  defaultStepOptions: &#123;</span><br><span class=\"line\">    cancelIcon: &#123;</span><br><span class=\"line\">      enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    classes: <span class=\"string\">'class-1 class-2'</span>,</span><br><span class=\"line\">    scrollTo: &#123; <span class=\"attr\">behavior</span>: <span class=\"string\">'smooth'</span>, <span class=\"attr\">block</span>: <span class=\"string\">'center'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加步骤指引</span></span><br><span class=\"line\">tour.addStep(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Creating a Shepherd Tour'</span>,</span><br><span class=\"line\">  text: <span class=\"string\">`Creating a Shepherd tour is easy. too!\\</span></span><br><span class=\"line\"><span class=\"string\">  Just create a \\`Tour\\` instance, and add as many steps as you want.`</span>,</span><br><span class=\"line\">  attachTo: &#123;</span><br><span class=\"line\">    element: <span class=\"string\">'.hero-example'</span>,</span><br><span class=\"line\">    on: <span class=\"string\">'bottom'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  buttons: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      action() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.back();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      classes: <span class=\"string\">'shepherd-button-secondary'</span>,</span><br><span class=\"line\">      text: <span class=\"string\">'Back'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      action() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.next();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      text: <span class=\"string\">'Next'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  id: <span class=\"string\">'creating'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 展示指引</span></span><br><span class=\"line\">tour.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>引导页从它展示方式说起，要实现可以分为以下几个步骤：</p>\n<ol>\n<li><strong>高亮部分</strong>，通过<code>el.cloneNode(true)</code>复制元素节点，将节点复制到蒙层</li>\n<li><strong>引导部分</strong>，展示引导框，并将引导框与高亮部分进行定位</li>\n<li><strong>过度动画</strong>，通过设置<code>transition</code>实现</li>\n<li><strong>页面监听</strong>，当页面发生变化的时候，引导页需要重新渲染计算</li>\n</ol>\n<p>具体实现可以点击查看源码<a href=\"/code/tour.js\">tour.js</a>。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/-O_AnG2pc5H5hLcwu9PTCA\" target=\"_blank\" rel=\"noopener\">不使用第三方库怎么实现【前端引导页】功能？</a></li>\n</ul>"},{"title":"从尝试搭建NAS了解各类云硬盘协议（一）","date":"2023-01-04T10:00:01.000Z","_content":"\n# NAS 是什么\n\nNAS，全称Network Attached Storage，中文名： 网络附属存储。\n\n可以理解成是长时间联网的存储设备，比如你有个硬盘，里面存储了一些教学视频，你想要别的地方去访问，比如在手机或者电脑上访问，那么NAS就能够解决你这个问题的解决方案。\n\nNAS可以解决什么场景痛点：\n\n- 你的照片、视频可以随时上传，大小、题材不限制\n- 访问速度快，尤其在家的时候局域网更快\n- 信息安全，不再担心你的信息被云盘厂商泄露\n\n<!-- more -->\n\n# 部署NAS\n\n部署NAS一般有两种部署方案：\n\n1. 购买现成的NAS，一般服务厂商会将解决你的所有问题，一键傻瓜式部署\n2. 自己折腾搭建NAS，那么需要一台7*24小时服务器，搭建NAS服务，同时还需要搞个app支持NAS，支持手机客户端访问\n\n第一种方案简单，但是有点费钱\n\n第二种方案困难，但是不费钱\n","source":"_posts/today/20230104.md","raw":"---\ntitle: 从尝试搭建NAS了解各类云硬盘协议（一）\ndate: 2023-01-04 18:00:01\ntags:\n    - 每日更新\n    - 动手实战\n---\n\n# NAS 是什么\n\nNAS，全称Network Attached Storage，中文名： 网络附属存储。\n\n可以理解成是长时间联网的存储设备，比如你有个硬盘，里面存储了一些教学视频，你想要别的地方去访问，比如在手机或者电脑上访问，那么NAS就能够解决你这个问题的解决方案。\n\nNAS可以解决什么场景痛点：\n\n- 你的照片、视频可以随时上传，大小、题材不限制\n- 访问速度快，尤其在家的时候局域网更快\n- 信息安全，不再担心你的信息被云盘厂商泄露\n\n<!-- more -->\n\n# 部署NAS\n\n部署NAS一般有两种部署方案：\n\n1. 购买现成的NAS，一般服务厂商会将解决你的所有问题，一键傻瓜式部署\n2. 自己折腾搭建NAS，那么需要一台7*24小时服务器，搭建NAS服务，同时还需要搞个app支持NAS，支持手机客户端访问\n\n第一种方案简单，但是有点费钱\n\n第二种方案困难，但是不费钱\n","slug":"today/20230104","published":1,"updated":"2023-01-06T11:39:12.250Z","_id":"cldztesko000bnxpcs16znscw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"NAS-是什么\"><a href=\"#NAS-是什么\" class=\"headerlink\" title=\"NAS 是什么\"></a>NAS 是什么</h1><p>NAS，全称Network Attached Storage，中文名： 网络附属存储。</p>\n<p>可以理解成是长时间联网的存储设备，比如你有个硬盘，里面存储了一些教学视频，你想要别的地方去访问，比如在手机或者电脑上访问，那么NAS就能够解决你这个问题的解决方案。</p>\n<p>NAS可以解决什么场景痛点：</p>\n<ul>\n<li>你的照片、视频可以随时上传，大小、题材不限制</li>\n<li>访问速度快，尤其在家的时候局域网更快</li>\n<li>信息安全，不再担心你的信息被云盘厂商泄露</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"部署NAS\"><a href=\"#部署NAS\" class=\"headerlink\" title=\"部署NAS\"></a>部署NAS</h1><p>部署NAS一般有两种部署方案：</p>\n<ol>\n<li>购买现成的NAS，一般服务厂商会将解决你的所有问题，一键傻瓜式部署</li>\n<li>自己折腾搭建NAS，那么需要一台7*24小时服务器，搭建NAS服务，同时还需要搞个app支持NAS，支持手机客户端访问</li>\n</ol>\n<p>第一种方案简单，但是有点费钱</p>\n<p>第二种方案困难，但是不费钱</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"NAS-是什么\"><a href=\"#NAS-是什么\" class=\"headerlink\" title=\"NAS 是什么\"></a>NAS 是什么</h1><p>NAS，全称Network Attached Storage，中文名： 网络附属存储。</p>\n<p>可以理解成是长时间联网的存储设备，比如你有个硬盘，里面存储了一些教学视频，你想要别的地方去访问，比如在手机或者电脑上访问，那么NAS就能够解决你这个问题的解决方案。</p>\n<p>NAS可以解决什么场景痛点：</p>\n<ul>\n<li>你的照片、视频可以随时上传，大小、题材不限制</li>\n<li>访问速度快，尤其在家的时候局域网更快</li>\n<li>信息安全，不再担心你的信息被云盘厂商泄露</li>\n</ul>","more":"<h1 id=\"部署NAS\"><a href=\"#部署NAS\" class=\"headerlink\" title=\"部署NAS\"></a>部署NAS</h1><p>部署NAS一般有两种部署方案：</p>\n<ol>\n<li>购买现成的NAS，一般服务厂商会将解决你的所有问题，一键傻瓜式部署</li>\n<li>自己折腾搭建NAS，那么需要一台7*24小时服务器，搭建NAS服务，同时还需要搞个app支持NAS，支持手机客户端访问</li>\n</ol>\n<p>第一种方案简单，但是有点费钱</p>\n<p>第二种方案困难，但是不费钱</p>"},{"title":"从短视频到短视频思维","date":"2023-01-05T10:00:01.000Z","_content":"\n# 短视频的背景\n\n## 核心\n人类的需求——记录、表达、分享\n\n## 背景\n\n- 智能手机普及\n- 法律法规允许\n- 大数据、AI算法成熟\n\n<!-- more -->\n# 短视频讲解\n\n## AI辅助内容解析\n\n- AI识别视频内容\n- 分类视频模型，如：色情、低俗、性感、社会事件、武器模型、敏感人物、极端组织、高危等\n- 内容审核\n\n## AI推荐算法\n给你爱看，也给你好看的短视频。\n\n- 用户侧特征：爱好、年龄、职业等\n- 视频侧特征：宠物、旅行、电影等\n- 流行度特征：播放量、停留时间、完播率、分享率等\n\n### 内容流转逻辑\n\n抖音流量池， 按照播放次数，做统计，如下\n- 种子流量池 ： 数百\n- 初级流量池：1w~10w\n- 中级流量池：10w~100w\n- 高级流量池：100w~1000w\n- s级流量池：1000w+\n- 王者流量池：全站、新手\n\n**扭转流程**：\n\n上传->程序判断->审核失败\n\n上传>程序判断->上传成功->种子池->达到推荐标准->初级->中级->高级->全站\n\n# 做短视频核心\n\n一句话，忘记涨粉，回归价值\n\n- 做短视频，有什么优势\n- 能够提供什么有价值的视频给到用户\n\n# 什么是短视频思维\n\n短视频，是从叙事基础设施改变： 重构生产、发行、宣传\n\n影响抖音、快手推荐因素：\n抖音：\n- 完播率\n- 复播率\n- 分享率\n- 评论率\n- 点赞率\n\n快手多了：（注重封面）\n- 点击率\n- 转粉率\n\n## 短视频思维原则\n时长：能短一秒是一秒；\n\n怎么做：\n- 后期：能少一帧是一帧；\n- 编剧：能少一字是一字；\n- 导演：画面上每一帧都是经过设计的；\n- 运营：引导互动\n\n内容：用讲故事的方式建立认同感；\n\n怎么做：\n- 要么好玩，要么有用，好内容满足人性；\n- 黄金5秒；\n- 多个梗与冲突；\n- 设计的结尾\n\n## 短视频思维本质\n本质：数据与效率\n\n- 时长短，成品快\n- 点赞率，播放率\n- 快速迭代、低成本\n\n制作步骤：\n- 多维度快速迭代，多做尝试\n- 定型IP,IP成立只差一个爆款\n- 不断复盘总结、强化故事冲突、强化人物性格\n- 深度运营、内容定制，简单说就是内容升级、不断满足粉丝的预期\n\n综上所述，短视频思维就是几点：\n\n- 秉持不断学习的态度，勇敢尝试各种类型\n- 效率至上，迭代速度够快\n- 用户价值是核心思想，你能够提供什么价值的视频给到用户\n","source":"_posts/today/20230105.md","raw":"---\ntitle: 从短视频到短视频思维\ndate: 2023-01-05 18:00:01\ntags:\n    - 每日更新\n    - 短视频\n---\n\n# 短视频的背景\n\n## 核心\n人类的需求——记录、表达、分享\n\n## 背景\n\n- 智能手机普及\n- 法律法规允许\n- 大数据、AI算法成熟\n\n<!-- more -->\n# 短视频讲解\n\n## AI辅助内容解析\n\n- AI识别视频内容\n- 分类视频模型，如：色情、低俗、性感、社会事件、武器模型、敏感人物、极端组织、高危等\n- 内容审核\n\n## AI推荐算法\n给你爱看，也给你好看的短视频。\n\n- 用户侧特征：爱好、年龄、职业等\n- 视频侧特征：宠物、旅行、电影等\n- 流行度特征：播放量、停留时间、完播率、分享率等\n\n### 内容流转逻辑\n\n抖音流量池， 按照播放次数，做统计，如下\n- 种子流量池 ： 数百\n- 初级流量池：1w~10w\n- 中级流量池：10w~100w\n- 高级流量池：100w~1000w\n- s级流量池：1000w+\n- 王者流量池：全站、新手\n\n**扭转流程**：\n\n上传->程序判断->审核失败\n\n上传>程序判断->上传成功->种子池->达到推荐标准->初级->中级->高级->全站\n\n# 做短视频核心\n\n一句话，忘记涨粉，回归价值\n\n- 做短视频，有什么优势\n- 能够提供什么有价值的视频给到用户\n\n# 什么是短视频思维\n\n短视频，是从叙事基础设施改变： 重构生产、发行、宣传\n\n影响抖音、快手推荐因素：\n抖音：\n- 完播率\n- 复播率\n- 分享率\n- 评论率\n- 点赞率\n\n快手多了：（注重封面）\n- 点击率\n- 转粉率\n\n## 短视频思维原则\n时长：能短一秒是一秒；\n\n怎么做：\n- 后期：能少一帧是一帧；\n- 编剧：能少一字是一字；\n- 导演：画面上每一帧都是经过设计的；\n- 运营：引导互动\n\n内容：用讲故事的方式建立认同感；\n\n怎么做：\n- 要么好玩，要么有用，好内容满足人性；\n- 黄金5秒；\n- 多个梗与冲突；\n- 设计的结尾\n\n## 短视频思维本质\n本质：数据与效率\n\n- 时长短，成品快\n- 点赞率，播放率\n- 快速迭代、低成本\n\n制作步骤：\n- 多维度快速迭代，多做尝试\n- 定型IP,IP成立只差一个爆款\n- 不断复盘总结、强化故事冲突、强化人物性格\n- 深度运营、内容定制，简单说就是内容升级、不断满足粉丝的预期\n\n综上所述，短视频思维就是几点：\n\n- 秉持不断学习的态度，勇敢尝试各种类型\n- 效率至上，迭代速度够快\n- 用户价值是核心思想，你能够提供什么价值的视频给到用户\n","slug":"today/20230105","published":1,"updated":"2023-01-06T11:38:52.268Z","_id":"cldztev2a000enxpcznndjqyw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"短视频的背景\"><a href=\"#短视频的背景\" class=\"headerlink\" title=\"短视频的背景\"></a>短视频的背景</h1><h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><p>人类的需求——记录、表达、分享</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>智能手机普及</li>\n<li>法律法规允许</li>\n<li>大数据、AI算法成熟</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"短视频讲解\"><a href=\"#短视频讲解\" class=\"headerlink\" title=\"短视频讲解\"></a>短视频讲解</h1><h2 id=\"AI辅助内容解析\"><a href=\"#AI辅助内容解析\" class=\"headerlink\" title=\"AI辅助内容解析\"></a>AI辅助内容解析</h2><ul>\n<li>AI识别视频内容</li>\n<li>分类视频模型，如：色情、低俗、性感、社会事件、武器模型、敏感人物、极端组织、高危等</li>\n<li>内容审核</li>\n</ul>\n<h2 id=\"AI推荐算法\"><a href=\"#AI推荐算法\" class=\"headerlink\" title=\"AI推荐算法\"></a>AI推荐算法</h2><p>给你爱看，也给你好看的短视频。</p>\n<ul>\n<li>用户侧特征：爱好、年龄、职业等</li>\n<li>视频侧特征：宠物、旅行、电影等</li>\n<li>流行度特征：播放量、停留时间、完播率、分享率等</li>\n</ul>\n<h3 id=\"内容流转逻辑\"><a href=\"#内容流转逻辑\" class=\"headerlink\" title=\"内容流转逻辑\"></a>内容流转逻辑</h3><p>抖音流量池， 按照播放次数，做统计，如下</p>\n<ul>\n<li>种子流量池 ： 数百</li>\n<li>初级流量池：1w~10w</li>\n<li>中级流量池：10w~100w</li>\n<li>高级流量池：100w~1000w</li>\n<li>s级流量池：1000w+</li>\n<li>王者流量池：全站、新手</li>\n</ul>\n<p><strong>扭转流程</strong>：</p>\n<p>上传-&gt;程序判断-&gt;审核失败</p>\n<p>上传&gt;程序判断-&gt;上传成功-&gt;种子池-&gt;达到推荐标准-&gt;初级-&gt;中级-&gt;高级-&gt;全站</p>\n<h1 id=\"做短视频核心\"><a href=\"#做短视频核心\" class=\"headerlink\" title=\"做短视频核心\"></a>做短视频核心</h1><p>一句话，忘记涨粉，回归价值</p>\n<ul>\n<li>做短视频，有什么优势</li>\n<li>能够提供什么有价值的视频给到用户</li>\n</ul>\n<h1 id=\"什么是短视频思维\"><a href=\"#什么是短视频思维\" class=\"headerlink\" title=\"什么是短视频思维\"></a>什么是短视频思维</h1><p>短视频，是从叙事基础设施改变： 重构生产、发行、宣传</p>\n<p>影响抖音、快手推荐因素：<br>抖音：</p>\n<ul>\n<li>完播率</li>\n<li>复播率</li>\n<li>分享率</li>\n<li>评论率</li>\n<li>点赞率</li>\n</ul>\n<p>快手多了：（注重封面）</p>\n<ul>\n<li>点击率</li>\n<li>转粉率</li>\n</ul>\n<h2 id=\"短视频思维原则\"><a href=\"#短视频思维原则\" class=\"headerlink\" title=\"短视频思维原则\"></a>短视频思维原则</h2><p>时长：能短一秒是一秒；</p>\n<p>怎么做：</p>\n<ul>\n<li>后期：能少一帧是一帧；</li>\n<li>编剧：能少一字是一字；</li>\n<li>导演：画面上每一帧都是经过设计的；</li>\n<li>运营：引导互动</li>\n</ul>\n<p>内容：用讲故事的方式建立认同感；</p>\n<p>怎么做：</p>\n<ul>\n<li>要么好玩，要么有用，好内容满足人性；</li>\n<li>黄金5秒；</li>\n<li>多个梗与冲突；</li>\n<li>设计的结尾</li>\n</ul>\n<h2 id=\"短视频思维本质\"><a href=\"#短视频思维本质\" class=\"headerlink\" title=\"短视频思维本质\"></a>短视频思维本质</h2><p>本质：数据与效率</p>\n<ul>\n<li>时长短，成品快</li>\n<li>点赞率，播放率</li>\n<li>快速迭代、低成本</li>\n</ul>\n<p>制作步骤：</p>\n<ul>\n<li>多维度快速迭代，多做尝试</li>\n<li>定型IP,IP成立只差一个爆款</li>\n<li>不断复盘总结、强化故事冲突、强化人物性格</li>\n<li>深度运营、内容定制，简单说就是内容升级、不断满足粉丝的预期</li>\n</ul>\n<p>综上所述，短视频思维就是几点：</p>\n<ul>\n<li>秉持不断学习的态度，勇敢尝试各种类型</li>\n<li>效率至上，迭代速度够快</li>\n<li>用户价值是核心思想，你能够提供什么价值的视频给到用户</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"短视频的背景\"><a href=\"#短视频的背景\" class=\"headerlink\" title=\"短视频的背景\"></a>短视频的背景</h1><h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><p>人类的需求——记录、表达、分享</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>智能手机普及</li>\n<li>法律法规允许</li>\n<li>大数据、AI算法成熟</li>\n</ul>","more":"<h1 id=\"短视频讲解\"><a href=\"#短视频讲解\" class=\"headerlink\" title=\"短视频讲解\"></a>短视频讲解</h1><h2 id=\"AI辅助内容解析\"><a href=\"#AI辅助内容解析\" class=\"headerlink\" title=\"AI辅助内容解析\"></a>AI辅助内容解析</h2><ul>\n<li>AI识别视频内容</li>\n<li>分类视频模型，如：色情、低俗、性感、社会事件、武器模型、敏感人物、极端组织、高危等</li>\n<li>内容审核</li>\n</ul>\n<h2 id=\"AI推荐算法\"><a href=\"#AI推荐算法\" class=\"headerlink\" title=\"AI推荐算法\"></a>AI推荐算法</h2><p>给你爱看，也给你好看的短视频。</p>\n<ul>\n<li>用户侧特征：爱好、年龄、职业等</li>\n<li>视频侧特征：宠物、旅行、电影等</li>\n<li>流行度特征：播放量、停留时间、完播率、分享率等</li>\n</ul>\n<h3 id=\"内容流转逻辑\"><a href=\"#内容流转逻辑\" class=\"headerlink\" title=\"内容流转逻辑\"></a>内容流转逻辑</h3><p>抖音流量池， 按照播放次数，做统计，如下</p>\n<ul>\n<li>种子流量池 ： 数百</li>\n<li>初级流量池：1w~10w</li>\n<li>中级流量池：10w~100w</li>\n<li>高级流量池：100w~1000w</li>\n<li>s级流量池：1000w+</li>\n<li>王者流量池：全站、新手</li>\n</ul>\n<p><strong>扭转流程</strong>：</p>\n<p>上传-&gt;程序判断-&gt;审核失败</p>\n<p>上传&gt;程序判断-&gt;上传成功-&gt;种子池-&gt;达到推荐标准-&gt;初级-&gt;中级-&gt;高级-&gt;全站</p>\n<h1 id=\"做短视频核心\"><a href=\"#做短视频核心\" class=\"headerlink\" title=\"做短视频核心\"></a>做短视频核心</h1><p>一句话，忘记涨粉，回归价值</p>\n<ul>\n<li>做短视频，有什么优势</li>\n<li>能够提供什么有价值的视频给到用户</li>\n</ul>\n<h1 id=\"什么是短视频思维\"><a href=\"#什么是短视频思维\" class=\"headerlink\" title=\"什么是短视频思维\"></a>什么是短视频思维</h1><p>短视频，是从叙事基础设施改变： 重构生产、发行、宣传</p>\n<p>影响抖音、快手推荐因素：<br>抖音：</p>\n<ul>\n<li>完播率</li>\n<li>复播率</li>\n<li>分享率</li>\n<li>评论率</li>\n<li>点赞率</li>\n</ul>\n<p>快手多了：（注重封面）</p>\n<ul>\n<li>点击率</li>\n<li>转粉率</li>\n</ul>\n<h2 id=\"短视频思维原则\"><a href=\"#短视频思维原则\" class=\"headerlink\" title=\"短视频思维原则\"></a>短视频思维原则</h2><p>时长：能短一秒是一秒；</p>\n<p>怎么做：</p>\n<ul>\n<li>后期：能少一帧是一帧；</li>\n<li>编剧：能少一字是一字；</li>\n<li>导演：画面上每一帧都是经过设计的；</li>\n<li>运营：引导互动</li>\n</ul>\n<p>内容：用讲故事的方式建立认同感；</p>\n<p>怎么做：</p>\n<ul>\n<li>要么好玩，要么有用，好内容满足人性；</li>\n<li>黄金5秒；</li>\n<li>多个梗与冲突；</li>\n<li>设计的结尾</li>\n</ul>\n<h2 id=\"短视频思维本质\"><a href=\"#短视频思维本质\" class=\"headerlink\" title=\"短视频思维本质\"></a>短视频思维本质</h2><p>本质：数据与效率</p>\n<ul>\n<li>时长短，成品快</li>\n<li>点赞率，播放率</li>\n<li>快速迭代、低成本</li>\n</ul>\n<p>制作步骤：</p>\n<ul>\n<li>多维度快速迭代，多做尝试</li>\n<li>定型IP,IP成立只差一个爆款</li>\n<li>不断复盘总结、强化故事冲突、强化人物性格</li>\n<li>深度运营、内容定制，简单说就是内容升级、不断满足粉丝的预期</li>\n</ul>\n<p>综上所述，短视频思维就是几点：</p>\n<ul>\n<li>秉持不断学习的态度，勇敢尝试各种类型</li>\n<li>效率至上，迭代速度够快</li>\n<li>用户价值是核心思想，你能够提供什么价值的视频给到用户</li>\n</ul>"},{"title":"从审批流到bpmn-js入门","date":"2023-01-06T10:00:01.000Z","_content":"\n# 背景\n公司内部由于需要很多审批地方，一开始采用邮件或者企业微信进行口头审批，一般会抄送相关人员，以达到初步审批的效果，但是随着审批越来越复杂，比如有时候需要驳回或者转接，甚至需要调用其他系统接口继续流程的时候，就很麻烦，因此迫切需要一个工作流去解决审批相关事情。\n\n# 选型\n在选型前，我们需要知道工作流是什么？\n\n## 是什么\n工作流就是通过计算机技术对业务流程进行自动化管理。实现多个参与者按照预定的流程去自动执行业务流程。\n\n> 工作流定义: 通过计算机对业务流程自动化执行管理\n\n再通俗一点，工作流就是通过程序去自动实现平时需要人工操作的流程节点，所以工作流能解决的问题一定是可以被流程化的问题。\n\n然而这一过程被大家统称为业务流程建模，通常对已经存在复杂问题进行模型化的抽象，通过模型来推导解决问题的方案。\n\n<!-- more -->\n\n## 基础概念\n\n### BPM\n\n`BPM(Business Process Management)`， 业务流程管理，是指的在工作流的基础上，基于业务流程建模，支持业务流程的分析、建模、模拟、优化、协同与监控等功能的新一代企业应用系统核心。\n\n简单点说，`BPM`其实一个业务流程管理系统的统称，不单单可以实现审批流，还可以实现各种更为复杂的业务流程，如：数据同步等。\n\n### BPMN\n\n`BPMN（Business Process Model And Notation）`， 业务流程模型和符号，由`BPMI（Business Process Management Initiative）`开发的一套标准的业务流程建模符号，使用BPMN 提供的符号可以创建业务流程。\n\n更加容易理解的说，`BPMN`是实现`BPM`的一套标准，制定很多建模符号标准。\n\n这里简单比喻一下，`BPMN`是一门语言，你可以用它去开发`BPM`系统。\n\n后面会更加详细讲解 `BPMN` 的基础知识。\n\n建模符号了解，可以放到下一章节分享。\n\n### 工作流引擎选型\n\n由于`BPMN`是市面主流的工作流标准， 那么市面绝大部分工作流引擎都是基于该标准去实现。下面罗列一下目前市面上主流的各种引擎：\n\n- `Osworkflow`,一个轻量化的流程引擎，基于状态机机制，但不支持会签、跳转、退回、加签等这些操作，需要自己扩展开发，有一定难度，如果流程比较简单，osworkflow是很好的选择但该开源组件已过时，长时间没有版本升级了。\n- `JBPM`, 以`JBPM4`版本作为分割点，JBPM5以后版本基于`Drools Flow`， JBPM4已停止维护，也不建议选择。\n- `Activiti`, activiti5和activiti6是基于`JBPM4`开源，`activiti7`是基于6升级的，内核基本不变，但是由于`Tijs Rademakers`离开，谨慎选择。\n- [`flowable`](https://flowable.com/open-source), 基于activiti6衍生出来的版本，以flowable6.4.1版本为分水岭，大力发展其商业版产品，开源版本维护不及时，部分功能已经不再开源版发布，可以考虑选择。\n- [`Camunda`](https://docs.camunda.org/manual/7.18/), Camunda基于activiti5，所以其保留了PVM，商业版本和开源版本功能相差不大，建议选择。\n\n### 流程设计器选型\n\n对于低代码平台中的流程可视化，流程设计器是重要的支撑工具，目前市场上比较主流的流程:\n\n- [bpmn-js](https://bpmn.io/),是 BPMN 2.0 渲染工具包和 Web 模型，使用 Web 建模工具可以很方便的构建 BPMN 图表，可以把 BPMN 图表嵌入到你的项目中，容易扩展。\n- [mxGraph](http://jgraph.github.io/mxgraph/)是一个强大的JavaScript流程图前端库，由于mxGraph是一个开放的js绘图开发框架，我们可以开发出很炫的样式，或者完全按照项目需求定制。\n- [Activiti-Modeler] Activiti 开源版本中带了web版流程设计器,界面不美观，用户体验差\n- [flowable-modeler]flowable开源版本中带了web版流程设计器,界面不美观，用户体验差\n\n### 建议选型\n推荐大家使用[`Camunda`](https://docs.camunda.org/manual/7.18/)（流程引擎）+[bpmn-js](https://bpmn.io/)（流程设计器）组合。\n\n# 快速部署\n选型后就是实战，推荐的选型都有很完整的安装部署文档，下面简单说一下部署步骤。\n\n再次说明一下两者的区别：\n\n- `Camunda`是工作流引擎，用来执行工作流模型文件任务，同时管理各种流程执行。\n- `bpmn-js`是前端的流程设计器，基于`bnpm`标准实现，用来生成工作流模型文件。\n\n## Camunda部署\n\n1. docker快速安装后端：\n\n```shell\ndocker pull camunda/camunda-bpm-platform:run-latest\ndocker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest\n```\n2. 通过`spring boot`快速创建项目：\n更新pom.xml文件内容\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.tencent</groupId>\n    <artifactId>camunda_spring_boot</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>camunda_spring_boot</name>\n    <description>camunda_spring_boot</description>\n    <properties>\n        <java.version>17</java.version>\n        <camunda.spring-boot.version>7.15.0</camunda.spring-boot.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.camunda.bpm.springboot</groupId>\n            <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>\n            <version>${camunda.spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.sun.xml.bind</groupId>\n            <artifactId>jaxb-impl</artifactId>\n            <version>2.2.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n3. 修改登录用户配置， application.properties\n```properties\ncamunda.bpm:\n  admin-user:\n    id: demo\n    password: demo\n    firstName: Demo\n  filter:\n    create: All tasks\n```\n\n4. 将`bpmn-js`操作好的xml文件保存到`src/main/resources/loan-approval.bpmn`\n\n运行程序，访问[http://localhost:8080/camunda/app/cockpit/default/#/dashboard](http://localhost:8080/camunda/app/cockpit/default/#/dashboard)，就可以看到相关任务。\n\n后面是运行任务等，就不属于入门教程，可以放到后面教程慢慢学习。\n\n## bpmn-js部署\n[demo访问](/fedlearn/code/bpmn-js/index.html)， 快速使用，代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <title>BPMNJS测试案例</title>\n    \n  <!-- 引入BPMN-JS的CSS文件 -->\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/diagram-js.css\" />\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/bpmn-font/css/bpmn.css\" />\n</head>\n\n<body>\n  <div id=\"canvas\" style=\"height:80vh;\"></div>\n  <!-- 引入BPMN-JS的JS文件 -->\n  <script src=\"https://unpkg.com/bpmn-js@11.1.0/dist/bpmn-modeler.development.js\"></script>\n  <!-- xml文件 -->\n  <script src=\"./bpmn.js\"></script>\n  <script>\n    var bpmnModeler = new BpmnJS({\n      container: '#canvas'\n    });\n\t\t\n    bpmnModeler.importXML(xml, function(err) {\n\t  if (err) {\n        return console.error('failed to load diagram', err);\n      }\n    });\n  </script>\n```\n\n# 总结\n\n`BPNM`是大家统一认知的业务流建模标准，实现它的工作流引擎有很多，经过选型最终确定使用[camunda](https://docs.camunda.org/manual/7.18/) + [bpmn-js](https://bpmn.io/)。\n\n简单尝试一下，还是很简单实现了一个简单工作流管理系统，从设计工作流到工作流执行。\n\n如果要真正用起来，还是需要发心思去了解`BPNM`的整体标准，以及[camunda](https://docs.camunda.org/manual/7.18/)是如何运作执行的，同时需要将[bpmn-js](https://bpmn.io/)流程设计器。\n\n# 参考资料\n\n[camunda Spring Boot项目](http://shaochenfeng.com/camunda/10.%E5%88%9B%E5%BB%BA_camunda_spring_boot_%E9%A1%B9%E7%9B%AE/)\n\n[全网最详bpmn.js教材-http请求篇](https://juejin.cn/post/6844904017592614919)","source":"_posts/today/20230106.md","raw":"---\ntitle: 从审批流到bpmn-js入门\ndate: 2023-01-06 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n公司内部由于需要很多审批地方，一开始采用邮件或者企业微信进行口头审批，一般会抄送相关人员，以达到初步审批的效果，但是随着审批越来越复杂，比如有时候需要驳回或者转接，甚至需要调用其他系统接口继续流程的时候，就很麻烦，因此迫切需要一个工作流去解决审批相关事情。\n\n# 选型\n在选型前，我们需要知道工作流是什么？\n\n## 是什么\n工作流就是通过计算机技术对业务流程进行自动化管理。实现多个参与者按照预定的流程去自动执行业务流程。\n\n> 工作流定义: 通过计算机对业务流程自动化执行管理\n\n再通俗一点，工作流就是通过程序去自动实现平时需要人工操作的流程节点，所以工作流能解决的问题一定是可以被流程化的问题。\n\n然而这一过程被大家统称为业务流程建模，通常对已经存在复杂问题进行模型化的抽象，通过模型来推导解决问题的方案。\n\n<!-- more -->\n\n## 基础概念\n\n### BPM\n\n`BPM(Business Process Management)`， 业务流程管理，是指的在工作流的基础上，基于业务流程建模，支持业务流程的分析、建模、模拟、优化、协同与监控等功能的新一代企业应用系统核心。\n\n简单点说，`BPM`其实一个业务流程管理系统的统称，不单单可以实现审批流，还可以实现各种更为复杂的业务流程，如：数据同步等。\n\n### BPMN\n\n`BPMN（Business Process Model And Notation）`， 业务流程模型和符号，由`BPMI（Business Process Management Initiative）`开发的一套标准的业务流程建模符号，使用BPMN 提供的符号可以创建业务流程。\n\n更加容易理解的说，`BPMN`是实现`BPM`的一套标准，制定很多建模符号标准。\n\n这里简单比喻一下，`BPMN`是一门语言，你可以用它去开发`BPM`系统。\n\n后面会更加详细讲解 `BPMN` 的基础知识。\n\n建模符号了解，可以放到下一章节分享。\n\n### 工作流引擎选型\n\n由于`BPMN`是市面主流的工作流标准， 那么市面绝大部分工作流引擎都是基于该标准去实现。下面罗列一下目前市面上主流的各种引擎：\n\n- `Osworkflow`,一个轻量化的流程引擎，基于状态机机制，但不支持会签、跳转、退回、加签等这些操作，需要自己扩展开发，有一定难度，如果流程比较简单，osworkflow是很好的选择但该开源组件已过时，长时间没有版本升级了。\n- `JBPM`, 以`JBPM4`版本作为分割点，JBPM5以后版本基于`Drools Flow`， JBPM4已停止维护，也不建议选择。\n- `Activiti`, activiti5和activiti6是基于`JBPM4`开源，`activiti7`是基于6升级的，内核基本不变，但是由于`Tijs Rademakers`离开，谨慎选择。\n- [`flowable`](https://flowable.com/open-source), 基于activiti6衍生出来的版本，以flowable6.4.1版本为分水岭，大力发展其商业版产品，开源版本维护不及时，部分功能已经不再开源版发布，可以考虑选择。\n- [`Camunda`](https://docs.camunda.org/manual/7.18/), Camunda基于activiti5，所以其保留了PVM，商业版本和开源版本功能相差不大，建议选择。\n\n### 流程设计器选型\n\n对于低代码平台中的流程可视化，流程设计器是重要的支撑工具，目前市场上比较主流的流程:\n\n- [bpmn-js](https://bpmn.io/),是 BPMN 2.0 渲染工具包和 Web 模型，使用 Web 建模工具可以很方便的构建 BPMN 图表，可以把 BPMN 图表嵌入到你的项目中，容易扩展。\n- [mxGraph](http://jgraph.github.io/mxgraph/)是一个强大的JavaScript流程图前端库，由于mxGraph是一个开放的js绘图开发框架，我们可以开发出很炫的样式，或者完全按照项目需求定制。\n- [Activiti-Modeler] Activiti 开源版本中带了web版流程设计器,界面不美观，用户体验差\n- [flowable-modeler]flowable开源版本中带了web版流程设计器,界面不美观，用户体验差\n\n### 建议选型\n推荐大家使用[`Camunda`](https://docs.camunda.org/manual/7.18/)（流程引擎）+[bpmn-js](https://bpmn.io/)（流程设计器）组合。\n\n# 快速部署\n选型后就是实战，推荐的选型都有很完整的安装部署文档，下面简单说一下部署步骤。\n\n再次说明一下两者的区别：\n\n- `Camunda`是工作流引擎，用来执行工作流模型文件任务，同时管理各种流程执行。\n- `bpmn-js`是前端的流程设计器，基于`bnpm`标准实现，用来生成工作流模型文件。\n\n## Camunda部署\n\n1. docker快速安装后端：\n\n```shell\ndocker pull camunda/camunda-bpm-platform:run-latest\ndocker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest\n```\n2. 通过`spring boot`快速创建项目：\n更新pom.xml文件内容\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.tencent</groupId>\n    <artifactId>camunda_spring_boot</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>camunda_spring_boot</name>\n    <description>camunda_spring_boot</description>\n    <properties>\n        <java.version>17</java.version>\n        <camunda.spring-boot.version>7.15.0</camunda.spring-boot.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.camunda.bpm.springboot</groupId>\n            <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>\n            <version>${camunda.spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.sun.xml.bind</groupId>\n            <artifactId>jaxb-impl</artifactId>\n            <version>2.2.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n3. 修改登录用户配置， application.properties\n```properties\ncamunda.bpm:\n  admin-user:\n    id: demo\n    password: demo\n    firstName: Demo\n  filter:\n    create: All tasks\n```\n\n4. 将`bpmn-js`操作好的xml文件保存到`src/main/resources/loan-approval.bpmn`\n\n运行程序，访问[http://localhost:8080/camunda/app/cockpit/default/#/dashboard](http://localhost:8080/camunda/app/cockpit/default/#/dashboard)，就可以看到相关任务。\n\n后面是运行任务等，就不属于入门教程，可以放到后面教程慢慢学习。\n\n## bpmn-js部署\n[demo访问](/fedlearn/code/bpmn-js/index.html)， 快速使用，代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <title>BPMNJS测试案例</title>\n    \n  <!-- 引入BPMN-JS的CSS文件 -->\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/diagram-js.css\" />\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/bpmn-font/css/bpmn.css\" />\n</head>\n\n<body>\n  <div id=\"canvas\" style=\"height:80vh;\"></div>\n  <!-- 引入BPMN-JS的JS文件 -->\n  <script src=\"https://unpkg.com/bpmn-js@11.1.0/dist/bpmn-modeler.development.js\"></script>\n  <!-- xml文件 -->\n  <script src=\"./bpmn.js\"></script>\n  <script>\n    var bpmnModeler = new BpmnJS({\n      container: '#canvas'\n    });\n\t\t\n    bpmnModeler.importXML(xml, function(err) {\n\t  if (err) {\n        return console.error('failed to load diagram', err);\n      }\n    });\n  </script>\n```\n\n# 总结\n\n`BPNM`是大家统一认知的业务流建模标准，实现它的工作流引擎有很多，经过选型最终确定使用[camunda](https://docs.camunda.org/manual/7.18/) + [bpmn-js](https://bpmn.io/)。\n\n简单尝试一下，还是很简单实现了一个简单工作流管理系统，从设计工作流到工作流执行。\n\n如果要真正用起来，还是需要发心思去了解`BPNM`的整体标准，以及[camunda](https://docs.camunda.org/manual/7.18/)是如何运作执行的，同时需要将[bpmn-js](https://bpmn.io/)流程设计器。\n\n# 参考资料\n\n[camunda Spring Boot项目](http://shaochenfeng.com/camunda/10.%E5%88%9B%E5%BB%BA_camunda_spring_boot_%E9%A1%B9%E7%9B%AE/)\n\n[全网最详bpmn.js教材-http请求篇](https://juejin.cn/post/6844904017592614919)","slug":"today/20230106","published":1,"updated":"2023-01-06T14:25:22.991Z","_id":"cldztexdh000hnxpcywyythwq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>公司内部由于需要很多审批地方，一开始采用邮件或者企业微信进行口头审批，一般会抄送相关人员，以达到初步审批的效果，但是随着审批越来越复杂，比如有时候需要驳回或者转接，甚至需要调用其他系统接口继续流程的时候，就很麻烦，因此迫切需要一个工作流去解决审批相关事情。</p>\n<h1 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h1><p>在选型前，我们需要知道工作流是什么？</p>\n<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>工作流就是通过计算机技术对业务流程进行自动化管理。实现多个参与者按照预定的流程去自动执行业务流程。</p>\n<blockquote>\n<p>工作流定义: 通过计算机对业务流程自动化执行管理</p>\n</blockquote>\n<p>再通俗一点，工作流就是通过程序去自动实现平时需要人工操作的流程节点，所以工作流能解决的问题一定是可以被流程化的问题。</p>\n<p>然而这一过程被大家统称为业务流程建模，通常对已经存在复杂问题进行模型化的抽象，通过模型来推导解决问题的方案。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"BPM\"><a href=\"#BPM\" class=\"headerlink\" title=\"BPM\"></a>BPM</h3><p><code>BPM(Business Process Management)</code>， 业务流程管理，是指的在工作流的基础上，基于业务流程建模，支持业务流程的分析、建模、模拟、优化、协同与监控等功能的新一代企业应用系统核心。</p>\n<p>简单点说，<code>BPM</code>其实一个业务流程管理系统的统称，不单单可以实现审批流，还可以实现各种更为复杂的业务流程，如：数据同步等。</p>\n<h3 id=\"BPMN\"><a href=\"#BPMN\" class=\"headerlink\" title=\"BPMN\"></a>BPMN</h3><p><code>BPMN（Business Process Model And Notation）</code>， 业务流程模型和符号，由<code>BPMI（Business Process Management Initiative）</code>开发的一套标准的业务流程建模符号，使用BPMN 提供的符号可以创建业务流程。</p>\n<p>更加容易理解的说，<code>BPMN</code>是实现<code>BPM</code>的一套标准，制定很多建模符号标准。</p>\n<p>这里简单比喻一下，<code>BPMN</code>是一门语言，你可以用它去开发<code>BPM</code>系统。</p>\n<p>后面会更加详细讲解 <code>BPMN</code> 的基础知识。</p>\n<p>建模符号了解，可以放到下一章节分享。</p>\n<h3 id=\"工作流引擎选型\"><a href=\"#工作流引擎选型\" class=\"headerlink\" title=\"工作流引擎选型\"></a>工作流引擎选型</h3><p>由于<code>BPMN</code>是市面主流的工作流标准， 那么市面绝大部分工作流引擎都是基于该标准去实现。下面罗列一下目前市面上主流的各种引擎：</p>\n<ul>\n<li><code>Osworkflow</code>,一个轻量化的流程引擎，基于状态机机制，但不支持会签、跳转、退回、加签等这些操作，需要自己扩展开发，有一定难度，如果流程比较简单，osworkflow是很好的选择但该开源组件已过时，长时间没有版本升级了。</li>\n<li><code>JBPM</code>, 以<code>JBPM4</code>版本作为分割点，JBPM5以后版本基于<code>Drools Flow</code>， JBPM4已停止维护，也不建议选择。</li>\n<li><code>Activiti</code>, activiti5和activiti6是基于<code>JBPM4</code>开源，<code>activiti7</code>是基于6升级的，内核基本不变，但是由于<code>Tijs Rademakers</code>离开，谨慎选择。</li>\n<li><a href=\"https://flowable.com/open-source\" target=\"_blank\" rel=\"noopener\"><code>flowable</code></a>, 基于activiti6衍生出来的版本，以flowable6.4.1版本为分水岭，大力发展其商业版产品，开源版本维护不及时，部分功能已经不再开源版发布，可以考虑选择。</li>\n<li><a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\"><code>Camunda</code></a>, Camunda基于activiti5，所以其保留了PVM，商业版本和开源版本功能相差不大，建议选择。</li>\n</ul>\n<h3 id=\"流程设计器选型\"><a href=\"#流程设计器选型\" class=\"headerlink\" title=\"流程设计器选型\"></a>流程设计器选型</h3><p>对于低代码平台中的流程可视化，流程设计器是重要的支撑工具，目前市场上比较主流的流程:</p>\n<ul>\n<li><a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>,是 BPMN 2.0 渲染工具包和 Web 模型，使用 Web 建模工具可以很方便的构建 BPMN 图表，可以把 BPMN 图表嵌入到你的项目中，容易扩展。</li>\n<li><a href=\"http://jgraph.github.io/mxgraph/\" target=\"_blank\" rel=\"noopener\">mxGraph</a>是一个强大的JavaScript流程图前端库，由于mxGraph是一个开放的js绘图开发框架，我们可以开发出很炫的样式，或者完全按照项目需求定制。</li>\n<li>[Activiti-Modeler] Activiti 开源版本中带了web版流程设计器,界面不美观，用户体验差</li>\n<li>[flowable-modeler]flowable开源版本中带了web版流程设计器,界面不美观，用户体验差</li>\n</ul>\n<h3 id=\"建议选型\"><a href=\"#建议选型\" class=\"headerlink\" title=\"建议选型\"></a>建议选型</h3><p>推荐大家使用<a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\"><code>Camunda</code></a>（流程引擎）+<a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>（流程设计器）组合。</p>\n<h1 id=\"快速部署\"><a href=\"#快速部署\" class=\"headerlink\" title=\"快速部署\"></a>快速部署</h1><p>选型后就是实战，推荐的选型都有很完整的安装部署文档，下面简单说一下部署步骤。</p>\n<p>再次说明一下两者的区别：</p>\n<ul>\n<li><code>Camunda</code>是工作流引擎，用来执行工作流模型文件任务，同时管理各种流程执行。</li>\n<li><code>bpmn-js</code>是前端的流程设计器，基于<code>bnpm</code>标准实现，用来生成工作流模型文件。</li>\n</ul>\n<h2 id=\"Camunda部署\"><a href=\"#Camunda部署\" class=\"headerlink\" title=\"Camunda部署\"></a>Camunda部署</h2><ol>\n<li>docker快速安装后端：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull camunda/camunda-bpm-platform:run-latest</span><br><span class=\"line\">docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>通过<code>spring boot</code>快速创建项目：<br>更新pom.xml文件内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.tencent<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda_spring_boot<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>camunda_spring_boot<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>camunda_spring_boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">camunda.spring-boot.version</span>&gt;</span>7.15.0<span class=\"tag\">&lt;/<span class=\"name\">camunda.spring-boot.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;camunda.spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun.xml.bind<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改登录用户配置， application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">camunda.bpm</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">admin-user</span>:<span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">demo</span></span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">demo</span></span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">filter</span>:<span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"attr\">create</span>: <span class=\"string\">All tasks</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将<code>bpmn-js</code>操作好的xml文件保存到<code>src/main/resources/loan-approval.bpmn</code></p>\n</li>\n</ol>\n<p>运行程序，访问<a href=\"http://localhost:8080/camunda/app/cockpit/default/#/dashboard\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/camunda/app/cockpit/default/#/dashboard</a>，就可以看到相关任务。</p>\n<p>后面是运行任务等，就不属于入门教程，可以放到后面教程慢慢学习。</p>\n<h2 id=\"bpmn-js部署\"><a href=\"#bpmn-js部署\" class=\"headerlink\" title=\"bpmn-js部署\"></a>bpmn-js部署</h2><p><a href=\"/fedlearn/code/bpmn-js/index.html\">demo访问</a>， 快速使用，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>BPMNJS测试案例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入BPMN-JS的CSS文件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/diagram-js.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/bpmn-font/css/bpmn.css\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80vh;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入BPMN-JS的JS文件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/bpmn-js@11.1.0/dist/bpmn-modeler.development.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- xml文件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./bpmn.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> bpmnModeler = <span class=\"keyword\">new</span> BpmnJS(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      container: <span class=\"string\">'#canvas'</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"actionscript\">    bpmnModeler.importXML(xml, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"vbscript\">\t  <span class=\"keyword\">if</span> (<span class=\"built_in\">err</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">'failed to load diagram'</span>, err);</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><code>BPNM</code>是大家统一认知的业务流建模标准，实现它的工作流引擎有很多，经过选型最终确定使用<a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\">camunda</a> + <a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>。</p>\n<p>简单尝试一下，还是很简单实现了一个简单工作流管理系统，从设计工作流到工作流执行。</p>\n<p>如果要真正用起来，还是需要发心思去了解<code>BPNM</code>的整体标准，以及<a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\">camunda</a>是如何运作执行的，同时需要将<a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>流程设计器。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://shaochenfeng.com/camunda/10.%E5%88%9B%E5%BB%BA_camunda_spring_boot_%E9%A1%B9%E7%9B%AE/\" target=\"_blank\" rel=\"noopener\">camunda Spring Boot项目</a></p>\n<p><a href=\"https://juejin.cn/post/6844904017592614919\" target=\"_blank\" rel=\"noopener\">全网最详bpmn.js教材-http请求篇</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>公司内部由于需要很多审批地方，一开始采用邮件或者企业微信进行口头审批，一般会抄送相关人员，以达到初步审批的效果，但是随着审批越来越复杂，比如有时候需要驳回或者转接，甚至需要调用其他系统接口继续流程的时候，就很麻烦，因此迫切需要一个工作流去解决审批相关事情。</p>\n<h1 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h1><p>在选型前，我们需要知道工作流是什么？</p>\n<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>工作流就是通过计算机技术对业务流程进行自动化管理。实现多个参与者按照预定的流程去自动执行业务流程。</p>\n<blockquote>\n<p>工作流定义: 通过计算机对业务流程自动化执行管理</p>\n</blockquote>\n<p>再通俗一点，工作流就是通过程序去自动实现平时需要人工操作的流程节点，所以工作流能解决的问题一定是可以被流程化的问题。</p>\n<p>然而这一过程被大家统称为业务流程建模，通常对已经存在复杂问题进行模型化的抽象，通过模型来推导解决问题的方案。</p>","more":"<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"BPM\"><a href=\"#BPM\" class=\"headerlink\" title=\"BPM\"></a>BPM</h3><p><code>BPM(Business Process Management)</code>， 业务流程管理，是指的在工作流的基础上，基于业务流程建模，支持业务流程的分析、建模、模拟、优化、协同与监控等功能的新一代企业应用系统核心。</p>\n<p>简单点说，<code>BPM</code>其实一个业务流程管理系统的统称，不单单可以实现审批流，还可以实现各种更为复杂的业务流程，如：数据同步等。</p>\n<h3 id=\"BPMN\"><a href=\"#BPMN\" class=\"headerlink\" title=\"BPMN\"></a>BPMN</h3><p><code>BPMN（Business Process Model And Notation）</code>， 业务流程模型和符号，由<code>BPMI（Business Process Management Initiative）</code>开发的一套标准的业务流程建模符号，使用BPMN 提供的符号可以创建业务流程。</p>\n<p>更加容易理解的说，<code>BPMN</code>是实现<code>BPM</code>的一套标准，制定很多建模符号标准。</p>\n<p>这里简单比喻一下，<code>BPMN</code>是一门语言，你可以用它去开发<code>BPM</code>系统。</p>\n<p>后面会更加详细讲解 <code>BPMN</code> 的基础知识。</p>\n<p>建模符号了解，可以放到下一章节分享。</p>\n<h3 id=\"工作流引擎选型\"><a href=\"#工作流引擎选型\" class=\"headerlink\" title=\"工作流引擎选型\"></a>工作流引擎选型</h3><p>由于<code>BPMN</code>是市面主流的工作流标准， 那么市面绝大部分工作流引擎都是基于该标准去实现。下面罗列一下目前市面上主流的各种引擎：</p>\n<ul>\n<li><code>Osworkflow</code>,一个轻量化的流程引擎，基于状态机机制，但不支持会签、跳转、退回、加签等这些操作，需要自己扩展开发，有一定难度，如果流程比较简单，osworkflow是很好的选择但该开源组件已过时，长时间没有版本升级了。</li>\n<li><code>JBPM</code>, 以<code>JBPM4</code>版本作为分割点，JBPM5以后版本基于<code>Drools Flow</code>， JBPM4已停止维护，也不建议选择。</li>\n<li><code>Activiti</code>, activiti5和activiti6是基于<code>JBPM4</code>开源，<code>activiti7</code>是基于6升级的，内核基本不变，但是由于<code>Tijs Rademakers</code>离开，谨慎选择。</li>\n<li><a href=\"https://flowable.com/open-source\" target=\"_blank\" rel=\"noopener\"><code>flowable</code></a>, 基于activiti6衍生出来的版本，以flowable6.4.1版本为分水岭，大力发展其商业版产品，开源版本维护不及时，部分功能已经不再开源版发布，可以考虑选择。</li>\n<li><a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\"><code>Camunda</code></a>, Camunda基于activiti5，所以其保留了PVM，商业版本和开源版本功能相差不大，建议选择。</li>\n</ul>\n<h3 id=\"流程设计器选型\"><a href=\"#流程设计器选型\" class=\"headerlink\" title=\"流程设计器选型\"></a>流程设计器选型</h3><p>对于低代码平台中的流程可视化，流程设计器是重要的支撑工具，目前市场上比较主流的流程:</p>\n<ul>\n<li><a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>,是 BPMN 2.0 渲染工具包和 Web 模型，使用 Web 建模工具可以很方便的构建 BPMN 图表，可以把 BPMN 图表嵌入到你的项目中，容易扩展。</li>\n<li><a href=\"http://jgraph.github.io/mxgraph/\" target=\"_blank\" rel=\"noopener\">mxGraph</a>是一个强大的JavaScript流程图前端库，由于mxGraph是一个开放的js绘图开发框架，我们可以开发出很炫的样式，或者完全按照项目需求定制。</li>\n<li>[Activiti-Modeler] Activiti 开源版本中带了web版流程设计器,界面不美观，用户体验差</li>\n<li>[flowable-modeler]flowable开源版本中带了web版流程设计器,界面不美观，用户体验差</li>\n</ul>\n<h3 id=\"建议选型\"><a href=\"#建议选型\" class=\"headerlink\" title=\"建议选型\"></a>建议选型</h3><p>推荐大家使用<a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\"><code>Camunda</code></a>（流程引擎）+<a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>（流程设计器）组合。</p>\n<h1 id=\"快速部署\"><a href=\"#快速部署\" class=\"headerlink\" title=\"快速部署\"></a>快速部署</h1><p>选型后就是实战，推荐的选型都有很完整的安装部署文档，下面简单说一下部署步骤。</p>\n<p>再次说明一下两者的区别：</p>\n<ul>\n<li><code>Camunda</code>是工作流引擎，用来执行工作流模型文件任务，同时管理各种流程执行。</li>\n<li><code>bpmn-js</code>是前端的流程设计器，基于<code>bnpm</code>标准实现，用来生成工作流模型文件。</li>\n</ul>\n<h2 id=\"Camunda部署\"><a href=\"#Camunda部署\" class=\"headerlink\" title=\"Camunda部署\"></a>Camunda部署</h2><ol>\n<li>docker快速安装后端：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull camunda/camunda-bpm-platform:run-latest</span><br><span class=\"line\">docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>通过<code>spring boot</code>快速创建项目：<br>更新pom.xml文件内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.tencent<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda_spring_boot<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>camunda_spring_boot<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>camunda_spring_boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">camunda.spring-boot.version</span>&gt;</span>7.15.0<span class=\"tag\">&lt;/<span class=\"name\">camunda.spring-boot.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-webapp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;camunda.spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun.xml.bind<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jaxb-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改登录用户配置， application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">camunda.bpm</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"meta\">admin-user</span>:<span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">demo</span></span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">demo</span></span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">filter</span>:<span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"attr\">create</span>: <span class=\"string\">All tasks</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将<code>bpmn-js</code>操作好的xml文件保存到<code>src/main/resources/loan-approval.bpmn</code></p>\n</li>\n</ol>\n<p>运行程序，访问<a href=\"http://localhost:8080/camunda/app/cockpit/default/#/dashboard\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/camunda/app/cockpit/default/#/dashboard</a>，就可以看到相关任务。</p>\n<p>后面是运行任务等，就不属于入门教程，可以放到后面教程慢慢学习。</p>\n<h2 id=\"bpmn-js部署\"><a href=\"#bpmn-js部署\" class=\"headerlink\" title=\"bpmn-js部署\"></a>bpmn-js部署</h2><p><a href=\"/fedlearn/code/bpmn-js/index.html\">demo访问</a>， 快速使用，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>BPMNJS测试案例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入BPMN-JS的CSS文件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/diagram-js.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/bpmn-js@11.1.0/dist/assets/bpmn-font/css/bpmn.css\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:80vh;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入BPMN-JS的JS文件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/bpmn-js@11.1.0/dist/bpmn-modeler.development.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- xml文件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./bpmn.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> bpmnModeler = <span class=\"keyword\">new</span> BpmnJS(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      container: <span class=\"string\">'#canvas'</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"actionscript\">    bpmnModeler.importXML(xml, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"vbscript\">\t  <span class=\"keyword\">if</span> (<span class=\"built_in\">err</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">'failed to load diagram'</span>, err);</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><code>BPNM</code>是大家统一认知的业务流建模标准，实现它的工作流引擎有很多，经过选型最终确定使用<a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\">camunda</a> + <a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>。</p>\n<p>简单尝试一下，还是很简单实现了一个简单工作流管理系统，从设计工作流到工作流执行。</p>\n<p>如果要真正用起来，还是需要发心思去了解<code>BPNM</code>的整体标准，以及<a href=\"https://docs.camunda.org/manual/7.18/\" target=\"_blank\" rel=\"noopener\">camunda</a>是如何运作执行的，同时需要将<a href=\"https://bpmn.io/\" target=\"_blank\" rel=\"noopener\">bpmn-js</a>流程设计器。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://shaochenfeng.com/camunda/10.%E5%88%9B%E5%BB%BA_camunda_spring_boot_%E9%A1%B9%E7%9B%AE/\" target=\"_blank\" rel=\"noopener\">camunda Spring Boot项目</a></p>\n<p><a href=\"https://juejin.cn/post/6844904017592614919\" target=\"_blank\" rel=\"noopener\">全网最详bpmn.js教材-http请求篇</a></p>"},{"title":"从npm版本依赖到Monorepo大仓项目","date":"2023-01-07T10:00:01.000Z","_content":"\n# 背景\n前端的发展很快，自从node.js的出现，打开前端新的大门，npm让js有了自己的包管理能力，能够让前端项目工程化，从而能够处理更加复杂的前端项目。\n\n但是随之而来的是，同一个项目的npm依赖越来越多，有些是开源的，有些是自研的，尤其在同一个团队，当你开发一个新的npm包的时候，只是为了服务特定几个项目，但是这几个项目不在你管理范围内，当你需要更新的时候需要通知到他们，有时候会出现版本依赖问题，然后反复沟通和测试，最终达到协调。但是下次更新的时候又再次遇到这个问题，重复一次。\n\n# npm依赖\n\n## npm是什么\n\n> npm，Node Package Manager的缩写，也就是“Node的包管理器”。\n> npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。\n\n<!-- more -->\n\n通俗的说，npm是管理js包的工具，它包括以下几个部分：\n\n1. npm源，存放各类npm包的网站，可以注册，上传npm包\n2. npm-cli 命令工具，允许你自由下载任何npm包\n\n## npm如何管理包\n\n那么npm是如何管理包的呢？主要项目下`package.json`对npm进行描述，主要有以下几个属性：\n\n- name：JavaScript 项目或库的名称。\n- version：项目的版本。\n- scripts： 当作在项目本地运行的命令行工具\n- dependencies：当项目被人依赖的时候，需要安装的npm包，描述：`npm包名： npm包版本`\n- devDependencies：本地开发的时候，需要安装的npm包，描述：`npm包名： npm包版本`\n\n同时`package-lock.json`文件描述了 npm JavaScript 项目中使用的依赖项的确切版本，确保下次安装项目依赖的npm包升级版本后导致项目无法运行（这个是很多新手安装npm包的时候会遇到的一个错误）。\n\n## npm版本\n\nnpm包版本遵循`major.minor.patch`版本模型规范，什么是`major.minor.patch`版本模型规范，下面引用一下说明：\n\n> APR版本规范，major是当前的主版本号，minor则是次版本号，patch对应的则是APR的补丁号，同时还有版本所处阶段`base`, `alpha`, `beta`, `RC`, `release`。\n\n因此在package.json描述的依赖npm包的版本号，如:`~1.0.0`，`^1.0.0`，几个符号代表的意思如下：\n\n- `^`：表示最新的次版本，例如， `^1.0.4`  可能会安装主版本系列  `1 ` 的最新次版本 `1.3.0`。\n- `〜`：表示最新的补丁程序版本，与  `^`  类似， `〜1.0.4`  可能会安装次版本系列 `1.0`  的最新次版本`1.0.7`。\n\n## npm包版本依赖问题\n\n即使有`package-lock.json`或者`yarn.lock`等约束文件解决项目依赖包的版本的问题，但是当项目越来越庞大，拆分的公共npm包越来越多，这些npm管理难度和数量成正比提升，团队需要面临npm包版本问题也越来越多，尤其当`微前端`概念提出，当大项目被拆分成N个子项目的时候，团队成员需要面临以下几个问题：\n\n- 公共包npm更新了，如何通知到其他子项目依赖的npm包更新版本\n- 子项目有些公共的代码需要抽象到公共一起维护，是抽离成npm包，但是又需要新起一个项目\n- 公共npm越来越多，子项目也越拆越多，如何管理这些项目的开发、测试和持续发布\n- 其他各种开发细节问题...\n\n因此，大家迫切需要去一个标准去统一维护管理这些项目，因此`Monorepo`统一项目管理规范，就是我们的最佳选择。\n\n# Monorepo\n\n## 是什么\n\n> Monorepo是包含多个不同项目的单一存储库，具有明确定义的关系。\n\n通俗的讲，`Monorepo`就是将几个不同项目放到一个git仓库里，通过制定一个大家遵循的管理规范和子项目之间依赖关系。\n\n`Monorepo`大仓项目与`monolithic`单体巨石项目还是有很大的区别，下面简单说明：\n\n- Monorepo !== 单体巨石项目，monorepos 简化了代码共享和跨项目重构，它们显着降低了创建库、微服务和微前端的成本，不需要做到一起发布\n- 能够有效解决子项目与子项目的之间版本依赖关系，而不是单纯将几个项目放在一起形成一堆代码山\n\n为了更好的了解`Monorepo`大仓，可以和对立面`Polyrepo`多个标准式项目 作对比：\n\n![大仓与多个对比](/assets/img/monorepo-polyrepo.svg)\n\n## monorepo 工具\n\nMonorepos 有很多优势，但要使它们发挥作用，您需要拥有合适的工具。随着工作空间的扩大，工具必须帮助您保持快速、易于理解和管理。\n\n市面上主流的`Monorepo`管理工具有：\n\n- Bazel（谷歌）\n- Gradle Build Tool（Gradle, Inc）\n- Lage（微软）\n- Lerna  \n- Nx（Nrwl）\n- Pants（Pants Build 社区）\n- Rush（由 Microsoft)\n- Turborepo（由 Vercel）\n\n工具应该具备以下几点能力：\n\n- 本地计算缓存，能够提供本地构建缓存、单元测试缓存等能力\n- 本地任务编排，能够以正确的顺序并行运行任务\n- 分布式计算缓存，跨不同环境共享缓存工件的能力。这意味着你的整个组织，包括 CI 代理，永远不会构建或测试相同的东西两次。\n- 分布式任务执行，在多台机器上分发命令的能力，同时在很大程度上保留在单台机器上运行它的开发人体工程学。\n- 透明远程执行，在本地开发时在多台机器上执行任何命令的能力。\n- 检测受影响的项目/包，确定更改可能会影响什么，以仅运行构建/测试受影响的项目。\n- 工作区分析，无需额外配置即可理解工作区项目图的能力。\n- 依赖图可视化，可视化项目和/或任务之间的依赖关系。可视化是交互式的，这意味着您可以搜索、过滤、隐藏、聚焦/突出显示和查询图中的节点。\n- 源码分享，促进分散的源代码片段的共享。\n- 一致的工具，无论您使用什么来开发项目，如JavaScript 框架、Go、Rust、Java 等，工具都可以帮助您获得一致的体验\n- 代码生成，本机支持生成代码\n- 项目限制和可见性，支持定义规则以限制 repo 中的依赖关系。例如，开发人员可以将某些项目标记为他们团队的私有项目，这样其他人就无法依赖它们。开发人员还可以根据使用的技术（例如 React 或 Nest.js）标记项目，并确保后端项目不会导入前端项目。\n\n## monorepo单一原则\n单一原则指的是单一版本(One Version)原则，具体定义如下：\n\n> 单一版本(One Version)原则，是指在任意时间，代码库内的每一份组件、每一个依赖只有一个版本。\n\n对内部库而言，这意味着使用主干开发（见下），并且必须在主干 HEAD 上依赖。这是一个非常强的约束——这意味着除了终端制品，任何一个内部被依赖的库都不能通过分支发布，而必须保持自己在单仓的主干上一直是发布状态。\n\n对外部依赖而言，同一个第三方库在单仓中永远只会引入一个版本。\n\n为什么？\n\n因为原来的git flow开发流，从feature->dev->master，每个分支里面的依赖版本都可能会不一样，从而导致依赖版本难以维护。\n## monorepo挑战\n\n- 并非所有服务都适用于 monorepos\n- 需要更复杂的 CI 设置\n- 需要考虑代码架构大规模的改变\n\n# monorepo实战\n\n作为前端开发者，[Lerna](https://lerna.js.org)框架是肯定要尝试一番，同时功能比较齐全的[Nx]()框架要去体验一番。\n\n但是其实两者的关系非常紧密，都是同一个公司`Nrwl`开发的，所以有很多类似点。\n\n## Lerna\n\n快速开始安装\n```shell\nnpx lerna init\n```\n\nPS: npx是什么？\n- npx：Node Package Execute 即node包执行器\n- npx 是npm v5.2.0版本之后随npm 一起打包安装的一个包执行器。\n- 它会自动去寻找二进制命令文件且不必全局安装依赖包。\n- npx 可以在不指定项目中的确切位置或使用别名的情况下运行正确版本的工具，比如`npx lerna init`命令会执行去npm源安装`lerna-cli`命令工具到本地，然后执行`lerna init`命令\n\n\n安装完以后，项目的初始化架构如下：\n```\npackages/\n    header/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n\n    footer/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n\n    remixapp/\n        app/\n            ...\n        public/\n        package.json\n        remix.config.js\n\npackage.json\nlerna.json # 需要自己手动新建， 用来描述\n```\n\n修改`package.json`，去添加一个npm/yarn/pnpm workspace\n\n```\n{\n  \"name\": \"root\",\n  \"private\": true,\n  \"workspaces\": [\"packages/*\"],\n  \"devDependencies\": {\n    \"lerna\": \"6.0.1\"\n  }\n}\n```\n\n## 常用的命令\n\n- `lerna run xxx`： 统一执行所有子项目的scripts命令，如：lerna run build\n- `npx nx graph`：查看项目依赖图\n- `npx lerna add-caching`：设置子项目的一些缓存设置，会在根目录下生成`nx.json`\n- `npx lerna publish --no-private`: 统一发布npm包\n- `npx lerna run xxx --scope=header`：允许只针对某个子项目header执行命令\n\n\n其他命令可以到官网查看， [Lerna命令](https://lerna.js.org/docs/api-reference/commands)\n## NX\n\n官网里定义是：\n> [NX](https://nx.dev/)是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。\n\n实战步骤如下：\n\n创建一个新工作区：\n```\nnpx create-nx-workspace@latest package-based --preset=npm\n```\n\n然后在`packages`创建自己的子项目：\n```\npackage-based/\n├── packages/\n│   └── is-even/\n│       ├── index.ts\n│       └── package.json\n│   └── is-odd/\n│       ├── index.ts\n│       └── package.json\n├── nx.json\n└── package.json\n```\n\n接下来就是配置 `nx.json`，子项目之间的依赖，已经任务执行顺序：\n```\n// nx.json\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n执行构建命令`npx nx build is-odd` 可以看到要先构建`is-event`项目\n\n最后是构建全部项目`npx nx run-many --target=build`\n\n\n## CI/CD构建流程改造\n\n这个按照各自团队的CI/CD构建流程去改造，但是主要有以下几点：\n\n- CI/CD流水线职责分离\n- 统一镜像NPM凭证管理\n- 手动触发CD流水线发布，使用统一版本进行管理发布\n\n# 参考资料\n\n[Monorepo Explain](https://monorepo.tools/#what-is-a-monorepo)","source":"_posts/today/20230107.md","raw":"---\ntitle: 从npm版本依赖到Monorepo大仓项目\ndate: 2023-01-07 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n前端的发展很快，自从node.js的出现，打开前端新的大门，npm让js有了自己的包管理能力，能够让前端项目工程化，从而能够处理更加复杂的前端项目。\n\n但是随之而来的是，同一个项目的npm依赖越来越多，有些是开源的，有些是自研的，尤其在同一个团队，当你开发一个新的npm包的时候，只是为了服务特定几个项目，但是这几个项目不在你管理范围内，当你需要更新的时候需要通知到他们，有时候会出现版本依赖问题，然后反复沟通和测试，最终达到协调。但是下次更新的时候又再次遇到这个问题，重复一次。\n\n# npm依赖\n\n## npm是什么\n\n> npm，Node Package Manager的缩写，也就是“Node的包管理器”。\n> npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。\n\n<!-- more -->\n\n通俗的说，npm是管理js包的工具，它包括以下几个部分：\n\n1. npm源，存放各类npm包的网站，可以注册，上传npm包\n2. npm-cli 命令工具，允许你自由下载任何npm包\n\n## npm如何管理包\n\n那么npm是如何管理包的呢？主要项目下`package.json`对npm进行描述，主要有以下几个属性：\n\n- name：JavaScript 项目或库的名称。\n- version：项目的版本。\n- scripts： 当作在项目本地运行的命令行工具\n- dependencies：当项目被人依赖的时候，需要安装的npm包，描述：`npm包名： npm包版本`\n- devDependencies：本地开发的时候，需要安装的npm包，描述：`npm包名： npm包版本`\n\n同时`package-lock.json`文件描述了 npm JavaScript 项目中使用的依赖项的确切版本，确保下次安装项目依赖的npm包升级版本后导致项目无法运行（这个是很多新手安装npm包的时候会遇到的一个错误）。\n\n## npm版本\n\nnpm包版本遵循`major.minor.patch`版本模型规范，什么是`major.minor.patch`版本模型规范，下面引用一下说明：\n\n> APR版本规范，major是当前的主版本号，minor则是次版本号，patch对应的则是APR的补丁号，同时还有版本所处阶段`base`, `alpha`, `beta`, `RC`, `release`。\n\n因此在package.json描述的依赖npm包的版本号，如:`~1.0.0`，`^1.0.0`，几个符号代表的意思如下：\n\n- `^`：表示最新的次版本，例如， `^1.0.4`  可能会安装主版本系列  `1 ` 的最新次版本 `1.3.0`。\n- `〜`：表示最新的补丁程序版本，与  `^`  类似， `〜1.0.4`  可能会安装次版本系列 `1.0`  的最新次版本`1.0.7`。\n\n## npm包版本依赖问题\n\n即使有`package-lock.json`或者`yarn.lock`等约束文件解决项目依赖包的版本的问题，但是当项目越来越庞大，拆分的公共npm包越来越多，这些npm管理难度和数量成正比提升，团队需要面临npm包版本问题也越来越多，尤其当`微前端`概念提出，当大项目被拆分成N个子项目的时候，团队成员需要面临以下几个问题：\n\n- 公共包npm更新了，如何通知到其他子项目依赖的npm包更新版本\n- 子项目有些公共的代码需要抽象到公共一起维护，是抽离成npm包，但是又需要新起一个项目\n- 公共npm越来越多，子项目也越拆越多，如何管理这些项目的开发、测试和持续发布\n- 其他各种开发细节问题...\n\n因此，大家迫切需要去一个标准去统一维护管理这些项目，因此`Monorepo`统一项目管理规范，就是我们的最佳选择。\n\n# Monorepo\n\n## 是什么\n\n> Monorepo是包含多个不同项目的单一存储库，具有明确定义的关系。\n\n通俗的讲，`Monorepo`就是将几个不同项目放到一个git仓库里，通过制定一个大家遵循的管理规范和子项目之间依赖关系。\n\n`Monorepo`大仓项目与`monolithic`单体巨石项目还是有很大的区别，下面简单说明：\n\n- Monorepo !== 单体巨石项目，monorepos 简化了代码共享和跨项目重构，它们显着降低了创建库、微服务和微前端的成本，不需要做到一起发布\n- 能够有效解决子项目与子项目的之间版本依赖关系，而不是单纯将几个项目放在一起形成一堆代码山\n\n为了更好的了解`Monorepo`大仓，可以和对立面`Polyrepo`多个标准式项目 作对比：\n\n![大仓与多个对比](/assets/img/monorepo-polyrepo.svg)\n\n## monorepo 工具\n\nMonorepos 有很多优势，但要使它们发挥作用，您需要拥有合适的工具。随着工作空间的扩大，工具必须帮助您保持快速、易于理解和管理。\n\n市面上主流的`Monorepo`管理工具有：\n\n- Bazel（谷歌）\n- Gradle Build Tool（Gradle, Inc）\n- Lage（微软）\n- Lerna  \n- Nx（Nrwl）\n- Pants（Pants Build 社区）\n- Rush（由 Microsoft)\n- Turborepo（由 Vercel）\n\n工具应该具备以下几点能力：\n\n- 本地计算缓存，能够提供本地构建缓存、单元测试缓存等能力\n- 本地任务编排，能够以正确的顺序并行运行任务\n- 分布式计算缓存，跨不同环境共享缓存工件的能力。这意味着你的整个组织，包括 CI 代理，永远不会构建或测试相同的东西两次。\n- 分布式任务执行，在多台机器上分发命令的能力，同时在很大程度上保留在单台机器上运行它的开发人体工程学。\n- 透明远程执行，在本地开发时在多台机器上执行任何命令的能力。\n- 检测受影响的项目/包，确定更改可能会影响什么，以仅运行构建/测试受影响的项目。\n- 工作区分析，无需额外配置即可理解工作区项目图的能力。\n- 依赖图可视化，可视化项目和/或任务之间的依赖关系。可视化是交互式的，这意味着您可以搜索、过滤、隐藏、聚焦/突出显示和查询图中的节点。\n- 源码分享，促进分散的源代码片段的共享。\n- 一致的工具，无论您使用什么来开发项目，如JavaScript 框架、Go、Rust、Java 等，工具都可以帮助您获得一致的体验\n- 代码生成，本机支持生成代码\n- 项目限制和可见性，支持定义规则以限制 repo 中的依赖关系。例如，开发人员可以将某些项目标记为他们团队的私有项目，这样其他人就无法依赖它们。开发人员还可以根据使用的技术（例如 React 或 Nest.js）标记项目，并确保后端项目不会导入前端项目。\n\n## monorepo单一原则\n单一原则指的是单一版本(One Version)原则，具体定义如下：\n\n> 单一版本(One Version)原则，是指在任意时间，代码库内的每一份组件、每一个依赖只有一个版本。\n\n对内部库而言，这意味着使用主干开发（见下），并且必须在主干 HEAD 上依赖。这是一个非常强的约束——这意味着除了终端制品，任何一个内部被依赖的库都不能通过分支发布，而必须保持自己在单仓的主干上一直是发布状态。\n\n对外部依赖而言，同一个第三方库在单仓中永远只会引入一个版本。\n\n为什么？\n\n因为原来的git flow开发流，从feature->dev->master，每个分支里面的依赖版本都可能会不一样，从而导致依赖版本难以维护。\n## monorepo挑战\n\n- 并非所有服务都适用于 monorepos\n- 需要更复杂的 CI 设置\n- 需要考虑代码架构大规模的改变\n\n# monorepo实战\n\n作为前端开发者，[Lerna](https://lerna.js.org)框架是肯定要尝试一番，同时功能比较齐全的[Nx]()框架要去体验一番。\n\n但是其实两者的关系非常紧密，都是同一个公司`Nrwl`开发的，所以有很多类似点。\n\n## Lerna\n\n快速开始安装\n```shell\nnpx lerna init\n```\n\nPS: npx是什么？\n- npx：Node Package Execute 即node包执行器\n- npx 是npm v5.2.0版本之后随npm 一起打包安装的一个包执行器。\n- 它会自动去寻找二进制命令文件且不必全局安装依赖包。\n- npx 可以在不指定项目中的确切位置或使用别名的情况下运行正确版本的工具，比如`npx lerna init`命令会执行去npm源安装`lerna-cli`命令工具到本地，然后执行`lerna init`命令\n\n\n安装完以后，项目的初始化架构如下：\n```\npackages/\n    header/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n\n    footer/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n\n    remixapp/\n        app/\n            ...\n        public/\n        package.json\n        remix.config.js\n\npackage.json\nlerna.json # 需要自己手动新建， 用来描述\n```\n\n修改`package.json`，去添加一个npm/yarn/pnpm workspace\n\n```\n{\n  \"name\": \"root\",\n  \"private\": true,\n  \"workspaces\": [\"packages/*\"],\n  \"devDependencies\": {\n    \"lerna\": \"6.0.1\"\n  }\n}\n```\n\n## 常用的命令\n\n- `lerna run xxx`： 统一执行所有子项目的scripts命令，如：lerna run build\n- `npx nx graph`：查看项目依赖图\n- `npx lerna add-caching`：设置子项目的一些缓存设置，会在根目录下生成`nx.json`\n- `npx lerna publish --no-private`: 统一发布npm包\n- `npx lerna run xxx --scope=header`：允许只针对某个子项目header执行命令\n\n\n其他命令可以到官网查看， [Lerna命令](https://lerna.js.org/docs/api-reference/commands)\n## NX\n\n官网里定义是：\n> [NX](https://nx.dev/)是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。\n\n实战步骤如下：\n\n创建一个新工作区：\n```\nnpx create-nx-workspace@latest package-based --preset=npm\n```\n\n然后在`packages`创建自己的子项目：\n```\npackage-based/\n├── packages/\n│   └── is-even/\n│       ├── index.ts\n│       └── package.json\n│   └── is-odd/\n│       ├── index.ts\n│       └── package.json\n├── nx.json\n└── package.json\n```\n\n接下来就是配置 `nx.json`，子项目之间的依赖，已经任务执行顺序：\n```\n// nx.json\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n\n执行构建命令`npx nx build is-odd` 可以看到要先构建`is-event`项目\n\n最后是构建全部项目`npx nx run-many --target=build`\n\n\n## CI/CD构建流程改造\n\n这个按照各自团队的CI/CD构建流程去改造，但是主要有以下几点：\n\n- CI/CD流水线职责分离\n- 统一镜像NPM凭证管理\n- 手动触发CD流水线发布，使用统一版本进行管理发布\n\n# 参考资料\n\n[Monorepo Explain](https://monorepo.tools/#what-is-a-monorepo)","slug":"today/20230107","published":1,"updated":"2023-01-07T14:21:57.419Z","_id":"cldztezms000knxpcrr1hyvmg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端的发展很快，自从node.js的出现，打开前端新的大门，npm让js有了自己的包管理能力，能够让前端项目工程化，从而能够处理更加复杂的前端项目。</p>\n<p>但是随之而来的是，同一个项目的npm依赖越来越多，有些是开源的，有些是自研的，尤其在同一个团队，当你开发一个新的npm包的时候，只是为了服务特定几个项目，但是这几个项目不在你管理范围内，当你需要更新的时候需要通知到他们，有时候会出现版本依赖问题，然后反复沟通和测试，最终达到协调。但是下次更新的时候又再次遇到这个问题，重复一次。</p>\n<h1 id=\"npm依赖\"><a href=\"#npm依赖\" class=\"headerlink\" title=\"npm依赖\"></a>npm依赖</h1><h2 id=\"npm是什么\"><a href=\"#npm是什么\" class=\"headerlink\" title=\"npm是什么\"></a>npm是什么</h2><blockquote>\n<p>npm，Node Package Manager的缩写，也就是“Node的包管理器”。<br>npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>通俗的说，npm是管理js包的工具，它包括以下几个部分：</p>\n<ol>\n<li>npm源，存放各类npm包的网站，可以注册，上传npm包</li>\n<li>npm-cli 命令工具，允许你自由下载任何npm包</li>\n</ol>\n<h2 id=\"npm如何管理包\"><a href=\"#npm如何管理包\" class=\"headerlink\" title=\"npm如何管理包\"></a>npm如何管理包</h2><p>那么npm是如何管理包的呢？主要项目下<code>package.json</code>对npm进行描述，主要有以下几个属性：</p>\n<ul>\n<li>name：JavaScript 项目或库的名称。</li>\n<li>version：项目的版本。</li>\n<li>scripts： 当作在项目本地运行的命令行工具</li>\n<li>dependencies：当项目被人依赖的时候，需要安装的npm包，描述：<code>npm包名： npm包版本</code></li>\n<li>devDependencies：本地开发的时候，需要安装的npm包，描述：<code>npm包名： npm包版本</code></li>\n</ul>\n<p>同时<code>package-lock.json</code>文件描述了 npm JavaScript 项目中使用的依赖项的确切版本，确保下次安装项目依赖的npm包升级版本后导致项目无法运行（这个是很多新手安装npm包的时候会遇到的一个错误）。</p>\n<h2 id=\"npm版本\"><a href=\"#npm版本\" class=\"headerlink\" title=\"npm版本\"></a>npm版本</h2><p>npm包版本遵循<code>major.minor.patch</code>版本模型规范，什么是<code>major.minor.patch</code>版本模型规范，下面引用一下说明：</p>\n<blockquote>\n<p>APR版本规范，major是当前的主版本号，minor则是次版本号，patch对应的则是APR的补丁号，同时还有版本所处阶段<code>base</code>, <code>alpha</code>, <code>beta</code>, <code>RC</code>, <code>release</code>。</p>\n</blockquote>\n<p>因此在package.json描述的依赖npm包的版本号，如:<code>~1.0.0</code>，<code>^1.0.0</code>，几个符号代表的意思如下：</p>\n<ul>\n<li><code>^</code>：表示最新的次版本，例如， <code>^1.0.4</code>  可能会安装主版本系列  <code>1</code> 的最新次版本 <code>1.3.0</code>。</li>\n<li><code>〜</code>：表示最新的补丁程序版本，与  <code>^</code>  类似， <code>〜1.0.4</code>  可能会安装次版本系列 <code>1.0</code>  的最新次版本<code>1.0.7</code>。</li>\n</ul>\n<h2 id=\"npm包版本依赖问题\"><a href=\"#npm包版本依赖问题\" class=\"headerlink\" title=\"npm包版本依赖问题\"></a>npm包版本依赖问题</h2><p>即使有<code>package-lock.json</code>或者<code>yarn.lock</code>等约束文件解决项目依赖包的版本的问题，但是当项目越来越庞大，拆分的公共npm包越来越多，这些npm管理难度和数量成正比提升，团队需要面临npm包版本问题也越来越多，尤其当<code>微前端</code>概念提出，当大项目被拆分成N个子项目的时候，团队成员需要面临以下几个问题：</p>\n<ul>\n<li>公共包npm更新了，如何通知到其他子项目依赖的npm包更新版本</li>\n<li>子项目有些公共的代码需要抽象到公共一起维护，是抽离成npm包，但是又需要新起一个项目</li>\n<li>公共npm越来越多，子项目也越拆越多，如何管理这些项目的开发、测试和持续发布</li>\n<li>其他各种开发细节问题…</li>\n</ul>\n<p>因此，大家迫切需要去一个标准去统一维护管理这些项目，因此<code>Monorepo</code>统一项目管理规范，就是我们的最佳选择。</p>\n<h1 id=\"Monorepo\"><a href=\"#Monorepo\" class=\"headerlink\" title=\"Monorepo\"></a>Monorepo</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>Monorepo是包含多个不同项目的单一存储库，具有明确定义的关系。</p>\n</blockquote>\n<p>通俗的讲，<code>Monorepo</code>就是将几个不同项目放到一个git仓库里，通过制定一个大家遵循的管理规范和子项目之间依赖关系。</p>\n<p><code>Monorepo</code>大仓项目与<code>monolithic</code>单体巨石项目还是有很大的区别，下面简单说明：</p>\n<ul>\n<li>Monorepo !== 单体巨石项目，monorepos 简化了代码共享和跨项目重构，它们显着降低了创建库、微服务和微前端的成本，不需要做到一起发布</li>\n<li>能够有效解决子项目与子项目的之间版本依赖关系，而不是单纯将几个项目放在一起形成一堆代码山</li>\n</ul>\n<p>为了更好的了解<code>Monorepo</code>大仓，可以和对立面<code>Polyrepo</code>多个标准式项目 作对比：</p>\n<p><img src=\"/assets/img/monorepo-polyrepo.svg\" alt=\"大仓与多个对比\"></p>\n<h2 id=\"monorepo-工具\"><a href=\"#monorepo-工具\" class=\"headerlink\" title=\"monorepo 工具\"></a>monorepo 工具</h2><p>Monorepos 有很多优势，但要使它们发挥作用，您需要拥有合适的工具。随着工作空间的扩大，工具必须帮助您保持快速、易于理解和管理。</p>\n<p>市面上主流的<code>Monorepo</code>管理工具有：</p>\n<ul>\n<li>Bazel（谷歌）</li>\n<li>Gradle Build Tool（Gradle, Inc）</li>\n<li>Lage（微软）</li>\n<li>Lerna  </li>\n<li>Nx（Nrwl）</li>\n<li>Pants（Pants Build 社区）</li>\n<li>Rush（由 Microsoft)</li>\n<li>Turborepo（由 Vercel）</li>\n</ul>\n<p>工具应该具备以下几点能力：</p>\n<ul>\n<li>本地计算缓存，能够提供本地构建缓存、单元测试缓存等能力</li>\n<li>本地任务编排，能够以正确的顺序并行运行任务</li>\n<li>分布式计算缓存，跨不同环境共享缓存工件的能力。这意味着你的整个组织，包括 CI 代理，永远不会构建或测试相同的东西两次。</li>\n<li>分布式任务执行，在多台机器上分发命令的能力，同时在很大程度上保留在单台机器上运行它的开发人体工程学。</li>\n<li>透明远程执行，在本地开发时在多台机器上执行任何命令的能力。</li>\n<li>检测受影响的项目/包，确定更改可能会影响什么，以仅运行构建/测试受影响的项目。</li>\n<li>工作区分析，无需额外配置即可理解工作区项目图的能力。</li>\n<li>依赖图可视化，可视化项目和/或任务之间的依赖关系。可视化是交互式的，这意味着您可以搜索、过滤、隐藏、聚焦/突出显示和查询图中的节点。</li>\n<li>源码分享，促进分散的源代码片段的共享。</li>\n<li>一致的工具，无论您使用什么来开发项目，如JavaScript 框架、Go、Rust、Java 等，工具都可以帮助您获得一致的体验</li>\n<li>代码生成，本机支持生成代码</li>\n<li>项目限制和可见性，支持定义规则以限制 repo 中的依赖关系。例如，开发人员可以将某些项目标记为他们团队的私有项目，这样其他人就无法依赖它们。开发人员还可以根据使用的技术（例如 React 或 Nest.js）标记项目，并确保后端项目不会导入前端项目。</li>\n</ul>\n<h2 id=\"monorepo单一原则\"><a href=\"#monorepo单一原则\" class=\"headerlink\" title=\"monorepo单一原则\"></a>monorepo单一原则</h2><p>单一原则指的是单一版本(One Version)原则，具体定义如下：</p>\n<blockquote>\n<p>单一版本(One Version)原则，是指在任意时间，代码库内的每一份组件、每一个依赖只有一个版本。</p>\n</blockquote>\n<p>对内部库而言，这意味着使用主干开发（见下），并且必须在主干 HEAD 上依赖。这是一个非常强的约束——这意味着除了终端制品，任何一个内部被依赖的库都不能通过分支发布，而必须保持自己在单仓的主干上一直是发布状态。</p>\n<p>对外部依赖而言，同一个第三方库在单仓中永远只会引入一个版本。</p>\n<p>为什么？</p>\n<p>因为原来的git flow开发流，从feature-&gt;dev-&gt;master，每个分支里面的依赖版本都可能会不一样，从而导致依赖版本难以维护。</p>\n<h2 id=\"monorepo挑战\"><a href=\"#monorepo挑战\" class=\"headerlink\" title=\"monorepo挑战\"></a>monorepo挑战</h2><ul>\n<li>并非所有服务都适用于 monorepos</li>\n<li>需要更复杂的 CI 设置</li>\n<li>需要考虑代码架构大规模的改变</li>\n</ul>\n<h1 id=\"monorepo实战\"><a href=\"#monorepo实战\" class=\"headerlink\" title=\"monorepo实战\"></a>monorepo实战</h1><p>作为前端开发者，<a href=\"https://lerna.js.org\" target=\"_blank\" rel=\"noopener\">Lerna</a>框架是肯定要尝试一番，同时功能比较齐全的<a href>Nx</a>框架要去体验一番。</p>\n<p>但是其实两者的关系非常紧密，都是同一个公司<code>Nrwl</code>开发的，所以有很多类似点。</p>\n<h2 id=\"Lerna\"><a href=\"#Lerna\" class=\"headerlink\" title=\"Lerna\"></a>Lerna</h2><p>快速开始安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx lerna init</span><br></pre></td></tr></table></figure>\n\n<p>PS: npx是什么？</p>\n<ul>\n<li>npx：Node Package Execute 即node包执行器</li>\n<li>npx 是npm v5.2.0版本之后随npm 一起打包安装的一个包执行器。</li>\n<li>它会自动去寻找二进制命令文件且不必全局安装依赖包。</li>\n<li>npx 可以在不指定项目中的确切位置或使用别名的情况下运行正确版本的工具，比如<code>npx lerna init</code>命令会执行去npm源安装<code>lerna-cli</code>命令工具到本地，然后执行<code>lerna init</code>命令</li>\n</ul>\n<p>安装完以后，项目的初始化架构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packages/</span><br><span class=\"line\">    header/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        rollup.config.json</span><br><span class=\"line\">        jest.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">    footer/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        rollup.config.json</span><br><span class=\"line\">        jest.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">    remixapp/</span><br><span class=\"line\">        app/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        public/</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        remix.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">package.json</span><br><span class=\"line\">lerna.json # 需要自己手动新建， 用来描述</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>package.json</code>，去添加一个npm/yarn/pnpm workspace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;root&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;workspaces&quot;: [&quot;packages/*&quot;],</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;lerna&quot;: &quot;6.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><ul>\n<li><code>lerna run xxx</code>： 统一执行所有子项目的scripts命令，如：lerna run build</li>\n<li><code>npx nx graph</code>：查看项目依赖图</li>\n<li><code>npx lerna add-caching</code>：设置子项目的一些缓存设置，会在根目录下生成<code>nx.json</code></li>\n<li><code>npx lerna publish --no-private</code>: 统一发布npm包</li>\n<li><code>npx lerna run xxx --scope=header</code>：允许只针对某个子项目header执行命令</li>\n</ul>\n<p>其他命令可以到官网查看， <a href=\"https://lerna.js.org/docs/api-reference/commands\" target=\"_blank\" rel=\"noopener\">Lerna命令</a></p>\n<h2 id=\"NX\"><a href=\"#NX\" class=\"headerlink\" title=\"NX\"></a>NX</h2><p>官网里定义是：</p>\n<blockquote>\n<p><a href=\"https://nx.dev/\" target=\"_blank\" rel=\"noopener\">NX</a>是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。</p>\n</blockquote>\n<p>实战步骤如下：</p>\n<p>创建一个新工作区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-nx-workspace@latest package-based --preset=npm</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>packages</code>创建自己的子项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package-based/</span><br><span class=\"line\">├── packages/</span><br><span class=\"line\">│   └── is-even/</span><br><span class=\"line\">│       ├── index.ts</span><br><span class=\"line\">│       └── package.json</span><br><span class=\"line\">│   └── is-odd/</span><br><span class=\"line\">│       ├── index.ts</span><br><span class=\"line\">│       └── package.json</span><br><span class=\"line\">├── nx.json</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>接下来就是配置 <code>nx.json</code>，子项目之间的依赖，已经任务执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nx.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;targetDefaults&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &#123;</span><br><span class=\"line\">      &quot;dependsOn&quot;: [&quot;^build&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行构建命令<code>npx nx build is-odd</code> 可以看到要先构建<code>is-event</code>项目</p>\n<p>最后是构建全部项目<code>npx nx run-many --target=build</code></p>\n<h2 id=\"CI-CD构建流程改造\"><a href=\"#CI-CD构建流程改造\" class=\"headerlink\" title=\"CI/CD构建流程改造\"></a>CI/CD构建流程改造</h2><p>这个按照各自团队的CI/CD构建流程去改造，但是主要有以下几点：</p>\n<ul>\n<li>CI/CD流水线职责分离</li>\n<li>统一镜像NPM凭证管理</li>\n<li>手动触发CD流水线发布，使用统一版本进行管理发布</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://monorepo.tools/#what-is-a-monorepo\" target=\"_blank\" rel=\"noopener\">Monorepo Explain</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端的发展很快，自从node.js的出现，打开前端新的大门，npm让js有了自己的包管理能力，能够让前端项目工程化，从而能够处理更加复杂的前端项目。</p>\n<p>但是随之而来的是，同一个项目的npm依赖越来越多，有些是开源的，有些是自研的，尤其在同一个团队，当你开发一个新的npm包的时候，只是为了服务特定几个项目，但是这几个项目不在你管理范围内，当你需要更新的时候需要通知到他们，有时候会出现版本依赖问题，然后反复沟通和测试，最终达到协调。但是下次更新的时候又再次遇到这个问题，重复一次。</p>\n<h1 id=\"npm依赖\"><a href=\"#npm依赖\" class=\"headerlink\" title=\"npm依赖\"></a>npm依赖</h1><h2 id=\"npm是什么\"><a href=\"#npm是什么\" class=\"headerlink\" title=\"npm是什么\"></a>npm是什么</h2><blockquote>\n<p>npm，Node Package Manager的缩写，也就是“Node的包管理器”。<br>npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。</p>\n</blockquote>","more":"<p>通俗的说，npm是管理js包的工具，它包括以下几个部分：</p>\n<ol>\n<li>npm源，存放各类npm包的网站，可以注册，上传npm包</li>\n<li>npm-cli 命令工具，允许你自由下载任何npm包</li>\n</ol>\n<h2 id=\"npm如何管理包\"><a href=\"#npm如何管理包\" class=\"headerlink\" title=\"npm如何管理包\"></a>npm如何管理包</h2><p>那么npm是如何管理包的呢？主要项目下<code>package.json</code>对npm进行描述，主要有以下几个属性：</p>\n<ul>\n<li>name：JavaScript 项目或库的名称。</li>\n<li>version：项目的版本。</li>\n<li>scripts： 当作在项目本地运行的命令行工具</li>\n<li>dependencies：当项目被人依赖的时候，需要安装的npm包，描述：<code>npm包名： npm包版本</code></li>\n<li>devDependencies：本地开发的时候，需要安装的npm包，描述：<code>npm包名： npm包版本</code></li>\n</ul>\n<p>同时<code>package-lock.json</code>文件描述了 npm JavaScript 项目中使用的依赖项的确切版本，确保下次安装项目依赖的npm包升级版本后导致项目无法运行（这个是很多新手安装npm包的时候会遇到的一个错误）。</p>\n<h2 id=\"npm版本\"><a href=\"#npm版本\" class=\"headerlink\" title=\"npm版本\"></a>npm版本</h2><p>npm包版本遵循<code>major.minor.patch</code>版本模型规范，什么是<code>major.minor.patch</code>版本模型规范，下面引用一下说明：</p>\n<blockquote>\n<p>APR版本规范，major是当前的主版本号，minor则是次版本号，patch对应的则是APR的补丁号，同时还有版本所处阶段<code>base</code>, <code>alpha</code>, <code>beta</code>, <code>RC</code>, <code>release</code>。</p>\n</blockquote>\n<p>因此在package.json描述的依赖npm包的版本号，如:<code>~1.0.0</code>，<code>^1.0.0</code>，几个符号代表的意思如下：</p>\n<ul>\n<li><code>^</code>：表示最新的次版本，例如， <code>^1.0.4</code>  可能会安装主版本系列  <code>1</code> 的最新次版本 <code>1.3.0</code>。</li>\n<li><code>〜</code>：表示最新的补丁程序版本，与  <code>^</code>  类似， <code>〜1.0.4</code>  可能会安装次版本系列 <code>1.0</code>  的最新次版本<code>1.0.7</code>。</li>\n</ul>\n<h2 id=\"npm包版本依赖问题\"><a href=\"#npm包版本依赖问题\" class=\"headerlink\" title=\"npm包版本依赖问题\"></a>npm包版本依赖问题</h2><p>即使有<code>package-lock.json</code>或者<code>yarn.lock</code>等约束文件解决项目依赖包的版本的问题，但是当项目越来越庞大，拆分的公共npm包越来越多，这些npm管理难度和数量成正比提升，团队需要面临npm包版本问题也越来越多，尤其当<code>微前端</code>概念提出，当大项目被拆分成N个子项目的时候，团队成员需要面临以下几个问题：</p>\n<ul>\n<li>公共包npm更新了，如何通知到其他子项目依赖的npm包更新版本</li>\n<li>子项目有些公共的代码需要抽象到公共一起维护，是抽离成npm包，但是又需要新起一个项目</li>\n<li>公共npm越来越多，子项目也越拆越多，如何管理这些项目的开发、测试和持续发布</li>\n<li>其他各种开发细节问题…</li>\n</ul>\n<p>因此，大家迫切需要去一个标准去统一维护管理这些项目，因此<code>Monorepo</code>统一项目管理规范，就是我们的最佳选择。</p>\n<h1 id=\"Monorepo\"><a href=\"#Monorepo\" class=\"headerlink\" title=\"Monorepo\"></a>Monorepo</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>Monorepo是包含多个不同项目的单一存储库，具有明确定义的关系。</p>\n</blockquote>\n<p>通俗的讲，<code>Monorepo</code>就是将几个不同项目放到一个git仓库里，通过制定一个大家遵循的管理规范和子项目之间依赖关系。</p>\n<p><code>Monorepo</code>大仓项目与<code>monolithic</code>单体巨石项目还是有很大的区别，下面简单说明：</p>\n<ul>\n<li>Monorepo !== 单体巨石项目，monorepos 简化了代码共享和跨项目重构，它们显着降低了创建库、微服务和微前端的成本，不需要做到一起发布</li>\n<li>能够有效解决子项目与子项目的之间版本依赖关系，而不是单纯将几个项目放在一起形成一堆代码山</li>\n</ul>\n<p>为了更好的了解<code>Monorepo</code>大仓，可以和对立面<code>Polyrepo</code>多个标准式项目 作对比：</p>\n<p><img src=\"/assets/img/monorepo-polyrepo.svg\" alt=\"大仓与多个对比\"></p>\n<h2 id=\"monorepo-工具\"><a href=\"#monorepo-工具\" class=\"headerlink\" title=\"monorepo 工具\"></a>monorepo 工具</h2><p>Monorepos 有很多优势，但要使它们发挥作用，您需要拥有合适的工具。随着工作空间的扩大，工具必须帮助您保持快速、易于理解和管理。</p>\n<p>市面上主流的<code>Monorepo</code>管理工具有：</p>\n<ul>\n<li>Bazel（谷歌）</li>\n<li>Gradle Build Tool（Gradle, Inc）</li>\n<li>Lage（微软）</li>\n<li>Lerna  </li>\n<li>Nx（Nrwl）</li>\n<li>Pants（Pants Build 社区）</li>\n<li>Rush（由 Microsoft)</li>\n<li>Turborepo（由 Vercel）</li>\n</ul>\n<p>工具应该具备以下几点能力：</p>\n<ul>\n<li>本地计算缓存，能够提供本地构建缓存、单元测试缓存等能力</li>\n<li>本地任务编排，能够以正确的顺序并行运行任务</li>\n<li>分布式计算缓存，跨不同环境共享缓存工件的能力。这意味着你的整个组织，包括 CI 代理，永远不会构建或测试相同的东西两次。</li>\n<li>分布式任务执行，在多台机器上分发命令的能力，同时在很大程度上保留在单台机器上运行它的开发人体工程学。</li>\n<li>透明远程执行，在本地开发时在多台机器上执行任何命令的能力。</li>\n<li>检测受影响的项目/包，确定更改可能会影响什么，以仅运行构建/测试受影响的项目。</li>\n<li>工作区分析，无需额外配置即可理解工作区项目图的能力。</li>\n<li>依赖图可视化，可视化项目和/或任务之间的依赖关系。可视化是交互式的，这意味着您可以搜索、过滤、隐藏、聚焦/突出显示和查询图中的节点。</li>\n<li>源码分享，促进分散的源代码片段的共享。</li>\n<li>一致的工具，无论您使用什么来开发项目，如JavaScript 框架、Go、Rust、Java 等，工具都可以帮助您获得一致的体验</li>\n<li>代码生成，本机支持生成代码</li>\n<li>项目限制和可见性，支持定义规则以限制 repo 中的依赖关系。例如，开发人员可以将某些项目标记为他们团队的私有项目，这样其他人就无法依赖它们。开发人员还可以根据使用的技术（例如 React 或 Nest.js）标记项目，并确保后端项目不会导入前端项目。</li>\n</ul>\n<h2 id=\"monorepo单一原则\"><a href=\"#monorepo单一原则\" class=\"headerlink\" title=\"monorepo单一原则\"></a>monorepo单一原则</h2><p>单一原则指的是单一版本(One Version)原则，具体定义如下：</p>\n<blockquote>\n<p>单一版本(One Version)原则，是指在任意时间，代码库内的每一份组件、每一个依赖只有一个版本。</p>\n</blockquote>\n<p>对内部库而言，这意味着使用主干开发（见下），并且必须在主干 HEAD 上依赖。这是一个非常强的约束——这意味着除了终端制品，任何一个内部被依赖的库都不能通过分支发布，而必须保持自己在单仓的主干上一直是发布状态。</p>\n<p>对外部依赖而言，同一个第三方库在单仓中永远只会引入一个版本。</p>\n<p>为什么？</p>\n<p>因为原来的git flow开发流，从feature-&gt;dev-&gt;master，每个分支里面的依赖版本都可能会不一样，从而导致依赖版本难以维护。</p>\n<h2 id=\"monorepo挑战\"><a href=\"#monorepo挑战\" class=\"headerlink\" title=\"monorepo挑战\"></a>monorepo挑战</h2><ul>\n<li>并非所有服务都适用于 monorepos</li>\n<li>需要更复杂的 CI 设置</li>\n<li>需要考虑代码架构大规模的改变</li>\n</ul>\n<h1 id=\"monorepo实战\"><a href=\"#monorepo实战\" class=\"headerlink\" title=\"monorepo实战\"></a>monorepo实战</h1><p>作为前端开发者，<a href=\"https://lerna.js.org\" target=\"_blank\" rel=\"noopener\">Lerna</a>框架是肯定要尝试一番，同时功能比较齐全的<a href>Nx</a>框架要去体验一番。</p>\n<p>但是其实两者的关系非常紧密，都是同一个公司<code>Nrwl</code>开发的，所以有很多类似点。</p>\n<h2 id=\"Lerna\"><a href=\"#Lerna\" class=\"headerlink\" title=\"Lerna\"></a>Lerna</h2><p>快速开始安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx lerna init</span><br></pre></td></tr></table></figure>\n\n<p>PS: npx是什么？</p>\n<ul>\n<li>npx：Node Package Execute 即node包执行器</li>\n<li>npx 是npm v5.2.0版本之后随npm 一起打包安装的一个包执行器。</li>\n<li>它会自动去寻找二进制命令文件且不必全局安装依赖包。</li>\n<li>npx 可以在不指定项目中的确切位置或使用别名的情况下运行正确版本的工具，比如<code>npx lerna init</code>命令会执行去npm源安装<code>lerna-cli</code>命令工具到本地，然后执行<code>lerna init</code>命令</li>\n</ul>\n<p>安装完以后，项目的初始化架构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packages/</span><br><span class=\"line\">    header/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        rollup.config.json</span><br><span class=\"line\">        jest.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">    footer/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        rollup.config.json</span><br><span class=\"line\">        jest.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">    remixapp/</span><br><span class=\"line\">        app/</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        public/</span><br><span class=\"line\">        package.json</span><br><span class=\"line\">        remix.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">package.json</span><br><span class=\"line\">lerna.json # 需要自己手动新建， 用来描述</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>package.json</code>，去添加一个npm/yarn/pnpm workspace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;root&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;workspaces&quot;: [&quot;packages/*&quot;],</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;lerna&quot;: &quot;6.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><ul>\n<li><code>lerna run xxx</code>： 统一执行所有子项目的scripts命令，如：lerna run build</li>\n<li><code>npx nx graph</code>：查看项目依赖图</li>\n<li><code>npx lerna add-caching</code>：设置子项目的一些缓存设置，会在根目录下生成<code>nx.json</code></li>\n<li><code>npx lerna publish --no-private</code>: 统一发布npm包</li>\n<li><code>npx lerna run xxx --scope=header</code>：允许只针对某个子项目header执行命令</li>\n</ul>\n<p>其他命令可以到官网查看， <a href=\"https://lerna.js.org/docs/api-reference/commands\" target=\"_blank\" rel=\"noopener\">Lerna命令</a></p>\n<h2 id=\"NX\"><a href=\"#NX\" class=\"headerlink\" title=\"NX\"></a>NX</h2><p>官网里定义是：</p>\n<blockquote>\n<p><a href=\"https://nx.dev/\" target=\"_blank\" rel=\"noopener\">NX</a>是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。</p>\n</blockquote>\n<p>实战步骤如下：</p>\n<p>创建一个新工作区：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-nx-workspace@latest package-based --preset=npm</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>packages</code>创建自己的子项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package-based/</span><br><span class=\"line\">├── packages/</span><br><span class=\"line\">│   └── is-even/</span><br><span class=\"line\">│       ├── index.ts</span><br><span class=\"line\">│       └── package.json</span><br><span class=\"line\">│   └── is-odd/</span><br><span class=\"line\">│       ├── index.ts</span><br><span class=\"line\">│       └── package.json</span><br><span class=\"line\">├── nx.json</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>接下来就是配置 <code>nx.json</code>，子项目之间的依赖，已经任务执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nx.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;targetDefaults&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &#123;</span><br><span class=\"line\">      &quot;dependsOn&quot;: [&quot;^build&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行构建命令<code>npx nx build is-odd</code> 可以看到要先构建<code>is-event</code>项目</p>\n<p>最后是构建全部项目<code>npx nx run-many --target=build</code></p>\n<h2 id=\"CI-CD构建流程改造\"><a href=\"#CI-CD构建流程改造\" class=\"headerlink\" title=\"CI/CD构建流程改造\"></a>CI/CD构建流程改造</h2><p>这个按照各自团队的CI/CD构建流程去改造，但是主要有以下几点：</p>\n<ul>\n<li>CI/CD流水线职责分离</li>\n<li>统一镜像NPM凭证管理</li>\n<li>手动触发CD流水线发布，使用统一版本进行管理发布</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://monorepo.tools/#what-is-a-monorepo\" target=\"_blank\" rel=\"noopener\">Monorepo Explain</a></p>"},{"title":"如何在页面展示数学公式之Latex语法","date":"2023-01-08T10:00:01.000Z","_content":"\n# 原因\n\n最近在做markdown 算法文章分享，算法肯定会涉及到数学复杂度，比如: $$ O(log_nX) $$ 等数学公式的展示，但是如果写成这样子`lognX`，估计很难准确表达，因此上网搜索了一下数学表达式在前端页面如何展示的相关技术。\n\n# web 数学表达式展示解决方案\n一般需要在web页面展示数学表达式相关技术，基本上都是在线编辑器，但是markdown也算是一种编辑器语法，所以上网收集了主要以下几种\n\n- TeX，前期计算机无法生成数学公式排版或者排版很丑，因此`Donald E. Knuth`设计了一套排版技术，拥有很多计算机的命令或者技术语言\n- LaTeX，是一种基于TeX的实现排版系统，准确的基于TeX的应用系统，已经封装很多公式模板，直接套用即可\n- MathJaX，基于LaTeX实现的JavaScript渲染器， 渲染稍慢，支持更多复杂的表示\n- KaTeX，也基于LaTeX实现的是一个JavaScript库，对比MathJaX，渲染更快，支持若干简写字符，但是本身支持的范围较小\n\n<!-- more -->\n\n# 对比说明\n## MathJaX\n\n> MathJaX 是一个适用所有浏览器的展示数学表达式的js引擎。\n\n官网地址：[https://www.mathjax.org/](https://www.mathjax.org/)\n\n## KaTex\n\n\n> KaTeX 是一个支持在网页上显示 TeX 公式的 JavaScript 库\n\n通俗的说，Tex就是一种数学公式的排版语言规范，KaTeX是以Tex作为基础语言规范的实现版本。\n\n官网地址：[https://katex.org/](https://katex.org/)\n\n## 怎么用\n\n快速使用，这里尝试[demo](/code/latex/index.html)\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>LaTex公式 demo</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css\"\n        integrity=\"sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0\" crossorigin=\"anonymous\">\n\n    <!-- The loading of KaTeX is deferred to speed up page rendering -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js\"\n        integrity=\"sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4\"\n        crossorigin=\"anonymous\"></script>\n\n    <!-- To automatically render math in text elements, include the auto-render extension: -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js\"\n        integrity=\"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\" crossorigin=\"anonymous\"\n        onload=\"renderMathInElement(document.body);\"></script>\n</head>\n\n<body>\n    <p> 对数： <span>$$ log_nX $$</span></p>\n    <p> 统计表达式： <span>$$  \\sum_{i=1}^{n}{X_i} $$</span></p>\n    \n</body>\n\n</html>\n\n```\n\n在gitbook中，你只需要添加相关插件即可：\n\n- `npm install gitbook-plugin-katex`，安装插件\n- 在`book.json`中的`plugins`，新增:`katex`\n- 然后就可以在页面中使用语法`$$ log_nX $$`展示为$$ log_nX $$\n\n在hexo等博客，需要以下步骤：\n\n- 找到主题配置文件：`themes\\landscape\\layout\\_partial\\after-footer.ejs`，添加js文件 `<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js\"></script>`\n- 找到主题配置文件：`themes\\landscape\\layout\\_partial\\after-footer.ejs`，添加css文件 `<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css\">`\n- 后续再安装hexo的katex插件即可 `npm install hexo-katex --save`\n\n\n## LaTeX数学公式编写\n\n简单语法如下：\n\n- `$$ log_nX $$` 对数表达式 $$ O(log_nX) $$ \n- `$$  \\sum_{i=1}^{n}{X_i} $$` 统计表达式 $$  \\sum_{i=1}^{n}{X_i} $$\n\n有个在线编辑网站能帮你快速生成公式，请访问[Latex公式编辑器](https://www.latexlive.com/##)\n\n如果要想学习更多公式，这里分享一些教程：\n\n[LaTeX 公式篇](https://zhuanlan.zhihu.com/p/110756681)\n\n[LaTeX 公式语法速成](https://qyxf.github.io/2020/01/03/latex-formula-beginner)","source":"_posts/today/20230108.md","raw":"---\ntitle: 如何在页面展示数学公式之Latex语法\ndate: 2023-01-08 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 原因\n\n最近在做markdown 算法文章分享，算法肯定会涉及到数学复杂度，比如: $$ O(log_nX) $$ 等数学公式的展示，但是如果写成这样子`lognX`，估计很难准确表达，因此上网搜索了一下数学表达式在前端页面如何展示的相关技术。\n\n# web 数学表达式展示解决方案\n一般需要在web页面展示数学表达式相关技术，基本上都是在线编辑器，但是markdown也算是一种编辑器语法，所以上网收集了主要以下几种\n\n- TeX，前期计算机无法生成数学公式排版或者排版很丑，因此`Donald E. Knuth`设计了一套排版技术，拥有很多计算机的命令或者技术语言\n- LaTeX，是一种基于TeX的实现排版系统，准确的基于TeX的应用系统，已经封装很多公式模板，直接套用即可\n- MathJaX，基于LaTeX实现的JavaScript渲染器， 渲染稍慢，支持更多复杂的表示\n- KaTeX，也基于LaTeX实现的是一个JavaScript库，对比MathJaX，渲染更快，支持若干简写字符，但是本身支持的范围较小\n\n<!-- more -->\n\n# 对比说明\n## MathJaX\n\n> MathJaX 是一个适用所有浏览器的展示数学表达式的js引擎。\n\n官网地址：[https://www.mathjax.org/](https://www.mathjax.org/)\n\n## KaTex\n\n\n> KaTeX 是一个支持在网页上显示 TeX 公式的 JavaScript 库\n\n通俗的说，Tex就是一种数学公式的排版语言规范，KaTeX是以Tex作为基础语言规范的实现版本。\n\n官网地址：[https://katex.org/](https://katex.org/)\n\n## 怎么用\n\n快速使用，这里尝试[demo](/code/latex/index.html)\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>LaTex公式 demo</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css\"\n        integrity=\"sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0\" crossorigin=\"anonymous\">\n\n    <!-- The loading of KaTeX is deferred to speed up page rendering -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js\"\n        integrity=\"sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4\"\n        crossorigin=\"anonymous\"></script>\n\n    <!-- To automatically render math in text elements, include the auto-render extension: -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js\"\n        integrity=\"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\" crossorigin=\"anonymous\"\n        onload=\"renderMathInElement(document.body);\"></script>\n</head>\n\n<body>\n    <p> 对数： <span>$$ log_nX $$</span></p>\n    <p> 统计表达式： <span>$$  \\sum_{i=1}^{n}{X_i} $$</span></p>\n    \n</body>\n\n</html>\n\n```\n\n在gitbook中，你只需要添加相关插件即可：\n\n- `npm install gitbook-plugin-katex`，安装插件\n- 在`book.json`中的`plugins`，新增:`katex`\n- 然后就可以在页面中使用语法`$$ log_nX $$`展示为$$ log_nX $$\n\n在hexo等博客，需要以下步骤：\n\n- 找到主题配置文件：`themes\\landscape\\layout\\_partial\\after-footer.ejs`，添加js文件 `<script src=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js\"></script>`\n- 找到主题配置文件：`themes\\landscape\\layout\\_partial\\after-footer.ejs`，添加css文件 `<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css\">`\n- 后续再安装hexo的katex插件即可 `npm install hexo-katex --save`\n\n\n## LaTeX数学公式编写\n\n简单语法如下：\n\n- `$$ log_nX $$` 对数表达式 $$ O(log_nX) $$ \n- `$$  \\sum_{i=1}^{n}{X_i} $$` 统计表达式 $$  \\sum_{i=1}^{n}{X_i} $$\n\n有个在线编辑网站能帮你快速生成公式，请访问[Latex公式编辑器](https://www.latexlive.com/##)\n\n如果要想学习更多公式，这里分享一些教程：\n\n[LaTeX 公式篇](https://zhuanlan.zhihu.com/p/110756681)\n\n[LaTeX 公式语法速成](https://qyxf.github.io/2020/01/03/latex-formula-beginner)","slug":"today/20230108","published":1,"updated":"2023-01-08T14:23:21.955Z","_id":"cldztf2aa000nnxpcan8jgat1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>最近在做markdown 算法文章分享，算法肯定会涉及到数学复杂度，比如: $$ O(log_nX) $$ 等数学公式的展示，但是如果写成这样子<code>lognX</code>，估计很难准确表达，因此上网搜索了一下数学表达式在前端页面如何展示的相关技术。</p>\n<h1 id=\"web-数学表达式展示解决方案\"><a href=\"#web-数学表达式展示解决方案\" class=\"headerlink\" title=\"web 数学表达式展示解决方案\"></a>web 数学表达式展示解决方案</h1><p>一般需要在web页面展示数学表达式相关技术，基本上都是在线编辑器，但是markdown也算是一种编辑器语法，所以上网收集了主要以下几种</p>\n<ul>\n<li>TeX，前期计算机无法生成数学公式排版或者排版很丑，因此<code>Donald E. Knuth</code>设计了一套排版技术，拥有很多计算机的命令或者技术语言</li>\n<li>LaTeX，是一种基于TeX的实现排版系统，准确的基于TeX的应用系统，已经封装很多公式模板，直接套用即可</li>\n<li>MathJaX，基于LaTeX实现的JavaScript渲染器， 渲染稍慢，支持更多复杂的表示</li>\n<li>KaTeX，也基于LaTeX实现的是一个JavaScript库，对比MathJaX，渲染更快，支持若干简写字符，但是本身支持的范围较小</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"对比说明\"><a href=\"#对比说明\" class=\"headerlink\" title=\"对比说明\"></a>对比说明</h1><h2 id=\"MathJaX\"><a href=\"#MathJaX\" class=\"headerlink\" title=\"MathJaX\"></a>MathJaX</h2><blockquote>\n<p>MathJaX 是一个适用所有浏览器的展示数学表达式的js引擎。</p>\n</blockquote>\n<p>官网地址：<a href=\"https://www.mathjax.org/\" target=\"_blank\" rel=\"noopener\">https://www.mathjax.org/</a></p>\n<h2 id=\"KaTex\"><a href=\"#KaTex\" class=\"headerlink\" title=\"KaTex\"></a>KaTex</h2><blockquote>\n<p>KaTeX 是一个支持在网页上显示 TeX 公式的 JavaScript 库</p>\n</blockquote>\n<p>通俗的说，Tex就是一种数学公式的排版语言规范，KaTeX是以Tex作为基础语言规范的实现版本。</p>\n<p>官网地址：<a href=\"https://katex.org/\" target=\"_blank\" rel=\"noopener\">https://katex.org/</a></p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>快速使用，这里尝试<a href=\"/code/latex/index.html\">demo</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>LaTex公式 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">onload</span>=<span class=\"string\">\"renderMathInElement(document.body);\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 对数： <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>$$ log_nX $$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 统计表达式： <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>$$  \\sum_&#123;i=1&#125;^&#123;n&#125;&#123;X_i&#125; $$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在gitbook中，你只需要添加相关插件即可：</p>\n<ul>\n<li><code>npm install gitbook-plugin-katex</code>，安装插件</li>\n<li>在<code>book.json</code>中的<code>plugins</code>，新增:<code>katex</code></li>\n<li>然后就可以在页面中使用语法<code>$$ log_nX $$</code>展示为$$ log_nX $$</li>\n</ul>\n<p>在hexo等博客，需要以下步骤：</p>\n<ul>\n<li>找到主题配置文件：<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>，添加js文件 <code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>找到主题配置文件：<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>，添加css文件 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css&quot;&gt;</code></li>\n<li>后续再安装hexo的katex插件即可 <code>npm install hexo-katex --save</code></li>\n</ul>\n<h2 id=\"LaTeX数学公式编写\"><a href=\"#LaTeX数学公式编写\" class=\"headerlink\" title=\"LaTeX数学公式编写\"></a>LaTeX数学公式编写</h2><p>简单语法如下：</p>\n<ul>\n<li><code>$$ log_nX $$</code> 对数表达式 $$ O(log_nX) $$ </li>\n<li><code>$$  \\sum_{i=1}^{n}{X_i} $$</code> 统计表达式 $$  \\sum_{i=1}^{n}{X_i} $$</li>\n</ul>\n<p>有个在线编辑网站能帮你快速生成公式，请访问<a href=\"https://www.latexlive.com/##\" target=\"_blank\" rel=\"noopener\">Latex公式编辑器</a></p>\n<p>如果要想学习更多公式，这里分享一些教程：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110756681\" target=\"_blank\" rel=\"noopener\">LaTeX 公式篇</a></p>\n<p><a href=\"https://qyxf.github.io/2020/01/03/latex-formula-beginner\" target=\"_blank\" rel=\"noopener\">LaTeX 公式语法速成</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>最近在做markdown 算法文章分享，算法肯定会涉及到数学复杂度，比如: $$ O(log_nX) $$ 等数学公式的展示，但是如果写成这样子<code>lognX</code>，估计很难准确表达，因此上网搜索了一下数学表达式在前端页面如何展示的相关技术。</p>\n<h1 id=\"web-数学表达式展示解决方案\"><a href=\"#web-数学表达式展示解决方案\" class=\"headerlink\" title=\"web 数学表达式展示解决方案\"></a>web 数学表达式展示解决方案</h1><p>一般需要在web页面展示数学表达式相关技术，基本上都是在线编辑器，但是markdown也算是一种编辑器语法，所以上网收集了主要以下几种</p>\n<ul>\n<li>TeX，前期计算机无法生成数学公式排版或者排版很丑，因此<code>Donald E. Knuth</code>设计了一套排版技术，拥有很多计算机的命令或者技术语言</li>\n<li>LaTeX，是一种基于TeX的实现排版系统，准确的基于TeX的应用系统，已经封装很多公式模板，直接套用即可</li>\n<li>MathJaX，基于LaTeX实现的JavaScript渲染器， 渲染稍慢，支持更多复杂的表示</li>\n<li>KaTeX，也基于LaTeX实现的是一个JavaScript库，对比MathJaX，渲染更快，支持若干简写字符，但是本身支持的范围较小</li>\n</ul>","more":"<h1 id=\"对比说明\"><a href=\"#对比说明\" class=\"headerlink\" title=\"对比说明\"></a>对比说明</h1><h2 id=\"MathJaX\"><a href=\"#MathJaX\" class=\"headerlink\" title=\"MathJaX\"></a>MathJaX</h2><blockquote>\n<p>MathJaX 是一个适用所有浏览器的展示数学表达式的js引擎。</p>\n</blockquote>\n<p>官网地址：<a href=\"https://www.mathjax.org/\" target=\"_blank\" rel=\"noopener\">https://www.mathjax.org/</a></p>\n<h2 id=\"KaTex\"><a href=\"#KaTex\" class=\"headerlink\" title=\"KaTex\"></a>KaTex</h2><blockquote>\n<p>KaTeX 是一个支持在网页上显示 TeX 公式的 JavaScript 库</p>\n</blockquote>\n<p>通俗的说，Tex就是一种数学公式的排版语言规范，KaTeX是以Tex作为基础语言规范的实现版本。</p>\n<p>官网地址：<a href=\"https://katex.org/\" target=\"_blank\" rel=\"noopener\">https://katex.org/</a></p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>快速使用，这里尝试<a href=\"/code/latex/index.html\">demo</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>LaTex公式 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">\"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\"</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">\"anonymous\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">onload</span>=<span class=\"string\">\"renderMathInElement(document.body);\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 对数： <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>$$ log_nX $$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 统计表达式： <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>$$  \\sum_&#123;i=1&#125;^&#123;n&#125;&#123;X_i&#125; $$<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在gitbook中，你只需要添加相关插件即可：</p>\n<ul>\n<li><code>npm install gitbook-plugin-katex</code>，安装插件</li>\n<li>在<code>book.json</code>中的<code>plugins</code>，新增:<code>katex</code></li>\n<li>然后就可以在页面中使用语法<code>$$ log_nX $$</code>展示为$$ log_nX $$</li>\n</ul>\n<p>在hexo等博客，需要以下步骤：</p>\n<ul>\n<li>找到主题配置文件：<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>，添加js文件 <code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>找到主题配置文件：<code>themes\\landscape\\layout\\_partial\\after-footer.ejs</code>，添加css文件 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css&quot;&gt;</code></li>\n<li>后续再安装hexo的katex插件即可 <code>npm install hexo-katex --save</code></li>\n</ul>\n<h2 id=\"LaTeX数学公式编写\"><a href=\"#LaTeX数学公式编写\" class=\"headerlink\" title=\"LaTeX数学公式编写\"></a>LaTeX数学公式编写</h2><p>简单语法如下：</p>\n<ul>\n<li><code>$$ log_nX $$</code> 对数表达式 $$ O(log_nX) $$ </li>\n<li><code>$$  \\sum_{i=1}^{n}{X_i} $$</code> 统计表达式 $$  \\sum_{i=1}^{n}{X_i} $$</li>\n</ul>\n<p>有个在线编辑网站能帮你快速生成公式，请访问<a href=\"https://www.latexlive.com/##\" target=\"_blank\" rel=\"noopener\">Latex公式编辑器</a></p>\n<p>如果要想学习更多公式，这里分享一些教程：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110756681\" target=\"_blank\" rel=\"noopener\">LaTeX 公式篇</a></p>\n<p><a href=\"https://qyxf.github.io/2020/01/03/latex-formula-beginner\" target=\"_blank\" rel=\"noopener\">LaTeX 公式语法速成</a></p>"},{"title":"对CMDB进行一个系统完整认知","date":"2023-01-09T10:00:01.000Z","toc":true,"_content":"\n# 背景\n最近半年，都在开发部门内部的CMDB平台和申请流程，因此对CMDB有了一定了解，但是又不够系统，所以希望写一篇文章能够系统完整的认知一下CMDB，包括以下几点：\n\n- 是什么\n- 能做什么和怎么做\n- 优秀方案\n- 未来方向\n\n<!-- more -->\n# 是什么\n\n> CMDB(Configuration Management Database)，配置管理数据库，主要包含了配置项全生命周期的信息以及配置项之间的关系(包括物理关系、实时通信关系、非实时通信关系和依赖关系)。\n> CMDB存储与管理企业IT架构中设备的各种配置信息，它与所有服务支持和服务交付流程都紧密相联，支持这些流程的运转、发挥配置信息的价值，同时依赖于相关流程保证数据的准确性。\n> CMDB存储目标定义为：配置管理致力于通过维护IT基础设施和IT服务的逻辑模式来协助管理IT服务的经济价值(客户需求、质量和成本的结合)，并将与此相关的信息提供给其他业务流程。它通过识别、监测、控制和提供有关配置项及其版本方面的信息来实现目标。\n> 以上描述来自百度百科[CMDB](https://baike.baidu.com/item/CMDB/5403317)。\n\n按照个人理解，CMDB按照比较容易理解的说法，CMDB主要存储公司内部IT基础架构数据存储和配置，能够数字化IT资产与业务的关联关系。\n\n更加明确的说，CMDB是运维的基础核心系统，包括运维所需要的元数据，同时共享数据管理源。 CMDB存储的数据包括但不限于：\n\n- 逻辑资源，指的是底层物理资源对应的逻辑资源，包括：xxx系统、xxx服务、xxxApp等\n- 物理资源，指的是可供运维人员实际操作的物理资源，包括：服务器(cvm、物理机、容器)，机房、机柜、网络设备、链路资源、配件等\n\n# 能做什么\n\n上面描述CMDB是什么，CMDB到底能做什么呢？或者它对运维有什么作用呢？\n\n这里需要简单介绍几个概念：\n\n- ITSM(IT service management), IT服务管理，主要是给用户提供标准流程完成IT资产交付，和管理这些IT流程的系统\n- ITIL(Information Technology Infrastructure Library)，IT服务管理标准库， 是ITSM最常用的实现方案，侧重于使 IT服务与业务需求保持紧密关联\n- DevOps由英文 Development（开发）和 Operations（运维）组合而成，是开发和运维紧密结合的思想理念，是开发和运维团队之间的流程能够自动化和持续集成、交付，从开发到交付部署形成一个循环的过程。后面我们会单独抽出一个文章做详细了解。\n\n上面的几个概念，只要是IT从业者或多或少都有接触到，那么CMDB在这些系统或者流程中，起到一个数据基石的作用，我们举几个例子：\n\n1. 如果没有CMDB的配置数据，ITSM流程对用户(开发)就很难入手，比如要申请一台机器，流程里会有很多IT专用描述，开发无法快速申请流程\n2. 如果没有CMDB，那么DevOps中要实现自动化持续集成和交付，开发要将服务部署到哪台机器，运维无法得知\n\n那么总结一下，CMDB能做的事情，主要有以下几点：\n\n1. 能数字化IT资产，并且提供到IT资产管理一个可靠的参考数据\n2. 能帮忙快速完成ISM流程，以及更加有效管理ITSM流程\n3. 能将业务与IT资产做关联，实现业务与IT资产的有效管理\n\n# 怎么做\n\n明白CMDB能做什么，那么我们应该如何设计一个合理CMDB呢？\n\n首先，市场上已经存在各色各样的CMDB平台，主要有以下几个：\n\n- [腾讯蓝鲸平台CMDB配置系统](https://bk.tencent.com/docs/document/6.0/142/8600)，基于腾讯蓝鲸平台的CMDB配置系统\n- [ITOP](https://github.com/Combodo/iTop)，一个完整的开源，ITIL，基于Web的服务管理工具，包括完全可定制的CMDB，帮助台系统和文档管理工具。\n- \n怎么开发CMDB平台这里就不做描述，无非几点：\n\n1. 可自由配置的CMDB模型的 管理web界面\n2. 开发标准API接口（主要模型的CRUD），对第三方工具提供服务\n\n## 模型设计\n\n一个可维护的CMDB平台，肯定脱离不了前期模型设计，所以一个良好且能够向前兼容的模型设计至关重要，因此我这边简单罗列了一下模型几大类，以及它们之间的关系：\n\n- 业务模型，这里业务模型可以拆分多级，最多三级，因为三级业务树基本上能够满足大部分业务等级拆分\n- 模块模型，模块即是从开发角度去理解的项目粒度，通俗的说，就是一个单独且完整的项目，\n- 设备模型，就是服务器，包括：虚拟机、物理机、容器等\n- 持续集成相关模型，主要包括：CI(持续集成)、CD(持续交付)等模型\n- 网络架构相关模型，主要包括：网络策略、域名、证书等\n\n再就是需要设计模型与模型之间的关系，这里会很绕，但是为了让大家更加清晰了解CMDB的设计，这里简单绘画了一下：\n\n![](/assets/img/cmdb1.svg)\n\n### 模型生命周期\n\n每个CMDB中模型，都有其生命周期流程，结合ITSM就可以完成实现模型的生命周期状态扭转。\n\n## 注意事项：\n\n** 在CMDB实现阶段：一定要变成运维和运维研发的共同项目，并且具体的配置项管理人要全程参与，比如说需求讨论、测试、上线验收等等（运维研发项目都可以遵循该模式） **\n\n### 导致CMDB失败的因素\n\n1. 在复杂流程上消耗太多的时间---我们是创建一个CMDB库，不是一个流程系统。\n2. 没有指定配置项负责人----确保配置项有人专职维护。\n3. 目标过大，涵盖太多的功能----比如说IT采购和预算管理等等。\n4. 颗粒度不合适----配置合理的CMDB的配置项层次和粒度非常重要。\n5. 存在组织隔阂----CMDB是一个集成体系，靠流程中的每一个人通力协作，而不是某个人。\n\n### 导致CMDB成功的因素\n\n1. 业务导向。比如说我们在CMDB的新的系统中实时加入QR码技术，为了降低资产盘点的工作量。\n2. 能自动发现就自动发现，降低配置管理的成本，但自动发现的信息不能用来做告警。\n3. 配置项的管理员必须全程参与，需求定型、测试及验收等等。\n4. CMDB系统建设完成之后，其他系统必须和他联动。比如说监控、质量、容量等等，用场景驱动配置项的管理。\n5. 流程一定要平台化，不要让流程脱离CMDB存在，比如说搞一个OA流程，这个是很致命的。\n6. CMDB要持续演进，特别是云端资源的管理。\n7. 配置项和流程必须要文档化，后期要进行CMDB培训。\n\n# 未来规划——自动化/智能化/更安全的运维\n\n目前绝大部分的CMDB数据都是走运维人工手动录入，是否能够做到自动化，甚至智能化。\n\n让数据自动化主要靠以下几点：\n\n1. 建立数据生命周期管理，自动化流程驱动数据更新\n2. 与多个运维工具对接，促进数据消费，提高数据流动性\n3. 通过规则校验以及人工审计确保及时发现和修复异常数据\n\n\n依托CMDB的数据基石，能让运维走向智能化，运维的价值在于交付能力，主要：\n\n1. 开发能够随时交付，无需运维过多参与，自动化运维\n2. 实时监控，智能化告警，提前告知开发进行预警\n3. 服务异常自愈，依托CMDB数据，能够自动重启服务完成服务异常自愈\n\n\n# 总结\n\nCMDB其实就是一个数据管理平台，开发技术上难度不大，最大难度在于数据，以下几点：\n\n- 第一要保证数据的准确性\n- 第二要能快速自动化获取数据\n- 第三数据模型以及其关联设计，主要完成这三点\n\n但是完成CMDB数据后，只是迈开自动化/智能化运维的第一步，后面还需要基于CMDB去完成整个DevOps流程自动化/智能化。\n\n\n\n\n\n\n","source":"_posts/today/20230109.md","raw":"---\ntitle: 对CMDB进行一个系统完整认知\ndate: 2023-01-09 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n最近半年，都在开发部门内部的CMDB平台和申请流程，因此对CMDB有了一定了解，但是又不够系统，所以希望写一篇文章能够系统完整的认知一下CMDB，包括以下几点：\n\n- 是什么\n- 能做什么和怎么做\n- 优秀方案\n- 未来方向\n\n<!-- more -->\n# 是什么\n\n> CMDB(Configuration Management Database)，配置管理数据库，主要包含了配置项全生命周期的信息以及配置项之间的关系(包括物理关系、实时通信关系、非实时通信关系和依赖关系)。\n> CMDB存储与管理企业IT架构中设备的各种配置信息，它与所有服务支持和服务交付流程都紧密相联，支持这些流程的运转、发挥配置信息的价值，同时依赖于相关流程保证数据的准确性。\n> CMDB存储目标定义为：配置管理致力于通过维护IT基础设施和IT服务的逻辑模式来协助管理IT服务的经济价值(客户需求、质量和成本的结合)，并将与此相关的信息提供给其他业务流程。它通过识别、监测、控制和提供有关配置项及其版本方面的信息来实现目标。\n> 以上描述来自百度百科[CMDB](https://baike.baidu.com/item/CMDB/5403317)。\n\n按照个人理解，CMDB按照比较容易理解的说法，CMDB主要存储公司内部IT基础架构数据存储和配置，能够数字化IT资产与业务的关联关系。\n\n更加明确的说，CMDB是运维的基础核心系统，包括运维所需要的元数据，同时共享数据管理源。 CMDB存储的数据包括但不限于：\n\n- 逻辑资源，指的是底层物理资源对应的逻辑资源，包括：xxx系统、xxx服务、xxxApp等\n- 物理资源，指的是可供运维人员实际操作的物理资源，包括：服务器(cvm、物理机、容器)，机房、机柜、网络设备、链路资源、配件等\n\n# 能做什么\n\n上面描述CMDB是什么，CMDB到底能做什么呢？或者它对运维有什么作用呢？\n\n这里需要简单介绍几个概念：\n\n- ITSM(IT service management), IT服务管理，主要是给用户提供标准流程完成IT资产交付，和管理这些IT流程的系统\n- ITIL(Information Technology Infrastructure Library)，IT服务管理标准库， 是ITSM最常用的实现方案，侧重于使 IT服务与业务需求保持紧密关联\n- DevOps由英文 Development（开发）和 Operations（运维）组合而成，是开发和运维紧密结合的思想理念，是开发和运维团队之间的流程能够自动化和持续集成、交付，从开发到交付部署形成一个循环的过程。后面我们会单独抽出一个文章做详细了解。\n\n上面的几个概念，只要是IT从业者或多或少都有接触到，那么CMDB在这些系统或者流程中，起到一个数据基石的作用，我们举几个例子：\n\n1. 如果没有CMDB的配置数据，ITSM流程对用户(开发)就很难入手，比如要申请一台机器，流程里会有很多IT专用描述，开发无法快速申请流程\n2. 如果没有CMDB，那么DevOps中要实现自动化持续集成和交付，开发要将服务部署到哪台机器，运维无法得知\n\n那么总结一下，CMDB能做的事情，主要有以下几点：\n\n1. 能数字化IT资产，并且提供到IT资产管理一个可靠的参考数据\n2. 能帮忙快速完成ISM流程，以及更加有效管理ITSM流程\n3. 能将业务与IT资产做关联，实现业务与IT资产的有效管理\n\n# 怎么做\n\n明白CMDB能做什么，那么我们应该如何设计一个合理CMDB呢？\n\n首先，市场上已经存在各色各样的CMDB平台，主要有以下几个：\n\n- [腾讯蓝鲸平台CMDB配置系统](https://bk.tencent.com/docs/document/6.0/142/8600)，基于腾讯蓝鲸平台的CMDB配置系统\n- [ITOP](https://github.com/Combodo/iTop)，一个完整的开源，ITIL，基于Web的服务管理工具，包括完全可定制的CMDB，帮助台系统和文档管理工具。\n- \n怎么开发CMDB平台这里就不做描述，无非几点：\n\n1. 可自由配置的CMDB模型的 管理web界面\n2. 开发标准API接口（主要模型的CRUD），对第三方工具提供服务\n\n## 模型设计\n\n一个可维护的CMDB平台，肯定脱离不了前期模型设计，所以一个良好且能够向前兼容的模型设计至关重要，因此我这边简单罗列了一下模型几大类，以及它们之间的关系：\n\n- 业务模型，这里业务模型可以拆分多级，最多三级，因为三级业务树基本上能够满足大部分业务等级拆分\n- 模块模型，模块即是从开发角度去理解的项目粒度，通俗的说，就是一个单独且完整的项目，\n- 设备模型，就是服务器，包括：虚拟机、物理机、容器等\n- 持续集成相关模型，主要包括：CI(持续集成)、CD(持续交付)等模型\n- 网络架构相关模型，主要包括：网络策略、域名、证书等\n\n再就是需要设计模型与模型之间的关系，这里会很绕，但是为了让大家更加清晰了解CMDB的设计，这里简单绘画了一下：\n\n![](/assets/img/cmdb1.svg)\n\n### 模型生命周期\n\n每个CMDB中模型，都有其生命周期流程，结合ITSM就可以完成实现模型的生命周期状态扭转。\n\n## 注意事项：\n\n** 在CMDB实现阶段：一定要变成运维和运维研发的共同项目，并且具体的配置项管理人要全程参与，比如说需求讨论、测试、上线验收等等（运维研发项目都可以遵循该模式） **\n\n### 导致CMDB失败的因素\n\n1. 在复杂流程上消耗太多的时间---我们是创建一个CMDB库，不是一个流程系统。\n2. 没有指定配置项负责人----确保配置项有人专职维护。\n3. 目标过大，涵盖太多的功能----比如说IT采购和预算管理等等。\n4. 颗粒度不合适----配置合理的CMDB的配置项层次和粒度非常重要。\n5. 存在组织隔阂----CMDB是一个集成体系，靠流程中的每一个人通力协作，而不是某个人。\n\n### 导致CMDB成功的因素\n\n1. 业务导向。比如说我们在CMDB的新的系统中实时加入QR码技术，为了降低资产盘点的工作量。\n2. 能自动发现就自动发现，降低配置管理的成本，但自动发现的信息不能用来做告警。\n3. 配置项的管理员必须全程参与，需求定型、测试及验收等等。\n4. CMDB系统建设完成之后，其他系统必须和他联动。比如说监控、质量、容量等等，用场景驱动配置项的管理。\n5. 流程一定要平台化，不要让流程脱离CMDB存在，比如说搞一个OA流程，这个是很致命的。\n6. CMDB要持续演进，特别是云端资源的管理。\n7. 配置项和流程必须要文档化，后期要进行CMDB培训。\n\n# 未来规划——自动化/智能化/更安全的运维\n\n目前绝大部分的CMDB数据都是走运维人工手动录入，是否能够做到自动化，甚至智能化。\n\n让数据自动化主要靠以下几点：\n\n1. 建立数据生命周期管理，自动化流程驱动数据更新\n2. 与多个运维工具对接，促进数据消费，提高数据流动性\n3. 通过规则校验以及人工审计确保及时发现和修复异常数据\n\n\n依托CMDB的数据基石，能让运维走向智能化，运维的价值在于交付能力，主要：\n\n1. 开发能够随时交付，无需运维过多参与，自动化运维\n2. 实时监控，智能化告警，提前告知开发进行预警\n3. 服务异常自愈，依托CMDB数据，能够自动重启服务完成服务异常自愈\n\n\n# 总结\n\nCMDB其实就是一个数据管理平台，开发技术上难度不大，最大难度在于数据，以下几点：\n\n- 第一要保证数据的准确性\n- 第二要能快速自动化获取数据\n- 第三数据模型以及其关联设计，主要完成这三点\n\n但是完成CMDB数据后，只是迈开自动化/智能化运维的第一步，后面还需要基于CMDB去完成整个DevOps流程自动化/智能化。\n\n\n\n\n\n\n","slug":"today/20230109","published":1,"updated":"2023-01-09T13:47:00.559Z","_id":"cldztf4ms000qnxpcnvksifib","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近半年，都在开发部门内部的CMDB平台和申请流程，因此对CMDB有了一定了解，但是又不够系统，所以希望写一篇文章能够系统完整的认知一下CMDB，包括以下几点：</p>\n<ul>\n<li>是什么</li>\n<li>能做什么和怎么做</li>\n<li>优秀方案</li>\n<li>未来方向</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><blockquote>\n<p>CMDB(Configuration Management Database)，配置管理数据库，主要包含了配置项全生命周期的信息以及配置项之间的关系(包括物理关系、实时通信关系、非实时通信关系和依赖关系)。<br>CMDB存储与管理企业IT架构中设备的各种配置信息，它与所有服务支持和服务交付流程都紧密相联，支持这些流程的运转、发挥配置信息的价值，同时依赖于相关流程保证数据的准确性。<br>CMDB存储目标定义为：配置管理致力于通过维护IT基础设施和IT服务的逻辑模式来协助管理IT服务的经济价值(客户需求、质量和成本的结合)，并将与此相关的信息提供给其他业务流程。它通过识别、监测、控制和提供有关配置项及其版本方面的信息来实现目标。<br>以上描述来自百度百科<a href=\"https://baike.baidu.com/item/CMDB/5403317\" target=\"_blank\" rel=\"noopener\">CMDB</a>。</p>\n</blockquote>\n<p>按照个人理解，CMDB按照比较容易理解的说法，CMDB主要存储公司内部IT基础架构数据存储和配置，能够数字化IT资产与业务的关联关系。</p>\n<p>更加明确的说，CMDB是运维的基础核心系统，包括运维所需要的元数据，同时共享数据管理源。 CMDB存储的数据包括但不限于：</p>\n<ul>\n<li>逻辑资源，指的是底层物理资源对应的逻辑资源，包括：xxx系统、xxx服务、xxxApp等</li>\n<li>物理资源，指的是可供运维人员实际操作的物理资源，包括：服务器(cvm、物理机、容器)，机房、机柜、网络设备、链路资源、配件等</li>\n</ul>\n<h1 id=\"能做什么\"><a href=\"#能做什么\" class=\"headerlink\" title=\"能做什么\"></a>能做什么</h1><p>上面描述CMDB是什么，CMDB到底能做什么呢？或者它对运维有什么作用呢？</p>\n<p>这里需要简单介绍几个概念：</p>\n<ul>\n<li>ITSM(IT service management), IT服务管理，主要是给用户提供标准流程完成IT资产交付，和管理这些IT流程的系统</li>\n<li>ITIL(Information Technology Infrastructure Library)，IT服务管理标准库， 是ITSM最常用的实现方案，侧重于使 IT服务与业务需求保持紧密关联</li>\n<li>DevOps由英文 Development（开发）和 Operations（运维）组合而成，是开发和运维紧密结合的思想理念，是开发和运维团队之间的流程能够自动化和持续集成、交付，从开发到交付部署形成一个循环的过程。后面我们会单独抽出一个文章做详细了解。</li>\n</ul>\n<p>上面的几个概念，只要是IT从业者或多或少都有接触到，那么CMDB在这些系统或者流程中，起到一个数据基石的作用，我们举几个例子：</p>\n<ol>\n<li>如果没有CMDB的配置数据，ITSM流程对用户(开发)就很难入手，比如要申请一台机器，流程里会有很多IT专用描述，开发无法快速申请流程</li>\n<li>如果没有CMDB，那么DevOps中要实现自动化持续集成和交付，开发要将服务部署到哪台机器，运维无法得知</li>\n</ol>\n<p>那么总结一下，CMDB能做的事情，主要有以下几点：</p>\n<ol>\n<li>能数字化IT资产，并且提供到IT资产管理一个可靠的参考数据</li>\n<li>能帮忙快速完成ISM流程，以及更加有效管理ITSM流程</li>\n<li>能将业务与IT资产做关联，实现业务与IT资产的有效管理</li>\n</ol>\n<h1 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h1><p>明白CMDB能做什么，那么我们应该如何设计一个合理CMDB呢？</p>\n<p>首先，市场上已经存在各色各样的CMDB平台，主要有以下几个：</p>\n<ul>\n<li><a href=\"https://bk.tencent.com/docs/document/6.0/142/8600\" target=\"_blank\" rel=\"noopener\">腾讯蓝鲸平台CMDB配置系统</a>，基于腾讯蓝鲸平台的CMDB配置系统</li>\n<li><a href=\"https://github.com/Combodo/iTop\" target=\"_blank\" rel=\"noopener\">ITOP</a>，一个完整的开源，ITIL，基于Web的服务管理工具，包括完全可定制的CMDB，帮助台系统和文档管理工具。</li>\n<li>怎么开发CMDB平台这里就不做描述，无非几点：</li>\n</ul>\n<ol>\n<li>可自由配置的CMDB模型的 管理web界面</li>\n<li>开发标准API接口（主要模型的CRUD），对第三方工具提供服务</li>\n</ol>\n<h2 id=\"模型设计\"><a href=\"#模型设计\" class=\"headerlink\" title=\"模型设计\"></a>模型设计</h2><p>一个可维护的CMDB平台，肯定脱离不了前期模型设计，所以一个良好且能够向前兼容的模型设计至关重要，因此我这边简单罗列了一下模型几大类，以及它们之间的关系：</p>\n<ul>\n<li>业务模型，这里业务模型可以拆分多级，最多三级，因为三级业务树基本上能够满足大部分业务等级拆分</li>\n<li>模块模型，模块即是从开发角度去理解的项目粒度，通俗的说，就是一个单独且完整的项目，</li>\n<li>设备模型，就是服务器，包括：虚拟机、物理机、容器等</li>\n<li>持续集成相关模型，主要包括：CI(持续集成)、CD(持续交付)等模型</li>\n<li>网络架构相关模型，主要包括：网络策略、域名、证书等</li>\n</ul>\n<p>再就是需要设计模型与模型之间的关系，这里会很绕，但是为了让大家更加清晰了解CMDB的设计，这里简单绘画了一下：</p>\n<p><img src=\"/assets/img/cmdb1.svg\" alt></p>\n<h3 id=\"模型生命周期\"><a href=\"#模型生命周期\" class=\"headerlink\" title=\"模型生命周期\"></a>模型生命周期</h3><p>每个CMDB中模型，都有其生命周期流程，结合ITSM就可以完成实现模型的生命周期状态扭转。</p>\n<h2 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h2><p>** 在CMDB实现阶段：一定要变成运维和运维研发的共同项目，并且具体的配置项管理人要全程参与，比如说需求讨论、测试、上线验收等等（运维研发项目都可以遵循该模式） **</p>\n<h3 id=\"导致CMDB失败的因素\"><a href=\"#导致CMDB失败的因素\" class=\"headerlink\" title=\"导致CMDB失败的因素\"></a>导致CMDB失败的因素</h3><ol>\n<li>在复杂流程上消耗太多的时间—我们是创建一个CMDB库，不是一个流程系统。</li>\n<li>没有指定配置项负责人—-确保配置项有人专职维护。</li>\n<li>目标过大，涵盖太多的功能—-比如说IT采购和预算管理等等。</li>\n<li>颗粒度不合适—-配置合理的CMDB的配置项层次和粒度非常重要。</li>\n<li>存在组织隔阂—-CMDB是一个集成体系，靠流程中的每一个人通力协作，而不是某个人。</li>\n</ol>\n<h3 id=\"导致CMDB成功的因素\"><a href=\"#导致CMDB成功的因素\" class=\"headerlink\" title=\"导致CMDB成功的因素\"></a>导致CMDB成功的因素</h3><ol>\n<li>业务导向。比如说我们在CMDB的新的系统中实时加入QR码技术，为了降低资产盘点的工作量。</li>\n<li>能自动发现就自动发现，降低配置管理的成本，但自动发现的信息不能用来做告警。</li>\n<li>配置项的管理员必须全程参与，需求定型、测试及验收等等。</li>\n<li>CMDB系统建设完成之后，其他系统必须和他联动。比如说监控、质量、容量等等，用场景驱动配置项的管理。</li>\n<li>流程一定要平台化，不要让流程脱离CMDB存在，比如说搞一个OA流程，这个是很致命的。</li>\n<li>CMDB要持续演进，特别是云端资源的管理。</li>\n<li>配置项和流程必须要文档化，后期要进行CMDB培训。</li>\n</ol>\n<h1 id=\"未来规划——自动化-智能化-更安全的运维\"><a href=\"#未来规划——自动化-智能化-更安全的运维\" class=\"headerlink\" title=\"未来规划——自动化/智能化/更安全的运维\"></a>未来规划——自动化/智能化/更安全的运维</h1><p>目前绝大部分的CMDB数据都是走运维人工手动录入，是否能够做到自动化，甚至智能化。</p>\n<p>让数据自动化主要靠以下几点：</p>\n<ol>\n<li>建立数据生命周期管理，自动化流程驱动数据更新</li>\n<li>与多个运维工具对接，促进数据消费，提高数据流动性</li>\n<li>通过规则校验以及人工审计确保及时发现和修复异常数据</li>\n</ol>\n<p>依托CMDB的数据基石，能让运维走向智能化，运维的价值在于交付能力，主要：</p>\n<ol>\n<li>开发能够随时交付，无需运维过多参与，自动化运维</li>\n<li>实时监控，智能化告警，提前告知开发进行预警</li>\n<li>服务异常自愈，依托CMDB数据，能够自动重启服务完成服务异常自愈</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CMDB其实就是一个数据管理平台，开发技术上难度不大，最大难度在于数据，以下几点：</p>\n<ul>\n<li>第一要保证数据的准确性</li>\n<li>第二要能快速自动化获取数据</li>\n<li>第三数据模型以及其关联设计，主要完成这三点</li>\n</ul>\n<p>但是完成CMDB数据后，只是迈开自动化/智能化运维的第一步，后面还需要基于CMDB去完成整个DevOps流程自动化/智能化。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近半年，都在开发部门内部的CMDB平台和申请流程，因此对CMDB有了一定了解，但是又不够系统，所以希望写一篇文章能够系统完整的认知一下CMDB，包括以下几点：</p>\n<ul>\n<li>是什么</li>\n<li>能做什么和怎么做</li>\n<li>优秀方案</li>\n<li>未来方向</li>\n</ul>","more":"<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><blockquote>\n<p>CMDB(Configuration Management Database)，配置管理数据库，主要包含了配置项全生命周期的信息以及配置项之间的关系(包括物理关系、实时通信关系、非实时通信关系和依赖关系)。<br>CMDB存储与管理企业IT架构中设备的各种配置信息，它与所有服务支持和服务交付流程都紧密相联，支持这些流程的运转、发挥配置信息的价值，同时依赖于相关流程保证数据的准确性。<br>CMDB存储目标定义为：配置管理致力于通过维护IT基础设施和IT服务的逻辑模式来协助管理IT服务的经济价值(客户需求、质量和成本的结合)，并将与此相关的信息提供给其他业务流程。它通过识别、监测、控制和提供有关配置项及其版本方面的信息来实现目标。<br>以上描述来自百度百科<a href=\"https://baike.baidu.com/item/CMDB/5403317\" target=\"_blank\" rel=\"noopener\">CMDB</a>。</p>\n</blockquote>\n<p>按照个人理解，CMDB按照比较容易理解的说法，CMDB主要存储公司内部IT基础架构数据存储和配置，能够数字化IT资产与业务的关联关系。</p>\n<p>更加明确的说，CMDB是运维的基础核心系统，包括运维所需要的元数据，同时共享数据管理源。 CMDB存储的数据包括但不限于：</p>\n<ul>\n<li>逻辑资源，指的是底层物理资源对应的逻辑资源，包括：xxx系统、xxx服务、xxxApp等</li>\n<li>物理资源，指的是可供运维人员实际操作的物理资源，包括：服务器(cvm、物理机、容器)，机房、机柜、网络设备、链路资源、配件等</li>\n</ul>\n<h1 id=\"能做什么\"><a href=\"#能做什么\" class=\"headerlink\" title=\"能做什么\"></a>能做什么</h1><p>上面描述CMDB是什么，CMDB到底能做什么呢？或者它对运维有什么作用呢？</p>\n<p>这里需要简单介绍几个概念：</p>\n<ul>\n<li>ITSM(IT service management), IT服务管理，主要是给用户提供标准流程完成IT资产交付，和管理这些IT流程的系统</li>\n<li>ITIL(Information Technology Infrastructure Library)，IT服务管理标准库， 是ITSM最常用的实现方案，侧重于使 IT服务与业务需求保持紧密关联</li>\n<li>DevOps由英文 Development（开发）和 Operations（运维）组合而成，是开发和运维紧密结合的思想理念，是开发和运维团队之间的流程能够自动化和持续集成、交付，从开发到交付部署形成一个循环的过程。后面我们会单独抽出一个文章做详细了解。</li>\n</ul>\n<p>上面的几个概念，只要是IT从业者或多或少都有接触到，那么CMDB在这些系统或者流程中，起到一个数据基石的作用，我们举几个例子：</p>\n<ol>\n<li>如果没有CMDB的配置数据，ITSM流程对用户(开发)就很难入手，比如要申请一台机器，流程里会有很多IT专用描述，开发无法快速申请流程</li>\n<li>如果没有CMDB，那么DevOps中要实现自动化持续集成和交付，开发要将服务部署到哪台机器，运维无法得知</li>\n</ol>\n<p>那么总结一下，CMDB能做的事情，主要有以下几点：</p>\n<ol>\n<li>能数字化IT资产，并且提供到IT资产管理一个可靠的参考数据</li>\n<li>能帮忙快速完成ISM流程，以及更加有效管理ITSM流程</li>\n<li>能将业务与IT资产做关联，实现业务与IT资产的有效管理</li>\n</ol>\n<h1 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h1><p>明白CMDB能做什么，那么我们应该如何设计一个合理CMDB呢？</p>\n<p>首先，市场上已经存在各色各样的CMDB平台，主要有以下几个：</p>\n<ul>\n<li><a href=\"https://bk.tencent.com/docs/document/6.0/142/8600\" target=\"_blank\" rel=\"noopener\">腾讯蓝鲸平台CMDB配置系统</a>，基于腾讯蓝鲸平台的CMDB配置系统</li>\n<li><a href=\"https://github.com/Combodo/iTop\" target=\"_blank\" rel=\"noopener\">ITOP</a>，一个完整的开源，ITIL，基于Web的服务管理工具，包括完全可定制的CMDB，帮助台系统和文档管理工具。</li>\n<li>怎么开发CMDB平台这里就不做描述，无非几点：</li>\n</ul>\n<ol>\n<li>可自由配置的CMDB模型的 管理web界面</li>\n<li>开发标准API接口（主要模型的CRUD），对第三方工具提供服务</li>\n</ol>\n<h2 id=\"模型设计\"><a href=\"#模型设计\" class=\"headerlink\" title=\"模型设计\"></a>模型设计</h2><p>一个可维护的CMDB平台，肯定脱离不了前期模型设计，所以一个良好且能够向前兼容的模型设计至关重要，因此我这边简单罗列了一下模型几大类，以及它们之间的关系：</p>\n<ul>\n<li>业务模型，这里业务模型可以拆分多级，最多三级，因为三级业务树基本上能够满足大部分业务等级拆分</li>\n<li>模块模型，模块即是从开发角度去理解的项目粒度，通俗的说，就是一个单独且完整的项目，</li>\n<li>设备模型，就是服务器，包括：虚拟机、物理机、容器等</li>\n<li>持续集成相关模型，主要包括：CI(持续集成)、CD(持续交付)等模型</li>\n<li>网络架构相关模型，主要包括：网络策略、域名、证书等</li>\n</ul>\n<p>再就是需要设计模型与模型之间的关系，这里会很绕，但是为了让大家更加清晰了解CMDB的设计，这里简单绘画了一下：</p>\n<p><img src=\"/assets/img/cmdb1.svg\" alt></p>\n<h3 id=\"模型生命周期\"><a href=\"#模型生命周期\" class=\"headerlink\" title=\"模型生命周期\"></a>模型生命周期</h3><p>每个CMDB中模型，都有其生命周期流程，结合ITSM就可以完成实现模型的生命周期状态扭转。</p>\n<h2 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h2><p>** 在CMDB实现阶段：一定要变成运维和运维研发的共同项目，并且具体的配置项管理人要全程参与，比如说需求讨论、测试、上线验收等等（运维研发项目都可以遵循该模式） **</p>\n<h3 id=\"导致CMDB失败的因素\"><a href=\"#导致CMDB失败的因素\" class=\"headerlink\" title=\"导致CMDB失败的因素\"></a>导致CMDB失败的因素</h3><ol>\n<li>在复杂流程上消耗太多的时间—我们是创建一个CMDB库，不是一个流程系统。</li>\n<li>没有指定配置项负责人—-确保配置项有人专职维护。</li>\n<li>目标过大，涵盖太多的功能—-比如说IT采购和预算管理等等。</li>\n<li>颗粒度不合适—-配置合理的CMDB的配置项层次和粒度非常重要。</li>\n<li>存在组织隔阂—-CMDB是一个集成体系，靠流程中的每一个人通力协作，而不是某个人。</li>\n</ol>\n<h3 id=\"导致CMDB成功的因素\"><a href=\"#导致CMDB成功的因素\" class=\"headerlink\" title=\"导致CMDB成功的因素\"></a>导致CMDB成功的因素</h3><ol>\n<li>业务导向。比如说我们在CMDB的新的系统中实时加入QR码技术，为了降低资产盘点的工作量。</li>\n<li>能自动发现就自动发现，降低配置管理的成本，但自动发现的信息不能用来做告警。</li>\n<li>配置项的管理员必须全程参与，需求定型、测试及验收等等。</li>\n<li>CMDB系统建设完成之后，其他系统必须和他联动。比如说监控、质量、容量等等，用场景驱动配置项的管理。</li>\n<li>流程一定要平台化，不要让流程脱离CMDB存在，比如说搞一个OA流程，这个是很致命的。</li>\n<li>CMDB要持续演进，特别是云端资源的管理。</li>\n<li>配置项和流程必须要文档化，后期要进行CMDB培训。</li>\n</ol>\n<h1 id=\"未来规划——自动化-智能化-更安全的运维\"><a href=\"#未来规划——自动化-智能化-更安全的运维\" class=\"headerlink\" title=\"未来规划——自动化/智能化/更安全的运维\"></a>未来规划——自动化/智能化/更安全的运维</h1><p>目前绝大部分的CMDB数据都是走运维人工手动录入，是否能够做到自动化，甚至智能化。</p>\n<p>让数据自动化主要靠以下几点：</p>\n<ol>\n<li>建立数据生命周期管理，自动化流程驱动数据更新</li>\n<li>与多个运维工具对接，促进数据消费，提高数据流动性</li>\n<li>通过规则校验以及人工审计确保及时发现和修复异常数据</li>\n</ol>\n<p>依托CMDB的数据基石，能让运维走向智能化，运维的价值在于交付能力，主要：</p>\n<ol>\n<li>开发能够随时交付，无需运维过多参与，自动化运维</li>\n<li>实时监控，智能化告警，提前告知开发进行预警</li>\n<li>服务异常自愈，依托CMDB数据，能够自动重启服务完成服务异常自愈</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CMDB其实就是一个数据管理平台，开发技术上难度不大，最大难度在于数据，以下几点：</p>\n<ul>\n<li>第一要保证数据的准确性</li>\n<li>第二要能快速自动化获取数据</li>\n<li>第三数据模型以及其关联设计，主要完成这三点</li>\n</ul>\n<p>但是完成CMDB数据后，只是迈开自动化/智能化运维的第一步，后面还需要基于CMDB去完成整个DevOps流程自动化/智能化。</p>"},{"title":"从egg.js转到nest.js","date":"2023-01-10T10:00:01.000Z","_content":"\n# 背景\n\n进入部门工作后，接触到的node.js服务端框架，是egg.js，后面基于扩展增加了很多插件，比如：@Controller @Service等注解，还有针对egg-framework 定制化部门使用的底层framework。\n\n但是，随着时间的迁移，egg已经不太能满足我们的开发效率和开发模式，主要有以下几点：\n\n- 对typescript支持度不够，这是由于egg.js本身就不是typescript开发\n- egg.js封装web架构，约定大于编码，如：强制将web应用分级为： controller、service、middleware、extend等，自由度相对比较弱，当你需要定制化开发内容，你需要深入了解egg.js的整个运行原理才能实现\n- 虽然部门内部定制化开发 @Controller @Service等注解，减少路由配置，但是这一块插件还存在一些隐藏规则，需要开发注意\n\n当然egg.js运行的web应用还是比较稳定，而且相关插件生态也比较丰富，只是当egg.js迭代更新速度在2020年后就逐步放缓，更不上变化，我们就需要迎接一些新的框架来满足要求。\n\n\n# 框架对比\n\n我从近两年听到或者网上收集的，基于Node.js的框架主要有以下几个：\n\n- 基础框架，基本上还是以express、koa、Fastify.js等为主\n- egg.js，以MVC为架构的web框架\n- nest.js，以Ioc 控制反转作为核心概念的web框架，对typescript支持友好\n- nuxt.js，以Vue.js作为SSR服务端渲染核心的web框架，最新是Nuxt3（以Vue3为核心）\n- next.js，以React.js作为SSR服务端渲染核心的\n- Meteor.js，full-stack javascript平台，最大的特点是当数据发生改变的时候，所有依赖该数据的地方自动发生相应的改变。\n- Fastify.js，号称最快的node.js web框架，特点是内置了基于 JSON schema 的 validation 和 serialization，比JSON.stringify还快的json序列化算法，虽然是借助借助第三方库 ajv。\n- strapi.js，快速生成API接口的web框架，同时实现各种后端所需要的鉴权、权限、文件上传等轮子\n\n<!-- more -->\n\n对比一下，我们主要用来开发后端api接口，不需要SSR，不需要过于重或过于轻量的框架，因此最后挑选了nest.js。\n\n# nest.js\n\n> Nest (NestJS) 是一个用于构建高效、可扩展的Node.js服务器端应用程序的框架。它使用渐进式 JavaScript，构建并完全支持TypeScript（但仍然允许开发人员使用纯 JavaScript 进行编码）并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数式响应式编程）的元素。\n\n术语介绍：\n\n- 什么是渐进式？简单说，就一开始你不需要了解它的全部功能，能快速上手，有些功能特性不用也可以正常使用。\n- OOP 面向对象编程，万物皆可用对象来描述，如： `class Dog{ say(return 'one one!')}`\n- FP 函数式编程，以函数作为入口，而不是去声明一个对象类，如： `say('one one!')`\n- RP 响应式编程，一种面向数据流和变化传播的编程范式，如：`a = 5; b=6; c=a+b; ` 当`a`或`b`变化的时候，`c`会随之变化\n- FRP 函数式响应式编程，依赖数据流的函数式编程，如：`str='one one~'; say(str)`， 当`str`变化，会自动触发`say`\n\n## 基础概念\n\nNest.js的核心是基于IoC控制反转 + DI 依赖注入 去实现类的声明和实例化的。如果你了解过Spring Boot其实很容易上手nest.js。\n\n### Module\nModule 其实是nest.js用来将一个web应用拆分成各个子模块的分类规定，web应用根模块一般叫`app.module.ts`，官方设计图如下：\n\n![](https://docs.nestjs.com/assets/Modules_1.png)\n\nModule应该由以下几个部分组成：\n\n- providers： 允许交给模块实例化的类，包括不限于Service等\n- controllers：必须实例的controller类\n- imports： 模块依赖其他模块\n- exports：模块对外提供的方法类\n\n### Controller\n\nController就一个作用，分割路由，调用处理方法，返回http请求结果。\n\n![](https://docs.nestjs.com/assets/Controllers_1.png)\n\n支持写法：\n\n- `@Controller('test')`\n- `@Get()` `@Post()` `@Put()` `@Del()`代表各种请求方法(http Method)\n- 还支持一些特殊写法： `@Session()`  `@Body(key?: string)` `@Param(key?: string)`\n\n### Provider\n\nProvider其实就是不仅仅是Service层，还包括：Sql的Dao层、工具方法等提供。它和其他层关系如下图：\n\n![](https://docs.nestjs.com/assets/Components_1.png)\n\n写法：\n\n- `@Injectable()` 声明该类是一个Provider，允许其他类实现依赖注入\n- `@Optional()` 允许构造不传\n- `@Inject()` 自动依赖注入\n\n## Middleware\n\nMiddleware中间件，其实和egg.js的中间件概念一样，就是当http请求来了之后，被中间件处理一遍之后才会到对应的Controller层。\n\n![](https://docs.nestjs.com/assets/Middlewares_1.png)\n\n写法：\n\n- `implements NestMiddleware`，必须实现`NestMiddleware`接口，以及内部方法`use(req: Request, res: Response, next: NextFunction)`，同时内部方法必须调用`next`\n- 在`Module`层注册中间件，这里需要可以设置\n\n```ts\nimport { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('cats');\n  }\n}\n```\n\n- 了解 `MiddlewareConsumer`，中间件消费者工具类，主要把中间件加上一些配置项功能，如：`forRoutes`支持路由匹配，`exclude`不包含路由\n- 函数式声明中间件，因为Middleware是基于expres，所以写法与express基本上一致\n\n```ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function logger(req: Request, res: Response, next: NextFunction) {\n  console.log(`Request...`);\n  next();\n};\n\n```\n\n## ExceptionFilter\n\nFilter过滤器，这个应该是所有web框架都具备的功能，拦截用户请求和web返回数据。在Nest.js中，只实现ExeptionFilter，你也可以基于这个去自定义自己的异常过滤器，具体如下图：\n\n![](https://docs.nestjs.com/assets/Filter_1.png)\n\n写法：\n\n- `@Catch(HttpException) class HttpExceptionFilter implements ExceptionFilter` 实现自定义异常过滤器\n- `@UseFilters(new HttpExceptionFilter())` 能给具体接口包裹上一层自定义的异常过滤器\n\n\n## Pipe\n\nPipe 管道流，是指的Http请求里的内容数据流，它支持数据验证、数据转换等功能，有点类似Filter的功能。\n\n写法：\n\n- `@Param('id', ParseIntPipe) id: number`，将参数id转换为number类型\n- `class ValidationPipe implements PipeTransform`自定义 Pipe，同时必须实现方法`transform(value: any, metadata: ArgumentMetadata)`\n- `@UsePipes(new Pipe())`，支持在controller配置自定义的Pipe\n\n## Guard\nGuard 守卫，也是处Http请求中的一层特殊中间件，但是与中间件不同的时候，中间件不知道next()是去哪个执行代码，而Guard则可以获取`ExecutionContext`实例，可以获知整个请求的生命周期和内置内容，通常用来接口登录和权限控制。\n\n![](https://docs.nestjs.com/assets/Guards_1.png)\n\n写法：\n\n- `class AuthGuard implements CanActivate`\n- 必须实现方法`canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean>`\n- 注册使用：`@UseGuards` Controller层使用， `app.useGlobalGuards(new RolesGuard());` 全局注册\n\n## Interceptor\n\nInterceptor是面向切面编程理念影响的概念，它允许你在方法执行前后扩展原有函数功能，如：改变返回结果，扩展基本功能等，常用的场景：添加常规日志。\n\n![](https://docs.nestjs.com/assets/Interceptors_1.png)\n\n写法：\n\n- `class LoggingInterceptor implements NestInterceptor`,自定义实现\n- `intercept(context: ExecutionContext, next: CallHandler): Observable<any>`方法实现，同时需要返回对应结果`next()`\n- 注册使用：`@UseInterceptors(LoggingInterceptor)`可以在类或方法前进行注册， `app.useGlobalInterceptors(new LoggingInterceptor());`全局注册\n\n## 其他\n\n- 自定义参数装饰器`createParamDecorator`，可以从request对象中抽取固定的参数。\n- `applyDecorators` 可以将多个装饰器 方法合在一起验证，然后形成一个新的注装饰器\n\nPS: 装饰器是什么？\n\n- 装饰器在JavaScript中暂时是没有，只有TypeScript才可以实现一种语法糖\n- 装饰器使用 @expression 的形式，其中 expression 必须能够演算为在运行时调用的函数，其中包括装饰声明信息。\n- 自定义装饰器代码如下：\n\n```ts\n// 这是一个装饰器工厂——有助于将用户参数传给装饰器声明\nfunction f() {\n  console.log(\"f(): evaluated\");\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(\"f(): called\");\n  }\n}\n\nfunction g() {\n  console.log(\"g(): evaluated\");\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(\"g(): called\");\n  }\n}\n\nclass C {\n  @f()\n  @g()\n  method() {}\n}\n\n// f(): evaluated\n// g(): evaluated\n// g(): called\n// f(): called\n```\n\n## 生命周期\nNest.js的生命周期分为三个阶段：初始化、运行和终止，下图详细生命周期的各个子阶段：\n\n![](https://docs.nestjs.com/assets/lifecycle-events.png)\n\n允许监听的生命周期函数：\n\n-  `onModuleInit()`, 模块初始化时候调用\n-  `onApplicationBootstrap()`，所有模块都准备好了，但是在web应用正式启用前会被调用\n-  `onModuleDestroy()`，模块准备被停止\n-  `beforeApplicationShutdown()`, web应用准备被停止之前\n-  `onApplicationShutdown()`，web应用被停止之后，在进程退出之前\n\n## 上手实战\n\n### 第一步安装：\n\n```shell\n$ npm i -g @nestjs/cli\n$ nest new project-name --strict\n```\n\n### 生成项目结构\n\n```\nsrc\n|-- app.controller.spec.ts // controller层的单元测试\n|-- app.controller.ts // controller层 控制路由接口层\n|-- app.module.ts // 应用根模块\n|-- app.service.ts // service层 给controller提供各种业务处理方法\n|-- main.ts // 入口文件\n```\n\n### 运行\n\n```shell\n$ yarn\n$ yarn start:dev\n```\n打开 http://localhost:3000 就可以访问了。\n\n后面有篇文章叫[《从nest.js中了解Ioc和DI》](/2023/01/22/today/20220122/)，大家想了解可以去看看。\n\n\n","source":"_posts/today/20230110.md","raw":"---\ntitle: 从egg.js转到nest.js\ndate: 2023-01-10 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n进入部门工作后，接触到的node.js服务端框架，是egg.js，后面基于扩展增加了很多插件，比如：@Controller @Service等注解，还有针对egg-framework 定制化部门使用的底层framework。\n\n但是，随着时间的迁移，egg已经不太能满足我们的开发效率和开发模式，主要有以下几点：\n\n- 对typescript支持度不够，这是由于egg.js本身就不是typescript开发\n- egg.js封装web架构，约定大于编码，如：强制将web应用分级为： controller、service、middleware、extend等，自由度相对比较弱，当你需要定制化开发内容，你需要深入了解egg.js的整个运行原理才能实现\n- 虽然部门内部定制化开发 @Controller @Service等注解，减少路由配置，但是这一块插件还存在一些隐藏规则，需要开发注意\n\n当然egg.js运行的web应用还是比较稳定，而且相关插件生态也比较丰富，只是当egg.js迭代更新速度在2020年后就逐步放缓，更不上变化，我们就需要迎接一些新的框架来满足要求。\n\n\n# 框架对比\n\n我从近两年听到或者网上收集的，基于Node.js的框架主要有以下几个：\n\n- 基础框架，基本上还是以express、koa、Fastify.js等为主\n- egg.js，以MVC为架构的web框架\n- nest.js，以Ioc 控制反转作为核心概念的web框架，对typescript支持友好\n- nuxt.js，以Vue.js作为SSR服务端渲染核心的web框架，最新是Nuxt3（以Vue3为核心）\n- next.js，以React.js作为SSR服务端渲染核心的\n- Meteor.js，full-stack javascript平台，最大的特点是当数据发生改变的时候，所有依赖该数据的地方自动发生相应的改变。\n- Fastify.js，号称最快的node.js web框架，特点是内置了基于 JSON schema 的 validation 和 serialization，比JSON.stringify还快的json序列化算法，虽然是借助借助第三方库 ajv。\n- strapi.js，快速生成API接口的web框架，同时实现各种后端所需要的鉴权、权限、文件上传等轮子\n\n<!-- more -->\n\n对比一下，我们主要用来开发后端api接口，不需要SSR，不需要过于重或过于轻量的框架，因此最后挑选了nest.js。\n\n# nest.js\n\n> Nest (NestJS) 是一个用于构建高效、可扩展的Node.js服务器端应用程序的框架。它使用渐进式 JavaScript，构建并完全支持TypeScript（但仍然允许开发人员使用纯 JavaScript 进行编码）并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数式响应式编程）的元素。\n\n术语介绍：\n\n- 什么是渐进式？简单说，就一开始你不需要了解它的全部功能，能快速上手，有些功能特性不用也可以正常使用。\n- OOP 面向对象编程，万物皆可用对象来描述，如： `class Dog{ say(return 'one one!')}`\n- FP 函数式编程，以函数作为入口，而不是去声明一个对象类，如： `say('one one!')`\n- RP 响应式编程，一种面向数据流和变化传播的编程范式，如：`a = 5; b=6; c=a+b; ` 当`a`或`b`变化的时候，`c`会随之变化\n- FRP 函数式响应式编程，依赖数据流的函数式编程，如：`str='one one~'; say(str)`， 当`str`变化，会自动触发`say`\n\n## 基础概念\n\nNest.js的核心是基于IoC控制反转 + DI 依赖注入 去实现类的声明和实例化的。如果你了解过Spring Boot其实很容易上手nest.js。\n\n### Module\nModule 其实是nest.js用来将一个web应用拆分成各个子模块的分类规定，web应用根模块一般叫`app.module.ts`，官方设计图如下：\n\n![](https://docs.nestjs.com/assets/Modules_1.png)\n\nModule应该由以下几个部分组成：\n\n- providers： 允许交给模块实例化的类，包括不限于Service等\n- controllers：必须实例的controller类\n- imports： 模块依赖其他模块\n- exports：模块对外提供的方法类\n\n### Controller\n\nController就一个作用，分割路由，调用处理方法，返回http请求结果。\n\n![](https://docs.nestjs.com/assets/Controllers_1.png)\n\n支持写法：\n\n- `@Controller('test')`\n- `@Get()` `@Post()` `@Put()` `@Del()`代表各种请求方法(http Method)\n- 还支持一些特殊写法： `@Session()`  `@Body(key?: string)` `@Param(key?: string)`\n\n### Provider\n\nProvider其实就是不仅仅是Service层，还包括：Sql的Dao层、工具方法等提供。它和其他层关系如下图：\n\n![](https://docs.nestjs.com/assets/Components_1.png)\n\n写法：\n\n- `@Injectable()` 声明该类是一个Provider，允许其他类实现依赖注入\n- `@Optional()` 允许构造不传\n- `@Inject()` 自动依赖注入\n\n## Middleware\n\nMiddleware中间件，其实和egg.js的中间件概念一样，就是当http请求来了之后，被中间件处理一遍之后才会到对应的Controller层。\n\n![](https://docs.nestjs.com/assets/Middlewares_1.png)\n\n写法：\n\n- `implements NestMiddleware`，必须实现`NestMiddleware`接口，以及内部方法`use(req: Request, res: Response, next: NextFunction)`，同时内部方法必须调用`next`\n- 在`Module`层注册中间件，这里需要可以设置\n\n```ts\nimport { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('cats');\n  }\n}\n```\n\n- 了解 `MiddlewareConsumer`，中间件消费者工具类，主要把中间件加上一些配置项功能，如：`forRoutes`支持路由匹配，`exclude`不包含路由\n- 函数式声明中间件，因为Middleware是基于expres，所以写法与express基本上一致\n\n```ts\nimport { Request, Response, NextFunction } from 'express';\n\nexport function logger(req: Request, res: Response, next: NextFunction) {\n  console.log(`Request...`);\n  next();\n};\n\n```\n\n## ExceptionFilter\n\nFilter过滤器，这个应该是所有web框架都具备的功能，拦截用户请求和web返回数据。在Nest.js中，只实现ExeptionFilter，你也可以基于这个去自定义自己的异常过滤器，具体如下图：\n\n![](https://docs.nestjs.com/assets/Filter_1.png)\n\n写法：\n\n- `@Catch(HttpException) class HttpExceptionFilter implements ExceptionFilter` 实现自定义异常过滤器\n- `@UseFilters(new HttpExceptionFilter())` 能给具体接口包裹上一层自定义的异常过滤器\n\n\n## Pipe\n\nPipe 管道流，是指的Http请求里的内容数据流，它支持数据验证、数据转换等功能，有点类似Filter的功能。\n\n写法：\n\n- `@Param('id', ParseIntPipe) id: number`，将参数id转换为number类型\n- `class ValidationPipe implements PipeTransform`自定义 Pipe，同时必须实现方法`transform(value: any, metadata: ArgumentMetadata)`\n- `@UsePipes(new Pipe())`，支持在controller配置自定义的Pipe\n\n## Guard\nGuard 守卫，也是处Http请求中的一层特殊中间件，但是与中间件不同的时候，中间件不知道next()是去哪个执行代码，而Guard则可以获取`ExecutionContext`实例，可以获知整个请求的生命周期和内置内容，通常用来接口登录和权限控制。\n\n![](https://docs.nestjs.com/assets/Guards_1.png)\n\n写法：\n\n- `class AuthGuard implements CanActivate`\n- 必须实现方法`canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean>`\n- 注册使用：`@UseGuards` Controller层使用， `app.useGlobalGuards(new RolesGuard());` 全局注册\n\n## Interceptor\n\nInterceptor是面向切面编程理念影响的概念，它允许你在方法执行前后扩展原有函数功能，如：改变返回结果，扩展基本功能等，常用的场景：添加常规日志。\n\n![](https://docs.nestjs.com/assets/Interceptors_1.png)\n\n写法：\n\n- `class LoggingInterceptor implements NestInterceptor`,自定义实现\n- `intercept(context: ExecutionContext, next: CallHandler): Observable<any>`方法实现，同时需要返回对应结果`next()`\n- 注册使用：`@UseInterceptors(LoggingInterceptor)`可以在类或方法前进行注册， `app.useGlobalInterceptors(new LoggingInterceptor());`全局注册\n\n## 其他\n\n- 自定义参数装饰器`createParamDecorator`，可以从request对象中抽取固定的参数。\n- `applyDecorators` 可以将多个装饰器 方法合在一起验证，然后形成一个新的注装饰器\n\nPS: 装饰器是什么？\n\n- 装饰器在JavaScript中暂时是没有，只有TypeScript才可以实现一种语法糖\n- 装饰器使用 @expression 的形式，其中 expression 必须能够演算为在运行时调用的函数，其中包括装饰声明信息。\n- 自定义装饰器代码如下：\n\n```ts\n// 这是一个装饰器工厂——有助于将用户参数传给装饰器声明\nfunction f() {\n  console.log(\"f(): evaluated\");\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(\"f(): called\");\n  }\n}\n\nfunction g() {\n  console.log(\"g(): evaluated\");\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(\"g(): called\");\n  }\n}\n\nclass C {\n  @f()\n  @g()\n  method() {}\n}\n\n// f(): evaluated\n// g(): evaluated\n// g(): called\n// f(): called\n```\n\n## 生命周期\nNest.js的生命周期分为三个阶段：初始化、运行和终止，下图详细生命周期的各个子阶段：\n\n![](https://docs.nestjs.com/assets/lifecycle-events.png)\n\n允许监听的生命周期函数：\n\n-  `onModuleInit()`, 模块初始化时候调用\n-  `onApplicationBootstrap()`，所有模块都准备好了，但是在web应用正式启用前会被调用\n-  `onModuleDestroy()`，模块准备被停止\n-  `beforeApplicationShutdown()`, web应用准备被停止之前\n-  `onApplicationShutdown()`，web应用被停止之后，在进程退出之前\n\n## 上手实战\n\n### 第一步安装：\n\n```shell\n$ npm i -g @nestjs/cli\n$ nest new project-name --strict\n```\n\n### 生成项目结构\n\n```\nsrc\n|-- app.controller.spec.ts // controller层的单元测试\n|-- app.controller.ts // controller层 控制路由接口层\n|-- app.module.ts // 应用根模块\n|-- app.service.ts // service层 给controller提供各种业务处理方法\n|-- main.ts // 入口文件\n```\n\n### 运行\n\n```shell\n$ yarn\n$ yarn start:dev\n```\n打开 http://localhost:3000 就可以访问了。\n\n后面有篇文章叫[《从nest.js中了解Ioc和DI》](/2023/01/22/today/20220122/)，大家想了解可以去看看。\n\n\n","slug":"today/20230110","published":1,"updated":"2023-01-22T14:18:05.276Z","_id":"cldztf8f2000tnxpc5t37zkeb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>进入部门工作后，接触到的node.js服务端框架，是egg.js，后面基于扩展增加了很多插件，比如：@Controller @Service等注解，还有针对egg-framework 定制化部门使用的底层framework。</p>\n<p>但是，随着时间的迁移，egg已经不太能满足我们的开发效率和开发模式，主要有以下几点：</p>\n<ul>\n<li>对typescript支持度不够，这是由于egg.js本身就不是typescript开发</li>\n<li>egg.js封装web架构，约定大于编码，如：强制将web应用分级为： controller、service、middleware、extend等，自由度相对比较弱，当你需要定制化开发内容，你需要深入了解egg.js的整个运行原理才能实现</li>\n<li>虽然部门内部定制化开发 @Controller @Service等注解，减少路由配置，但是这一块插件还存在一些隐藏规则，需要开发注意</li>\n</ul>\n<p>当然egg.js运行的web应用还是比较稳定，而且相关插件生态也比较丰富，只是当egg.js迭代更新速度在2020年后就逐步放缓，更不上变化，我们就需要迎接一些新的框架来满足要求。</p>\n<h1 id=\"框架对比\"><a href=\"#框架对比\" class=\"headerlink\" title=\"框架对比\"></a>框架对比</h1><p>我从近两年听到或者网上收集的，基于Node.js的框架主要有以下几个：</p>\n<ul>\n<li>基础框架，基本上还是以express、koa、Fastify.js等为主</li>\n<li>egg.js，以MVC为架构的web框架</li>\n<li>nest.js，以Ioc 控制反转作为核心概念的web框架，对typescript支持友好</li>\n<li>nuxt.js，以Vue.js作为SSR服务端渲染核心的web框架，最新是Nuxt3（以Vue3为核心）</li>\n<li>next.js，以React.js作为SSR服务端渲染核心的</li>\n<li>Meteor.js，full-stack javascript平台，最大的特点是当数据发生改变的时候，所有依赖该数据的地方自动发生相应的改变。</li>\n<li>Fastify.js，号称最快的node.js web框架，特点是内置了基于 JSON schema 的 validation 和 serialization，比JSON.stringify还快的json序列化算法，虽然是借助借助第三方库 ajv。</li>\n<li>strapi.js，快速生成API接口的web框架，同时实现各种后端所需要的鉴权、权限、文件上传等轮子</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>对比一下，我们主要用来开发后端api接口，不需要SSR，不需要过于重或过于轻量的框架，因此最后挑选了nest.js。</p>\n<h1 id=\"nest-js\"><a href=\"#nest-js\" class=\"headerlink\" title=\"nest.js\"></a>nest.js</h1><blockquote>\n<p>Nest (NestJS) 是一个用于构建高效、可扩展的Node.js服务器端应用程序的框架。它使用渐进式 JavaScript，构建并完全支持TypeScript（但仍然允许开发人员使用纯 JavaScript 进行编码）并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数式响应式编程）的元素。</p>\n</blockquote>\n<p>术语介绍：</p>\n<ul>\n<li>什么是渐进式？简单说，就一开始你不需要了解它的全部功能，能快速上手，有些功能特性不用也可以正常使用。</li>\n<li>OOP 面向对象编程，万物皆可用对象来描述，如： <code>class Dog{ say(return &#39;one one!&#39;)}</code></li>\n<li>FP 函数式编程，以函数作为入口，而不是去声明一个对象类，如： <code>say(&#39;one one!&#39;)</code></li>\n<li>RP 响应式编程，一种面向数据流和变化传播的编程范式，如：<code>a = 5; b=6; c=a+b;</code> 当<code>a</code>或<code>b</code>变化的时候，<code>c</code>会随之变化</li>\n<li>FRP 函数式响应式编程，依赖数据流的函数式编程，如：<code>str=&#39;one one~&#39;; say(str)</code>， 当<code>str</code>变化，会自动触发<code>say</code></li>\n</ul>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>Nest.js的核心是基于IoC控制反转 + DI 依赖注入 去实现类的声明和实例化的。如果你了解过Spring Boot其实很容易上手nest.js。</p>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><p>Module 其实是nest.js用来将一个web应用拆分成各个子模块的分类规定，web应用根模块一般叫<code>app.module.ts</code>，官方设计图如下：</p>\n<p><img src=\"https://docs.nestjs.com/assets/Modules_1.png\" alt></p>\n<p>Module应该由以下几个部分组成：</p>\n<ul>\n<li>providers： 允许交给模块实例化的类，包括不限于Service等</li>\n<li>controllers：必须实例的controller类</li>\n<li>imports： 模块依赖其他模块</li>\n<li>exports：模块对外提供的方法类</li>\n</ul>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><p>Controller就一个作用，分割路由，调用处理方法，返回http请求结果。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Controllers_1.png\" alt></p>\n<p>支持写法：</p>\n<ul>\n<li><code>@Controller(&#39;test&#39;)</code></li>\n<li><code>@Get()</code> <code>@Post()</code> <code>@Put()</code> <code>@Del()</code>代表各种请求方法(http Method)</li>\n<li>还支持一些特殊写法： <code>@Session()</code>  <code>@Body(key?: string)</code> <code>@Param(key?: string)</code></li>\n</ul>\n<h3 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h3><p>Provider其实就是不仅仅是Service层，还包括：Sql的Dao层、工具方法等提供。它和其他层关系如下图：</p>\n<p><img src=\"https://docs.nestjs.com/assets/Components_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>@Injectable()</code> 声明该类是一个Provider，允许其他类实现依赖注入</li>\n<li><code>@Optional()</code> 允许构造不传</li>\n<li><code>@Inject()</code> 自动依赖注入</li>\n</ul>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>Middleware中间件，其实和egg.js的中间件概念一样，就是当http请求来了之后，被中间件处理一遍之后才会到对应的Controller层。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Middlewares_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>implements NestMiddleware</code>，必须实现<code>NestMiddleware</code>接口，以及内部方法<code>use(req: Request, res: Response, next: NextFunction)</code>，同时内部方法必须调用<code>next</code></li>\n<li>在<code>Module</code>层注册中间件，这里需要可以设置</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LoggerMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/middleware/logger.middleware'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CatsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./cats/cats.module'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  imports: [CatsModule],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule <span class=\"keyword\">implements</span> NestModule &#123;</span><br><span class=\"line\">  configure(consumer: MiddlewareConsumer) &#123;</span><br><span class=\"line\">    consumer</span><br><span class=\"line\">      .apply(LoggerMiddleware)</span><br><span class=\"line\">      .forRoutes(<span class=\"string\">'cats'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>了解 <code>MiddlewareConsumer</code>，中间件消费者工具类，主要把中间件加上一些配置项功能，如：<code>forRoutes</code>支持路由匹配，<code>exclude</code>不包含路由</li>\n<li>函数式声明中间件，因为Middleware是基于expres，所以写法与express基本上一致</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Request, Response, NextFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\">req: Request, res: Response, next: NextFunction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Request...`</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ExceptionFilter\"><a href=\"#ExceptionFilter\" class=\"headerlink\" title=\"ExceptionFilter\"></a>ExceptionFilter</h2><p>Filter过滤器，这个应该是所有web框架都具备的功能，拦截用户请求和web返回数据。在Nest.js中，只实现ExeptionFilter，你也可以基于这个去自定义自己的异常过滤器，具体如下图：</p>\n<p><img src=\"https://docs.nestjs.com/assets/Filter_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>@Catch(HttpException) class HttpExceptionFilter implements ExceptionFilter</code> 实现自定义异常过滤器</li>\n<li><code>@UseFilters(new HttpExceptionFilter())</code> 能给具体接口包裹上一层自定义的异常过滤器</li>\n</ul>\n<h2 id=\"Pipe\"><a href=\"#Pipe\" class=\"headerlink\" title=\"Pipe\"></a>Pipe</h2><p>Pipe 管道流，是指的Http请求里的内容数据流，它支持数据验证、数据转换等功能，有点类似Filter的功能。</p>\n<p>写法：</p>\n<ul>\n<li><code>@Param(&#39;id&#39;, ParseIntPipe) id: number</code>，将参数id转换为number类型</li>\n<li><code>class ValidationPipe implements PipeTransform</code>自定义 Pipe，同时必须实现方法<code>transform(value: any, metadata: ArgumentMetadata)</code></li>\n<li><code>@UsePipes(new Pipe())</code>，支持在controller配置自定义的Pipe</li>\n</ul>\n<h2 id=\"Guard\"><a href=\"#Guard\" class=\"headerlink\" title=\"Guard\"></a>Guard</h2><p>Guard 守卫，也是处Http请求中的一层特殊中间件，但是与中间件不同的时候，中间件不知道next()是去哪个执行代码，而Guard则可以获取<code>ExecutionContext</code>实例，可以获知整个请求的生命周期和内置内容，通常用来接口登录和权限控制。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Guards_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>class AuthGuard implements CanActivate</code></li>\n<li>必须实现方法<code>canActivate(context: ExecutionContext): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt;</code></li>\n<li>注册使用：<code>@UseGuards</code> Controller层使用， <code>app.useGlobalGuards(new RolesGuard());</code> 全局注册</li>\n</ul>\n<h2 id=\"Interceptor\"><a href=\"#Interceptor\" class=\"headerlink\" title=\"Interceptor\"></a>Interceptor</h2><p>Interceptor是面向切面编程理念影响的概念，它允许你在方法执行前后扩展原有函数功能，如：改变返回结果，扩展基本功能等，常用的场景：添加常规日志。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Interceptors_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>class LoggingInterceptor implements NestInterceptor</code>,自定义实现</li>\n<li><code>intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt;</code>方法实现，同时需要返回对应结果<code>next()</code></li>\n<li>注册使用：<code>@UseInterceptors(LoggingInterceptor)</code>可以在类或方法前进行注册， <code>app.useGlobalInterceptors(new LoggingInterceptor());</code>全局注册</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>自定义参数装饰器<code>createParamDecorator</code>，可以从request对象中抽取固定的参数。</li>\n<li><code>applyDecorators</code> 可以将多个装饰器 方法合在一起验证，然后形成一个新的注装饰器</li>\n</ul>\n<p>PS: 装饰器是什么？</p>\n<ul>\n<li>装饰器在JavaScript中暂时是没有，只有TypeScript才可以实现一种语法糖</li>\n<li>装饰器使用 @expression 的形式，其中 expression 必须能够演算为在运行时调用的函数，其中包括装饰声明信息。</li>\n<li>自定义装饰器代码如下：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一个装饰器工厂——有助于将用户参数传给装饰器声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"f(): evaluated\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"f(): called\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"g(): evaluated\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"g(): called\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>()</span><br><span class=\"line\">  <span class=\"meta\">@g</span>()</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f(): evaluated</span></span><br><span class=\"line\"><span class=\"comment\">// g(): evaluated</span></span><br><span class=\"line\"><span class=\"comment\">// g(): called</span></span><br><span class=\"line\"><span class=\"comment\">// f(): called</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>Nest.js的生命周期分为三个阶段：初始化、运行和终止，下图详细生命周期的各个子阶段：</p>\n<p><img src=\"https://docs.nestjs.com/assets/lifecycle-events.png\" alt></p>\n<p>允许监听的生命周期函数：</p>\n<ul>\n<li><code>onModuleInit()</code>, 模块初始化时候调用</li>\n<li><code>onApplicationBootstrap()</code>，所有模块都准备好了，但是在web应用正式启用前会被调用</li>\n<li><code>onModuleDestroy()</code>，模块准备被停止</li>\n<li><code>beforeApplicationShutdown()</code>, web应用准备被停止之前</li>\n<li><code>onApplicationShutdown()</code>，web应用被停止之后，在进程退出之前</li>\n</ul>\n<h2 id=\"上手实战\"><a href=\"#上手实战\" class=\"headerlink\" title=\"上手实战\"></a>上手实战</h2><h3 id=\"第一步安装：\"><a href=\"#第一步安装：\" class=\"headerlink\" title=\"第一步安装：\"></a>第一步安装：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm i -g @nestjs/cli</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nest new project-name --strict</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成项目结构\"><a href=\"#生成项目结构\" class=\"headerlink\" title=\"生成项目结构\"></a>生成项目结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">|-- app.controller.spec.ts // controller层的单元测试</span><br><span class=\"line\">|-- app.controller.ts // controller层 控制路由接口层</span><br><span class=\"line\">|-- app.module.ts // 应用根模块</span><br><span class=\"line\">|-- app.service.ts // service层 给controller提供各种业务处理方法</span><br><span class=\"line\">|-- main.ts // 入口文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn start:dev</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a> 就可以访问了。</p>\n<p>后面有篇文章叫<a href=\"/2023/01/22/today/20220122/\">《从nest.js中了解Ioc和DI》</a>，大家想了解可以去看看。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>进入部门工作后，接触到的node.js服务端框架，是egg.js，后面基于扩展增加了很多插件，比如：@Controller @Service等注解，还有针对egg-framework 定制化部门使用的底层framework。</p>\n<p>但是，随着时间的迁移，egg已经不太能满足我们的开发效率和开发模式，主要有以下几点：</p>\n<ul>\n<li>对typescript支持度不够，这是由于egg.js本身就不是typescript开发</li>\n<li>egg.js封装web架构，约定大于编码，如：强制将web应用分级为： controller、service、middleware、extend等，自由度相对比较弱，当你需要定制化开发内容，你需要深入了解egg.js的整个运行原理才能实现</li>\n<li>虽然部门内部定制化开发 @Controller @Service等注解，减少路由配置，但是这一块插件还存在一些隐藏规则，需要开发注意</li>\n</ul>\n<p>当然egg.js运行的web应用还是比较稳定，而且相关插件生态也比较丰富，只是当egg.js迭代更新速度在2020年后就逐步放缓，更不上变化，我们就需要迎接一些新的框架来满足要求。</p>\n<h1 id=\"框架对比\"><a href=\"#框架对比\" class=\"headerlink\" title=\"框架对比\"></a>框架对比</h1><p>我从近两年听到或者网上收集的，基于Node.js的框架主要有以下几个：</p>\n<ul>\n<li>基础框架，基本上还是以express、koa、Fastify.js等为主</li>\n<li>egg.js，以MVC为架构的web框架</li>\n<li>nest.js，以Ioc 控制反转作为核心概念的web框架，对typescript支持友好</li>\n<li>nuxt.js，以Vue.js作为SSR服务端渲染核心的web框架，最新是Nuxt3（以Vue3为核心）</li>\n<li>next.js，以React.js作为SSR服务端渲染核心的</li>\n<li>Meteor.js，full-stack javascript平台，最大的特点是当数据发生改变的时候，所有依赖该数据的地方自动发生相应的改变。</li>\n<li>Fastify.js，号称最快的node.js web框架，特点是内置了基于 JSON schema 的 validation 和 serialization，比JSON.stringify还快的json序列化算法，虽然是借助借助第三方库 ajv。</li>\n<li>strapi.js，快速生成API接口的web框架，同时实现各种后端所需要的鉴权、权限、文件上传等轮子</li>\n</ul>","more":"<p>对比一下，我们主要用来开发后端api接口，不需要SSR，不需要过于重或过于轻量的框架，因此最后挑选了nest.js。</p>\n<h1 id=\"nest-js\"><a href=\"#nest-js\" class=\"headerlink\" title=\"nest.js\"></a>nest.js</h1><blockquote>\n<p>Nest (NestJS) 是一个用于构建高效、可扩展的Node.js服务器端应用程序的框架。它使用渐进式 JavaScript，构建并完全支持TypeScript（但仍然允许开发人员使用纯 JavaScript 进行编码）并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数式响应式编程）的元素。</p>\n</blockquote>\n<p>术语介绍：</p>\n<ul>\n<li>什么是渐进式？简单说，就一开始你不需要了解它的全部功能，能快速上手，有些功能特性不用也可以正常使用。</li>\n<li>OOP 面向对象编程，万物皆可用对象来描述，如： <code>class Dog{ say(return &#39;one one!&#39;)}</code></li>\n<li>FP 函数式编程，以函数作为入口，而不是去声明一个对象类，如： <code>say(&#39;one one!&#39;)</code></li>\n<li>RP 响应式编程，一种面向数据流和变化传播的编程范式，如：<code>a = 5; b=6; c=a+b;</code> 当<code>a</code>或<code>b</code>变化的时候，<code>c</code>会随之变化</li>\n<li>FRP 函数式响应式编程，依赖数据流的函数式编程，如：<code>str=&#39;one one~&#39;; say(str)</code>， 当<code>str</code>变化，会自动触发<code>say</code></li>\n</ul>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>Nest.js的核心是基于IoC控制反转 + DI 依赖注入 去实现类的声明和实例化的。如果你了解过Spring Boot其实很容易上手nest.js。</p>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><p>Module 其实是nest.js用来将一个web应用拆分成各个子模块的分类规定，web应用根模块一般叫<code>app.module.ts</code>，官方设计图如下：</p>\n<p><img src=\"https://docs.nestjs.com/assets/Modules_1.png\" alt></p>\n<p>Module应该由以下几个部分组成：</p>\n<ul>\n<li>providers： 允许交给模块实例化的类，包括不限于Service等</li>\n<li>controllers：必须实例的controller类</li>\n<li>imports： 模块依赖其他模块</li>\n<li>exports：模块对外提供的方法类</li>\n</ul>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><p>Controller就一个作用，分割路由，调用处理方法，返回http请求结果。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Controllers_1.png\" alt></p>\n<p>支持写法：</p>\n<ul>\n<li><code>@Controller(&#39;test&#39;)</code></li>\n<li><code>@Get()</code> <code>@Post()</code> <code>@Put()</code> <code>@Del()</code>代表各种请求方法(http Method)</li>\n<li>还支持一些特殊写法： <code>@Session()</code>  <code>@Body(key?: string)</code> <code>@Param(key?: string)</code></li>\n</ul>\n<h3 id=\"Provider\"><a href=\"#Provider\" class=\"headerlink\" title=\"Provider\"></a>Provider</h3><p>Provider其实就是不仅仅是Service层，还包括：Sql的Dao层、工具方法等提供。它和其他层关系如下图：</p>\n<p><img src=\"https://docs.nestjs.com/assets/Components_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>@Injectable()</code> 声明该类是一个Provider，允许其他类实现依赖注入</li>\n<li><code>@Optional()</code> 允许构造不传</li>\n<li><code>@Inject()</code> 自动依赖注入</li>\n</ul>\n<h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>Middleware中间件，其实和egg.js的中间件概念一样，就是当http请求来了之后，被中间件处理一遍之后才会到对应的Controller层。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Middlewares_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>implements NestMiddleware</code>，必须实现<code>NestMiddleware</code>接口，以及内部方法<code>use(req: Request, res: Response, next: NextFunction)</code>，同时内部方法必须调用<code>next</code></li>\n<li>在<code>Module</code>层注册中间件，这里需要可以设置</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module, NestModule, MiddlewareConsumer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@nestjs/common'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LoggerMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/middleware/logger.middleware'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CatsModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./cats/cats.module'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  imports: [CatsModule],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule <span class=\"keyword\">implements</span> NestModule &#123;</span><br><span class=\"line\">  configure(consumer: MiddlewareConsumer) &#123;</span><br><span class=\"line\">    consumer</span><br><span class=\"line\">      .apply(LoggerMiddleware)</span><br><span class=\"line\">      .forRoutes(<span class=\"string\">'cats'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>了解 <code>MiddlewareConsumer</code>，中间件消费者工具类，主要把中间件加上一些配置项功能，如：<code>forRoutes</code>支持路由匹配，<code>exclude</code>不包含路由</li>\n<li>函数式声明中间件，因为Middleware是基于expres，所以写法与express基本上一致</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Request, Response, NextFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\">req: Request, res: Response, next: NextFunction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Request...`</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ExceptionFilter\"><a href=\"#ExceptionFilter\" class=\"headerlink\" title=\"ExceptionFilter\"></a>ExceptionFilter</h2><p>Filter过滤器，这个应该是所有web框架都具备的功能，拦截用户请求和web返回数据。在Nest.js中，只实现ExeptionFilter，你也可以基于这个去自定义自己的异常过滤器，具体如下图：</p>\n<p><img src=\"https://docs.nestjs.com/assets/Filter_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>@Catch(HttpException) class HttpExceptionFilter implements ExceptionFilter</code> 实现自定义异常过滤器</li>\n<li><code>@UseFilters(new HttpExceptionFilter())</code> 能给具体接口包裹上一层自定义的异常过滤器</li>\n</ul>\n<h2 id=\"Pipe\"><a href=\"#Pipe\" class=\"headerlink\" title=\"Pipe\"></a>Pipe</h2><p>Pipe 管道流，是指的Http请求里的内容数据流，它支持数据验证、数据转换等功能，有点类似Filter的功能。</p>\n<p>写法：</p>\n<ul>\n<li><code>@Param(&#39;id&#39;, ParseIntPipe) id: number</code>，将参数id转换为number类型</li>\n<li><code>class ValidationPipe implements PipeTransform</code>自定义 Pipe，同时必须实现方法<code>transform(value: any, metadata: ArgumentMetadata)</code></li>\n<li><code>@UsePipes(new Pipe())</code>，支持在controller配置自定义的Pipe</li>\n</ul>\n<h2 id=\"Guard\"><a href=\"#Guard\" class=\"headerlink\" title=\"Guard\"></a>Guard</h2><p>Guard 守卫，也是处Http请求中的一层特殊中间件，但是与中间件不同的时候，中间件不知道next()是去哪个执行代码，而Guard则可以获取<code>ExecutionContext</code>实例，可以获知整个请求的生命周期和内置内容，通常用来接口登录和权限控制。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Guards_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>class AuthGuard implements CanActivate</code></li>\n<li>必须实现方法<code>canActivate(context: ExecutionContext): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt;</code></li>\n<li>注册使用：<code>@UseGuards</code> Controller层使用， <code>app.useGlobalGuards(new RolesGuard());</code> 全局注册</li>\n</ul>\n<h2 id=\"Interceptor\"><a href=\"#Interceptor\" class=\"headerlink\" title=\"Interceptor\"></a>Interceptor</h2><p>Interceptor是面向切面编程理念影响的概念，它允许你在方法执行前后扩展原有函数功能，如：改变返回结果，扩展基本功能等，常用的场景：添加常规日志。</p>\n<p><img src=\"https://docs.nestjs.com/assets/Interceptors_1.png\" alt></p>\n<p>写法：</p>\n<ul>\n<li><code>class LoggingInterceptor implements NestInterceptor</code>,自定义实现</li>\n<li><code>intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt;</code>方法实现，同时需要返回对应结果<code>next()</code></li>\n<li>注册使用：<code>@UseInterceptors(LoggingInterceptor)</code>可以在类或方法前进行注册， <code>app.useGlobalInterceptors(new LoggingInterceptor());</code>全局注册</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>自定义参数装饰器<code>createParamDecorator</code>，可以从request对象中抽取固定的参数。</li>\n<li><code>applyDecorators</code> 可以将多个装饰器 方法合在一起验证，然后形成一个新的注装饰器</li>\n</ul>\n<p>PS: 装饰器是什么？</p>\n<ul>\n<li>装饰器在JavaScript中暂时是没有，只有TypeScript才可以实现一种语法糖</li>\n<li>装饰器使用 @expression 的形式，其中 expression 必须能够演算为在运行时调用的函数，其中包括装饰声明信息。</li>\n<li>自定义装饰器代码如下：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一个装饰器工厂——有助于将用户参数传给装饰器声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"f(): evaluated\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"f(): called\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"g(): evaluated\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"g(): called\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">  <span class=\"meta\">@f</span>()</span><br><span class=\"line\">  <span class=\"meta\">@g</span>()</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f(): evaluated</span></span><br><span class=\"line\"><span class=\"comment\">// g(): evaluated</span></span><br><span class=\"line\"><span class=\"comment\">// g(): called</span></span><br><span class=\"line\"><span class=\"comment\">// f(): called</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>Nest.js的生命周期分为三个阶段：初始化、运行和终止，下图详细生命周期的各个子阶段：</p>\n<p><img src=\"https://docs.nestjs.com/assets/lifecycle-events.png\" alt></p>\n<p>允许监听的生命周期函数：</p>\n<ul>\n<li><code>onModuleInit()</code>, 模块初始化时候调用</li>\n<li><code>onApplicationBootstrap()</code>，所有模块都准备好了，但是在web应用正式启用前会被调用</li>\n<li><code>onModuleDestroy()</code>，模块准备被停止</li>\n<li><code>beforeApplicationShutdown()</code>, web应用准备被停止之前</li>\n<li><code>onApplicationShutdown()</code>，web应用被停止之后，在进程退出之前</li>\n</ul>\n<h2 id=\"上手实战\"><a href=\"#上手实战\" class=\"headerlink\" title=\"上手实战\"></a>上手实战</h2><h3 id=\"第一步安装：\"><a href=\"#第一步安装：\" class=\"headerlink\" title=\"第一步安装：\"></a>第一步安装：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm i -g @nestjs/cli</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nest new project-name --strict</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成项目结构\"><a href=\"#生成项目结构\" class=\"headerlink\" title=\"生成项目结构\"></a>生成项目结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">|-- app.controller.spec.ts // controller层的单元测试</span><br><span class=\"line\">|-- app.controller.ts // controller层 控制路由接口层</span><br><span class=\"line\">|-- app.module.ts // 应用根模块</span><br><span class=\"line\">|-- app.service.ts // service层 给controller提供各种业务处理方法</span><br><span class=\"line\">|-- main.ts // 入口文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn start:dev</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a> 就可以访问了。</p>\n<p>后面有篇文章叫<a href=\"/2023/01/22/today/20220122/\">《从nest.js中了解Ioc和DI》</a>，大家想了解可以去看看。</p>"},{"title":"移动端适配方案总结","date":"2023-01-14T10:00:01.000Z","_content":"\n# 背景\n\n由于自己太久没开发移动端的页面，个人觉得移动端开发相比较PC端开发最大的不同，在于需要去适配各种尺寸的手机屏幕，尤其还有1px的问题。\n\n因此需要再次收集一下，除了自己认知(rem适配)以外，是否还有移动端适配的方案吗？\n\n## 问题\n\n移动端存在几类问题，如下所列：\n\n- 1px显示过粗问题\n- 手机屏幕出现刘海屏、滴水屏等，如何适配\n- 如何在不同屏幕，显示正确高清图片\n- meta 的 viewport 值 能否用来适配\n- rem，vw，vh计算单位的区别\n- ...\n\n<!-- more -->\n# 概念\n\n## 像素\n\n> 像素是计算机屏幕上所能显示的最小单位。用来表示图像的单位。\n\n按照我个人理解，把屏幕比做一张白纸，然后像素就是一个点，接着同一水平线上的点形成一条线，水平线和垂直线同时就形成一个画面。\n\n然后对于我们前端开发而言，像素又需要分成几类：\n\n- `设备独立像素`, 俗称`DIP`，你可以理解成我们平时用css像素 又等于 逻辑像素，简单说就是同一个尺寸的屏幕，设备独立像素是一样的，从而减少误解\n- `物理像素`，其实就是我们真实肉眼可见的像素，物理像素 = 分辨率\n- `设备像素比`， `DPR` `devicePixelRatio` = 设备像素 / 设备独立像素，当物理像素和设备独立像素不一样的时候，这个时候就需要一个标准来做适配，利用`DPR`我们能将同样的画面适应不同的屏幕\n- `每英寸像素` `ppi` （pixel per inch），表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像\n\n## 分辨率\n\n> 分辨率指屏幕上像素的数目，一般用水平*垂直，比如：屏幕分辨率为 800* 600， 水平有800个像素点，垂直有600个像素\n\n所以平时我们将2k、4k屏幕，通常指的是水平方向的存放像素超过2000或4000个。\n\n## 视口（viewport）\n> 视口代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI，菜单栏等——即指你正在浏览的文档的那一部分。\n> 视口一般是指用户访问页面时，当前的可视区域范围。通过滚动条滑动，视口可以显示页面的其他部分。\n> 通过 document.documentElement.clientWidth 或 window.innerWidth 可以获取视口宽度。\n\n简单的说，视口就是浏览器肉眼可见的区域，是随时可变化，视口是一个概念，它又可以根据不同情况分为以下几种：\n\n- 布局视口，对于开发来说的一种视口概念，在移动端可以通过 `<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`调整从而将打屏显示的内容完整缩小适配到移动端小屏\n- 视觉视口，是一种针对移动端屏幕提出来的概念，具体是指的屏幕的可见区域，当键盘弹起、浏览器工具栏隐藏等，视觉视口都会随之变化，而布局视口不会\n\n\n\n\n## 布局视口（layout viewport）\n\n> innerHeight 和 innerWidth 所组成的区域通常被认为是布局视口（layout viewport）。浏览器的框架不被认为是视口的一部分。\n\n在PC端的时候， 视口=布局视口=视觉视口。\n\n在移动端的时候，布局视口 = 内容宽度，可以通过`<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`调整，下面举几个例子(移动端为375*667)：\n\n- `<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`， 布局视口=window.innerWidth=980\n- `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>`, 布局视口=window.innerWidth=375\n\n## 视觉视口（visual viewport）\n\n> 视觉视口指当前浏览器中可见的部分，并且可以变化。当使用双指缩放，或键盘在手机上弹出的时候，或者之前隐藏的地址栏变得可见的时候，视觉视口缩小了，但是布局视口却保持不变。\n\n相比较`布局视口`概念，视觉视口是由苹果 乔布斯提出，为了更好的在移动端展示web网页，视觉视口=屏幕的可见区域，下面通过几个例子去认知(移动端为375*667)：\n\n- `<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`，视觉视口=window.screen.width=375\n- `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>`，视觉视口=window.screen.width=375\n\n\n## viewport设置项\n\n`viewport`的设置主要是在移动端配置视口大小，从width宽度，initial-scale缩放等设置属性，具体如下：\n\n- width：控制 viewport 的大小，可以给它指定一个值(正整数)，或者是一个特殊的值(如：device-width 设备独立像素宽度，单位缩放为 1 时)；\n- initial-scale：初始缩放比例，即当页面第一次加载时的缩放比例，为一个数字(可以带小数)；\n- maximum-scale：允许用户缩放到的最大比例，为一个数字(可以带小数)；\n- minimum-scale：允许用户缩放到的最小比例，为一个数字(可以带小数)；\n- user-scalable：是否允许用户手动缩放，值为 \"no\"(不允许) 或 \"yes\"(允许)；\n- height：与 width 相对应(很少使用)。\n\n## 注意项\n\n- iframe的视口等于是其内部高度和宽度的大小。\n- SVG的视口即 SVG 图片的可视区域。\n\n\n# 方案\n\n这些兼容方案都是基于视口不缩放配置才能生效：\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>`\n\n目前市面主流的几种适配方案如下：\n\n- `rem` ，通过一个宽度尺寸作为统一的单位值，然后通过js计算出不同尺寸对比值，得到适配效果\n- `vw` ，一个浏览器支持的单位，利用 CSS 视窗的特性，总宽度为 100vw，每一份为一个单位 1vw，设置 1rem 单位为 10vw\n- `px + calc + clamp`，大漠在2021年提出，根据 CSS 的新特性：css变量、calc()函数、clamp()、@container函数实现\n\n\n## rem方案\n\n`rem`是指的html元素的`font-size`的大小，如：`html{font-size:50px}; 1rem=50px`。\n\n### 实现原理\n\n通过一个具体的例子，更好理解它的原理。比如你拿到一张设计稿为750px宽度的，里面有个长方形为100*200，这个时候需要在不同屏幕去做适配。\n\n\nrem的解决方案思路为：\n\n- 将标准尺寸宽度 750/10= 75px，设置:`html{font-size:75px} 1rem=75px`\n- 将长方形的 100*200，100/75 * 200/75，设置为：`.rectangle{width: 1.33rem;height:2.66rem}`\n- 那么当屏幕的尺寸发生变话的时候， 变成从750减少为375，那么这个时候，设置: `html{font-size:37.5px} 1rem=37.5px`\n- 长方形的css设置无需变化，从而达到适配的效果\n- \n\n所以rem的解决方案就是在web应用在加载的时候，提前计算好rem单位，所以就可以完成适配。\n\n目前主流的方案有：\n\n- [flexible](https://github.com/amfe/lib-flexible)\n- [px2rem](https://github.com/songsiqi/px2rem)\n\n源码实现：\n\n[h5-shipei.js](/code/h5-shipei/flexible.js)\n\nPS: 里面涉及到`pageshow`事件，基本上是因为移动端缓存了web页面，当浏览器历史记录前进或后退的是会触发，可以通过`e.persisted`判断是否从缓存获取\n\n缺点：\n\n- 需要前置js才能实现，根据设备的视窗宽度进行计算，影响性能\n- 在 PC 端浏览破相，一般设置一个最大宽度\n\n## vw方案\n\n### 是什么\n\nvw是css的一种计算单位，定义： \n\n> 1vw 等于1/100的视口宽度 （Viewport Width）\n\n同理vh也是:\n\n> 1vh 等于1/100的视口高度 （Viewport Height）\n\n那么vmax，vmin，我在网上找到比较好解释如下：\n\n> vmin — vmin的值是当前vw和vh中较小的值。\n> vmax — vw和vh中较大的值。\n> 在横竖屏的切换中，十分有用。\n\n### 原理\n\n了解到vw的概念，那么如何利用vw去解决移动端的适配呢？其实和rem方案是一样，具体代码可以如下：\n\n```css\n/* rem 方案 */\nhtml { font-size: width / 100}\ndiv { width: 26.67rem }\n\n/* vw 方案 */\ndiv { width: 26.67vw }\n\n```\n\n已实现的框架方案如下：\n\n[postcss-px-to-viewport](https://github.com/evrone/postcss-px-to-viewport/blob/master/README_CN.md)\n\n利用打包编译过程，将设置好的px单位转换为vw或vh，具体使用可以看使用文档。\n\n缺点：\n\n- 和rem一样，容易在pc端适配错误，可以用@media媒体查询去做样式兼容\n\n\n**后续添加**\n\n如果利用flex/grid布局，加上vw、vh单位，是否可以做到自适应布局呢？\n\n答案是肯定，而且相对而言会比其他方案，会更加容易开发些，实现步骤如下：\n\n- 利用flex弹性布局，加上vw设置flex弹性盒子的宽度，从而做到不同宽度屏幕，是否换行或者垂直布局\n\n\n后续可以专门写个文章用来描述flex布局的原理。\n\n## px + calc + clamp\n\n### 是什么\n\n`calc()` 此 CSS 函数允许在声明 CSS 属性值时执行一些计算。 支持  + ， - ， / ,* 等运算。\n\n```css\n/* property: calc(expression) */\nwidth: calc(100% - 80px);\n```\n\n`clamp()` 函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。它接收三个参数：最小值、首选值、最大值。\n\n```css\nfont-size: clamp(1rem, 2.5vw, 2rem); \n```\n- 当`2.5vw`大于`2rem`，使用2rem\n- 当`2.5vw`小于`1rem`，使用1rem\n- 其他使用`2.5vw`单位\n\n### 原理\n\n了解到上面css两个函数，如果通过只用px单位去做适配呢？原理步骤如下：\n\n- 假设我们拿到的设计稿750px宽度，那么这个时候有个长方体是200*100\n- 利用css变量，设置一个首先值，然后计算出去其他尺寸所需的最大值、最小值，设置clamp()\n- 同时利用calc()去计算偏差值\n\n\n缺点：\n- calc 和clamp 函数在浏览器支持度还不够\n- 需要了解这套方案还需要较深的技术方案\n\n# 1px高清显示问题\n\n1像素问题： 1像素指在 Retina 屏显示 1单位物理像素\n\n- DPR = 1，此时 1 物理像素 等于 1 CSS 像素\n- DPR = 2，此时 1 物理像素等于 0.5 CSS 像素\n- border-width: 1px，这里的 1px 其实是 1 CSS 像素宽度，等于 2 物理像素，设计师其实想要的是 border-width: 0.5px\nDPR = 3，此时 1 物理像素等于 0.33 CSS 像素。设计师想要的是 border-width: 0.33px\n\n解决方案：\n\n- 渐变实现 ： background-image: linear-gradient(to top, ,,,)\n- 使用缩放实现：transform: scaleY(0.333)\n- 使用图片实现：base64\n- 使用 SVG 实现：嵌入 background url\n- border-image，低端机下支持度不好\n\n以上方案都是基于媒体查询解决的\n```css\n@media only screen and (-webkit-min-device-pixel-ratio: 2),\n    only screen and (min-device-pixel-ratio: 2) {}\n@media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min-device-pixel-ratio: 3) {\n        \n}\n```\n\n# 媒体查询\n\n> 媒体查询（Media queries）非常实用，尤其是当你想要根据设备的大致类型（如打印设备与带屏幕的设备）或者特定的特征和设备参数（例如屏幕分辨率和浏览器视窗宽度）来修改网站或应用程序时。\n\n## 使用\n\n一般有几种用法，如下所示：\n\n- 通过 `@media` 和 `@import at-rules` 用CSS 装饰样式\n- 用 `media=` 属性为`<style>, <link>, <source>`和其他HTML元素指定特定的媒体类型\n- 使用`Window.matchMedia() `和 `MediaQueryList.addListener()` 方法来测试和监控媒体状态\n\n\nCSS装饰样式用法\n```css\n@media screen, print { ... }\n```\n\nHTML元素引入\n```html\n<link rel=\"stylesheet\" src=\"styles.css\" media=\"screen\" />\n<link rel=\"stylesheet\" src=\"styles.css\" media=\"print\" />\n```\n\njs用法\n```javascript\nlet mql = window.matchMedia('(max-width: 600px)');\ndocument.querySelector(\".mq-value\").innerText = mql.matches;\n\nvar mql = window.matchMedia('(max-width: 600px)');\n\nfunction screenTest(e) {\n  if (e.matches) {\n    /* the viewport is 600 pixels wide or less */\n    para.textContent = 'This is a narrow screen — less than 600px wide.';\n    document.body.style.backgroundColor = 'red';\n  } else {\n    /* the viewport is more than than 600 pixels wide */\n    para.textContent = 'This is a wide screen — more than 600px wide.';\n    document.body.style.backgroundColor = 'blue';\n  }\n}\n\nmql.addListener(screenTest);\n```\n\n# 图片高清问题\n\n图片高清问题，一般是指的：不同 DPR 下图片的高清解决方案。\n\n这种问题解决方案，通常是利用媒体查询+提供不同尺寸的图片去显示。\n\n# 总结\n\n移动端适配方案，结合开发中，大家都是直接写px，然后利用编译过程的进行转换，比如: `px2rem` ，`px2vw`。\n\n再就是排版问题，不同屏幕问题需要做自动排版优化方案，这个需要后面去研究一下[《如何正确的使用 CSS Clamp 进行响应式排版》](https://news.sangniao.com/p/1729687518)。\n","source":"_posts/today/20230111.md","raw":"---\ntitle: 移动端适配方案总结\ndate: 2023-01-14 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n由于自己太久没开发移动端的页面，个人觉得移动端开发相比较PC端开发最大的不同，在于需要去适配各种尺寸的手机屏幕，尤其还有1px的问题。\n\n因此需要再次收集一下，除了自己认知(rem适配)以外，是否还有移动端适配的方案吗？\n\n## 问题\n\n移动端存在几类问题，如下所列：\n\n- 1px显示过粗问题\n- 手机屏幕出现刘海屏、滴水屏等，如何适配\n- 如何在不同屏幕，显示正确高清图片\n- meta 的 viewport 值 能否用来适配\n- rem，vw，vh计算单位的区别\n- ...\n\n<!-- more -->\n# 概念\n\n## 像素\n\n> 像素是计算机屏幕上所能显示的最小单位。用来表示图像的单位。\n\n按照我个人理解，把屏幕比做一张白纸，然后像素就是一个点，接着同一水平线上的点形成一条线，水平线和垂直线同时就形成一个画面。\n\n然后对于我们前端开发而言，像素又需要分成几类：\n\n- `设备独立像素`, 俗称`DIP`，你可以理解成我们平时用css像素 又等于 逻辑像素，简单说就是同一个尺寸的屏幕，设备独立像素是一样的，从而减少误解\n- `物理像素`，其实就是我们真实肉眼可见的像素，物理像素 = 分辨率\n- `设备像素比`， `DPR` `devicePixelRatio` = 设备像素 / 设备独立像素，当物理像素和设备独立像素不一样的时候，这个时候就需要一个标准来做适配，利用`DPR`我们能将同样的画面适应不同的屏幕\n- `每英寸像素` `ppi` （pixel per inch），表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像\n\n## 分辨率\n\n> 分辨率指屏幕上像素的数目，一般用水平*垂直，比如：屏幕分辨率为 800* 600， 水平有800个像素点，垂直有600个像素\n\n所以平时我们将2k、4k屏幕，通常指的是水平方向的存放像素超过2000或4000个。\n\n## 视口（viewport）\n> 视口代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI，菜单栏等——即指你正在浏览的文档的那一部分。\n> 视口一般是指用户访问页面时，当前的可视区域范围。通过滚动条滑动，视口可以显示页面的其他部分。\n> 通过 document.documentElement.clientWidth 或 window.innerWidth 可以获取视口宽度。\n\n简单的说，视口就是浏览器肉眼可见的区域，是随时可变化，视口是一个概念，它又可以根据不同情况分为以下几种：\n\n- 布局视口，对于开发来说的一种视口概念，在移动端可以通过 `<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`调整从而将打屏显示的内容完整缩小适配到移动端小屏\n- 视觉视口，是一种针对移动端屏幕提出来的概念，具体是指的屏幕的可见区域，当键盘弹起、浏览器工具栏隐藏等，视觉视口都会随之变化，而布局视口不会\n\n\n\n\n## 布局视口（layout viewport）\n\n> innerHeight 和 innerWidth 所组成的区域通常被认为是布局视口（layout viewport）。浏览器的框架不被认为是视口的一部分。\n\n在PC端的时候， 视口=布局视口=视觉视口。\n\n在移动端的时候，布局视口 = 内容宽度，可以通过`<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`调整，下面举几个例子(移动端为375*667)：\n\n- `<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`， 布局视口=window.innerWidth=980\n- `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>`, 布局视口=window.innerWidth=375\n\n## 视觉视口（visual viewport）\n\n> 视觉视口指当前浏览器中可见的部分，并且可以变化。当使用双指缩放，或键盘在手机上弹出的时候，或者之前隐藏的地址栏变得可见的时候，视觉视口缩小了，但是布局视口却保持不变。\n\n相比较`布局视口`概念，视觉视口是由苹果 乔布斯提出，为了更好的在移动端展示web网页，视觉视口=屏幕的可见区域，下面通过几个例子去认知(移动端为375*667)：\n\n- `<meta name=\"viewport\" content=\"width=980, initial-scale=1.0\"></meta>`，视觉视口=window.screen.width=375\n- `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>`，视觉视口=window.screen.width=375\n\n\n## viewport设置项\n\n`viewport`的设置主要是在移动端配置视口大小，从width宽度，initial-scale缩放等设置属性，具体如下：\n\n- width：控制 viewport 的大小，可以给它指定一个值(正整数)，或者是一个特殊的值(如：device-width 设备独立像素宽度，单位缩放为 1 时)；\n- initial-scale：初始缩放比例，即当页面第一次加载时的缩放比例，为一个数字(可以带小数)；\n- maximum-scale：允许用户缩放到的最大比例，为一个数字(可以带小数)；\n- minimum-scale：允许用户缩放到的最小比例，为一个数字(可以带小数)；\n- user-scalable：是否允许用户手动缩放，值为 \"no\"(不允许) 或 \"yes\"(允许)；\n- height：与 width 相对应(很少使用)。\n\n## 注意项\n\n- iframe的视口等于是其内部高度和宽度的大小。\n- SVG的视口即 SVG 图片的可视区域。\n\n\n# 方案\n\n这些兼容方案都是基于视口不缩放配置才能生效：\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>`\n\n目前市面主流的几种适配方案如下：\n\n- `rem` ，通过一个宽度尺寸作为统一的单位值，然后通过js计算出不同尺寸对比值，得到适配效果\n- `vw` ，一个浏览器支持的单位，利用 CSS 视窗的特性，总宽度为 100vw，每一份为一个单位 1vw，设置 1rem 单位为 10vw\n- `px + calc + clamp`，大漠在2021年提出，根据 CSS 的新特性：css变量、calc()函数、clamp()、@container函数实现\n\n\n## rem方案\n\n`rem`是指的html元素的`font-size`的大小，如：`html{font-size:50px}; 1rem=50px`。\n\n### 实现原理\n\n通过一个具体的例子，更好理解它的原理。比如你拿到一张设计稿为750px宽度的，里面有个长方形为100*200，这个时候需要在不同屏幕去做适配。\n\n\nrem的解决方案思路为：\n\n- 将标准尺寸宽度 750/10= 75px，设置:`html{font-size:75px} 1rem=75px`\n- 将长方形的 100*200，100/75 * 200/75，设置为：`.rectangle{width: 1.33rem;height:2.66rem}`\n- 那么当屏幕的尺寸发生变话的时候， 变成从750减少为375，那么这个时候，设置: `html{font-size:37.5px} 1rem=37.5px`\n- 长方形的css设置无需变化，从而达到适配的效果\n- \n\n所以rem的解决方案就是在web应用在加载的时候，提前计算好rem单位，所以就可以完成适配。\n\n目前主流的方案有：\n\n- [flexible](https://github.com/amfe/lib-flexible)\n- [px2rem](https://github.com/songsiqi/px2rem)\n\n源码实现：\n\n[h5-shipei.js](/code/h5-shipei/flexible.js)\n\nPS: 里面涉及到`pageshow`事件，基本上是因为移动端缓存了web页面，当浏览器历史记录前进或后退的是会触发，可以通过`e.persisted`判断是否从缓存获取\n\n缺点：\n\n- 需要前置js才能实现，根据设备的视窗宽度进行计算，影响性能\n- 在 PC 端浏览破相，一般设置一个最大宽度\n\n## vw方案\n\n### 是什么\n\nvw是css的一种计算单位，定义： \n\n> 1vw 等于1/100的视口宽度 （Viewport Width）\n\n同理vh也是:\n\n> 1vh 等于1/100的视口高度 （Viewport Height）\n\n那么vmax，vmin，我在网上找到比较好解释如下：\n\n> vmin — vmin的值是当前vw和vh中较小的值。\n> vmax — vw和vh中较大的值。\n> 在横竖屏的切换中，十分有用。\n\n### 原理\n\n了解到vw的概念，那么如何利用vw去解决移动端的适配呢？其实和rem方案是一样，具体代码可以如下：\n\n```css\n/* rem 方案 */\nhtml { font-size: width / 100}\ndiv { width: 26.67rem }\n\n/* vw 方案 */\ndiv { width: 26.67vw }\n\n```\n\n已实现的框架方案如下：\n\n[postcss-px-to-viewport](https://github.com/evrone/postcss-px-to-viewport/blob/master/README_CN.md)\n\n利用打包编译过程，将设置好的px单位转换为vw或vh，具体使用可以看使用文档。\n\n缺点：\n\n- 和rem一样，容易在pc端适配错误，可以用@media媒体查询去做样式兼容\n\n\n**后续添加**\n\n如果利用flex/grid布局，加上vw、vh单位，是否可以做到自适应布局呢？\n\n答案是肯定，而且相对而言会比其他方案，会更加容易开发些，实现步骤如下：\n\n- 利用flex弹性布局，加上vw设置flex弹性盒子的宽度，从而做到不同宽度屏幕，是否换行或者垂直布局\n\n\n后续可以专门写个文章用来描述flex布局的原理。\n\n## px + calc + clamp\n\n### 是什么\n\n`calc()` 此 CSS 函数允许在声明 CSS 属性值时执行一些计算。 支持  + ， - ， / ,* 等运算。\n\n```css\n/* property: calc(expression) */\nwidth: calc(100% - 80px);\n```\n\n`clamp()` 函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。它接收三个参数：最小值、首选值、最大值。\n\n```css\nfont-size: clamp(1rem, 2.5vw, 2rem); \n```\n- 当`2.5vw`大于`2rem`，使用2rem\n- 当`2.5vw`小于`1rem`，使用1rem\n- 其他使用`2.5vw`单位\n\n### 原理\n\n了解到上面css两个函数，如果通过只用px单位去做适配呢？原理步骤如下：\n\n- 假设我们拿到的设计稿750px宽度，那么这个时候有个长方体是200*100\n- 利用css变量，设置一个首先值，然后计算出去其他尺寸所需的最大值、最小值，设置clamp()\n- 同时利用calc()去计算偏差值\n\n\n缺点：\n- calc 和clamp 函数在浏览器支持度还不够\n- 需要了解这套方案还需要较深的技术方案\n\n# 1px高清显示问题\n\n1像素问题： 1像素指在 Retina 屏显示 1单位物理像素\n\n- DPR = 1，此时 1 物理像素 等于 1 CSS 像素\n- DPR = 2，此时 1 物理像素等于 0.5 CSS 像素\n- border-width: 1px，这里的 1px 其实是 1 CSS 像素宽度，等于 2 物理像素，设计师其实想要的是 border-width: 0.5px\nDPR = 3，此时 1 物理像素等于 0.33 CSS 像素。设计师想要的是 border-width: 0.33px\n\n解决方案：\n\n- 渐变实现 ： background-image: linear-gradient(to top, ,,,)\n- 使用缩放实现：transform: scaleY(0.333)\n- 使用图片实现：base64\n- 使用 SVG 实现：嵌入 background url\n- border-image，低端机下支持度不好\n\n以上方案都是基于媒体查询解决的\n```css\n@media only screen and (-webkit-min-device-pixel-ratio: 2),\n    only screen and (min-device-pixel-ratio: 2) {}\n@media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min-device-pixel-ratio: 3) {\n        \n}\n```\n\n# 媒体查询\n\n> 媒体查询（Media queries）非常实用，尤其是当你想要根据设备的大致类型（如打印设备与带屏幕的设备）或者特定的特征和设备参数（例如屏幕分辨率和浏览器视窗宽度）来修改网站或应用程序时。\n\n## 使用\n\n一般有几种用法，如下所示：\n\n- 通过 `@media` 和 `@import at-rules` 用CSS 装饰样式\n- 用 `media=` 属性为`<style>, <link>, <source>`和其他HTML元素指定特定的媒体类型\n- 使用`Window.matchMedia() `和 `MediaQueryList.addListener()` 方法来测试和监控媒体状态\n\n\nCSS装饰样式用法\n```css\n@media screen, print { ... }\n```\n\nHTML元素引入\n```html\n<link rel=\"stylesheet\" src=\"styles.css\" media=\"screen\" />\n<link rel=\"stylesheet\" src=\"styles.css\" media=\"print\" />\n```\n\njs用法\n```javascript\nlet mql = window.matchMedia('(max-width: 600px)');\ndocument.querySelector(\".mq-value\").innerText = mql.matches;\n\nvar mql = window.matchMedia('(max-width: 600px)');\n\nfunction screenTest(e) {\n  if (e.matches) {\n    /* the viewport is 600 pixels wide or less */\n    para.textContent = 'This is a narrow screen — less than 600px wide.';\n    document.body.style.backgroundColor = 'red';\n  } else {\n    /* the viewport is more than than 600 pixels wide */\n    para.textContent = 'This is a wide screen — more than 600px wide.';\n    document.body.style.backgroundColor = 'blue';\n  }\n}\n\nmql.addListener(screenTest);\n```\n\n# 图片高清问题\n\n图片高清问题，一般是指的：不同 DPR 下图片的高清解决方案。\n\n这种问题解决方案，通常是利用媒体查询+提供不同尺寸的图片去显示。\n\n# 总结\n\n移动端适配方案，结合开发中，大家都是直接写px，然后利用编译过程的进行转换，比如: `px2rem` ，`px2vw`。\n\n再就是排版问题，不同屏幕问题需要做自动排版优化方案，这个需要后面去研究一下[《如何正确的使用 CSS Clamp 进行响应式排版》](https://news.sangniao.com/p/1729687518)。\n","slug":"today/20230111","published":1,"updated":"2023-02-18T12:45:18.312Z","_id":"cldztfawm000wnxpcm032fvfi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>由于自己太久没开发移动端的页面，个人觉得移动端开发相比较PC端开发最大的不同，在于需要去适配各种尺寸的手机屏幕，尤其还有1px的问题。</p>\n<p>因此需要再次收集一下，除了自己认知(rem适配)以外，是否还有移动端适配的方案吗？</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>移动端存在几类问题，如下所列：</p>\n<ul>\n<li>1px显示过粗问题</li>\n<li>手机屏幕出现刘海屏、滴水屏等，如何适配</li>\n<li>如何在不同屏幕，显示正确高清图片</li>\n<li>meta 的 viewport 值 能否用来适配</li>\n<li>rem，vw，vh计算单位的区别</li>\n<li>…</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><h2 id=\"像素\"><a href=\"#像素\" class=\"headerlink\" title=\"像素\"></a>像素</h2><blockquote>\n<p>像素是计算机屏幕上所能显示的最小单位。用来表示图像的单位。</p>\n</blockquote>\n<p>按照我个人理解，把屏幕比做一张白纸，然后像素就是一个点，接着同一水平线上的点形成一条线，水平线和垂直线同时就形成一个画面。</p>\n<p>然后对于我们前端开发而言，像素又需要分成几类：</p>\n<ul>\n<li><code>设备独立像素</code>, 俗称<code>DIP</code>，你可以理解成我们平时用css像素 又等于 逻辑像素，简单说就是同一个尺寸的屏幕，设备独立像素是一样的，从而减少误解</li>\n<li><code>物理像素</code>，其实就是我们真实肉眼可见的像素，物理像素 = 分辨率</li>\n<li><code>设备像素比</code>， <code>DPR</code> <code>devicePixelRatio</code> = 设备像素 / 设备独立像素，当物理像素和设备独立像素不一样的时候，这个时候就需要一个标准来做适配，利用<code>DPR</code>我们能将同样的画面适应不同的屏幕</li>\n<li><code>每英寸像素</code> <code>ppi</code> （pixel per inch），表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像</li>\n</ul>\n<h2 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h2><blockquote>\n<p>分辨率指屏幕上像素的数目，一般用水平<em>垂直，比如：屏幕分辨率为 800</em> 600， 水平有800个像素点，垂直有600个像素</p>\n</blockquote>\n<p>所以平时我们将2k、4k屏幕，通常指的是水平方向的存放像素超过2000或4000个。</p>\n<h2 id=\"视口（viewport）\"><a href=\"#视口（viewport）\" class=\"headerlink\" title=\"视口（viewport）\"></a>视口（viewport）</h2><blockquote>\n<p>视口代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI，菜单栏等——即指你正在浏览的文档的那一部分。<br>视口一般是指用户访问页面时，当前的可视区域范围。通过滚动条滑动，视口可以显示页面的其他部分。<br>通过 document.documentElement.clientWidth 或 window.innerWidth 可以获取视口宽度。</p>\n</blockquote>\n<p>简单的说，视口就是浏览器肉眼可见的区域，是随时可变化，视口是一个概念，它又可以根据不同情况分为以下几种：</p>\n<ul>\n<li>布局视口，对于开发来说的一种视口概念，在移动端可以通过 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>调整从而将打屏显示的内容完整缩小适配到移动端小屏</li>\n<li>视觉视口，是一种针对移动端屏幕提出来的概念，具体是指的屏幕的可见区域，当键盘弹起、浏览器工具栏隐藏等，视觉视口都会随之变化，而布局视口不会</li>\n</ul>\n<h2 id=\"布局视口（layout-viewport）\"><a href=\"#布局视口（layout-viewport）\" class=\"headerlink\" title=\"布局视口（layout viewport）\"></a>布局视口（layout viewport）</h2><blockquote>\n<p>innerHeight 和 innerWidth 所组成的区域通常被认为是布局视口（layout viewport）。浏览器的框架不被认为是视口的一部分。</p>\n</blockquote>\n<p>在PC端的时候， 视口=布局视口=视觉视口。</p>\n<p>在移动端的时候，布局视口 = 内容宽度，可以通过<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>调整，下面举几个例子(移动端为375*667)：</p>\n<ul>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>， 布局视口=window.innerWidth=980</li>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>, 布局视口=window.innerWidth=375</li>\n</ul>\n<h2 id=\"视觉视口（visual-viewport）\"><a href=\"#视觉视口（visual-viewport）\" class=\"headerlink\" title=\"视觉视口（visual viewport）\"></a>视觉视口（visual viewport）</h2><blockquote>\n<p>视觉视口指当前浏览器中可见的部分，并且可以变化。当使用双指缩放，或键盘在手机上弹出的时候，或者之前隐藏的地址栏变得可见的时候，视觉视口缩小了，但是布局视口却保持不变。</p>\n</blockquote>\n<p>相比较<code>布局视口</code>概念，视觉视口是由苹果 乔布斯提出，为了更好的在移动端展示web网页，视觉视口=屏幕的可见区域，下面通过几个例子去认知(移动端为375*667)：</p>\n<ul>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>，视觉视口=window.screen.width=375</li>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>，视觉视口=window.screen.width=375</li>\n</ul>\n<h2 id=\"viewport设置项\"><a href=\"#viewport设置项\" class=\"headerlink\" title=\"viewport设置项\"></a>viewport设置项</h2><p><code>viewport</code>的设置主要是在移动端配置视口大小，从width宽度，initial-scale缩放等设置属性，具体如下：</p>\n<ul>\n<li>width：控制 viewport 的大小，可以给它指定一个值(正整数)，或者是一个特殊的值(如：device-width 设备独立像素宽度，单位缩放为 1 时)；</li>\n<li>initial-scale：初始缩放比例，即当页面第一次加载时的缩放比例，为一个数字(可以带小数)；</li>\n<li>maximum-scale：允许用户缩放到的最大比例，为一个数字(可以带小数)；</li>\n<li>minimum-scale：允许用户缩放到的最小比例，为一个数字(可以带小数)；</li>\n<li>user-scalable：是否允许用户手动缩放，值为 “no”(不允许) 或 “yes”(允许)；</li>\n<li>height：与 width 相对应(很少使用)。</li>\n</ul>\n<h2 id=\"注意项\"><a href=\"#注意项\" class=\"headerlink\" title=\"注意项\"></a>注意项</h2><ul>\n<li>iframe的视口等于是其内部高度和宽度的大小。</li>\n<li>SVG的视口即 SVG 图片的可视区域。</li>\n</ul>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><p>这些兼容方案都是基于视口不缩放配置才能生效：<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code></p>\n<p>目前市面主流的几种适配方案如下：</p>\n<ul>\n<li><code>rem</code> ，通过一个宽度尺寸作为统一的单位值，然后通过js计算出不同尺寸对比值，得到适配效果</li>\n<li><code>vw</code> ，一个浏览器支持的单位，利用 CSS 视窗的特性，总宽度为 100vw，每一份为一个单位 1vw，设置 1rem 单位为 10vw</li>\n<li><code>px + calc + clamp</code>，大漠在2021年提出，根据 CSS 的新特性：css变量、calc()函数、clamp()、@container函数实现</li>\n</ul>\n<h2 id=\"rem方案\"><a href=\"#rem方案\" class=\"headerlink\" title=\"rem方案\"></a>rem方案</h2><p><code>rem</code>是指的html元素的<code>font-size</code>的大小，如：<code>html{font-size:50px}; 1rem=50px</code>。</p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>通过一个具体的例子，更好理解它的原理。比如你拿到一张设计稿为750px宽度的，里面有个长方形为100*200，这个时候需要在不同屏幕去做适配。</p>\n<p>rem的解决方案思路为：</p>\n<ul>\n<li>将标准尺寸宽度 750/10= 75px，设置:<code>html{font-size:75px} 1rem=75px</code></li>\n<li>将长方形的 100*200，100/75 * 200/75，设置为：<code>.rectangle{width: 1.33rem;height:2.66rem}</code></li>\n<li>那么当屏幕的尺寸发生变话的时候， 变成从750减少为375，那么这个时候，设置: <code>html{font-size:37.5px} 1rem=37.5px</code></li>\n<li>长方形的css设置无需变化，从而达到适配的效果</li>\n<li></li>\n</ul>\n<p>所以rem的解决方案就是在web应用在加载的时候，提前计算好rem单位，所以就可以完成适配。</p>\n<p>目前主流的方案有：</p>\n<ul>\n<li><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">flexible</a></li>\n<li><a href=\"https://github.com/songsiqi/px2rem\" target=\"_blank\" rel=\"noopener\">px2rem</a></li>\n</ul>\n<p>源码实现：</p>\n<p><a href=\"/code/h5-shipei/flexible.js\">h5-shipei.js</a></p>\n<p>PS: 里面涉及到<code>pageshow</code>事件，基本上是因为移动端缓存了web页面，当浏览器历史记录前进或后退的是会触发，可以通过<code>e.persisted</code>判断是否从缓存获取</p>\n<p>缺点：</p>\n<ul>\n<li>需要前置js才能实现，根据设备的视窗宽度进行计算，影响性能</li>\n<li>在 PC 端浏览破相，一般设置一个最大宽度</li>\n</ul>\n<h2 id=\"vw方案\"><a href=\"#vw方案\" class=\"headerlink\" title=\"vw方案\"></a>vw方案</h2><h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>vw是css的一种计算单位，定义： </p>\n<blockquote>\n<p>1vw 等于1/100的视口宽度 （Viewport Width）</p>\n</blockquote>\n<p>同理vh也是:</p>\n<blockquote>\n<p>1vh 等于1/100的视口高度 （Viewport Height）</p>\n</blockquote>\n<p>那么vmax，vmin，我在网上找到比较好解释如下：</p>\n<blockquote>\n<p>vmin — vmin的值是当前vw和vh中较小的值。<br>vmax — vw和vh中较大的值。<br>在横竖屏的切换中，十分有用。</p>\n</blockquote>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>了解到vw的概念，那么如何利用vw去解决移动端的适配呢？其实和rem方案是一样，具体代码可以如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* rem 方案 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">font-size</span>: width / <span class=\"number\">100</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">26.67rem</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vw 方案 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">26.67vw</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>已实现的框架方案如下：</p>\n<p><a href=\"https://github.com/evrone/postcss-px-to-viewport/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">postcss-px-to-viewport</a></p>\n<p>利用打包编译过程，将设置好的px单位转换为vw或vh，具体使用可以看使用文档。</p>\n<p>缺点：</p>\n<ul>\n<li>和rem一样，容易在pc端适配错误，可以用@media媒体查询去做样式兼容</li>\n</ul>\n<p><strong>后续添加</strong></p>\n<p>如果利用flex/grid布局，加上vw、vh单位，是否可以做到自适应布局呢？</p>\n<p>答案是肯定，而且相对而言会比其他方案，会更加容易开发些，实现步骤如下：</p>\n<ul>\n<li>利用flex弹性布局，加上vw设置flex弹性盒子的宽度，从而做到不同宽度屏幕，是否换行或者垂直布局</li>\n</ul>\n<p>后续可以专门写个文章用来描述flex布局的原理。</p>\n<h2 id=\"px-calc-clamp\"><a href=\"#px-calc-clamp\" class=\"headerlink\" title=\"px + calc + clamp\"></a>px + calc + clamp</h2><h3 id=\"是什么-1\"><a href=\"#是什么-1\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p><code>calc()</code> 此 CSS 函数允许在声明 CSS 属性值时执行一些计算。 支持  + ， - ， / ,* 等运算。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* property: calc(expression) */</span></span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 80<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>clamp()</code> 函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。它接收三个参数：最小值、首选值、最大值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-size</span>: <span class=\"selector-tag\">clamp</span>(1<span class=\"selector-tag\">rem</span>, 2<span class=\"selector-class\">.5vw</span>, 2<span class=\"selector-tag\">rem</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当<code>2.5vw</code>大于<code>2rem</code>，使用2rem</li>\n<li>当<code>2.5vw</code>小于<code>1rem</code>，使用1rem</li>\n<li>其他使用<code>2.5vw</code>单位</li>\n</ul>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>了解到上面css两个函数，如果通过只用px单位去做适配呢？原理步骤如下：</p>\n<ul>\n<li>假设我们拿到的设计稿750px宽度，那么这个时候有个长方体是200*100</li>\n<li>利用css变量，设置一个首先值，然后计算出去其他尺寸所需的最大值、最小值，设置clamp()</li>\n<li>同时利用calc()去计算偏差值</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>calc 和clamp 函数在浏览器支持度还不够</li>\n<li>需要了解这套方案还需要较深的技术方案</li>\n</ul>\n<h1 id=\"1px高清显示问题\"><a href=\"#1px高清显示问题\" class=\"headerlink\" title=\"1px高清显示问题\"></a>1px高清显示问题</h1><p>1像素问题： 1像素指在 Retina 屏显示 1单位物理像素</p>\n<ul>\n<li>DPR = 1，此时 1 物理像素 等于 1 CSS 像素</li>\n<li>DPR = 2，此时 1 物理像素等于 0.5 CSS 像素</li>\n<li>border-width: 1px，这里的 1px 其实是 1 CSS 像素宽度，等于 2 物理像素，设计师其实想要的是 border-width: 0.5px<br>DPR = 3，此时 1 物理像素等于 0.33 CSS 像素。设计师想要的是 border-width: 0.33px</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>渐变实现 ： background-image: linear-gradient(to top, ,,,)</li>\n<li>使用缩放实现：transform: scaleY(0.333)</li>\n<li>使用图片实现：base64</li>\n<li>使用 SVG 实现：嵌入 background url</li>\n<li>border-image，低端机下支持度不好</li>\n</ul>\n<p>以上方案都是基于媒体查询解决的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>),</span><br><span class=\"line\">    only screen and (min-device-pixel-ratio: <span class=\"number\">2</span>) &#123;&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>),</span><br><span class=\"line\">    only screen and (min-device-pixel-ratio: <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h1><blockquote>\n<p>媒体查询（Media queries）非常实用，尤其是当你想要根据设备的大致类型（如打印设备与带屏幕的设备）或者特定的特征和设备参数（例如屏幕分辨率和浏览器视窗宽度）来修改网站或应用程序时。</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>一般有几种用法，如下所示：</p>\n<ul>\n<li>通过 <code>@media</code> 和 <code>@import at-rules</code> 用CSS 装饰样式</li>\n<li>用 <code>media=</code> 属性为<code>&lt;style&gt;, &lt;link&gt;, &lt;source&gt;</code>和其他HTML元素指定特定的媒体类型</li>\n<li>使用<code>Window.matchMedia()</code>和 <code>MediaQueryList.addListener()</code> 方法来测试和监控媒体状态</li>\n</ul>\n<p>CSS装饰样式用法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen, print &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>HTML元素引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"styles.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"styles.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"print\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mql = <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(max-width: 600px)'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".mq-value\"</span>).innerText = mql.matches;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mql = <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(max-width: 600px)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">screenTest</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.matches) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* the viewport is 600 pixels wide or less */</span></span><br><span class=\"line\">    para.textContent = <span class=\"string\">'This is a narrow screen — less than 600px wide.'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.style.backgroundColor = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* the viewport is more than than 600 pixels wide */</span></span><br><span class=\"line\">    para.textContent = <span class=\"string\">'This is a wide screen — more than 600px wide.'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.style.backgroundColor = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mql.addListener(screenTest);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"图片高清问题\"><a href=\"#图片高清问题\" class=\"headerlink\" title=\"图片高清问题\"></a>图片高清问题</h1><p>图片高清问题，一般是指的：不同 DPR 下图片的高清解决方案。</p>\n<p>这种问题解决方案，通常是利用媒体查询+提供不同尺寸的图片去显示。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>移动端适配方案，结合开发中，大家都是直接写px，然后利用编译过程的进行转换，比如: <code>px2rem</code> ，<code>px2vw</code>。</p>\n<p>再就是排版问题，不同屏幕问题需要做自动排版优化方案，这个需要后面去研究一下<a href=\"https://news.sangniao.com/p/1729687518\" target=\"_blank\" rel=\"noopener\">《如何正确的使用 CSS Clamp 进行响应式排版》</a>。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>由于自己太久没开发移动端的页面，个人觉得移动端开发相比较PC端开发最大的不同，在于需要去适配各种尺寸的手机屏幕，尤其还有1px的问题。</p>\n<p>因此需要再次收集一下，除了自己认知(rem适配)以外，是否还有移动端适配的方案吗？</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>移动端存在几类问题，如下所列：</p>\n<ul>\n<li>1px显示过粗问题</li>\n<li>手机屏幕出现刘海屏、滴水屏等，如何适配</li>\n<li>如何在不同屏幕，显示正确高清图片</li>\n<li>meta 的 viewport 值 能否用来适配</li>\n<li>rem，vw，vh计算单位的区别</li>\n<li>…</li>\n</ul>","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><h2 id=\"像素\"><a href=\"#像素\" class=\"headerlink\" title=\"像素\"></a>像素</h2><blockquote>\n<p>像素是计算机屏幕上所能显示的最小单位。用来表示图像的单位。</p>\n</blockquote>\n<p>按照我个人理解，把屏幕比做一张白纸，然后像素就是一个点，接着同一水平线上的点形成一条线，水平线和垂直线同时就形成一个画面。</p>\n<p>然后对于我们前端开发而言，像素又需要分成几类：</p>\n<ul>\n<li><code>设备独立像素</code>, 俗称<code>DIP</code>，你可以理解成我们平时用css像素 又等于 逻辑像素，简单说就是同一个尺寸的屏幕，设备独立像素是一样的，从而减少误解</li>\n<li><code>物理像素</code>，其实就是我们真实肉眼可见的像素，物理像素 = 分辨率</li>\n<li><code>设备像素比</code>， <code>DPR</code> <code>devicePixelRatio</code> = 设备像素 / 设备独立像素，当物理像素和设备独立像素不一样的时候，这个时候就需要一个标准来做适配，利用<code>DPR</code>我们能将同样的画面适应不同的屏幕</li>\n<li><code>每英寸像素</code> <code>ppi</code> （pixel per inch），表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像</li>\n</ul>\n<h2 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h2><blockquote>\n<p>分辨率指屏幕上像素的数目，一般用水平<em>垂直，比如：屏幕分辨率为 800</em> 600， 水平有800个像素点，垂直有600个像素</p>\n</blockquote>\n<p>所以平时我们将2k、4k屏幕，通常指的是水平方向的存放像素超过2000或4000个。</p>\n<h2 id=\"视口（viewport）\"><a href=\"#视口（viewport）\" class=\"headerlink\" title=\"视口（viewport）\"></a>视口（viewport）</h2><blockquote>\n<p>视口代表当前可见的计算机图形区域。在 Web 浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的 UI，菜单栏等——即指你正在浏览的文档的那一部分。<br>视口一般是指用户访问页面时，当前的可视区域范围。通过滚动条滑动，视口可以显示页面的其他部分。<br>通过 document.documentElement.clientWidth 或 window.innerWidth 可以获取视口宽度。</p>\n</blockquote>\n<p>简单的说，视口就是浏览器肉眼可见的区域，是随时可变化，视口是一个概念，它又可以根据不同情况分为以下几种：</p>\n<ul>\n<li>布局视口，对于开发来说的一种视口概念，在移动端可以通过 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>调整从而将打屏显示的内容完整缩小适配到移动端小屏</li>\n<li>视觉视口，是一种针对移动端屏幕提出来的概念，具体是指的屏幕的可见区域，当键盘弹起、浏览器工具栏隐藏等，视觉视口都会随之变化，而布局视口不会</li>\n</ul>\n<h2 id=\"布局视口（layout-viewport）\"><a href=\"#布局视口（layout-viewport）\" class=\"headerlink\" title=\"布局视口（layout viewport）\"></a>布局视口（layout viewport）</h2><blockquote>\n<p>innerHeight 和 innerWidth 所组成的区域通常被认为是布局视口（layout viewport）。浏览器的框架不被认为是视口的一部分。</p>\n</blockquote>\n<p>在PC端的时候， 视口=布局视口=视觉视口。</p>\n<p>在移动端的时候，布局视口 = 内容宽度，可以通过<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>调整，下面举几个例子(移动端为375*667)：</p>\n<ul>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>， 布局视口=window.innerWidth=980</li>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>, 布局视口=window.innerWidth=375</li>\n</ul>\n<h2 id=\"视觉视口（visual-viewport）\"><a href=\"#视觉视口（visual-viewport）\" class=\"headerlink\" title=\"视觉视口（visual viewport）\"></a>视觉视口（visual viewport）</h2><blockquote>\n<p>视觉视口指当前浏览器中可见的部分，并且可以变化。当使用双指缩放，或键盘在手机上弹出的时候，或者之前隐藏的地址栏变得可见的时候，视觉视口缩小了，但是布局视口却保持不变。</p>\n</blockquote>\n<p>相比较<code>布局视口</code>概念，视觉视口是由苹果 乔布斯提出，为了更好的在移动端展示web网页，视觉视口=屏幕的可见区域，下面通过几个例子去认知(移动端为375*667)：</p>\n<ul>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=980, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>，视觉视口=window.screen.width=375</li>\n<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code>，视觉视口=window.screen.width=375</li>\n</ul>\n<h2 id=\"viewport设置项\"><a href=\"#viewport设置项\" class=\"headerlink\" title=\"viewport设置项\"></a>viewport设置项</h2><p><code>viewport</code>的设置主要是在移动端配置视口大小，从width宽度，initial-scale缩放等设置属性，具体如下：</p>\n<ul>\n<li>width：控制 viewport 的大小，可以给它指定一个值(正整数)，或者是一个特殊的值(如：device-width 设备独立像素宽度，单位缩放为 1 时)；</li>\n<li>initial-scale：初始缩放比例，即当页面第一次加载时的缩放比例，为一个数字(可以带小数)；</li>\n<li>maximum-scale：允许用户缩放到的最大比例，为一个数字(可以带小数)；</li>\n<li>minimum-scale：允许用户缩放到的最小比例，为一个数字(可以带小数)；</li>\n<li>user-scalable：是否允许用户手动缩放，值为 “no”(不允许) 或 “yes”(允许)；</li>\n<li>height：与 width 相对应(很少使用)。</li>\n</ul>\n<h2 id=\"注意项\"><a href=\"#注意项\" class=\"headerlink\" title=\"注意项\"></a>注意项</h2><ul>\n<li>iframe的视口等于是其内部高度和宽度的大小。</li>\n<li>SVG的视口即 SVG 图片的可视区域。</li>\n</ul>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><p>这些兼容方案都是基于视口不缩放配置才能生效：<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;/meta&gt;</code></p>\n<p>目前市面主流的几种适配方案如下：</p>\n<ul>\n<li><code>rem</code> ，通过一个宽度尺寸作为统一的单位值，然后通过js计算出不同尺寸对比值，得到适配效果</li>\n<li><code>vw</code> ，一个浏览器支持的单位，利用 CSS 视窗的特性，总宽度为 100vw，每一份为一个单位 1vw，设置 1rem 单位为 10vw</li>\n<li><code>px + calc + clamp</code>，大漠在2021年提出，根据 CSS 的新特性：css变量、calc()函数、clamp()、@container函数实现</li>\n</ul>\n<h2 id=\"rem方案\"><a href=\"#rem方案\" class=\"headerlink\" title=\"rem方案\"></a>rem方案</h2><p><code>rem</code>是指的html元素的<code>font-size</code>的大小，如：<code>html{font-size:50px}; 1rem=50px</code>。</p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>通过一个具体的例子，更好理解它的原理。比如你拿到一张设计稿为750px宽度的，里面有个长方形为100*200，这个时候需要在不同屏幕去做适配。</p>\n<p>rem的解决方案思路为：</p>\n<ul>\n<li>将标准尺寸宽度 750/10= 75px，设置:<code>html{font-size:75px} 1rem=75px</code></li>\n<li>将长方形的 100*200，100/75 * 200/75，设置为：<code>.rectangle{width: 1.33rem;height:2.66rem}</code></li>\n<li>那么当屏幕的尺寸发生变话的时候， 变成从750减少为375，那么这个时候，设置: <code>html{font-size:37.5px} 1rem=37.5px</code></li>\n<li>长方形的css设置无需变化，从而达到适配的效果</li>\n<li></li>\n</ul>\n<p>所以rem的解决方案就是在web应用在加载的时候，提前计算好rem单位，所以就可以完成适配。</p>\n<p>目前主流的方案有：</p>\n<ul>\n<li><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">flexible</a></li>\n<li><a href=\"https://github.com/songsiqi/px2rem\" target=\"_blank\" rel=\"noopener\">px2rem</a></li>\n</ul>\n<p>源码实现：</p>\n<p><a href=\"/code/h5-shipei/flexible.js\">h5-shipei.js</a></p>\n<p>PS: 里面涉及到<code>pageshow</code>事件，基本上是因为移动端缓存了web页面，当浏览器历史记录前进或后退的是会触发，可以通过<code>e.persisted</code>判断是否从缓存获取</p>\n<p>缺点：</p>\n<ul>\n<li>需要前置js才能实现，根据设备的视窗宽度进行计算，影响性能</li>\n<li>在 PC 端浏览破相，一般设置一个最大宽度</li>\n</ul>\n<h2 id=\"vw方案\"><a href=\"#vw方案\" class=\"headerlink\" title=\"vw方案\"></a>vw方案</h2><h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>vw是css的一种计算单位，定义： </p>\n<blockquote>\n<p>1vw 等于1/100的视口宽度 （Viewport Width）</p>\n</blockquote>\n<p>同理vh也是:</p>\n<blockquote>\n<p>1vh 等于1/100的视口高度 （Viewport Height）</p>\n</blockquote>\n<p>那么vmax，vmin，我在网上找到比较好解释如下：</p>\n<blockquote>\n<p>vmin — vmin的值是当前vw和vh中较小的值。<br>vmax — vw和vh中较大的值。<br>在横竖屏的切换中，十分有用。</p>\n</blockquote>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>了解到vw的概念，那么如何利用vw去解决移动端的适配呢？其实和rem方案是一样，具体代码可以如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* rem 方案 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">font-size</span>: width / <span class=\"number\">100</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">26.67rem</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* vw 方案 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">26.67vw</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>已实现的框架方案如下：</p>\n<p><a href=\"https://github.com/evrone/postcss-px-to-viewport/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">postcss-px-to-viewport</a></p>\n<p>利用打包编译过程，将设置好的px单位转换为vw或vh，具体使用可以看使用文档。</p>\n<p>缺点：</p>\n<ul>\n<li>和rem一样，容易在pc端适配错误，可以用@media媒体查询去做样式兼容</li>\n</ul>\n<p><strong>后续添加</strong></p>\n<p>如果利用flex/grid布局，加上vw、vh单位，是否可以做到自适应布局呢？</p>\n<p>答案是肯定，而且相对而言会比其他方案，会更加容易开发些，实现步骤如下：</p>\n<ul>\n<li>利用flex弹性布局，加上vw设置flex弹性盒子的宽度，从而做到不同宽度屏幕，是否换行或者垂直布局</li>\n</ul>\n<p>后续可以专门写个文章用来描述flex布局的原理。</p>\n<h2 id=\"px-calc-clamp\"><a href=\"#px-calc-clamp\" class=\"headerlink\" title=\"px + calc + clamp\"></a>px + calc + clamp</h2><h3 id=\"是什么-1\"><a href=\"#是什么-1\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p><code>calc()</code> 此 CSS 函数允许在声明 CSS 属性值时执行一些计算。 支持  + ， - ， / ,* 等运算。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* property: calc(expression) */</span></span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">calc</span>(100% <span class=\"selector-tag\">-</span> 80<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>clamp()</code> 函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。它接收三个参数：最小值、首选值、最大值。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-size</span>: <span class=\"selector-tag\">clamp</span>(1<span class=\"selector-tag\">rem</span>, 2<span class=\"selector-class\">.5vw</span>, 2<span class=\"selector-tag\">rem</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当<code>2.5vw</code>大于<code>2rem</code>，使用2rem</li>\n<li>当<code>2.5vw</code>小于<code>1rem</code>，使用1rem</li>\n<li>其他使用<code>2.5vw</code>单位</li>\n</ul>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>了解到上面css两个函数，如果通过只用px单位去做适配呢？原理步骤如下：</p>\n<ul>\n<li>假设我们拿到的设计稿750px宽度，那么这个时候有个长方体是200*100</li>\n<li>利用css变量，设置一个首先值，然后计算出去其他尺寸所需的最大值、最小值，设置clamp()</li>\n<li>同时利用calc()去计算偏差值</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>calc 和clamp 函数在浏览器支持度还不够</li>\n<li>需要了解这套方案还需要较深的技术方案</li>\n</ul>\n<h1 id=\"1px高清显示问题\"><a href=\"#1px高清显示问题\" class=\"headerlink\" title=\"1px高清显示问题\"></a>1px高清显示问题</h1><p>1像素问题： 1像素指在 Retina 屏显示 1单位物理像素</p>\n<ul>\n<li>DPR = 1，此时 1 物理像素 等于 1 CSS 像素</li>\n<li>DPR = 2，此时 1 物理像素等于 0.5 CSS 像素</li>\n<li>border-width: 1px，这里的 1px 其实是 1 CSS 像素宽度，等于 2 物理像素，设计师其实想要的是 border-width: 0.5px<br>DPR = 3，此时 1 物理像素等于 0.33 CSS 像素。设计师想要的是 border-width: 0.33px</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>渐变实现 ： background-image: linear-gradient(to top, ,,,)</li>\n<li>使用缩放实现：transform: scaleY(0.333)</li>\n<li>使用图片实现：base64</li>\n<li>使用 SVG 实现：嵌入 background url</li>\n<li>border-image，低端机下支持度不好</li>\n</ul>\n<p>以上方案都是基于媒体查询解决的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>),</span><br><span class=\"line\">    only screen and (min-device-pixel-ratio: <span class=\"number\">2</span>) &#123;&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>),</span><br><span class=\"line\">    only screen and (min-device-pixel-ratio: <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h1><blockquote>\n<p>媒体查询（Media queries）非常实用，尤其是当你想要根据设备的大致类型（如打印设备与带屏幕的设备）或者特定的特征和设备参数（例如屏幕分辨率和浏览器视窗宽度）来修改网站或应用程序时。</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>一般有几种用法，如下所示：</p>\n<ul>\n<li>通过 <code>@media</code> 和 <code>@import at-rules</code> 用CSS 装饰样式</li>\n<li>用 <code>media=</code> 属性为<code>&lt;style&gt;, &lt;link&gt;, &lt;source&gt;</code>和其他HTML元素指定特定的媒体类型</li>\n<li>使用<code>Window.matchMedia()</code>和 <code>MediaQueryList.addListener()</code> 方法来测试和监控媒体状态</li>\n</ul>\n<p>CSS装饰样式用法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen, print &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>HTML元素引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"styles.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"styles.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"print\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>js用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mql = <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(max-width: 600px)'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".mq-value\"</span>).innerText = mql.matches;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mql = <span class=\"built_in\">window</span>.matchMedia(<span class=\"string\">'(max-width: 600px)'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">screenTest</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.matches) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* the viewport is 600 pixels wide or less */</span></span><br><span class=\"line\">    para.textContent = <span class=\"string\">'This is a narrow screen — less than 600px wide.'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.style.backgroundColor = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* the viewport is more than than 600 pixels wide */</span></span><br><span class=\"line\">    para.textContent = <span class=\"string\">'This is a wide screen — more than 600px wide.'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.style.backgroundColor = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mql.addListener(screenTest);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"图片高清问题\"><a href=\"#图片高清问题\" class=\"headerlink\" title=\"图片高清问题\"></a>图片高清问题</h1><p>图片高清问题，一般是指的：不同 DPR 下图片的高清解决方案。</p>\n<p>这种问题解决方案，通常是利用媒体查询+提供不同尺寸的图片去显示。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>移动端适配方案，结合开发中，大家都是直接写px，然后利用编译过程的进行转换，比如: <code>px2rem</code> ，<code>px2vw</code>。</p>\n<p>再就是排版问题，不同屏幕问题需要做自动排版优化方案，这个需要后面去研究一下<a href=\"https://news.sangniao.com/p/1729687518\" target=\"_blank\" rel=\"noopener\">《如何正确的使用 CSS Clamp 进行响应式排版》</a>。</p>"},{"title":"从Z-Library到了解IPFS去中心化技术","date":"2023-01-16T10:00:01.000Z","_content":"\n# 背景\n最近想下载一些免费的电子书，然后找到一个推荐的网站，说是去中心化图书馆，利用去中心化，可以永久有效的，就是`Z-Library`，因此觉得挺有趣，所以适合简单研究一下。\n\n\n# Z-Library\n\n> Z-Library（简称Z-Lib，前身为BookFinder）是一个影子图书馆和开放获取文件分享计划，用户可在此一网站上下载期刊文章以及各种类型的书籍。根据Z-Library的说法，截至2022年6月12日，其共收录了10,456,034本书和84,837,646篇文章[1]。Z-Library在其电子书搜索页面上宣称自己是“全球最大的数字图书馆”[2]，并在文章搜索页面上称自身是“全球最大的科学文章存储库”[3]。它原是创世纪图书馆的镜像网站，并从该图书馆获得大部分馆藏。但它的一些馆藏由用户自行上载，并且不为创世纪图书馆所收藏[4]。该平台公开网域已于2022年11月3日遭到美国政府屏蔽。\n\nZLibrary虽然是一个俄国网站，但它拥有16种语言版本可供选择，下滑至网页末尾，即可切换语言。\n\n访问地址：[https://zlib.cydiar.com/](https://zlib.cydiar.com/)\n访问地址：[https://bk.hallowlib.org/](https://bk.hallowlib.org/) 国内备用网址\n\n<!-- more -->\n## 怎么使用\n\n除了上述提供的网址后，可以在里面访问直接跳转下载，但是同时也提供了IPFS节点下载地址。具体如下图：\n\n![](/assets/img/20230116.png)\n\n## IPFS下载\n需要在本地搭建IPFS节点，才可以正常文件，但是国内经常会访问不了，所以不建议搭建，因此只是简单了解一下背后技术即可。\n\n接下来具体讲解一下什么是IPFS。\n# IPFS\n\n> 星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。\n\nHTTP协议的缺陷：\n\n- 使用HTTP协议每次需要从中心化的服务器下载完整的文件\n- Web文件经常被删除\n- 经常受各种限制，导致文件无法正常下载\n\n\nIPFS是一个协议，类似http协议，主要定义了：\n\n- 定义了基于内容的寻址文件系统\n- 内容分发\n- 使用的技术分布式哈希、p2p传输、版本管理系统\n- 可以像http那样查看互联网页面\n- IPFS是一个文件系统，有文件夹和文件，可挂载文件系统\n- 未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议\n\n\n底层架构介绍：\n\n- IPFS是模块化的协议， 分为连接层、路由层、数据块交换\n- 连接层：通过其他任何网络协议连接\n- 路由层：寻找定位文件所在位置\n- 数据块交换：采用BitTorrent技术\n- p2p系统：世界范围内的p2p文件传输网络\n- 是一个CDN，文件添加到IPFS网络，将会在全世界进行CDN加速\n- IPNS：基于SFS（自认证系统）命名体系，可以和现有域名系统绑定\n\n## 实现\n\n\nIPFS主要是使用go语言实现的，目前主流的IPFS实现有几个框架，具体如下：\n\n- [go-ipfs](https://github.com/ipfs/kubo)\n- [js-ipfs](https://github.com/ipfs/js-ipfs)\n\n# 总结\n\nZ-Library是一个去中心化的图书馆，大家都有各自的节点维护自己的个人图书，也可以从其他节点去下载，降低现有web文件存储的缺陷。\n\n而IPFS的出现刚好可以满足这个理想目标，IPFS是一个协议，同时已经有现有框架go-ipfs去快速搭建个人的IPFS节点，所以能够很快体验一下去中心化体验，但是很多时候由于网络问题，并不能很快完成书籍的下载。\n\n虽然IPFS同时实现HTTP协议，但是访问其他节点的时候是有网络访问速度问题，因此体验不是特别好，但是新的技术概念还是需要时间去沉淀和学习，留此文章做个mark，继续保留学习的态度。\n\n# 参考资料\n\n[IPFS下载桌面端](https://github.com/ipfs/ipfs-desktop/releases)\n[IPFS搭建HTTPS去中心化网站，真实可用](https://cloud.tencent.com/developer/article/1815072)","source":"_posts/today/20230116.md","raw":"---\ntitle: 从Z-Library到了解IPFS去中心化技术\ndate: 2023-01-16 18:00:01\ntags:\n    - 每日更新\n    - 技术探鲜\n---\n\n# 背景\n最近想下载一些免费的电子书，然后找到一个推荐的网站，说是去中心化图书馆，利用去中心化，可以永久有效的，就是`Z-Library`，因此觉得挺有趣，所以适合简单研究一下。\n\n\n# Z-Library\n\n> Z-Library（简称Z-Lib，前身为BookFinder）是一个影子图书馆和开放获取文件分享计划，用户可在此一网站上下载期刊文章以及各种类型的书籍。根据Z-Library的说法，截至2022年6月12日，其共收录了10,456,034本书和84,837,646篇文章[1]。Z-Library在其电子书搜索页面上宣称自己是“全球最大的数字图书馆”[2]，并在文章搜索页面上称自身是“全球最大的科学文章存储库”[3]。它原是创世纪图书馆的镜像网站，并从该图书馆获得大部分馆藏。但它的一些馆藏由用户自行上载，并且不为创世纪图书馆所收藏[4]。该平台公开网域已于2022年11月3日遭到美国政府屏蔽。\n\nZLibrary虽然是一个俄国网站，但它拥有16种语言版本可供选择，下滑至网页末尾，即可切换语言。\n\n访问地址：[https://zlib.cydiar.com/](https://zlib.cydiar.com/)\n访问地址：[https://bk.hallowlib.org/](https://bk.hallowlib.org/) 国内备用网址\n\n<!-- more -->\n## 怎么使用\n\n除了上述提供的网址后，可以在里面访问直接跳转下载，但是同时也提供了IPFS节点下载地址。具体如下图：\n\n![](/assets/img/20230116.png)\n\n## IPFS下载\n需要在本地搭建IPFS节点，才可以正常文件，但是国内经常会访问不了，所以不建议搭建，因此只是简单了解一下背后技术即可。\n\n接下来具体讲解一下什么是IPFS。\n# IPFS\n\n> 星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。\n\nHTTP协议的缺陷：\n\n- 使用HTTP协议每次需要从中心化的服务器下载完整的文件\n- Web文件经常被删除\n- 经常受各种限制，导致文件无法正常下载\n\n\nIPFS是一个协议，类似http协议，主要定义了：\n\n- 定义了基于内容的寻址文件系统\n- 内容分发\n- 使用的技术分布式哈希、p2p传输、版本管理系统\n- 可以像http那样查看互联网页面\n- IPFS是一个文件系统，有文件夹和文件，可挂载文件系统\n- 未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议\n\n\n底层架构介绍：\n\n- IPFS是模块化的协议， 分为连接层、路由层、数据块交换\n- 连接层：通过其他任何网络协议连接\n- 路由层：寻找定位文件所在位置\n- 数据块交换：采用BitTorrent技术\n- p2p系统：世界范围内的p2p文件传输网络\n- 是一个CDN，文件添加到IPFS网络，将会在全世界进行CDN加速\n- IPNS：基于SFS（自认证系统）命名体系，可以和现有域名系统绑定\n\n## 实现\n\n\nIPFS主要是使用go语言实现的，目前主流的IPFS实现有几个框架，具体如下：\n\n- [go-ipfs](https://github.com/ipfs/kubo)\n- [js-ipfs](https://github.com/ipfs/js-ipfs)\n\n# 总结\n\nZ-Library是一个去中心化的图书馆，大家都有各自的节点维护自己的个人图书，也可以从其他节点去下载，降低现有web文件存储的缺陷。\n\n而IPFS的出现刚好可以满足这个理想目标，IPFS是一个协议，同时已经有现有框架go-ipfs去快速搭建个人的IPFS节点，所以能够很快体验一下去中心化体验，但是很多时候由于网络问题，并不能很快完成书籍的下载。\n\n虽然IPFS同时实现HTTP协议，但是访问其他节点的时候是有网络访问速度问题，因此体验不是特别好，但是新的技术概念还是需要时间去沉淀和学习，留此文章做个mark，继续保留学习的态度。\n\n# 参考资料\n\n[IPFS下载桌面端](https://github.com/ipfs/ipfs-desktop/releases)\n[IPFS搭建HTTPS去中心化网站，真实可用](https://cloud.tencent.com/developer/article/1815072)","slug":"today/20230116","published":1,"updated":"2023-01-16T15:22:20.566Z","_id":"cldztfdrk000znxpcmia27zbt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近想下载一些免费的电子书，然后找到一个推荐的网站，说是去中心化图书馆，利用去中心化，可以永久有效的，就是<code>Z-Library</code>，因此觉得挺有趣，所以适合简单研究一下。</p>\n<h1 id=\"Z-Library\"><a href=\"#Z-Library\" class=\"headerlink\" title=\"Z-Library\"></a>Z-Library</h1><blockquote>\n<p>Z-Library（简称Z-Lib，前身为BookFinder）是一个影子图书馆和开放获取文件分享计划，用户可在此一网站上下载期刊文章以及各种类型的书籍。根据Z-Library的说法，截至2022年6月12日，其共收录了10,456,034本书和84,837,646篇文章[1]。Z-Library在其电子书搜索页面上宣称自己是“全球最大的数字图书馆”[2]，并在文章搜索页面上称自身是“全球最大的科学文章存储库”[3]。它原是创世纪图书馆的镜像网站，并从该图书馆获得大部分馆藏。但它的一些馆藏由用户自行上载，并且不为创世纪图书馆所收藏[4]。该平台公开网域已于2022年11月3日遭到美国政府屏蔽。</p>\n</blockquote>\n<p>ZLibrary虽然是一个俄国网站，但它拥有16种语言版本可供选择，下滑至网页末尾，即可切换语言。</p>\n<p>访问地址：<a href=\"https://zlib.cydiar.com/\" target=\"_blank\" rel=\"noopener\">https://zlib.cydiar.com/</a><br>访问地址：<a href=\"https://bk.hallowlib.org/\" target=\"_blank\" rel=\"noopener\">https://bk.hallowlib.org/</a> 国内备用网址</p>\n<a id=\"more\"></a>\n<h2 id=\"怎么使用\"><a href=\"#怎么使用\" class=\"headerlink\" title=\"怎么使用\"></a>怎么使用</h2><p>除了上述提供的网址后，可以在里面访问直接跳转下载，但是同时也提供了IPFS节点下载地址。具体如下图：</p>\n<p><img src=\"/assets/img/20230116.png\" alt></p>\n<h2 id=\"IPFS下载\"><a href=\"#IPFS下载\" class=\"headerlink\" title=\"IPFS下载\"></a>IPFS下载</h2><p>需要在本地搭建IPFS节点，才可以正常文件，但是国内经常会访问不了，所以不建议搭建，因此只是简单了解一下背后技术即可。</p>\n<p>接下来具体讲解一下什么是IPFS。</p>\n<h1 id=\"IPFS\"><a href=\"#IPFS\" class=\"headerlink\" title=\"IPFS\"></a>IPFS</h1><blockquote>\n<p>星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。</p>\n</blockquote>\n<p>HTTP协议的缺陷：</p>\n<ul>\n<li>使用HTTP协议每次需要从中心化的服务器下载完整的文件</li>\n<li>Web文件经常被删除</li>\n<li>经常受各种限制，导致文件无法正常下载</li>\n</ul>\n<p>IPFS是一个协议，类似http协议，主要定义了：</p>\n<ul>\n<li>定义了基于内容的寻址文件系统</li>\n<li>内容分发</li>\n<li>使用的技术分布式哈希、p2p传输、版本管理系统</li>\n<li>可以像http那样查看互联网页面</li>\n<li>IPFS是一个文件系统，有文件夹和文件，可挂载文件系统</li>\n<li>未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议</li>\n</ul>\n<p>底层架构介绍：</p>\n<ul>\n<li>IPFS是模块化的协议， 分为连接层、路由层、数据块交换</li>\n<li>连接层：通过其他任何网络协议连接</li>\n<li>路由层：寻找定位文件所在位置</li>\n<li>数据块交换：采用BitTorrent技术</li>\n<li>p2p系统：世界范围内的p2p文件传输网络</li>\n<li>是一个CDN，文件添加到IPFS网络，将会在全世界进行CDN加速</li>\n<li>IPNS：基于SFS（自认证系统）命名体系，可以和现有域名系统绑定</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>IPFS主要是使用go语言实现的，目前主流的IPFS实现有几个框架，具体如下：</p>\n<ul>\n<li><a href=\"https://github.com/ipfs/kubo\" target=\"_blank\" rel=\"noopener\">go-ipfs</a></li>\n<li><a href=\"https://github.com/ipfs/js-ipfs\" target=\"_blank\" rel=\"noopener\">js-ipfs</a></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Z-Library是一个去中心化的图书馆，大家都有各自的节点维护自己的个人图书，也可以从其他节点去下载，降低现有web文件存储的缺陷。</p>\n<p>而IPFS的出现刚好可以满足这个理想目标，IPFS是一个协议，同时已经有现有框架go-ipfs去快速搭建个人的IPFS节点，所以能够很快体验一下去中心化体验，但是很多时候由于网络问题，并不能很快完成书籍的下载。</p>\n<p>虽然IPFS同时实现HTTP协议，但是访问其他节点的时候是有网络访问速度问题，因此体验不是特别好，但是新的技术概念还是需要时间去沉淀和学习，留此文章做个mark，继续保留学习的态度。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://github.com/ipfs/ipfs-desktop/releases\" target=\"_blank\" rel=\"noopener\">IPFS下载桌面端</a><br><a href=\"https://cloud.tencent.com/developer/article/1815072\" target=\"_blank\" rel=\"noopener\">IPFS搭建HTTPS去中心化网站，真实可用</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近想下载一些免费的电子书，然后找到一个推荐的网站，说是去中心化图书馆，利用去中心化，可以永久有效的，就是<code>Z-Library</code>，因此觉得挺有趣，所以适合简单研究一下。</p>\n<h1 id=\"Z-Library\"><a href=\"#Z-Library\" class=\"headerlink\" title=\"Z-Library\"></a>Z-Library</h1><blockquote>\n<p>Z-Library（简称Z-Lib，前身为BookFinder）是一个影子图书馆和开放获取文件分享计划，用户可在此一网站上下载期刊文章以及各种类型的书籍。根据Z-Library的说法，截至2022年6月12日，其共收录了10,456,034本书和84,837,646篇文章[1]。Z-Library在其电子书搜索页面上宣称自己是“全球最大的数字图书馆”[2]，并在文章搜索页面上称自身是“全球最大的科学文章存储库”[3]。它原是创世纪图书馆的镜像网站，并从该图书馆获得大部分馆藏。但它的一些馆藏由用户自行上载，并且不为创世纪图书馆所收藏[4]。该平台公开网域已于2022年11月3日遭到美国政府屏蔽。</p>\n</blockquote>\n<p>ZLibrary虽然是一个俄国网站，但它拥有16种语言版本可供选择，下滑至网页末尾，即可切换语言。</p>\n<p>访问地址：<a href=\"https://zlib.cydiar.com/\" target=\"_blank\" rel=\"noopener\">https://zlib.cydiar.com/</a><br>访问地址：<a href=\"https://bk.hallowlib.org/\" target=\"_blank\" rel=\"noopener\">https://bk.hallowlib.org/</a> 国内备用网址</p>","more":"<h2 id=\"怎么使用\"><a href=\"#怎么使用\" class=\"headerlink\" title=\"怎么使用\"></a>怎么使用</h2><p>除了上述提供的网址后，可以在里面访问直接跳转下载，但是同时也提供了IPFS节点下载地址。具体如下图：</p>\n<p><img src=\"/assets/img/20230116.png\" alt></p>\n<h2 id=\"IPFS下载\"><a href=\"#IPFS下载\" class=\"headerlink\" title=\"IPFS下载\"></a>IPFS下载</h2><p>需要在本地搭建IPFS节点，才可以正常文件，但是国内经常会访问不了，所以不建议搭建，因此只是简单了解一下背后技术即可。</p>\n<p>接下来具体讲解一下什么是IPFS。</p>\n<h1 id=\"IPFS\"><a href=\"#IPFS\" class=\"headerlink\" title=\"IPFS\"></a>IPFS</h1><blockquote>\n<p>星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。</p>\n</blockquote>\n<p>HTTP协议的缺陷：</p>\n<ul>\n<li>使用HTTP协议每次需要从中心化的服务器下载完整的文件</li>\n<li>Web文件经常被删除</li>\n<li>经常受各种限制，导致文件无法正常下载</li>\n</ul>\n<p>IPFS是一个协议，类似http协议，主要定义了：</p>\n<ul>\n<li>定义了基于内容的寻址文件系统</li>\n<li>内容分发</li>\n<li>使用的技术分布式哈希、p2p传输、版本管理系统</li>\n<li>可以像http那样查看互联网页面</li>\n<li>IPFS是一个文件系统，有文件夹和文件，可挂载文件系统</li>\n<li>未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议</li>\n</ul>\n<p>底层架构介绍：</p>\n<ul>\n<li>IPFS是模块化的协议， 分为连接层、路由层、数据块交换</li>\n<li>连接层：通过其他任何网络协议连接</li>\n<li>路由层：寻找定位文件所在位置</li>\n<li>数据块交换：采用BitTorrent技术</li>\n<li>p2p系统：世界范围内的p2p文件传输网络</li>\n<li>是一个CDN，文件添加到IPFS网络，将会在全世界进行CDN加速</li>\n<li>IPNS：基于SFS（自认证系统）命名体系，可以和现有域名系统绑定</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>IPFS主要是使用go语言实现的，目前主流的IPFS实现有几个框架，具体如下：</p>\n<ul>\n<li><a href=\"https://github.com/ipfs/kubo\" target=\"_blank\" rel=\"noopener\">go-ipfs</a></li>\n<li><a href=\"https://github.com/ipfs/js-ipfs\" target=\"_blank\" rel=\"noopener\">js-ipfs</a></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Z-Library是一个去中心化的图书馆，大家都有各自的节点维护自己的个人图书，也可以从其他节点去下载，降低现有web文件存储的缺陷。</p>\n<p>而IPFS的出现刚好可以满足这个理想目标，IPFS是一个协议，同时已经有现有框架go-ipfs去快速搭建个人的IPFS节点，所以能够很快体验一下去中心化体验，但是很多时候由于网络问题，并不能很快完成书籍的下载。</p>\n<p>虽然IPFS同时实现HTTP协议，但是访问其他节点的时候是有网络访问速度问题，因此体验不是特别好，但是新的技术概念还是需要时间去沉淀和学习，留此文章做个mark，继续保留学习的态度。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://github.com/ipfs/ipfs-desktop/releases\" target=\"_blank\" rel=\"noopener\">IPFS下载桌面端</a><br><a href=\"https://cloud.tencent.com/developer/article/1815072\" target=\"_blank\" rel=\"noopener\">IPFS搭建HTTPS去中心化网站，真实可用</a></p>"},{"title":"理解React中Fiber架构(一)","date":"2023-01-17T10:00:01.000Z","toc":true,"_content":"\n# 背景\n自从React16版本更新了Hook用法，同时引入了新的Fiber架构去重构整个渲染和事件处理过程，React团队引入Hook是为了更好剥离业务代码，让开发能更加友好的抽象代码，达到低耦合的函数组件目的，那么重构Diff算法，引入Fiber架构是为了什么呢？ 其实只是为了能够一个目标`快速响应`，原先Diff算法时间复杂度为<span>$$ O(n^3)$$</span> ，最后经过Fiber重构达到了$$ O(n) $$，这里面具体有什么门道，值得我们去深入研究一下。\n\n<!-- more -->\n\n# 问题\n\n在了解Fiber架构之前，我们需要对原有React16之前版本是有什么问题，才需要引入Fiber架构去解决该问题？\n\nReact15及以前的版本采用的是Stack Reconciler（栈协调器）架构，使用同步递归方式去创建虚拟DOM，一旦进入创建过程，就无法中断，如果创建过程超过16ms，用户就会出现页面卡顿感觉。具体可以参考下图：\n\n![](/assets/img/20230117-1.png)\n\n因此，从网上搜索了一下React15及以前的版本反馈，的主要问题有如下几个：\n\n- React的动画效果表现不佳\n- React在有大量DOM节点渲染卡顿\n\n## 为什么\n\n为什么会出现卡顿的情况，主要原因如下：\n\n1. JavaScript是单线程，与渲染线程互斥，当其中一个线程执行时，另一个线程只能挂起等待。\n2. Stack Reconciler 栈协调器某个任务是长期占用JavaScript主线程\n\n# 前置知识\n\n为了更好了解Fiber架构设计，需要提前了解一些前置知识，每个知识点其实都需要深入了解，这里只是简单描述，主要有以下几点：\n\n- 单线程的 JavaScript 与多线程的浏览器\n- React生命周期\n- React虚拟DOM\n## 单线程的 JavaScript 与多线程的浏览器\n\n在我们学习前端知识的时候，有个结论是： ` 单线程的 JavaScript 与多线程的浏览器 `。\n\n一个完整的web网页在浏览器显示和交互的进程（chrome为主），需要涉及到线程主要以下几个部分：\n\n- `GUI 渲染线程`，负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。\n- `JavaScript引擎线程`，JS内核，负责处理Javascript脚本程序。 一直等待着任务队列中任务的到来，然后解析Javascript脚本，运行代码。\n- `定时触发器线程`，定时器setInterval与setTimeout所在线程，为什么要单独弄个线程处理定时器？是因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确\n- `事件触发线程`，用来控制事件轮询，JS引擎自己忙不过来，需要浏览器另开线程协助\n- `异步http请求线程`，在`XMLHttpRequest`或`fetch`在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。这里需要注意`XMLHttpRequest`和`fetch`的区别，`fetch`是w3c标准化后一个专门提供给开发调用发起http的API接口，XMLHttpRequest是一个非标准化的Http请求对象，主要是可以发起http请求获取XML数据。\n\n上述就是浏览器的多线程，然后单线程的JavaScript通常指的是`JavaScript引擎线程`，为什么需要单线程？因为多线程可能会出现各种UI交互冲突问题。因此了解单线程JS需要注意几点：\n\n- GUI线程和JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。\n- JS 引擎只是任意的 JS 代码按需执行的环境，是其他线程调用触发JS引擎执行JS代码，比如：一个按钮点击触发事件，接着调用js引擎执行等\n\nJS 引擎工作流程图如下：\n\n![](/assets/img/20230117-3.png)\n\n\n## React 生命周期\n为了更好了解React Fiber架构，我们需要对比React15和React16的生命周期，具体如下：\n\n### React15的生命周期\n\n在15版本的时候，一个完整的组件生命周期如下（按照执行顺序）：\n\n- constructor()，组件的构造函数，用来初始化state\n- componentWillMount()，初始化渲染前时调用\n- componentDidMount()，初始化渲染后调用\n- componentWillReceiveProps()，父组件修改组件的props时会调用\n- render()，每次渲染时候会调用\n- componentWillUpdate()，组件更新前调用\n- shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新\n- componentDidUpdate()，组件更新后调用\n- componentWillUnmount()，组件卸载时调用\n\n![](/assets/img/20230117-4.png)\n\n按照不同时期，执行过程是不一样，具体可以见React的生命周期更改相关文章。\n\n### React16生命周期\n相比较React15，16版本基于Fiber架构主要对更新周期的函数做了调整，整个生命周期如下：\n\n- constructor()，组件的构造函数，用来初始化state\n- getDerivedStateFromProps()，初始化/更新时调用，使用 props 来派生/更新 state。\n- componentDidMount()，初始化渲染后调用\n- shouldComponentUpdate()，\n- render()，每次渲染时候会调用\n- shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新\n- getSnapshotBeforeUpdate()，返回值会作为第三个参数给到 componentDidUpdate。它的执行时机是在 render 方法之后，真实 DOM 更新之前。可以同时获取到更新前的真实 DOM 和更新前后的 state&props 信息。\n- componentDidUpdate()，组件更新后调用，从 getSnapshotBeforeUpdate 获取到的值\n- componentWillUnmount()，组件卸载时调用\n\n对比一下，React 16 废弃的是哪些生命周期：\n\n- componentWillMount；\n- componentWillUpdate；\n- componentWillReceiveProps\n\n这些生命周期的共性，就是它们都处于 render 阶段，都可能重复被执行，而且由于这些 API 常年被滥用，它们在重复执行的过程中都存在着不可小觑的风险。\n\n为什么废弃这些生命周期，因为引用了Fiber架构，render 阶段是允许暂停、终止和重启的。这就导致 render 阶段的生命周期都是有可能被重复执行的。\n\nReact16生命周期图如下：\n\n![](/assets/img/20230117-5.png)\n\n## React 虚拟DOM\n\n> 虚拟 DOM（Virtual DOM）本质上是JS 和 DOM 之间的一个映射缓存，它在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象。\n\n记住两个点：\n- 虚拟 DOM 是 JS 对象\n- 虚拟 DOM 是对真实 DOM 的描述\n\n虚拟DOM出现react生命周期的两个节点：\n\n1. 挂载阶段，React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射\n2. 更新阶段，页面的变化在作用于真实 DOM 之前，会先作用于虚拟 DOM，虚拟 DOM 将在 JS 层借助算法先对比出具体有哪些真实 DOM 需要被改变，然后再将这些改变作用于真实 DOM，这里就需要DOM Diff算法。\n\n为什么需要虚拟DOM？并不是因为虚拟DOM有更高的性能，而是因为虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。解决了以下问题：\n\n1. 研发体验/研发效率的问题，解决以往模板和数据，需要重复调整的问题\n2. 跨平台的问题，从web、小程序、app等，一套虚拟DOM，结合不同渲染逻辑，满足各类跨端场景\n\n而在虚拟DOM这一块，Fiber架构的引入，最大的调整就是虚拟DOM更新中的diff算法，由于分片渲染，不需要一次将diff执行，可以分批计算从而减少diff算法的复杂度。\n\n## Stack Reconciler(栈协调器)\n在了解Fiber架构之前，需要对React15的Stack Reconciler(栈协调器)做一次完整了解。先了解一下什么Reconciler协调器，在React中是这么定义的：\n\n> Virtual DOM 是一种编程概念。在这个概念里，UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫作Reconciler 协调（调和）。\n\n所以实现Reconciler，其实就是实现虚拟DOM到真实DOM渲染的整个逻辑过程，因此调和 !== Diff，但是Diff 确实是调和过程中最具代表性的一环。\n\n那么要了解React15是如何实现Stack Reconciler，最重要的两块：\n\n- Diff算法策略\n- 找到diff节点并`同步`更新渲染\n\nDiff算法策略要点：(主要是树递归)\n\n1. Diff 算法性能突破的关键点在于“分层对比”；\n2. 类型一致的节点才有继续 Diff 的必要性；\n3. key 属性的设置，可以帮我们尽可能重用同一层级内的节点。\n\n# Fiber架构\n我们先来看看 React  团队在“React 哲学”中对 React 的定位：\n\n> 我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。\n\n`快速响应`是React哲学理念，因此Fiber架构的出现是为了让React框架能更加快速响应用户的操作。\n## 是什么\n\n什么是 Fiber？从字面上来理解，Fiber 这个单词翻译过来是“丝、纤维”的意思，是比线还要细的东西。在计算机科学里，我们有进程、线程之分，而 Fiber 就是比线程还要纤细的一个过程，也就是所谓的“纤程”。纤程的出现，意在对渲染过程实现更加精细的控制。\n\nFiber的概念理解：\n\n- 从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写\n- 从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的“虚拟 DOM”；\n- 从工作流的角度来看，Fiber 节点保存了组件需要更新的状态和副作用，一个 Fiber 同时也对应着一个工作单元。\n\n从架构角度理解Fiber:\n\n- 架构核心：“可中断”“可恢复”与“优先级”\n- 可中断，指的是在Fiber架构下，任何工作任务都可以被更高优先级的任务中断\n- 可恢复，指的是被中断的任务可以被恢复继续执行\n- 优先级，指的是每个任务都有自己的优先级定义\n- 因此需要增加“Scheduler（调度器）”，作用是调度更新的优先级的任务\n\n## 怎么解决问题\n\n有了Fiber架构，怎么解决React15所面临的问题，虚拟DOM同步渲染真实DOM导致页面卡顿？\n\n- 将虚拟DOM，从原有的树结构，改为链表结构，拆分成一个个Fiber树节点\n- 利用Fiber架构，将渲染过程拆分成一个个工作单元任务，设置优先级，支持可中断、可恢复\n- 这样子当需要渲染复杂DOM时候，同时不影响其他优先级较高工作任务执行\n\n可以参考下图，了解一下Fiber架构工作图：\n\n\n![](/assets/img/20230117-2.png)\n\n\n当然这样子讲只是简单的原理，还需要弄明白异步后可能产生更多问题？比如如何定制优先级，当两个同样优先级的任务相遇的时候如何解决，这些放在第二章讲解。\n\n# 总结\n\n经过第一篇Fiber文章学习，大概了解到Fiber架构出现的背景和原因，以及它是什么，是如何工作的解决之前所遇到问题。简单总结一下：\n\n- React中定义Reconciler协调，指的是将虚拟DOM渲染到真实DOM的过程，React15之前采用是stack Reconciler栈协调，同步渲染机制导致页面卡顿\n- React16之后采用Fiber Reconciler，实现异步渲染DOM\n- 采用新的Fiber架构，同时影响到React的整个生命周期，主要是在更新阶段的生命周期\n\n后续深入了解请看第二篇章《从React中学习Fiber架构(二)》。\n# 额外话题（Vue.js对比）\n\n相比较React做Fiber架构优化，主要是针对事件做了时间分片，那么为什么Vue3(Vue@next)版本并不需要做呢？Vue.js作者尤雨溪是这样子回答的：\n\n> 尤雨溪：在 Web 应用中，「可中断式更新」主要是由大量 CPU 计算加上复杂 DOM 操作引起的。时间分片旨在让应用在 CPU 进行大量计算时也能与用户交互，但时间分片只能对大量 CPU 计算进行优化，无法优化复杂 DOM 操作，因为要确保用户正在操作的界面是最新的状态才行。因此，我们可以考虑两种不同的可中断式更新的场景：\n> 1. CPU 计算量不大，但 DOM 操作非常复杂（比如说你向页面中插入了十万个节点）。这种场景下不管你做不做时间分片，页面都会很卡。\n> 2. CPU 计算量非常大。理论上时间分片在这种场景里会有较大收益，但是人机交互研究表明，除了动画之外，大部分用户不会觉得 10 毫秒和 100 毫秒有很大区别。\n> 也就是说，时间分片只在 CPU 需要连续计算 100 毫秒以上的情况下才有较大收益。有意思的地方就出现了，在 React 经常会出现 100 毫秒以上的计算量，因为\n> 1. Fiber 架构的复杂性导致 React 的虚拟 DOM 协调效率较低，这是系统性的问题。\n> 2. React 使用 JSX 导致它的渲染效率比 template 低，因为 template 很容易做静态分析和优化。\n> 3. React Hooks 将大部分组件树的优化 API 暴露给开发者，开发者很多时候需要手动调用 useMemo 来优化渲染效率。这意味着 React 应用默认就有 render 过多的问题。更严重的是，这些优化在 React 里很难自动化。\n> 1. 这些优化要求开发者正确设置依赖数组\n> 2. 盲目添加 useMemo 会导致应该 render 的没 render。\n> 很不幸，大部分开发者都很懒，不会在每个地方都加上优化，因此大部分 React 应用都会有大量的没必要的 CPU 计算工作。\n> 对比较而言，Vue 解决了上述问题：\n> 1. Vue 的架构里没有时间分片，也就没有 Fiber，因此简单了很多，这使得渲染可以更快。\n> 2. Vue 通过分析 template、简化协调过程，做了大量的 AOT 优化，性能测试结果表明大部分的 DOM 内容有 80% 属于静态内容，因此 Vue 3 的协调速度比 Svelte 快，花费的时间比 React 的 1/10 还少。\n> 3. 通过数据响应式追踪，Vue 可以做到组件树级别的优化，比如把插槽编译为函数以避免 children 的变化引发 re-render，比如自动缓存内联事件处理函数以避免 re-render。Vue 3 可以做到在不借助开发者的任何手动优化的情况下，防止子组件在非必要的情况下 re-render。这意味着同样一次更新，React 应用可能要 re-render 多个组件，而 Vue 应用很可能只 re-render 一个组件。\n> 因此，在默认情况下，Vue 3 应用会比 React 应用少花费很多 CPU 时间，因而遇到 CPU 连续计算时间超过 100 毫秒的机会相当少，除非是极端情况。但大部分极端情况是 DOM 操作过于复杂，而不是 CPU 计算量太大。\n\n进行汇总一下描述，Vue3之所以没有使用Fiber架构，主要有以下几个原因：\n\n1. Vue.js针对template渲染机制做了多重优化，包括AOT优化(在构建的时候提前进行编译，提前将template转义成render函数)等，使得DOM元素渲染更快\n2. 复杂DOM渲染出现超过100ms以上的计算，是因为React本身机制导致，并不是所有复杂的DOM渲染都会需要100ms\n3. React Hook的暴露增加渲染效率的复杂度，从而导致React渲染更慢，从而需要Fiber架构去协调\n4. Vue数据响应式追踪机制，避免了多次重复render组件树，提高渲染效率\n5. Vue使用Fiber架构去实现，确实可以有好处，但是会增加整体代码体积和复杂度，投入产出比太低\n\n## 基础概念\n\n### AOT vs JIT\n\n- AOT，Ahead Of Time，提前编译或预编译，宿主环境获得的是编译后的代码，在浏览器中我们可以直接下载并运行编译后的代码，比如：Vue的template是通过Vue-loader编译后才能使用。\n- JIT，Just In Time，即时编译 ，代码在宿主环境编译并执行，每个文件都是单独编译的，当我们更改代码时不需要再次构建整个项目，比如：React中JSX只有在浏览器运行的时候才知道具体代码。\n","source":"_posts/today/20230117.md","raw":"---\ntitle: 理解React中Fiber架构(一)\ndate: 2023-01-17 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n自从React16版本更新了Hook用法，同时引入了新的Fiber架构去重构整个渲染和事件处理过程，React团队引入Hook是为了更好剥离业务代码，让开发能更加友好的抽象代码，达到低耦合的函数组件目的，那么重构Diff算法，引入Fiber架构是为了什么呢？ 其实只是为了能够一个目标`快速响应`，原先Diff算法时间复杂度为<span>$$ O(n^3)$$</span> ，最后经过Fiber重构达到了$$ O(n) $$，这里面具体有什么门道，值得我们去深入研究一下。\n\n<!-- more -->\n\n# 问题\n\n在了解Fiber架构之前，我们需要对原有React16之前版本是有什么问题，才需要引入Fiber架构去解决该问题？\n\nReact15及以前的版本采用的是Stack Reconciler（栈协调器）架构，使用同步递归方式去创建虚拟DOM，一旦进入创建过程，就无法中断，如果创建过程超过16ms，用户就会出现页面卡顿感觉。具体可以参考下图：\n\n![](/assets/img/20230117-1.png)\n\n因此，从网上搜索了一下React15及以前的版本反馈，的主要问题有如下几个：\n\n- React的动画效果表现不佳\n- React在有大量DOM节点渲染卡顿\n\n## 为什么\n\n为什么会出现卡顿的情况，主要原因如下：\n\n1. JavaScript是单线程，与渲染线程互斥，当其中一个线程执行时，另一个线程只能挂起等待。\n2. Stack Reconciler 栈协调器某个任务是长期占用JavaScript主线程\n\n# 前置知识\n\n为了更好了解Fiber架构设计，需要提前了解一些前置知识，每个知识点其实都需要深入了解，这里只是简单描述，主要有以下几点：\n\n- 单线程的 JavaScript 与多线程的浏览器\n- React生命周期\n- React虚拟DOM\n## 单线程的 JavaScript 与多线程的浏览器\n\n在我们学习前端知识的时候，有个结论是： ` 单线程的 JavaScript 与多线程的浏览器 `。\n\n一个完整的web网页在浏览器显示和交互的进程（chrome为主），需要涉及到线程主要以下几个部分：\n\n- `GUI 渲染线程`，负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。\n- `JavaScript引擎线程`，JS内核，负责处理Javascript脚本程序。 一直等待着任务队列中任务的到来，然后解析Javascript脚本，运行代码。\n- `定时触发器线程`，定时器setInterval与setTimeout所在线程，为什么要单独弄个线程处理定时器？是因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确\n- `事件触发线程`，用来控制事件轮询，JS引擎自己忙不过来，需要浏览器另开线程协助\n- `异步http请求线程`，在`XMLHttpRequest`或`fetch`在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。这里需要注意`XMLHttpRequest`和`fetch`的区别，`fetch`是w3c标准化后一个专门提供给开发调用发起http的API接口，XMLHttpRequest是一个非标准化的Http请求对象，主要是可以发起http请求获取XML数据。\n\n上述就是浏览器的多线程，然后单线程的JavaScript通常指的是`JavaScript引擎线程`，为什么需要单线程？因为多线程可能会出现各种UI交互冲突问题。因此了解单线程JS需要注意几点：\n\n- GUI线程和JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。\n- JS 引擎只是任意的 JS 代码按需执行的环境，是其他线程调用触发JS引擎执行JS代码，比如：一个按钮点击触发事件，接着调用js引擎执行等\n\nJS 引擎工作流程图如下：\n\n![](/assets/img/20230117-3.png)\n\n\n## React 生命周期\n为了更好了解React Fiber架构，我们需要对比React15和React16的生命周期，具体如下：\n\n### React15的生命周期\n\n在15版本的时候，一个完整的组件生命周期如下（按照执行顺序）：\n\n- constructor()，组件的构造函数，用来初始化state\n- componentWillMount()，初始化渲染前时调用\n- componentDidMount()，初始化渲染后调用\n- componentWillReceiveProps()，父组件修改组件的props时会调用\n- render()，每次渲染时候会调用\n- componentWillUpdate()，组件更新前调用\n- shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新\n- componentDidUpdate()，组件更新后调用\n- componentWillUnmount()，组件卸载时调用\n\n![](/assets/img/20230117-4.png)\n\n按照不同时期，执行过程是不一样，具体可以见React的生命周期更改相关文章。\n\n### React16生命周期\n相比较React15，16版本基于Fiber架构主要对更新周期的函数做了调整，整个生命周期如下：\n\n- constructor()，组件的构造函数，用来初始化state\n- getDerivedStateFromProps()，初始化/更新时调用，使用 props 来派生/更新 state。\n- componentDidMount()，初始化渲染后调用\n- shouldComponentUpdate()，\n- render()，每次渲染时候会调用\n- shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新\n- getSnapshotBeforeUpdate()，返回值会作为第三个参数给到 componentDidUpdate。它的执行时机是在 render 方法之后，真实 DOM 更新之前。可以同时获取到更新前的真实 DOM 和更新前后的 state&props 信息。\n- componentDidUpdate()，组件更新后调用，从 getSnapshotBeforeUpdate 获取到的值\n- componentWillUnmount()，组件卸载时调用\n\n对比一下，React 16 废弃的是哪些生命周期：\n\n- componentWillMount；\n- componentWillUpdate；\n- componentWillReceiveProps\n\n这些生命周期的共性，就是它们都处于 render 阶段，都可能重复被执行，而且由于这些 API 常年被滥用，它们在重复执行的过程中都存在着不可小觑的风险。\n\n为什么废弃这些生命周期，因为引用了Fiber架构，render 阶段是允许暂停、终止和重启的。这就导致 render 阶段的生命周期都是有可能被重复执行的。\n\nReact16生命周期图如下：\n\n![](/assets/img/20230117-5.png)\n\n## React 虚拟DOM\n\n> 虚拟 DOM（Virtual DOM）本质上是JS 和 DOM 之间的一个映射缓存，它在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象。\n\n记住两个点：\n- 虚拟 DOM 是 JS 对象\n- 虚拟 DOM 是对真实 DOM 的描述\n\n虚拟DOM出现react生命周期的两个节点：\n\n1. 挂载阶段，React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射\n2. 更新阶段，页面的变化在作用于真实 DOM 之前，会先作用于虚拟 DOM，虚拟 DOM 将在 JS 层借助算法先对比出具体有哪些真实 DOM 需要被改变，然后再将这些改变作用于真实 DOM，这里就需要DOM Diff算法。\n\n为什么需要虚拟DOM？并不是因为虚拟DOM有更高的性能，而是因为虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。解决了以下问题：\n\n1. 研发体验/研发效率的问题，解决以往模板和数据，需要重复调整的问题\n2. 跨平台的问题，从web、小程序、app等，一套虚拟DOM，结合不同渲染逻辑，满足各类跨端场景\n\n而在虚拟DOM这一块，Fiber架构的引入，最大的调整就是虚拟DOM更新中的diff算法，由于分片渲染，不需要一次将diff执行，可以分批计算从而减少diff算法的复杂度。\n\n## Stack Reconciler(栈协调器)\n在了解Fiber架构之前，需要对React15的Stack Reconciler(栈协调器)做一次完整了解。先了解一下什么Reconciler协调器，在React中是这么定义的：\n\n> Virtual DOM 是一种编程概念。在这个概念里，UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫作Reconciler 协调（调和）。\n\n所以实现Reconciler，其实就是实现虚拟DOM到真实DOM渲染的整个逻辑过程，因此调和 !== Diff，但是Diff 确实是调和过程中最具代表性的一环。\n\n那么要了解React15是如何实现Stack Reconciler，最重要的两块：\n\n- Diff算法策略\n- 找到diff节点并`同步`更新渲染\n\nDiff算法策略要点：(主要是树递归)\n\n1. Diff 算法性能突破的关键点在于“分层对比”；\n2. 类型一致的节点才有继续 Diff 的必要性；\n3. key 属性的设置，可以帮我们尽可能重用同一层级内的节点。\n\n# Fiber架构\n我们先来看看 React  团队在“React 哲学”中对 React 的定位：\n\n> 我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。\n\n`快速响应`是React哲学理念，因此Fiber架构的出现是为了让React框架能更加快速响应用户的操作。\n## 是什么\n\n什么是 Fiber？从字面上来理解，Fiber 这个单词翻译过来是“丝、纤维”的意思，是比线还要细的东西。在计算机科学里，我们有进程、线程之分，而 Fiber 就是比线程还要纤细的一个过程，也就是所谓的“纤程”。纤程的出现，意在对渲染过程实现更加精细的控制。\n\nFiber的概念理解：\n\n- 从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写\n- 从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的“虚拟 DOM”；\n- 从工作流的角度来看，Fiber 节点保存了组件需要更新的状态和副作用，一个 Fiber 同时也对应着一个工作单元。\n\n从架构角度理解Fiber:\n\n- 架构核心：“可中断”“可恢复”与“优先级”\n- 可中断，指的是在Fiber架构下，任何工作任务都可以被更高优先级的任务中断\n- 可恢复，指的是被中断的任务可以被恢复继续执行\n- 优先级，指的是每个任务都有自己的优先级定义\n- 因此需要增加“Scheduler（调度器）”，作用是调度更新的优先级的任务\n\n## 怎么解决问题\n\n有了Fiber架构，怎么解决React15所面临的问题，虚拟DOM同步渲染真实DOM导致页面卡顿？\n\n- 将虚拟DOM，从原有的树结构，改为链表结构，拆分成一个个Fiber树节点\n- 利用Fiber架构，将渲染过程拆分成一个个工作单元任务，设置优先级，支持可中断、可恢复\n- 这样子当需要渲染复杂DOM时候，同时不影响其他优先级较高工作任务执行\n\n可以参考下图，了解一下Fiber架构工作图：\n\n\n![](/assets/img/20230117-2.png)\n\n\n当然这样子讲只是简单的原理，还需要弄明白异步后可能产生更多问题？比如如何定制优先级，当两个同样优先级的任务相遇的时候如何解决，这些放在第二章讲解。\n\n# 总结\n\n经过第一篇Fiber文章学习，大概了解到Fiber架构出现的背景和原因，以及它是什么，是如何工作的解决之前所遇到问题。简单总结一下：\n\n- React中定义Reconciler协调，指的是将虚拟DOM渲染到真实DOM的过程，React15之前采用是stack Reconciler栈协调，同步渲染机制导致页面卡顿\n- React16之后采用Fiber Reconciler，实现异步渲染DOM\n- 采用新的Fiber架构，同时影响到React的整个生命周期，主要是在更新阶段的生命周期\n\n后续深入了解请看第二篇章《从React中学习Fiber架构(二)》。\n# 额外话题（Vue.js对比）\n\n相比较React做Fiber架构优化，主要是针对事件做了时间分片，那么为什么Vue3(Vue@next)版本并不需要做呢？Vue.js作者尤雨溪是这样子回答的：\n\n> 尤雨溪：在 Web 应用中，「可中断式更新」主要是由大量 CPU 计算加上复杂 DOM 操作引起的。时间分片旨在让应用在 CPU 进行大量计算时也能与用户交互，但时间分片只能对大量 CPU 计算进行优化，无法优化复杂 DOM 操作，因为要确保用户正在操作的界面是最新的状态才行。因此，我们可以考虑两种不同的可中断式更新的场景：\n> 1. CPU 计算量不大，但 DOM 操作非常复杂（比如说你向页面中插入了十万个节点）。这种场景下不管你做不做时间分片，页面都会很卡。\n> 2. CPU 计算量非常大。理论上时间分片在这种场景里会有较大收益，但是人机交互研究表明，除了动画之外，大部分用户不会觉得 10 毫秒和 100 毫秒有很大区别。\n> 也就是说，时间分片只在 CPU 需要连续计算 100 毫秒以上的情况下才有较大收益。有意思的地方就出现了，在 React 经常会出现 100 毫秒以上的计算量，因为\n> 1. Fiber 架构的复杂性导致 React 的虚拟 DOM 协调效率较低，这是系统性的问题。\n> 2. React 使用 JSX 导致它的渲染效率比 template 低，因为 template 很容易做静态分析和优化。\n> 3. React Hooks 将大部分组件树的优化 API 暴露给开发者，开发者很多时候需要手动调用 useMemo 来优化渲染效率。这意味着 React 应用默认就有 render 过多的问题。更严重的是，这些优化在 React 里很难自动化。\n> 1. 这些优化要求开发者正确设置依赖数组\n> 2. 盲目添加 useMemo 会导致应该 render 的没 render。\n> 很不幸，大部分开发者都很懒，不会在每个地方都加上优化，因此大部分 React 应用都会有大量的没必要的 CPU 计算工作。\n> 对比较而言，Vue 解决了上述问题：\n> 1. Vue 的架构里没有时间分片，也就没有 Fiber，因此简单了很多，这使得渲染可以更快。\n> 2. Vue 通过分析 template、简化协调过程，做了大量的 AOT 优化，性能测试结果表明大部分的 DOM 内容有 80% 属于静态内容，因此 Vue 3 的协调速度比 Svelte 快，花费的时间比 React 的 1/10 还少。\n> 3. 通过数据响应式追踪，Vue 可以做到组件树级别的优化，比如把插槽编译为函数以避免 children 的变化引发 re-render，比如自动缓存内联事件处理函数以避免 re-render。Vue 3 可以做到在不借助开发者的任何手动优化的情况下，防止子组件在非必要的情况下 re-render。这意味着同样一次更新，React 应用可能要 re-render 多个组件，而 Vue 应用很可能只 re-render 一个组件。\n> 因此，在默认情况下，Vue 3 应用会比 React 应用少花费很多 CPU 时间，因而遇到 CPU 连续计算时间超过 100 毫秒的机会相当少，除非是极端情况。但大部分极端情况是 DOM 操作过于复杂，而不是 CPU 计算量太大。\n\n进行汇总一下描述，Vue3之所以没有使用Fiber架构，主要有以下几个原因：\n\n1. Vue.js针对template渲染机制做了多重优化，包括AOT优化(在构建的时候提前进行编译，提前将template转义成render函数)等，使得DOM元素渲染更快\n2. 复杂DOM渲染出现超过100ms以上的计算，是因为React本身机制导致，并不是所有复杂的DOM渲染都会需要100ms\n3. React Hook的暴露增加渲染效率的复杂度，从而导致React渲染更慢，从而需要Fiber架构去协调\n4. Vue数据响应式追踪机制，避免了多次重复render组件树，提高渲染效率\n5. Vue使用Fiber架构去实现，确实可以有好处，但是会增加整体代码体积和复杂度，投入产出比太低\n\n## 基础概念\n\n### AOT vs JIT\n\n- AOT，Ahead Of Time，提前编译或预编译，宿主环境获得的是编译后的代码，在浏览器中我们可以直接下载并运行编译后的代码，比如：Vue的template是通过Vue-loader编译后才能使用。\n- JIT，Just In Time，即时编译 ，代码在宿主环境编译并执行，每个文件都是单独编译的，当我们更改代码时不需要再次构建整个项目，比如：React中JSX只有在浏览器运行的时候才知道具体代码。\n","slug":"today/20230117","published":1,"updated":"2023-01-18T16:13:25.546Z","_id":"cldztffw90012nxpc8waqamto","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>自从React16版本更新了Hook用法，同时引入了新的Fiber架构去重构整个渲染和事件处理过程，React团队引入Hook是为了更好剥离业务代码，让开发能更加友好的抽象代码，达到低耦合的函数组件目的，那么重构Diff算法，引入Fiber架构是为了什么呢？ 其实只是为了能够一个目标<code>快速响应</code>，原先Diff算法时间复杂度为<span>$$ O(n^3)$$</span> ，最后经过Fiber重构达到了$$ O(n) $$，这里面具体有什么门道，值得我们去深入研究一下。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在了解Fiber架构之前，我们需要对原有React16之前版本是有什么问题，才需要引入Fiber架构去解决该问题？</p>\n<p>React15及以前的版本采用的是Stack Reconciler（栈协调器）架构，使用同步递归方式去创建虚拟DOM，一旦进入创建过程，就无法中断，如果创建过程超过16ms，用户就会出现页面卡顿感觉。具体可以参考下图：</p>\n<p><img src=\"/assets/img/20230117-1.png\" alt></p>\n<p>因此，从网上搜索了一下React15及以前的版本反馈，的主要问题有如下几个：</p>\n<ul>\n<li>React的动画效果表现不佳</li>\n<li>React在有大量DOM节点渲染卡顿</li>\n</ul>\n<h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h2><p>为什么会出现卡顿的情况，主要原因如下：</p>\n<ol>\n<li>JavaScript是单线程，与渲染线程互斥，当其中一个线程执行时，另一个线程只能挂起等待。</li>\n<li>Stack Reconciler 栈协调器某个任务是长期占用JavaScript主线程</li>\n</ol>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>为了更好了解Fiber架构设计，需要提前了解一些前置知识，每个知识点其实都需要深入了解，这里只是简单描述，主要有以下几点：</p>\n<ul>\n<li>单线程的 JavaScript 与多线程的浏览器</li>\n<li>React生命周期</li>\n<li>React虚拟DOM<h2 id=\"单线程的-JavaScript-与多线程的浏览器\"><a href=\"#单线程的-JavaScript-与多线程的浏览器\" class=\"headerlink\" title=\"单线程的 JavaScript 与多线程的浏览器\"></a>单线程的 JavaScript 与多线程的浏览器</h2></li>\n</ul>\n<p>在我们学习前端知识的时候，有个结论是： <code>单线程的 JavaScript 与多线程的浏览器</code>。</p>\n<p>一个完整的web网页在浏览器显示和交互的进程（chrome为主），需要涉及到线程主要以下几个部分：</p>\n<ul>\n<li><code>GUI 渲染线程</code>，负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。</li>\n<li><code>JavaScript引擎线程</code>，JS内核，负责处理Javascript脚本程序。 一直等待着任务队列中任务的到来，然后解析Javascript脚本，运行代码。</li>\n<li><code>定时触发器线程</code>，定时器setInterval与setTimeout所在线程，为什么要单独弄个线程处理定时器？是因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确</li>\n<li><code>事件触发线程</code>，用来控制事件轮询，JS引擎自己忙不过来，需要浏览器另开线程协助</li>\n<li><code>异步http请求线程</code>，在<code>XMLHttpRequest</code>或<code>fetch</code>在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。这里需要注意<code>XMLHttpRequest</code>和<code>fetch</code>的区别，<code>fetch</code>是w3c标准化后一个专门提供给开发调用发起http的API接口，XMLHttpRequest是一个非标准化的Http请求对象，主要是可以发起http请求获取XML数据。</li>\n</ul>\n<p>上述就是浏览器的多线程，然后单线程的JavaScript通常指的是<code>JavaScript引擎线程</code>，为什么需要单线程？因为多线程可能会出现各种UI交互冲突问题。因此了解单线程JS需要注意几点：</p>\n<ul>\n<li>GUI线程和JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。</li>\n<li>JS 引擎只是任意的 JS 代码按需执行的环境，是其他线程调用触发JS引擎执行JS代码，比如：一个按钮点击触发事件，接着调用js引擎执行等</li>\n</ul>\n<p>JS 引擎工作流程图如下：</p>\n<p><img src=\"/assets/img/20230117-3.png\" alt></p>\n<h2 id=\"React-生命周期\"><a href=\"#React-生命周期\" class=\"headerlink\" title=\"React 生命周期\"></a>React 生命周期</h2><p>为了更好了解React Fiber架构，我们需要对比React15和React16的生命周期，具体如下：</p>\n<h3 id=\"React15的生命周期\"><a href=\"#React15的生命周期\" class=\"headerlink\" title=\"React15的生命周期\"></a>React15的生命周期</h3><p>在15版本的时候，一个完整的组件生命周期如下（按照执行顺序）：</p>\n<ul>\n<li>constructor()，组件的构造函数，用来初始化state</li>\n<li>componentWillMount()，初始化渲染前时调用</li>\n<li>componentDidMount()，初始化渲染后调用</li>\n<li>componentWillReceiveProps()，父组件修改组件的props时会调用</li>\n<li>render()，每次渲染时候会调用</li>\n<li>componentWillUpdate()，组件更新前调用</li>\n<li>shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新</li>\n<li>componentDidUpdate()，组件更新后调用</li>\n<li>componentWillUnmount()，组件卸载时调用</li>\n</ul>\n<p><img src=\"/assets/img/20230117-4.png\" alt></p>\n<p>按照不同时期，执行过程是不一样，具体可以见React的生命周期更改相关文章。</p>\n<h3 id=\"React16生命周期\"><a href=\"#React16生命周期\" class=\"headerlink\" title=\"React16生命周期\"></a>React16生命周期</h3><p>相比较React15，16版本基于Fiber架构主要对更新周期的函数做了调整，整个生命周期如下：</p>\n<ul>\n<li>constructor()，组件的构造函数，用来初始化state</li>\n<li>getDerivedStateFromProps()，初始化/更新时调用，使用 props 来派生/更新 state。</li>\n<li>componentDidMount()，初始化渲染后调用</li>\n<li>shouldComponentUpdate()，</li>\n<li>render()，每次渲染时候会调用</li>\n<li>shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新</li>\n<li>getSnapshotBeforeUpdate()，返回值会作为第三个参数给到 componentDidUpdate。它的执行时机是在 render 方法之后，真实 DOM 更新之前。可以同时获取到更新前的真实 DOM 和更新前后的 state&amp;props 信息。</li>\n<li>componentDidUpdate()，组件更新后调用，从 getSnapshotBeforeUpdate 获取到的值</li>\n<li>componentWillUnmount()，组件卸载时调用</li>\n</ul>\n<p>对比一下，React 16 废弃的是哪些生命周期：</p>\n<ul>\n<li>componentWillMount；</li>\n<li>componentWillUpdate；</li>\n<li>componentWillReceiveProps</li>\n</ul>\n<p>这些生命周期的共性，就是它们都处于 render 阶段，都可能重复被执行，而且由于这些 API 常年被滥用，它们在重复执行的过程中都存在着不可小觑的风险。</p>\n<p>为什么废弃这些生命周期，因为引用了Fiber架构，render 阶段是允许暂停、终止和重启的。这就导致 render 阶段的生命周期都是有可能被重复执行的。</p>\n<p>React16生命周期图如下：</p>\n<p><img src=\"/assets/img/20230117-5.png\" alt></p>\n<h2 id=\"React-虚拟DOM\"><a href=\"#React-虚拟DOM\" class=\"headerlink\" title=\"React 虚拟DOM\"></a>React 虚拟DOM</h2><blockquote>\n<p>虚拟 DOM（Virtual DOM）本质上是JS 和 DOM 之间的一个映射缓存，它在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象。</p>\n</blockquote>\n<p>记住两个点：</p>\n<ul>\n<li>虚拟 DOM 是 JS 对象</li>\n<li>虚拟 DOM 是对真实 DOM 的描述</li>\n</ul>\n<p>虚拟DOM出现react生命周期的两个节点：</p>\n<ol>\n<li>挂载阶段，React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射</li>\n<li>更新阶段，页面的变化在作用于真实 DOM 之前，会先作用于虚拟 DOM，虚拟 DOM 将在 JS 层借助算法先对比出具体有哪些真实 DOM 需要被改变，然后再将这些改变作用于真实 DOM，这里就需要DOM Diff算法。</li>\n</ol>\n<p>为什么需要虚拟DOM？并不是因为虚拟DOM有更高的性能，而是因为虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。解决了以下问题：</p>\n<ol>\n<li>研发体验/研发效率的问题，解决以往模板和数据，需要重复调整的问题</li>\n<li>跨平台的问题，从web、小程序、app等，一套虚拟DOM，结合不同渲染逻辑，满足各类跨端场景</li>\n</ol>\n<p>而在虚拟DOM这一块，Fiber架构的引入，最大的调整就是虚拟DOM更新中的diff算法，由于分片渲染，不需要一次将diff执行，可以分批计算从而减少diff算法的复杂度。</p>\n<h2 id=\"Stack-Reconciler-栈协调器\"><a href=\"#Stack-Reconciler-栈协调器\" class=\"headerlink\" title=\"Stack Reconciler(栈协调器)\"></a>Stack Reconciler(栈协调器)</h2><p>在了解Fiber架构之前，需要对React15的Stack Reconciler(栈协调器)做一次完整了解。先了解一下什么Reconciler协调器，在React中是这么定义的：</p>\n<blockquote>\n<p>Virtual DOM 是一种编程概念。在这个概念里，UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫作Reconciler 协调（调和）。</p>\n</blockquote>\n<p>所以实现Reconciler，其实就是实现虚拟DOM到真实DOM渲染的整个逻辑过程，因此调和 !== Diff，但是Diff 确实是调和过程中最具代表性的一环。</p>\n<p>那么要了解React15是如何实现Stack Reconciler，最重要的两块：</p>\n<ul>\n<li>Diff算法策略</li>\n<li>找到diff节点并<code>同步</code>更新渲染</li>\n</ul>\n<p>Diff算法策略要点：(主要是树递归)</p>\n<ol>\n<li>Diff 算法性能突破的关键点在于“分层对比”；</li>\n<li>类型一致的节点才有继续 Diff 的必要性；</li>\n<li>key 属性的设置，可以帮我们尽可能重用同一层级内的节点。</li>\n</ol>\n<h1 id=\"Fiber架构\"><a href=\"#Fiber架构\" class=\"headerlink\" title=\"Fiber架构\"></a>Fiber架构</h1><p>我们先来看看 React  团队在“React 哲学”中对 React 的定位：</p>\n<blockquote>\n<p>我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。</p>\n</blockquote>\n<p><code>快速响应</code>是React哲学理念，因此Fiber架构的出现是为了让React框架能更加快速响应用户的操作。</p>\n<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>什么是 Fiber？从字面上来理解，Fiber 这个单词翻译过来是“丝、纤维”的意思，是比线还要细的东西。在计算机科学里，我们有进程、线程之分，而 Fiber 就是比线程还要纤细的一个过程，也就是所谓的“纤程”。纤程的出现，意在对渲染过程实现更加精细的控制。</p>\n<p>Fiber的概念理解：</p>\n<ul>\n<li>从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写</li>\n<li>从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的“虚拟 DOM”；</li>\n<li>从工作流的角度来看，Fiber 节点保存了组件需要更新的状态和副作用，一个 Fiber 同时也对应着一个工作单元。</li>\n</ul>\n<p>从架构角度理解Fiber:</p>\n<ul>\n<li>架构核心：“可中断”“可恢复”与“优先级”</li>\n<li>可中断，指的是在Fiber架构下，任何工作任务都可以被更高优先级的任务中断</li>\n<li>可恢复，指的是被中断的任务可以被恢复继续执行</li>\n<li>优先级，指的是每个任务都有自己的优先级定义</li>\n<li>因此需要增加“Scheduler（调度器）”，作用是调度更新的优先级的任务</li>\n</ul>\n<h2 id=\"怎么解决问题\"><a href=\"#怎么解决问题\" class=\"headerlink\" title=\"怎么解决问题\"></a>怎么解决问题</h2><p>有了Fiber架构，怎么解决React15所面临的问题，虚拟DOM同步渲染真实DOM导致页面卡顿？</p>\n<ul>\n<li>将虚拟DOM，从原有的树结构，改为链表结构，拆分成一个个Fiber树节点</li>\n<li>利用Fiber架构，将渲染过程拆分成一个个工作单元任务，设置优先级，支持可中断、可恢复</li>\n<li>这样子当需要渲染复杂DOM时候，同时不影响其他优先级较高工作任务执行</li>\n</ul>\n<p>可以参考下图，了解一下Fiber架构工作图：</p>\n<p><img src=\"/assets/img/20230117-2.png\" alt></p>\n<p>当然这样子讲只是简单的原理，还需要弄明白异步后可能产生更多问题？比如如何定制优先级，当两个同样优先级的任务相遇的时候如何解决，这些放在第二章讲解。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>经过第一篇Fiber文章学习，大概了解到Fiber架构出现的背景和原因，以及它是什么，是如何工作的解决之前所遇到问题。简单总结一下：</p>\n<ul>\n<li>React中定义Reconciler协调，指的是将虚拟DOM渲染到真实DOM的过程，React15之前采用是stack Reconciler栈协调，同步渲染机制导致页面卡顿</li>\n<li>React16之后采用Fiber Reconciler，实现异步渲染DOM</li>\n<li>采用新的Fiber架构，同时影响到React的整个生命周期，主要是在更新阶段的生命周期</li>\n</ul>\n<p>后续深入了解请看第二篇章《从React中学习Fiber架构(二)》。</p>\n<h1 id=\"额外话题（Vue-js对比）\"><a href=\"#额外话题（Vue-js对比）\" class=\"headerlink\" title=\"额外话题（Vue.js对比）\"></a>额外话题（Vue.js对比）</h1><p>相比较React做Fiber架构优化，主要是针对事件做了时间分片，那么为什么Vue3(Vue@next)版本并不需要做呢？Vue.js作者尤雨溪是这样子回答的：</p>\n<blockquote>\n<p>尤雨溪：在 Web 应用中，「可中断式更新」主要是由大量 CPU 计算加上复杂 DOM 操作引起的。时间分片旨在让应用在 CPU 进行大量计算时也能与用户交互，但时间分片只能对大量 CPU 计算进行优化，无法优化复杂 DOM 操作，因为要确保用户正在操作的界面是最新的状态才行。因此，我们可以考虑两种不同的可中断式更新的场景：</p>\n<ol>\n<li>CPU 计算量不大，但 DOM 操作非常复杂（比如说你向页面中插入了十万个节点）。这种场景下不管你做不做时间分片，页面都会很卡。</li>\n<li>CPU 计算量非常大。理论上时间分片在这种场景里会有较大收益，但是人机交互研究表明，除了动画之外，大部分用户不会觉得 10 毫秒和 100 毫秒有很大区别。<br>也就是说，时间分片只在 CPU 需要连续计算 100 毫秒以上的情况下才有较大收益。有意思的地方就出现了，在 React 经常会出现 100 毫秒以上的计算量，因为</li>\n<li>Fiber 架构的复杂性导致 React 的虚拟 DOM 协调效率较低，这是系统性的问题。</li>\n<li>React 使用 JSX 导致它的渲染效率比 template 低，因为 template 很容易做静态分析和优化。</li>\n<li>React Hooks 将大部分组件树的优化 API 暴露给开发者，开发者很多时候需要手动调用 useMemo 来优化渲染效率。这意味着 React 应用默认就有 render 过多的问题。更严重的是，这些优化在 React 里很难自动化。</li>\n<li>这些优化要求开发者正确设置依赖数组</li>\n<li>盲目添加 useMemo 会导致应该 render 的没 render。<br>很不幸，大部分开发者都很懒，不会在每个地方都加上优化，因此大部分 React 应用都会有大量的没必要的 CPU 计算工作。<br>对比较而言，Vue 解决了上述问题：</li>\n<li>Vue 的架构里没有时间分片，也就没有 Fiber，因此简单了很多，这使得渲染可以更快。</li>\n<li>Vue 通过分析 template、简化协调过程，做了大量的 AOT 优化，性能测试结果表明大部分的 DOM 内容有 80% 属于静态内容，因此 Vue 3 的协调速度比 Svelte 快，花费的时间比 React 的 1/10 还少。</li>\n<li>通过数据响应式追踪，Vue 可以做到组件树级别的优化，比如把插槽编译为函数以避免 children 的变化引发 re-render，比如自动缓存内联事件处理函数以避免 re-render。Vue 3 可以做到在不借助开发者的任何手动优化的情况下，防止子组件在非必要的情况下 re-render。这意味着同样一次更新，React 应用可能要 re-render 多个组件，而 Vue 应用很可能只 re-render 一个组件。<br>因此，在默认情况下，Vue 3 应用会比 React 应用少花费很多 CPU 时间，因而遇到 CPU 连续计算时间超过 100 毫秒的机会相当少，除非是极端情况。但大部分极端情况是 DOM 操作过于复杂，而不是 CPU 计算量太大。</li>\n</ol>\n</blockquote>\n<p>进行汇总一下描述，Vue3之所以没有使用Fiber架构，主要有以下几个原因：</p>\n<ol>\n<li>Vue.js针对template渲染机制做了多重优化，包括AOT优化(在构建的时候提前进行编译，提前将template转义成render函数)等，使得DOM元素渲染更快</li>\n<li>复杂DOM渲染出现超过100ms以上的计算，是因为React本身机制导致，并不是所有复杂的DOM渲染都会需要100ms</li>\n<li>React Hook的暴露增加渲染效率的复杂度，从而导致React渲染更慢，从而需要Fiber架构去协调</li>\n<li>Vue数据响应式追踪机制，避免了多次重复render组件树，提高渲染效率</li>\n<li>Vue使用Fiber架构去实现，确实可以有好处，但是会增加整体代码体积和复杂度，投入产出比太低</li>\n</ol>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"AOT-vs-JIT\"><a href=\"#AOT-vs-JIT\" class=\"headerlink\" title=\"AOT vs JIT\"></a>AOT vs JIT</h3><ul>\n<li>AOT，Ahead Of Time，提前编译或预编译，宿主环境获得的是编译后的代码，在浏览器中我们可以直接下载并运行编译后的代码，比如：Vue的template是通过Vue-loader编译后才能使用。</li>\n<li>JIT，Just In Time，即时编译 ，代码在宿主环境编译并执行，每个文件都是单独编译的，当我们更改代码时不需要再次构建整个项目，比如：React中JSX只有在浏览器运行的时候才知道具体代码。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>自从React16版本更新了Hook用法，同时引入了新的Fiber架构去重构整个渲染和事件处理过程，React团队引入Hook是为了更好剥离业务代码，让开发能更加友好的抽象代码，达到低耦合的函数组件目的，那么重构Diff算法，引入Fiber架构是为了什么呢？ 其实只是为了能够一个目标<code>快速响应</code>，原先Diff算法时间复杂度为<span>$$ O(n^3)$$</span> ，最后经过Fiber重构达到了$$ O(n) $$，这里面具体有什么门道，值得我们去深入研究一下。</p>","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在了解Fiber架构之前，我们需要对原有React16之前版本是有什么问题，才需要引入Fiber架构去解决该问题？</p>\n<p>React15及以前的版本采用的是Stack Reconciler（栈协调器）架构，使用同步递归方式去创建虚拟DOM，一旦进入创建过程，就无法中断，如果创建过程超过16ms，用户就会出现页面卡顿感觉。具体可以参考下图：</p>\n<p><img src=\"/assets/img/20230117-1.png\" alt></p>\n<p>因此，从网上搜索了一下React15及以前的版本反馈，的主要问题有如下几个：</p>\n<ul>\n<li>React的动画效果表现不佳</li>\n<li>React在有大量DOM节点渲染卡顿</li>\n</ul>\n<h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h2><p>为什么会出现卡顿的情况，主要原因如下：</p>\n<ol>\n<li>JavaScript是单线程，与渲染线程互斥，当其中一个线程执行时，另一个线程只能挂起等待。</li>\n<li>Stack Reconciler 栈协调器某个任务是长期占用JavaScript主线程</li>\n</ol>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>为了更好了解Fiber架构设计，需要提前了解一些前置知识，每个知识点其实都需要深入了解，这里只是简单描述，主要有以下几点：</p>\n<ul>\n<li>单线程的 JavaScript 与多线程的浏览器</li>\n<li>React生命周期</li>\n<li>React虚拟DOM<h2 id=\"单线程的-JavaScript-与多线程的浏览器\"><a href=\"#单线程的-JavaScript-与多线程的浏览器\" class=\"headerlink\" title=\"单线程的 JavaScript 与多线程的浏览器\"></a>单线程的 JavaScript 与多线程的浏览器</h2></li>\n</ul>\n<p>在我们学习前端知识的时候，有个结论是： <code>单线程的 JavaScript 与多线程的浏览器</code>。</p>\n<p>一个完整的web网页在浏览器显示和交互的进程（chrome为主），需要涉及到线程主要以下几个部分：</p>\n<ul>\n<li><code>GUI 渲染线程</code>，负责渲染浏览器界面HTML元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。</li>\n<li><code>JavaScript引擎线程</code>，JS内核，负责处理Javascript脚本程序。 一直等待着任务队列中任务的到来，然后解析Javascript脚本，运行代码。</li>\n<li><code>定时触发器线程</code>，定时器setInterval与setTimeout所在线程，为什么要单独弄个线程处理定时器？是因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确</li>\n<li><code>事件触发线程</code>，用来控制事件轮询，JS引擎自己忙不过来，需要浏览器另开线程协助</li>\n<li><code>异步http请求线程</code>，在<code>XMLHttpRequest</code>或<code>fetch</code>在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。这里需要注意<code>XMLHttpRequest</code>和<code>fetch</code>的区别，<code>fetch</code>是w3c标准化后一个专门提供给开发调用发起http的API接口，XMLHttpRequest是一个非标准化的Http请求对象，主要是可以发起http请求获取XML数据。</li>\n</ul>\n<p>上述就是浏览器的多线程，然后单线程的JavaScript通常指的是<code>JavaScript引擎线程</code>，为什么需要单线程？因为多线程可能会出现各种UI交互冲突问题。因此了解单线程JS需要注意几点：</p>\n<ul>\n<li>GUI线程和JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。</li>\n<li>JS 引擎只是任意的 JS 代码按需执行的环境，是其他线程调用触发JS引擎执行JS代码，比如：一个按钮点击触发事件，接着调用js引擎执行等</li>\n</ul>\n<p>JS 引擎工作流程图如下：</p>\n<p><img src=\"/assets/img/20230117-3.png\" alt></p>\n<h2 id=\"React-生命周期\"><a href=\"#React-生命周期\" class=\"headerlink\" title=\"React 生命周期\"></a>React 生命周期</h2><p>为了更好了解React Fiber架构，我们需要对比React15和React16的生命周期，具体如下：</p>\n<h3 id=\"React15的生命周期\"><a href=\"#React15的生命周期\" class=\"headerlink\" title=\"React15的生命周期\"></a>React15的生命周期</h3><p>在15版本的时候，一个完整的组件生命周期如下（按照执行顺序）：</p>\n<ul>\n<li>constructor()，组件的构造函数，用来初始化state</li>\n<li>componentWillMount()，初始化渲染前时调用</li>\n<li>componentDidMount()，初始化渲染后调用</li>\n<li>componentWillReceiveProps()，父组件修改组件的props时会调用</li>\n<li>render()，每次渲染时候会调用</li>\n<li>componentWillUpdate()，组件更新前调用</li>\n<li>shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新</li>\n<li>componentDidUpdate()，组件更新后调用</li>\n<li>componentWillUnmount()，组件卸载时调用</li>\n</ul>\n<p><img src=\"/assets/img/20230117-4.png\" alt></p>\n<p>按照不同时期，执行过程是不一样，具体可以见React的生命周期更改相关文章。</p>\n<h3 id=\"React16生命周期\"><a href=\"#React16生命周期\" class=\"headerlink\" title=\"React16生命周期\"></a>React16生命周期</h3><p>相比较React15，16版本基于Fiber架构主要对更新周期的函数做了调整，整个生命周期如下：</p>\n<ul>\n<li>constructor()，组件的构造函数，用来初始化state</li>\n<li>getDerivedStateFromProps()，初始化/更新时调用，使用 props 来派生/更新 state。</li>\n<li>componentDidMount()，初始化渲染后调用</li>\n<li>shouldComponentUpdate()，</li>\n<li>render()，每次渲染时候会调用</li>\n<li>shouldComponentUpdate()，组件更新时调用，主要判断组件要不要更新</li>\n<li>getSnapshotBeforeUpdate()，返回值会作为第三个参数给到 componentDidUpdate。它的执行时机是在 render 方法之后，真实 DOM 更新之前。可以同时获取到更新前的真实 DOM 和更新前后的 state&amp;props 信息。</li>\n<li>componentDidUpdate()，组件更新后调用，从 getSnapshotBeforeUpdate 获取到的值</li>\n<li>componentWillUnmount()，组件卸载时调用</li>\n</ul>\n<p>对比一下，React 16 废弃的是哪些生命周期：</p>\n<ul>\n<li>componentWillMount；</li>\n<li>componentWillUpdate；</li>\n<li>componentWillReceiveProps</li>\n</ul>\n<p>这些生命周期的共性，就是它们都处于 render 阶段，都可能重复被执行，而且由于这些 API 常年被滥用，它们在重复执行的过程中都存在着不可小觑的风险。</p>\n<p>为什么废弃这些生命周期，因为引用了Fiber架构，render 阶段是允许暂停、终止和重启的。这就导致 render 阶段的生命周期都是有可能被重复执行的。</p>\n<p>React16生命周期图如下：</p>\n<p><img src=\"/assets/img/20230117-5.png\" alt></p>\n<h2 id=\"React-虚拟DOM\"><a href=\"#React-虚拟DOM\" class=\"headerlink\" title=\"React 虚拟DOM\"></a>React 虚拟DOM</h2><blockquote>\n<p>虚拟 DOM（Virtual DOM）本质上是JS 和 DOM 之间的一个映射缓存，它在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象。</p>\n</blockquote>\n<p>记住两个点：</p>\n<ul>\n<li>虚拟 DOM 是 JS 对象</li>\n<li>虚拟 DOM 是对真实 DOM 的描述</li>\n</ul>\n<p>虚拟DOM出现react生命周期的两个节点：</p>\n<ol>\n<li>挂载阶段，React 将结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射</li>\n<li>更新阶段，页面的变化在作用于真实 DOM 之前，会先作用于虚拟 DOM，虚拟 DOM 将在 JS 层借助算法先对比出具体有哪些真实 DOM 需要被改变，然后再将这些改变作用于真实 DOM，这里就需要DOM Diff算法。</li>\n</ol>\n<p>为什么需要虚拟DOM？并不是因为虚拟DOM有更高的性能，而是因为虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。解决了以下问题：</p>\n<ol>\n<li>研发体验/研发效率的问题，解决以往模板和数据，需要重复调整的问题</li>\n<li>跨平台的问题，从web、小程序、app等，一套虚拟DOM，结合不同渲染逻辑，满足各类跨端场景</li>\n</ol>\n<p>而在虚拟DOM这一块，Fiber架构的引入，最大的调整就是虚拟DOM更新中的diff算法，由于分片渲染，不需要一次将diff执行，可以分批计算从而减少diff算法的复杂度。</p>\n<h2 id=\"Stack-Reconciler-栈协调器\"><a href=\"#Stack-Reconciler-栈协调器\" class=\"headerlink\" title=\"Stack Reconciler(栈协调器)\"></a>Stack Reconciler(栈协调器)</h2><p>在了解Fiber架构之前，需要对React15的Stack Reconciler(栈协调器)做一次完整了解。先了解一下什么Reconciler协调器，在React中是这么定义的：</p>\n<blockquote>\n<p>Virtual DOM 是一种编程概念。在这个概念里，UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫作Reconciler 协调（调和）。</p>\n</blockquote>\n<p>所以实现Reconciler，其实就是实现虚拟DOM到真实DOM渲染的整个逻辑过程，因此调和 !== Diff，但是Diff 确实是调和过程中最具代表性的一环。</p>\n<p>那么要了解React15是如何实现Stack Reconciler，最重要的两块：</p>\n<ul>\n<li>Diff算法策略</li>\n<li>找到diff节点并<code>同步</code>更新渲染</li>\n</ul>\n<p>Diff算法策略要点：(主要是树递归)</p>\n<ol>\n<li>Diff 算法性能突破的关键点在于“分层对比”；</li>\n<li>类型一致的节点才有继续 Diff 的必要性；</li>\n<li>key 属性的设置，可以帮我们尽可能重用同一层级内的节点。</li>\n</ol>\n<h1 id=\"Fiber架构\"><a href=\"#Fiber架构\" class=\"headerlink\" title=\"Fiber架构\"></a>Fiber架构</h1><p>我们先来看看 React  团队在“React 哲学”中对 React 的定位：</p>\n<blockquote>\n<p>我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。</p>\n</blockquote>\n<p><code>快速响应</code>是React哲学理念，因此Fiber架构的出现是为了让React框架能更加快速响应用户的操作。</p>\n<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>什么是 Fiber？从字面上来理解，Fiber 这个单词翻译过来是“丝、纤维”的意思，是比线还要细的东西。在计算机科学里，我们有进程、线程之分，而 Fiber 就是比线程还要纤细的一个过程，也就是所谓的“纤程”。纤程的出现，意在对渲染过程实现更加精细的控制。</p>\n<p>Fiber的概念理解：</p>\n<ul>\n<li>从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写</li>\n<li>从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的“虚拟 DOM”；</li>\n<li>从工作流的角度来看，Fiber 节点保存了组件需要更新的状态和副作用，一个 Fiber 同时也对应着一个工作单元。</li>\n</ul>\n<p>从架构角度理解Fiber:</p>\n<ul>\n<li>架构核心：“可中断”“可恢复”与“优先级”</li>\n<li>可中断，指的是在Fiber架构下，任何工作任务都可以被更高优先级的任务中断</li>\n<li>可恢复，指的是被中断的任务可以被恢复继续执行</li>\n<li>优先级，指的是每个任务都有自己的优先级定义</li>\n<li>因此需要增加“Scheduler（调度器）”，作用是调度更新的优先级的任务</li>\n</ul>\n<h2 id=\"怎么解决问题\"><a href=\"#怎么解决问题\" class=\"headerlink\" title=\"怎么解决问题\"></a>怎么解决问题</h2><p>有了Fiber架构，怎么解决React15所面临的问题，虚拟DOM同步渲染真实DOM导致页面卡顿？</p>\n<ul>\n<li>将虚拟DOM，从原有的树结构，改为链表结构，拆分成一个个Fiber树节点</li>\n<li>利用Fiber架构，将渲染过程拆分成一个个工作单元任务，设置优先级，支持可中断、可恢复</li>\n<li>这样子当需要渲染复杂DOM时候，同时不影响其他优先级较高工作任务执行</li>\n</ul>\n<p>可以参考下图，了解一下Fiber架构工作图：</p>\n<p><img src=\"/assets/img/20230117-2.png\" alt></p>\n<p>当然这样子讲只是简单的原理，还需要弄明白异步后可能产生更多问题？比如如何定制优先级，当两个同样优先级的任务相遇的时候如何解决，这些放在第二章讲解。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>经过第一篇Fiber文章学习，大概了解到Fiber架构出现的背景和原因，以及它是什么，是如何工作的解决之前所遇到问题。简单总结一下：</p>\n<ul>\n<li>React中定义Reconciler协调，指的是将虚拟DOM渲染到真实DOM的过程，React15之前采用是stack Reconciler栈协调，同步渲染机制导致页面卡顿</li>\n<li>React16之后采用Fiber Reconciler，实现异步渲染DOM</li>\n<li>采用新的Fiber架构，同时影响到React的整个生命周期，主要是在更新阶段的生命周期</li>\n</ul>\n<p>后续深入了解请看第二篇章《从React中学习Fiber架构(二)》。</p>\n<h1 id=\"额外话题（Vue-js对比）\"><a href=\"#额外话题（Vue-js对比）\" class=\"headerlink\" title=\"额外话题（Vue.js对比）\"></a>额外话题（Vue.js对比）</h1><p>相比较React做Fiber架构优化，主要是针对事件做了时间分片，那么为什么Vue3(Vue@next)版本并不需要做呢？Vue.js作者尤雨溪是这样子回答的：</p>\n<blockquote>\n<p>尤雨溪：在 Web 应用中，「可中断式更新」主要是由大量 CPU 计算加上复杂 DOM 操作引起的。时间分片旨在让应用在 CPU 进行大量计算时也能与用户交互，但时间分片只能对大量 CPU 计算进行优化，无法优化复杂 DOM 操作，因为要确保用户正在操作的界面是最新的状态才行。因此，我们可以考虑两种不同的可中断式更新的场景：</p>\n<ol>\n<li>CPU 计算量不大，但 DOM 操作非常复杂（比如说你向页面中插入了十万个节点）。这种场景下不管你做不做时间分片，页面都会很卡。</li>\n<li>CPU 计算量非常大。理论上时间分片在这种场景里会有较大收益，但是人机交互研究表明，除了动画之外，大部分用户不会觉得 10 毫秒和 100 毫秒有很大区别。<br>也就是说，时间分片只在 CPU 需要连续计算 100 毫秒以上的情况下才有较大收益。有意思的地方就出现了，在 React 经常会出现 100 毫秒以上的计算量，因为</li>\n<li>Fiber 架构的复杂性导致 React 的虚拟 DOM 协调效率较低，这是系统性的问题。</li>\n<li>React 使用 JSX 导致它的渲染效率比 template 低，因为 template 很容易做静态分析和优化。</li>\n<li>React Hooks 将大部分组件树的优化 API 暴露给开发者，开发者很多时候需要手动调用 useMemo 来优化渲染效率。这意味着 React 应用默认就有 render 过多的问题。更严重的是，这些优化在 React 里很难自动化。</li>\n<li>这些优化要求开发者正确设置依赖数组</li>\n<li>盲目添加 useMemo 会导致应该 render 的没 render。<br>很不幸，大部分开发者都很懒，不会在每个地方都加上优化，因此大部分 React 应用都会有大量的没必要的 CPU 计算工作。<br>对比较而言，Vue 解决了上述问题：</li>\n<li>Vue 的架构里没有时间分片，也就没有 Fiber，因此简单了很多，这使得渲染可以更快。</li>\n<li>Vue 通过分析 template、简化协调过程，做了大量的 AOT 优化，性能测试结果表明大部分的 DOM 内容有 80% 属于静态内容，因此 Vue 3 的协调速度比 Svelte 快，花费的时间比 React 的 1/10 还少。</li>\n<li>通过数据响应式追踪，Vue 可以做到组件树级别的优化，比如把插槽编译为函数以避免 children 的变化引发 re-render，比如自动缓存内联事件处理函数以避免 re-render。Vue 3 可以做到在不借助开发者的任何手动优化的情况下，防止子组件在非必要的情况下 re-render。这意味着同样一次更新，React 应用可能要 re-render 多个组件，而 Vue 应用很可能只 re-render 一个组件。<br>因此，在默认情况下，Vue 3 应用会比 React 应用少花费很多 CPU 时间，因而遇到 CPU 连续计算时间超过 100 毫秒的机会相当少，除非是极端情况。但大部分极端情况是 DOM 操作过于复杂，而不是 CPU 计算量太大。</li>\n</ol>\n</blockquote>\n<p>进行汇总一下描述，Vue3之所以没有使用Fiber架构，主要有以下几个原因：</p>\n<ol>\n<li>Vue.js针对template渲染机制做了多重优化，包括AOT优化(在构建的时候提前进行编译，提前将template转义成render函数)等，使得DOM元素渲染更快</li>\n<li>复杂DOM渲染出现超过100ms以上的计算，是因为React本身机制导致，并不是所有复杂的DOM渲染都会需要100ms</li>\n<li>React Hook的暴露增加渲染效率的复杂度，从而导致React渲染更慢，从而需要Fiber架构去协调</li>\n<li>Vue数据响应式追踪机制，避免了多次重复render组件树，提高渲染效率</li>\n<li>Vue使用Fiber架构去实现，确实可以有好处，但是会增加整体代码体积和复杂度，投入产出比太低</li>\n</ol>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"AOT-vs-JIT\"><a href=\"#AOT-vs-JIT\" class=\"headerlink\" title=\"AOT vs JIT\"></a>AOT vs JIT</h3><ul>\n<li>AOT，Ahead Of Time，提前编译或预编译，宿主环境获得的是编译后的代码，在浏览器中我们可以直接下载并运行编译后的代码，比如：Vue的template是通过Vue-loader编译后才能使用。</li>\n<li>JIT，Just In Time，即时编译 ，代码在宿主环境编译并执行，每个文件都是单独编译的，当我们更改代码时不需要再次构建整个项目，比如：React中JSX只有在浏览器运行的时候才知道具体代码。</li>\n</ul>"},{"title":"从lerna到初步了解和使用Nx(一)","date":"2023-01-19T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n自从组内开发架构采用Monorepo大仓项目后，了解一些Monorepo的常用技术，主要采用了`lerna`框架去做多个子项目统一package.json命令脚本，因此想要了解一下lerna框架，同时也查到lerna的公司同步开发`Nx`项目，尝试一下它的应用。\n\n想了解Monorepo大仓项目如何设计的可以翻到前往阅读 [《从npm版本依赖到Monorepo大仓项目》](/2023/01/07/today/20220107/)。\n\n<!-- more -->\n# lerna\n\n## 是什么\n\n> Lerna是用于TypeScrip/JavaScript的原始monorepo工具。它已经存在多年，被数以万计的项目使用，包括Reaction和Jest。\n\n了解Lerna，必须想要了解一下`monorepo`架构， 简单点说，`monorepo`架构就是将许多不同业务项目的归纳一个仓库中，抽取公共部分，降低版本依赖的复杂度，达到所有项目统一化的架构。\n\nLerna解决了`monorepo`架构以下问题：\n\n- 将不同子项目链接在一起，不用发布npm就可以互相引用\n- 可以将命令顺序执行，从而实现将不同项目分发到不同机器\n- 参与CI/CD工作流中，拥有自由的定制脚本功能，从而满足不同的工作流\n\n\n## 怎么做\n\n主要有以下几个步骤：\n\n- 初始化项目： `npx lerna init`\n- 修改`package.json`，去添加一个npm/yarn/pnpm workspace\n- 运行命令`lerna run xxx`： 统一执行所有子项目的scripts命令，如：lerna run build\n\n更加具体的操作，可以到官方文档去查看[https://lerna.js.org/docs/features/run-tasks](https://lerna.js.org/docs/features/run-tasks)\n\n# Nx\n\n先说明一下Nx与Lerna的关系：\n\n> Nrwl(开源构建系统NX背后的公司)已经接管了Lerna。NX是一个由前谷歌员工开发的构建系统，它利用了谷歌内部工具使用的许多技术。Lerna v5是这种新管理方式下的第一个版本，它更新了过时的包，并开始对存储库本身进行一些清理。从V5.1+开始，Lerna提供了集成NX的新可能性，并将许多任务调度工作推迟到NX。\n\n## 是什么\n\n官方介绍：\n> Nx是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。\n\nNx的目标是：\n\n- 加快你的前端项目工程化\n- 提供一流的开发体验\n\n\n## 实践-第一个nx项目\n\n- 初始化项目， `npx create-nx-workspace@latest package-based --preset=npm`\n- 添加子项目， 目录下新建标准npm项目`packages/is-even`\n- 安装依赖，在根目录下执行`npm i typescript -D -W`\n- 第一次编译，根目录下执行`npx nx build is-even`\n- 新建第二个子项目，`packages/is-odd`，在项目中引用`is-even`\n- 关联依赖，在根目录下执行`npm install`，即可自动实现关联依赖\n- 项目编译依赖，在根目录`nx.json`新增build依赖，如下：\n```json\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n- 编译打包，单独打包子项目`is-odd`，命令`npx nx build is-even`，同时会编译打包`is-even`，因为引用了\n- 再次打包，nx会自动引入上一次build的cache缓存，从而加快编译速度\n- 将所有的子项目统一打包编译，命令:`npx nx run-many --target=build`\n- 如果不需要使用cache缓存，可以使用命令:`npx nx run-many --target=build --skip-nx-cache`\n- 如果需要查看当前子项目依赖的项目是否被修改，可以使用命令：`npx nx affected --target=build`\n\n到此，一个Nx的Monrepo项目就完成了。\n\n当然实际应用中，没有那么简单，后续我们将通过Vue(vite) 、 React去完成一个Nx项目，已经如何和现有的CI工作流结合运行。\n\n同时我们还需要解决这些问题：\n\n1. 如何解决非Monrepo项目依赖Monrepo项目的公共代码\n2. 如何解决子项目需要发布，但是所依赖的其他子项目不发布问题\n3. 如何解决不同项目将采用不同的框架，如Vue、React，项目之间依赖问题？\n4. 如何解决不同子项目中依赖同一个npm包，但是版本不一致的问题？是通过前置检查？还是各自完全安装好？\n5. 实际应用中，如果遇到子项目需要单独剥离开成立单独项目，应该如何操作？\n6. 后续如果子项目越来越多，导致本地开发中项目运行开销过大，无法运行，如何解决？\n7. 子项目越来越多，是否有规范可以定义是否需要单独成立子项目？\n8. 如何定制公共代码剥离规则？如何检查规则应用？\n9. 前后端分离项目和SSR项目能否一起囊括？\n10. 项目权限问题如何解决？如：外包人员无法查看其它子项目代码？\n11. ......\n\n我们有很多问题，但是基本上都是引入Monrepo大仓项目导致的问题，我们希望Nx能有相关的解决方案提供参考或者应用，减少我们实际开发的阻塞。\n\n所以，Nx项目还是持续跟进研究学习，找个实际项目去落地实践，或者将现有一些项目去整合试试看。\n\n","source":"_posts/today/20230119.md","raw":"---\ntitle: 从lerna到初步了解和使用Nx(一)\ndate: 2023-01-19 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n自从组内开发架构采用Monorepo大仓项目后，了解一些Monorepo的常用技术，主要采用了`lerna`框架去做多个子项目统一package.json命令脚本，因此想要了解一下lerna框架，同时也查到lerna的公司同步开发`Nx`项目，尝试一下它的应用。\n\n想了解Monorepo大仓项目如何设计的可以翻到前往阅读 [《从npm版本依赖到Monorepo大仓项目》](/2023/01/07/today/20220107/)。\n\n<!-- more -->\n# lerna\n\n## 是什么\n\n> Lerna是用于TypeScrip/JavaScript的原始monorepo工具。它已经存在多年，被数以万计的项目使用，包括Reaction和Jest。\n\n了解Lerna，必须想要了解一下`monorepo`架构， 简单点说，`monorepo`架构就是将许多不同业务项目的归纳一个仓库中，抽取公共部分，降低版本依赖的复杂度，达到所有项目统一化的架构。\n\nLerna解决了`monorepo`架构以下问题：\n\n- 将不同子项目链接在一起，不用发布npm就可以互相引用\n- 可以将命令顺序执行，从而实现将不同项目分发到不同机器\n- 参与CI/CD工作流中，拥有自由的定制脚本功能，从而满足不同的工作流\n\n\n## 怎么做\n\n主要有以下几个步骤：\n\n- 初始化项目： `npx lerna init`\n- 修改`package.json`，去添加一个npm/yarn/pnpm workspace\n- 运行命令`lerna run xxx`： 统一执行所有子项目的scripts命令，如：lerna run build\n\n更加具体的操作，可以到官方文档去查看[https://lerna.js.org/docs/features/run-tasks](https://lerna.js.org/docs/features/run-tasks)\n\n# Nx\n\n先说明一下Nx与Lerna的关系：\n\n> Nrwl(开源构建系统NX背后的公司)已经接管了Lerna。NX是一个由前谷歌员工开发的构建系统，它利用了谷歌内部工具使用的许多技术。Lerna v5是这种新管理方式下的第一个版本，它更新了过时的包，并开始对存储库本身进行一些清理。从V5.1+开始，Lerna提供了集成NX的新可能性，并将许多任务调度工作推迟到NX。\n\n## 是什么\n\n官方介绍：\n> Nx是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。\n\nNx的目标是：\n\n- 加快你的前端项目工程化\n- 提供一流的开发体验\n\n\n## 实践-第一个nx项目\n\n- 初始化项目， `npx create-nx-workspace@latest package-based --preset=npm`\n- 添加子项目， 目录下新建标准npm项目`packages/is-even`\n- 安装依赖，在根目录下执行`npm i typescript -D -W`\n- 第一次编译，根目录下执行`npx nx build is-even`\n- 新建第二个子项目，`packages/is-odd`，在项目中引用`is-even`\n- 关联依赖，在根目录下执行`npm install`，即可自动实现关联依赖\n- 项目编译依赖，在根目录`nx.json`新增build依赖，如下：\n```json\n{\n  ...\n  \"targetDefaults\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    }\n  }\n}\n```\n- 编译打包，单独打包子项目`is-odd`，命令`npx nx build is-even`，同时会编译打包`is-even`，因为引用了\n- 再次打包，nx会自动引入上一次build的cache缓存，从而加快编译速度\n- 将所有的子项目统一打包编译，命令:`npx nx run-many --target=build`\n- 如果不需要使用cache缓存，可以使用命令:`npx nx run-many --target=build --skip-nx-cache`\n- 如果需要查看当前子项目依赖的项目是否被修改，可以使用命令：`npx nx affected --target=build`\n\n到此，一个Nx的Monrepo项目就完成了。\n\n当然实际应用中，没有那么简单，后续我们将通过Vue(vite) 、 React去完成一个Nx项目，已经如何和现有的CI工作流结合运行。\n\n同时我们还需要解决这些问题：\n\n1. 如何解决非Monrepo项目依赖Monrepo项目的公共代码\n2. 如何解决子项目需要发布，但是所依赖的其他子项目不发布问题\n3. 如何解决不同项目将采用不同的框架，如Vue、React，项目之间依赖问题？\n4. 如何解决不同子项目中依赖同一个npm包，但是版本不一致的问题？是通过前置检查？还是各自完全安装好？\n5. 实际应用中，如果遇到子项目需要单独剥离开成立单独项目，应该如何操作？\n6. 后续如果子项目越来越多，导致本地开发中项目运行开销过大，无法运行，如何解决？\n7. 子项目越来越多，是否有规范可以定义是否需要单独成立子项目？\n8. 如何定制公共代码剥离规则？如何检查规则应用？\n9. 前后端分离项目和SSR项目能否一起囊括？\n10. 项目权限问题如何解决？如：外包人员无法查看其它子项目代码？\n11. ......\n\n我们有很多问题，但是基本上都是引入Monrepo大仓项目导致的问题，我们希望Nx能有相关的解决方案提供参考或者应用，减少我们实际开发的阻塞。\n\n所以，Nx项目还是持续跟进研究学习，找个实际项目去落地实践，或者将现有一些项目去整合试试看。\n\n","slug":"today/20230119","published":1,"updated":"2023-01-28T17:56:26.266Z","_id":"cldztfi5j0015nxpchf9v4aj1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>自从组内开发架构采用Monorepo大仓项目后，了解一些Monorepo的常用技术，主要采用了<code>lerna</code>框架去做多个子项目统一package.json命令脚本，因此想要了解一下lerna框架，同时也查到lerna的公司同步开发<code>Nx</code>项目，尝试一下它的应用。</p>\n<p>想了解Monorepo大仓项目如何设计的可以翻到前往阅读 <a href=\"/2023/01/07/today/20220107/\">《从npm版本依赖到Monorepo大仓项目》</a>。</p>\n<a id=\"more\"></a>\n<h1 id=\"lerna\"><a href=\"#lerna\" class=\"headerlink\" title=\"lerna\"></a>lerna</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>Lerna是用于TypeScrip/JavaScript的原始monorepo工具。它已经存在多年，被数以万计的项目使用，包括Reaction和Jest。</p>\n</blockquote>\n<p>了解Lerna，必须想要了解一下<code>monorepo</code>架构， 简单点说，<code>monorepo</code>架构就是将许多不同业务项目的归纳一个仓库中，抽取公共部分，降低版本依赖的复杂度，达到所有项目统一化的架构。</p>\n<p>Lerna解决了<code>monorepo</code>架构以下问题：</p>\n<ul>\n<li>将不同子项目链接在一起，不用发布npm就可以互相引用</li>\n<li>可以将命令顺序执行，从而实现将不同项目分发到不同机器</li>\n<li>参与CI/CD工作流中，拥有自由的定制脚本功能，从而满足不同的工作流</li>\n</ul>\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h2><p>主要有以下几个步骤：</p>\n<ul>\n<li>初始化项目： <code>npx lerna init</code></li>\n<li>修改<code>package.json</code>，去添加一个npm/yarn/pnpm workspace</li>\n<li>运行命令<code>lerna run xxx</code>： 统一执行所有子项目的scripts命令，如：lerna run build</li>\n</ul>\n<p>更加具体的操作，可以到官方文档去查看<a href=\"https://lerna.js.org/docs/features/run-tasks\" target=\"_blank\" rel=\"noopener\">https://lerna.js.org/docs/features/run-tasks</a></p>\n<h1 id=\"Nx\"><a href=\"#Nx\" class=\"headerlink\" title=\"Nx\"></a>Nx</h1><p>先说明一下Nx与Lerna的关系：</p>\n<blockquote>\n<p>Nrwl(开源构建系统NX背后的公司)已经接管了Lerna。NX是一个由前谷歌员工开发的构建系统，它利用了谷歌内部工具使用的许多技术。Lerna v5是这种新管理方式下的第一个版本，它更新了过时的包，并开始对存储库本身进行一些清理。从V5.1+开始，Lerna提供了集成NX的新可能性，并将许多任务调度工作推迟到NX。</p>\n</blockquote>\n<h2 id=\"是什么-1\"><a href=\"#是什么-1\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>官方介绍：</p>\n<blockquote>\n<p>Nx是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。</p>\n</blockquote>\n<p>Nx的目标是：</p>\n<ul>\n<li>加快你的前端项目工程化</li>\n<li>提供一流的开发体验</li>\n</ul>\n<h2 id=\"实践-第一个nx项目\"><a href=\"#实践-第一个nx项目\" class=\"headerlink\" title=\"实践-第一个nx项目\"></a>实践-第一个nx项目</h2><ul>\n<li><p>初始化项目， <code>npx create-nx-workspace@latest package-based --preset=npm</code></p>\n</li>\n<li><p>添加子项目， 目录下新建标准npm项目<code>packages/is-even</code></p>\n</li>\n<li><p>安装依赖，在根目录下执行<code>npm i typescript -D -W</code></p>\n</li>\n<li><p>第一次编译，根目录下执行<code>npx nx build is-even</code></p>\n</li>\n<li><p>新建第二个子项目，<code>packages/is-odd</code>，在项目中引用<code>is-even</code></p>\n</li>\n<li><p>关联依赖，在根目录下执行<code>npm install</code>，即可自动实现关联依赖</p>\n</li>\n<li><p>项目编译依赖，在根目录<code>nx.json</code>新增build依赖，如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"targetDefaults\": &#123;</span><br><span class=\"line\">    \"build\": &#123;</span><br><span class=\"line\">      \"dependsOn\": [\"^build\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译打包，单独打包子项目<code>is-odd</code>，命令<code>npx nx build is-even</code>，同时会编译打包<code>is-even</code>，因为引用了</p>\n</li>\n<li><p>再次打包，nx会自动引入上一次build的cache缓存，从而加快编译速度</p>\n</li>\n<li><p>将所有的子项目统一打包编译，命令:<code>npx nx run-many --target=build</code></p>\n</li>\n<li><p>如果不需要使用cache缓存，可以使用命令:<code>npx nx run-many --target=build --skip-nx-cache</code></p>\n</li>\n<li><p>如果需要查看当前子项目依赖的项目是否被修改，可以使用命令：<code>npx nx affected --target=build</code></p>\n</li>\n</ul>\n<p>到此，一个Nx的Monrepo项目就完成了。</p>\n<p>当然实际应用中，没有那么简单，后续我们将通过Vue(vite) 、 React去完成一个Nx项目，已经如何和现有的CI工作流结合运行。</p>\n<p>同时我们还需要解决这些问题：</p>\n<ol>\n<li>如何解决非Monrepo项目依赖Monrepo项目的公共代码</li>\n<li>如何解决子项目需要发布，但是所依赖的其他子项目不发布问题</li>\n<li>如何解决不同项目将采用不同的框架，如Vue、React，项目之间依赖问题？</li>\n<li>如何解决不同子项目中依赖同一个npm包，但是版本不一致的问题？是通过前置检查？还是各自完全安装好？</li>\n<li>实际应用中，如果遇到子项目需要单独剥离开成立单独项目，应该如何操作？</li>\n<li>后续如果子项目越来越多，导致本地开发中项目运行开销过大，无法运行，如何解决？</li>\n<li>子项目越来越多，是否有规范可以定义是否需要单独成立子项目？</li>\n<li>如何定制公共代码剥离规则？如何检查规则应用？</li>\n<li>前后端分离项目和SSR项目能否一起囊括？</li>\n<li>项目权限问题如何解决？如：外包人员无法查看其它子项目代码？</li>\n<li>……</li>\n</ol>\n<p>我们有很多问题，但是基本上都是引入Monrepo大仓项目导致的问题，我们希望Nx能有相关的解决方案提供参考或者应用，减少我们实际开发的阻塞。</p>\n<p>所以，Nx项目还是持续跟进研究学习，找个实际项目去落地实践，或者将现有一些项目去整合试试看。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>自从组内开发架构采用Monorepo大仓项目后，了解一些Monorepo的常用技术，主要采用了<code>lerna</code>框架去做多个子项目统一package.json命令脚本，因此想要了解一下lerna框架，同时也查到lerna的公司同步开发<code>Nx</code>项目，尝试一下它的应用。</p>\n<p>想了解Monorepo大仓项目如何设计的可以翻到前往阅读 <a href=\"/2023/01/07/today/20220107/\">《从npm版本依赖到Monorepo大仓项目》</a>。</p>","more":"<h1 id=\"lerna\"><a href=\"#lerna\" class=\"headerlink\" title=\"lerna\"></a>lerna</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>Lerna是用于TypeScrip/JavaScript的原始monorepo工具。它已经存在多年，被数以万计的项目使用，包括Reaction和Jest。</p>\n</blockquote>\n<p>了解Lerna，必须想要了解一下<code>monorepo</code>架构， 简单点说，<code>monorepo</code>架构就是将许多不同业务项目的归纳一个仓库中，抽取公共部分，降低版本依赖的复杂度，达到所有项目统一化的架构。</p>\n<p>Lerna解决了<code>monorepo</code>架构以下问题：</p>\n<ul>\n<li>将不同子项目链接在一起，不用发布npm就可以互相引用</li>\n<li>可以将命令顺序执行，从而实现将不同项目分发到不同机器</li>\n<li>参与CI/CD工作流中，拥有自由的定制脚本功能，从而满足不同的工作流</li>\n</ul>\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h2><p>主要有以下几个步骤：</p>\n<ul>\n<li>初始化项目： <code>npx lerna init</code></li>\n<li>修改<code>package.json</code>，去添加一个npm/yarn/pnpm workspace</li>\n<li>运行命令<code>lerna run xxx</code>： 统一执行所有子项目的scripts命令，如：lerna run build</li>\n</ul>\n<p>更加具体的操作，可以到官方文档去查看<a href=\"https://lerna.js.org/docs/features/run-tasks\" target=\"_blank\" rel=\"noopener\">https://lerna.js.org/docs/features/run-tasks</a></p>\n<h1 id=\"Nx\"><a href=\"#Nx\" class=\"headerlink\" title=\"Nx\"></a>Nx</h1><p>先说明一下Nx与Lerna的关系：</p>\n<blockquote>\n<p>Nrwl(开源构建系统NX背后的公司)已经接管了Lerna。NX是一个由前谷歌员工开发的构建系统，它利用了谷歌内部工具使用的许多技术。Lerna v5是这种新管理方式下的第一个版本，它更新了过时的包，并开始对存储库本身进行一些清理。从V5.1+开始，Lerna提供了集成NX的新可能性，并将许多任务调度工作推迟到NX。</p>\n</blockquote>\n<h2 id=\"是什么-1\"><a href=\"#是什么-1\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>官方介绍：</p>\n<blockquote>\n<p>Nx是一个智能、快速和可扩展的构建系统，具有一流的Monorepo支持和强大的集成。</p>\n</blockquote>\n<p>Nx的目标是：</p>\n<ul>\n<li>加快你的前端项目工程化</li>\n<li>提供一流的开发体验</li>\n</ul>\n<h2 id=\"实践-第一个nx项目\"><a href=\"#实践-第一个nx项目\" class=\"headerlink\" title=\"实践-第一个nx项目\"></a>实践-第一个nx项目</h2><ul>\n<li><p>初始化项目， <code>npx create-nx-workspace@latest package-based --preset=npm</code></p>\n</li>\n<li><p>添加子项目， 目录下新建标准npm项目<code>packages/is-even</code></p>\n</li>\n<li><p>安装依赖，在根目录下执行<code>npm i typescript -D -W</code></p>\n</li>\n<li><p>第一次编译，根目录下执行<code>npx nx build is-even</code></p>\n</li>\n<li><p>新建第二个子项目，<code>packages/is-odd</code>，在项目中引用<code>is-even</code></p>\n</li>\n<li><p>关联依赖，在根目录下执行<code>npm install</code>，即可自动实现关联依赖</p>\n</li>\n<li><p>项目编译依赖，在根目录<code>nx.json</code>新增build依赖，如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"targetDefaults\": &#123;</span><br><span class=\"line\">    \"build\": &#123;</span><br><span class=\"line\">      \"dependsOn\": [\"^build\"]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译打包，单独打包子项目<code>is-odd</code>，命令<code>npx nx build is-even</code>，同时会编译打包<code>is-even</code>，因为引用了</p>\n</li>\n<li><p>再次打包，nx会自动引入上一次build的cache缓存，从而加快编译速度</p>\n</li>\n<li><p>将所有的子项目统一打包编译，命令:<code>npx nx run-many --target=build</code></p>\n</li>\n<li><p>如果不需要使用cache缓存，可以使用命令:<code>npx nx run-many --target=build --skip-nx-cache</code></p>\n</li>\n<li><p>如果需要查看当前子项目依赖的项目是否被修改，可以使用命令：<code>npx nx affected --target=build</code></p>\n</li>\n</ul>\n<p>到此，一个Nx的Monrepo项目就完成了。</p>\n<p>当然实际应用中，没有那么简单，后续我们将通过Vue(vite) 、 React去完成一个Nx项目，已经如何和现有的CI工作流结合运行。</p>\n<p>同时我们还需要解决这些问题：</p>\n<ol>\n<li>如何解决非Monrepo项目依赖Monrepo项目的公共代码</li>\n<li>如何解决子项目需要发布，但是所依赖的其他子项目不发布问题</li>\n<li>如何解决不同项目将采用不同的框架，如Vue、React，项目之间依赖问题？</li>\n<li>如何解决不同子项目中依赖同一个npm包，但是版本不一致的问题？是通过前置检查？还是各自完全安装好？</li>\n<li>实际应用中，如果遇到子项目需要单独剥离开成立单独项目，应该如何操作？</li>\n<li>后续如果子项目越来越多，导致本地开发中项目运行开销过大，无法运行，如何解决？</li>\n<li>子项目越来越多，是否有规范可以定义是否需要单独成立子项目？</li>\n<li>如何定制公共代码剥离规则？如何检查规则应用？</li>\n<li>前后端分离项目和SSR项目能否一起囊括？</li>\n<li>项目权限问题如何解决？如：外包人员无法查看其它子项目代码？</li>\n<li>……</li>\n</ol>\n<p>我们有很多问题，但是基本上都是引入Monrepo大仓项目导致的问题，我们希望Nx能有相关的解决方案提供参考或者应用，减少我们实际开发的阻塞。</p>\n<p>所以，Nx项目还是持续跟进研究学习，找个实际项目去落地实践，或者将现有一些项目去整合试试看。</p>"},{"title":"从nest.js中了解IoC和DI的实现","toc":true,"date":"2023-01-22T10:00:01.000Z","_content":"\n# 背景\n\n从上一篇[《从egg.js转到nest.js》](/2023/01/10/today/20220110/)，想对其再深入了解一下，尤其比较好奇Typescript是如何实现`IoC`和`DI`，因为在Java的是通过的反射(Spring IoC实现原理)去创建对应的类。因此下文将详细讲解Nest.js中IoC和DI的实现原理。\n\n# 前置知识\n\n在了解实现原理之前有几个知识概念，需要了解一下：\n\n- IoC和DI\n- JavaScript的Reflect\n- TypeScript的装饰器\n\n<!-- more -->\n\n## IoC和DI\n\nIoC和DI其实同属于一个技术理念，下面维基百科的介绍：\n\n> IoC，控制反转（英语：Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。\n\n简单的说IoC是一个开发代码的设计原则，DI则是实现这个设计原则的方案。\n\n### IoC\n从代码层上来讲解IoC，简单的说就是：\n\n- Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式地用 new 创建 B 的对象。\n- 使用IoC设计原则后，A 的代码只需要定义一个 private 的B对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。\n- IoC将采用依赖注入或依赖查找两种方案去实现\n\n再通俗一点，就是有一个IoC容器管家，负责你开发的代码类的归置，你只管使用代码类，不用管它放在哪里，只需要调用即可。\n\n### DI\n\nDI，Dependency Injection，依赖注入\n\n> 依赖注入是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的属性中\n> 依赖查找是主动索取相应类型的对象，获得依赖对象的时间也可以在代码中自由控制\n\n简单的说，就是依赖注入是将需要注入的对象完全交给框架去实现，而依赖查找则是开发者通过框架提供的方法，由自己控制需要注入的时间点。\n\n### 问题\n\n采用IoC和DI，需要注意的问题是：\n\n- 循环依赖，就是A依赖B，B依赖A，如何避免这种情况发生，或者框架提供什么样的方案去避免？\n- 如果依赖的类越来越多，会不会导致项目启动速度变慢，因为需要初始化类很多，尤其当遇到一些类初始化可能会错误，但其实是可以忽略的？\n- 初始化类的顺序如何控制，如：A依赖B，需要B实例化后才能实例？\n\n## JavaScript的Reflect\n\nReflect在MDN网站是这么解释的：\n> Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers (en-US)的方法相同。Reflect不是一个函数对象，因此它是不可构造的。\n> 其中的一些方法与 Object 相同，尽管二者之间存在某些细微上的差别。\n\n按照前端开发者理解来说，Reflect能解决开发中遇到很多this的代理问题，虽然大部分方案都可以通过其他方式解决，但是Reflect的定义能帮助我们快速实现这些功能。\n\nReflect符合ES6标准的提供的API有如下几个：\n\n- `Reflect.apply(target, thisArgument, argumentsList)`,和 `Function.prototype.apply(thisArgument, argumentsList)` 功能类似，也是调用函数，且允许将函数的this指向`thisArgument`\n- `Reflect.construct(target, argumentsList[, newTarget])`，new一个target，且可以将target的this的指向新的newTarget对象\n- `Reflect.defineProperty(target, propertyKey, attributes)`，拦截target对象的操作，和 `Object.defineProperty()` 类似\n- `Reflect.deleteProperty(target, propertyKey)`，作为函数的delete操作符，相当于执行 delete target[name]。\n- `Reflect.get(target, propertyKey[, receiver])`，获取target的属性值，和`target[name]`的区别在于可以`receiver`，可以指定调用属性值的时候`this`\n- `Reflect.getOwnPropertyDescriptor(target, propertyKey)`，类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符，否则返回 undefined。\n- `Reflect.getPrototypeOf(target)`，返回指定对象的原型（即内部的 [[Prototype]] 属性的值）\n- `Reflect.has(target, propertyKey)`，判断一个对象是否存在某个属性，和 `in 运算符` 的功能完全相同\n- `Reflect.ownKeys(target)`，返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable 影响).\n- `Reflect.isExtensible(target)`， 判断一个对象是否可扩展（即是否能够添加新的属性）\n- `Reflect.preventExtensions(target)`，阻止新属性添加到对象\n- `Reflect.set(target, propertyKey, value[, receiver])`，将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。\n- `Reflect.setPrototypeOf(target, prototype)`，可设置对象的原型，即内部的 [[Prototype]] 属性）为另一个对象或 null，利用原型链用来强制给某个对象增加额外方法\n\n当然还有一些没有进入标准，但是在ES7提案的方法`Reflect Metadata`（Typescript已实现），后面Nest.js已采用的方法，主要有以下几个：\n\n- `Reflect.getMetadata(metadataKey, target, propertyKey)`, 用于获取某个类的元数据\n- `Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);`, 用于设置某个类的元数据\n\n简单理解这个api方法，你可以通过`Reflect.defineMetadata`获取到类或者函数的参数类型，也可以给类或者函数设置元数据再获取，具体代码如下：\n\n```TypeScript\nfunction Prop(): PropertyDecorator {\n  return (target, key: string) => {\n    const type = Reflect.getMetadata('design:type', target, key);\n    console.log(`${key} type: ${type.name}`);\n    // other...\n  };\n}\n\nclass SomeClass {\n  @Prop()\n  public Aprop!: string;\n}\n```\nTypeScript 的优势了，TypeScript 支持编译时自动添加一些 metadata 数据，如下所示：\n\n- `Reflect.getMetadata(\"design:type\", target, key)`， 获取target函数类型\n- `Reflect.getMetadata(\"design:paramtypes\", target, key)`， 获取target函数参数类型\n- `Reflect.getMetadata(\"design:returntype\", target, key)`， 获取target函数返回值类型\n\n这个`Reflect.getMetadata(\"design:paramtypes\", target, key)`基本上就是Nest.js实现Ioc和DI的核心代码。\n\n## TypeScript的装饰器\n\n> 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。\n> 装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。\n\n如何实现一个装饰器呢？\n\n如果我们要定制一个修饰器如何应用到一个声明上，我们得写一个装饰器工厂函数。 装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。\n\n```javascript\nfunction color(value: string) { // 这是一个装饰器工厂\n    return function (target) { //  这是装饰器\n        // do something with \"target\" and \"value\"...\n    }\n}\n\n@color('blue')\nfunction say(){\n    ....\n}\n```\n\n# IoC和DI实现原理\n\n其实在了解完`Reflect.getMetadata`，我们就大概知道IoC和DI的实现原理，我们以一个`@Controller`为例, 具体步骤如下：\n\n- 实现`@Controller`装饰器工厂，标识待注入的类\n- 实现IoC容器，注册要被依赖注入的类\n- 获取待注入的类其构造函数所需要的参数类型，并实例化，返回待注入的类\n\n具体代码如下：\n```TypeScript\n// 实现Controller装饰器\nfunction Controller(path: string){\n    return function(target){\n        Reflect.defineMetadata('Controller', path, target);\n    }\n}\n\n// 需要依赖注入的类\nclass A(){\n    say(){\n        console.log('aaaaaa');\n    }\n}\n\n// 引用\n@Controller(\"/api\")\nclass Demo(){\n    construtor(a: A ){\n        this.a = A;\n    }\n\n    say(){\n        this.a.say();\n    }\n}\n\n\n// 实现Ioc容器和DI依赖注入\nclass Container {\n  provides = new Map()\n  \n  // 注册要被依赖注入类，形成IoC容器 后续可以做\n  addProvide(provider) {\n    this.provides.set(provider.name, provider)\n  }\n  // 注入依赖类\n  inject(target) {\n      // 获取参数类型\n      const paramTypes = Reflect.getMetadata('design:paramtypes', target) || []\n      const args = paramTypes.map((type) => {\n        return new type() // 简单做一下实例化\n      })\n      return Reflect.construct(target, args)\n  }\n}\n\nconst container = new Container()\nconst project = container.inject(Project)\n\n// project就是最终生成返回使用的类\n\nproject.say(); // 输出 aaaaaa\n\n```\n\n所以Nest.js实现IoC和DI的核心实现原理：\n\n- 通过装饰器给 class 或者对象添加 metadata\n- 运行的时候通过这些元数据来实现依赖的扫描，对象的创建等等功能\n\n当然，还有很多问题没解决，目前只是简单实现了依赖注入，上述IoC的问题还没有解决，由于篇幅较长，所以拆成几篇，放到后续继续研究。","source":"_posts/today/20230122.md","raw":"---\ntitle: 从nest.js中了解IoC和DI的实现\ntoc: true\ndate: 2023-01-22 18:00:01\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n从上一篇[《从egg.js转到nest.js》](/2023/01/10/today/20220110/)，想对其再深入了解一下，尤其比较好奇Typescript是如何实现`IoC`和`DI`，因为在Java的是通过的反射(Spring IoC实现原理)去创建对应的类。因此下文将详细讲解Nest.js中IoC和DI的实现原理。\n\n# 前置知识\n\n在了解实现原理之前有几个知识概念，需要了解一下：\n\n- IoC和DI\n- JavaScript的Reflect\n- TypeScript的装饰器\n\n<!-- more -->\n\n## IoC和DI\n\nIoC和DI其实同属于一个技术理念，下面维基百科的介绍：\n\n> IoC，控制反转（英语：Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。\n\n简单的说IoC是一个开发代码的设计原则，DI则是实现这个设计原则的方案。\n\n### IoC\n从代码层上来讲解IoC，简单的说就是：\n\n- Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式地用 new 创建 B 的对象。\n- 使用IoC设计原则后，A 的代码只需要定义一个 private 的B对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。\n- IoC将采用依赖注入或依赖查找两种方案去实现\n\n再通俗一点，就是有一个IoC容器管家，负责你开发的代码类的归置，你只管使用代码类，不用管它放在哪里，只需要调用即可。\n\n### DI\n\nDI，Dependency Injection，依赖注入\n\n> 依赖注入是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的属性中\n> 依赖查找是主动索取相应类型的对象，获得依赖对象的时间也可以在代码中自由控制\n\n简单的说，就是依赖注入是将需要注入的对象完全交给框架去实现，而依赖查找则是开发者通过框架提供的方法，由自己控制需要注入的时间点。\n\n### 问题\n\n采用IoC和DI，需要注意的问题是：\n\n- 循环依赖，就是A依赖B，B依赖A，如何避免这种情况发生，或者框架提供什么样的方案去避免？\n- 如果依赖的类越来越多，会不会导致项目启动速度变慢，因为需要初始化类很多，尤其当遇到一些类初始化可能会错误，但其实是可以忽略的？\n- 初始化类的顺序如何控制，如：A依赖B，需要B实例化后才能实例？\n\n## JavaScript的Reflect\n\nReflect在MDN网站是这么解释的：\n> Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers (en-US)的方法相同。Reflect不是一个函数对象，因此它是不可构造的。\n> 其中的一些方法与 Object 相同，尽管二者之间存在某些细微上的差别。\n\n按照前端开发者理解来说，Reflect能解决开发中遇到很多this的代理问题，虽然大部分方案都可以通过其他方式解决，但是Reflect的定义能帮助我们快速实现这些功能。\n\nReflect符合ES6标准的提供的API有如下几个：\n\n- `Reflect.apply(target, thisArgument, argumentsList)`,和 `Function.prototype.apply(thisArgument, argumentsList)` 功能类似，也是调用函数，且允许将函数的this指向`thisArgument`\n- `Reflect.construct(target, argumentsList[, newTarget])`，new一个target，且可以将target的this的指向新的newTarget对象\n- `Reflect.defineProperty(target, propertyKey, attributes)`，拦截target对象的操作，和 `Object.defineProperty()` 类似\n- `Reflect.deleteProperty(target, propertyKey)`，作为函数的delete操作符，相当于执行 delete target[name]。\n- `Reflect.get(target, propertyKey[, receiver])`，获取target的属性值，和`target[name]`的区别在于可以`receiver`，可以指定调用属性值的时候`this`\n- `Reflect.getOwnPropertyDescriptor(target, propertyKey)`，类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符，否则返回 undefined。\n- `Reflect.getPrototypeOf(target)`，返回指定对象的原型（即内部的 [[Prototype]] 属性的值）\n- `Reflect.has(target, propertyKey)`，判断一个对象是否存在某个属性，和 `in 运算符` 的功能完全相同\n- `Reflect.ownKeys(target)`，返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable 影响).\n- `Reflect.isExtensible(target)`， 判断一个对象是否可扩展（即是否能够添加新的属性）\n- `Reflect.preventExtensions(target)`，阻止新属性添加到对象\n- `Reflect.set(target, propertyKey, value[, receiver])`，将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。\n- `Reflect.setPrototypeOf(target, prototype)`，可设置对象的原型，即内部的 [[Prototype]] 属性）为另一个对象或 null，利用原型链用来强制给某个对象增加额外方法\n\n当然还有一些没有进入标准，但是在ES7提案的方法`Reflect Metadata`（Typescript已实现），后面Nest.js已采用的方法，主要有以下几个：\n\n- `Reflect.getMetadata(metadataKey, target, propertyKey)`, 用于获取某个类的元数据\n- `Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);`, 用于设置某个类的元数据\n\n简单理解这个api方法，你可以通过`Reflect.defineMetadata`获取到类或者函数的参数类型，也可以给类或者函数设置元数据再获取，具体代码如下：\n\n```TypeScript\nfunction Prop(): PropertyDecorator {\n  return (target, key: string) => {\n    const type = Reflect.getMetadata('design:type', target, key);\n    console.log(`${key} type: ${type.name}`);\n    // other...\n  };\n}\n\nclass SomeClass {\n  @Prop()\n  public Aprop!: string;\n}\n```\nTypeScript 的优势了，TypeScript 支持编译时自动添加一些 metadata 数据，如下所示：\n\n- `Reflect.getMetadata(\"design:type\", target, key)`， 获取target函数类型\n- `Reflect.getMetadata(\"design:paramtypes\", target, key)`， 获取target函数参数类型\n- `Reflect.getMetadata(\"design:returntype\", target, key)`， 获取target函数返回值类型\n\n这个`Reflect.getMetadata(\"design:paramtypes\", target, key)`基本上就是Nest.js实现Ioc和DI的核心代码。\n\n## TypeScript的装饰器\n\n> 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。\n> 装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。\n\n如何实现一个装饰器呢？\n\n如果我们要定制一个修饰器如何应用到一个声明上，我们得写一个装饰器工厂函数。 装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。\n\n```javascript\nfunction color(value: string) { // 这是一个装饰器工厂\n    return function (target) { //  这是装饰器\n        // do something with \"target\" and \"value\"...\n    }\n}\n\n@color('blue')\nfunction say(){\n    ....\n}\n```\n\n# IoC和DI实现原理\n\n其实在了解完`Reflect.getMetadata`，我们就大概知道IoC和DI的实现原理，我们以一个`@Controller`为例, 具体步骤如下：\n\n- 实现`@Controller`装饰器工厂，标识待注入的类\n- 实现IoC容器，注册要被依赖注入的类\n- 获取待注入的类其构造函数所需要的参数类型，并实例化，返回待注入的类\n\n具体代码如下：\n```TypeScript\n// 实现Controller装饰器\nfunction Controller(path: string){\n    return function(target){\n        Reflect.defineMetadata('Controller', path, target);\n    }\n}\n\n// 需要依赖注入的类\nclass A(){\n    say(){\n        console.log('aaaaaa');\n    }\n}\n\n// 引用\n@Controller(\"/api\")\nclass Demo(){\n    construtor(a: A ){\n        this.a = A;\n    }\n\n    say(){\n        this.a.say();\n    }\n}\n\n\n// 实现Ioc容器和DI依赖注入\nclass Container {\n  provides = new Map()\n  \n  // 注册要被依赖注入类，形成IoC容器 后续可以做\n  addProvide(provider) {\n    this.provides.set(provider.name, provider)\n  }\n  // 注入依赖类\n  inject(target) {\n      // 获取参数类型\n      const paramTypes = Reflect.getMetadata('design:paramtypes', target) || []\n      const args = paramTypes.map((type) => {\n        return new type() // 简单做一下实例化\n      })\n      return Reflect.construct(target, args)\n  }\n}\n\nconst container = new Container()\nconst project = container.inject(Project)\n\n// project就是最终生成返回使用的类\n\nproject.say(); // 输出 aaaaaa\n\n```\n\n所以Nest.js实现IoC和DI的核心实现原理：\n\n- 通过装饰器给 class 或者对象添加 metadata\n- 运行的时候通过这些元数据来实现依赖的扫描，对象的创建等等功能\n\n当然，还有很多问题没解决，目前只是简单实现了依赖注入，上述IoC的问题还没有解决，由于篇幅较长，所以拆成几篇，放到后续继续研究。","slug":"today/20230122","published":1,"updated":"2023-01-28T17:56:30.263Z","_id":"cldztfk9n0018nxpchzfd0zbb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>从上一篇<a href=\"/2023/01/10/today/20220110/\">《从egg.js转到nest.js》</a>，想对其再深入了解一下，尤其比较好奇Typescript是如何实现<code>IoC</code>和<code>DI</code>，因为在Java的是通过的反射(Spring IoC实现原理)去创建对应的类。因此下文将详细讲解Nest.js中IoC和DI的实现原理。</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>在了解实现原理之前有几个知识概念，需要了解一下：</p>\n<ul>\n<li>IoC和DI</li>\n<li>JavaScript的Reflect</li>\n<li>TypeScript的装饰器</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"IoC和DI\"><a href=\"#IoC和DI\" class=\"headerlink\" title=\"IoC和DI\"></a>IoC和DI</h2><p>IoC和DI其实同属于一个技术理念，下面维基百科的介绍：</p>\n<blockquote>\n<p>IoC，控制反转（英语：Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。</p>\n</blockquote>\n<p>简单的说IoC是一个开发代码的设计原则，DI则是实现这个设计原则的方案。</p>\n<h3 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h3><p>从代码层上来讲解IoC，简单的说就是：</p>\n<ul>\n<li>Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式地用 new 创建 B 的对象。</li>\n<li>使用IoC设计原则后，A 的代码只需要定义一个 private 的B对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。</li>\n<li>IoC将采用依赖注入或依赖查找两种方案去实现</li>\n</ul>\n<p>再通俗一点，就是有一个IoC容器管家，负责你开发的代码类的归置，你只管使用代码类，不用管它放在哪里，只需要调用即可。</p>\n<h3 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h3><p>DI，Dependency Injection，依赖注入</p>\n<blockquote>\n<p>依赖注入是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的属性中<br>依赖查找是主动索取相应类型的对象，获得依赖对象的时间也可以在代码中自由控制</p>\n</blockquote>\n<p>简单的说，就是依赖注入是将需要注入的对象完全交给框架去实现，而依赖查找则是开发者通过框架提供的方法，由自己控制需要注入的时间点。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>采用IoC和DI，需要注意的问题是：</p>\n<ul>\n<li>循环依赖，就是A依赖B，B依赖A，如何避免这种情况发生，或者框架提供什么样的方案去避免？</li>\n<li>如果依赖的类越来越多，会不会导致项目启动速度变慢，因为需要初始化类很多，尤其当遇到一些类初始化可能会错误，但其实是可以忽略的？</li>\n<li>初始化类的顺序如何控制，如：A依赖B，需要B实例化后才能实例？</li>\n</ul>\n<h2 id=\"JavaScript的Reflect\"><a href=\"#JavaScript的Reflect\" class=\"headerlink\" title=\"JavaScript的Reflect\"></a>JavaScript的Reflect</h2><p>Reflect在MDN网站是这么解释的：</p>\n<blockquote>\n<p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers (en-US)的方法相同。Reflect不是一个函数对象，因此它是不可构造的。<br>其中的一些方法与 Object 相同，尽管二者之间存在某些细微上的差别。</p>\n</blockquote>\n<p>按照前端开发者理解来说，Reflect能解决开发中遇到很多this的代理问题，虽然大部分方案都可以通过其他方式解决，但是Reflect的定义能帮助我们快速实现这些功能。</p>\n<p>Reflect符合ES6标准的提供的API有如下几个：</p>\n<ul>\n<li><code>Reflect.apply(target, thisArgument, argumentsList)</code>,和 <code>Function.prototype.apply(thisArgument, argumentsList)</code> 功能类似，也是调用函数，且允许将函数的this指向<code>thisArgument</code></li>\n<li><code>Reflect.construct(target, argumentsList[, newTarget])</code>，new一个target，且可以将target的this的指向新的newTarget对象</li>\n<li><code>Reflect.defineProperty(target, propertyKey, attributes)</code>，拦截target对象的操作，和 <code>Object.defineProperty()</code> 类似</li>\n<li><code>Reflect.deleteProperty(target, propertyKey)</code>，作为函数的delete操作符，相当于执行 delete target[name]。</li>\n<li><code>Reflect.get(target, propertyKey[, receiver])</code>，获取target的属性值，和<code>target[name]</code>的区别在于可以<code>receiver</code>，可以指定调用属性值的时候<code>this</code></li>\n<li><code>Reflect.getOwnPropertyDescriptor(target, propertyKey)</code>，类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符，否则返回 undefined。</li>\n<li><code>Reflect.getPrototypeOf(target)</code>，返回指定对象的原型（即内部的 [[Prototype]] 属性的值）</li>\n<li><code>Reflect.has(target, propertyKey)</code>，判断一个对象是否存在某个属性，和 <code>in 运算符</code> 的功能完全相同</li>\n<li><code>Reflect.ownKeys(target)</code>，返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable 影响).</li>\n<li><code>Reflect.isExtensible(target)</code>， 判断一个对象是否可扩展（即是否能够添加新的属性）</li>\n<li><code>Reflect.preventExtensions(target)</code>，阻止新属性添加到对象</li>\n<li><code>Reflect.set(target, propertyKey, value[, receiver])</code>，将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</li>\n<li><code>Reflect.setPrototypeOf(target, prototype)</code>，可设置对象的原型，即内部的 [[Prototype]] 属性）为另一个对象或 null，利用原型链用来强制给某个对象增加额外方法</li>\n</ul>\n<p>当然还有一些没有进入标准，但是在ES7提案的方法<code>Reflect Metadata</code>（Typescript已实现），后面Nest.js已采用的方法，主要有以下几个：</p>\n<ul>\n<li><code>Reflect.getMetadata(metadataKey, target, propertyKey)</code>, 用于获取某个类的元数据</li>\n<li><code>Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);</code>, 用于设置某个类的元数据</li>\n</ul>\n<p>简单理解这个api方法，你可以通过<code>Reflect.defineMetadata</code>获取到类或者函数的参数类型，也可以给类或者函数设置元数据再获取，具体代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Prop</span>(<span class=\"params\"></span>): <span class=\"title\">PropertyDecorator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">target, key: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = Reflect.getMetadata(<span class=\"string\">'design:type'</span>, target, key);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span> type: <span class=\"subst\">$&#123;<span class=\"keyword\">type</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// other...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SomeClass &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Aprop!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TypeScript 的优势了，TypeScript 支持编译时自动添加一些 metadata 数据，如下所示：</p>\n<ul>\n<li><code>Reflect.getMetadata(&quot;design:type&quot;, target, key)</code>， 获取target函数类型</li>\n<li><code>Reflect.getMetadata(&quot;design:paramtypes&quot;, target, key)</code>， 获取target函数参数类型</li>\n<li><code>Reflect.getMetadata(&quot;design:returntype&quot;, target, key)</code>， 获取target函数返回值类型</li>\n</ul>\n<p>这个<code>Reflect.getMetadata(&quot;design:paramtypes&quot;, target, key)</code>基本上就是Nest.js实现Ioc和DI的核心代码。</p>\n<h2 id=\"TypeScript的装饰器\"><a href=\"#TypeScript的装饰器\" class=\"headerlink\" title=\"TypeScript的装饰器\"></a>TypeScript的装饰器</h2><blockquote>\n<p>装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。<br>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。</p>\n</blockquote>\n<p>如何实现一个装饰器呢？</p>\n<p>如果我们要定制一个修饰器如何应用到一个声明上，我们得写一个装饰器工厂函数。 装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span>(<span class=\"params\">value: string</span>) </span>&#123; <span class=\"comment\">// 这是一个装饰器工厂</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123; <span class=\"comment\">//  这是装饰器</span></span><br><span class=\"line\">        <span class=\"comment\">// do something with \"target\" and \"value\"...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@color(<span class=\"string\">'blue'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"IoC和DI实现原理\"><a href=\"#IoC和DI实现原理\" class=\"headerlink\" title=\"IoC和DI实现原理\"></a>IoC和DI实现原理</h1><p>其实在了解完<code>Reflect.getMetadata</code>，我们就大概知道IoC和DI的实现原理，我们以一个<code>@Controller</code>为例, 具体步骤如下：</p>\n<ul>\n<li>实现<code>@Controller</code>装饰器工厂，标识待注入的类</li>\n<li>实现IoC容器，注册要被依赖注入的类</li>\n<li>获取待注入的类其构造函数所需要的参数类型，并实例化，返回待注入的类</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现Controller装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Controller</span>(<span class=\"params\">path: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">        Reflect.defineMetadata(<span class=\"string\">'Controller'</span>, path, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要依赖注入的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> A()&#123;</span><br><span class=\"line\">    say()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaaaaa'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">\"/api\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Demo()&#123;</span><br><span class=\"line\">    construtor(a: A )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    say()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Ioc容器和DI依赖注入</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Container &#123;</span><br><span class=\"line\">  provides = <span class=\"keyword\">new</span> Map()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 注册要被依赖注入类，形成IoC容器 后续可以做</span></span><br><span class=\"line\">  addProvide(provider) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.provides.set(provider.name, provider)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 注入依赖类</span></span><br><span class=\"line\">  inject(target) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取参数类型</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> paramTypes = Reflect.getMetadata(<span class=\"string\">'design:paramtypes'</span>, target) || []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> args = paramTypes.map(<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">type</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">type</span>() <span class=\"comment\">// 简单做一下实例化</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Reflect.construct(target, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> container = <span class=\"keyword\">new</span> Container()</span><br><span class=\"line\"><span class=\"keyword\">const</span> project = container.inject(Project)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// project就是最终生成返回使用的类</span></span><br><span class=\"line\"></span><br><span class=\"line\">project.say(); <span class=\"comment\">// 输出 aaaaaa</span></span><br></pre></td></tr></table></figure>\n\n<p>所以Nest.js实现IoC和DI的核心实现原理：</p>\n<ul>\n<li>通过装饰器给 class 或者对象添加 metadata</li>\n<li>运行的时候通过这些元数据来实现依赖的扫描，对象的创建等等功能</li>\n</ul>\n<p>当然，还有很多问题没解决，目前只是简单实现了依赖注入，上述IoC的问题还没有解决，由于篇幅较长，所以拆成几篇，放到后续继续研究。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>从上一篇<a href=\"/2023/01/10/today/20220110/\">《从egg.js转到nest.js》</a>，想对其再深入了解一下，尤其比较好奇Typescript是如何实现<code>IoC</code>和<code>DI</code>，因为在Java的是通过的反射(Spring IoC实现原理)去创建对应的类。因此下文将详细讲解Nest.js中IoC和DI的实现原理。</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>在了解实现原理之前有几个知识概念，需要了解一下：</p>\n<ul>\n<li>IoC和DI</li>\n<li>JavaScript的Reflect</li>\n<li>TypeScript的装饰器</li>\n</ul>","more":"<h2 id=\"IoC和DI\"><a href=\"#IoC和DI\" class=\"headerlink\" title=\"IoC和DI\"></a>IoC和DI</h2><p>IoC和DI其实同属于一个技术理念，下面维基百科的介绍：</p>\n<blockquote>\n<p>IoC，控制反转（英语：Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。</p>\n</blockquote>\n<p>简单的说IoC是一个开发代码的设计原则，DI则是实现这个设计原则的方案。</p>\n<h3 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h3><p>从代码层上来讲解IoC，简单的说就是：</p>\n<ul>\n<li>Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式地用 new 创建 B 的对象。</li>\n<li>使用IoC设计原则后，A 的代码只需要定义一个 private 的B对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。</li>\n<li>IoC将采用依赖注入或依赖查找两种方案去实现</li>\n</ul>\n<p>再通俗一点，就是有一个IoC容器管家，负责你开发的代码类的归置，你只管使用代码类，不用管它放在哪里，只需要调用即可。</p>\n<h3 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h3><p>DI，Dependency Injection，依赖注入</p>\n<blockquote>\n<p>依赖注入是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的属性中<br>依赖查找是主动索取相应类型的对象，获得依赖对象的时间也可以在代码中自由控制</p>\n</blockquote>\n<p>简单的说，就是依赖注入是将需要注入的对象完全交给框架去实现，而依赖查找则是开发者通过框架提供的方法，由自己控制需要注入的时间点。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>采用IoC和DI，需要注意的问题是：</p>\n<ul>\n<li>循环依赖，就是A依赖B，B依赖A，如何避免这种情况发生，或者框架提供什么样的方案去避免？</li>\n<li>如果依赖的类越来越多，会不会导致项目启动速度变慢，因为需要初始化类很多，尤其当遇到一些类初始化可能会错误，但其实是可以忽略的？</li>\n<li>初始化类的顺序如何控制，如：A依赖B，需要B实例化后才能实例？</li>\n</ul>\n<h2 id=\"JavaScript的Reflect\"><a href=\"#JavaScript的Reflect\" class=\"headerlink\" title=\"JavaScript的Reflect\"></a>JavaScript的Reflect</h2><p>Reflect在MDN网站是这么解释的：</p>\n<blockquote>\n<p>Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers (en-US)的方法相同。Reflect不是一个函数对象，因此它是不可构造的。<br>其中的一些方法与 Object 相同，尽管二者之间存在某些细微上的差别。</p>\n</blockquote>\n<p>按照前端开发者理解来说，Reflect能解决开发中遇到很多this的代理问题，虽然大部分方案都可以通过其他方式解决，但是Reflect的定义能帮助我们快速实现这些功能。</p>\n<p>Reflect符合ES6标准的提供的API有如下几个：</p>\n<ul>\n<li><code>Reflect.apply(target, thisArgument, argumentsList)</code>,和 <code>Function.prototype.apply(thisArgument, argumentsList)</code> 功能类似，也是调用函数，且允许将函数的this指向<code>thisArgument</code></li>\n<li><code>Reflect.construct(target, argumentsList[, newTarget])</code>，new一个target，且可以将target的this的指向新的newTarget对象</li>\n<li><code>Reflect.defineProperty(target, propertyKey, attributes)</code>，拦截target对象的操作，和 <code>Object.defineProperty()</code> 类似</li>\n<li><code>Reflect.deleteProperty(target, propertyKey)</code>，作为函数的delete操作符，相当于执行 delete target[name]。</li>\n<li><code>Reflect.get(target, propertyKey[, receiver])</code>，获取target的属性值，和<code>target[name]</code>的区别在于可以<code>receiver</code>，可以指定调用属性值的时候<code>this</code></li>\n<li><code>Reflect.getOwnPropertyDescriptor(target, propertyKey)</code>，类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符，否则返回 undefined。</li>\n<li><code>Reflect.getPrototypeOf(target)</code>，返回指定对象的原型（即内部的 [[Prototype]] 属性的值）</li>\n<li><code>Reflect.has(target, propertyKey)</code>，判断一个对象是否存在某个属性，和 <code>in 运算符</code> 的功能完全相同</li>\n<li><code>Reflect.ownKeys(target)</code>，返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable 影响).</li>\n<li><code>Reflect.isExtensible(target)</code>， 判断一个对象是否可扩展（即是否能够添加新的属性）</li>\n<li><code>Reflect.preventExtensions(target)</code>，阻止新属性添加到对象</li>\n<li><code>Reflect.set(target, propertyKey, value[, receiver])</code>，将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</li>\n<li><code>Reflect.setPrototypeOf(target, prototype)</code>，可设置对象的原型，即内部的 [[Prototype]] 属性）为另一个对象或 null，利用原型链用来强制给某个对象增加额外方法</li>\n</ul>\n<p>当然还有一些没有进入标准，但是在ES7提案的方法<code>Reflect Metadata</code>（Typescript已实现），后面Nest.js已采用的方法，主要有以下几个：</p>\n<ul>\n<li><code>Reflect.getMetadata(metadataKey, target, propertyKey)</code>, 用于获取某个类的元数据</li>\n<li><code>Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);</code>, 用于设置某个类的元数据</li>\n</ul>\n<p>简单理解这个api方法，你可以通过<code>Reflect.defineMetadata</code>获取到类或者函数的参数类型，也可以给类或者函数设置元数据再获取，具体代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Prop</span>(<span class=\"params\"></span>): <span class=\"title\">PropertyDecorator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">target, key: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">type</span> = Reflect.getMetadata(<span class=\"string\">'design:type'</span>, target, key);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span> type: <span class=\"subst\">$&#123;<span class=\"keyword\">type</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// other...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SomeClass &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Aprop!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TypeScript 的优势了，TypeScript 支持编译时自动添加一些 metadata 数据，如下所示：</p>\n<ul>\n<li><code>Reflect.getMetadata(&quot;design:type&quot;, target, key)</code>， 获取target函数类型</li>\n<li><code>Reflect.getMetadata(&quot;design:paramtypes&quot;, target, key)</code>， 获取target函数参数类型</li>\n<li><code>Reflect.getMetadata(&quot;design:returntype&quot;, target, key)</code>， 获取target函数返回值类型</li>\n</ul>\n<p>这个<code>Reflect.getMetadata(&quot;design:paramtypes&quot;, target, key)</code>基本上就是Nest.js实现Ioc和DI的核心代码。</p>\n<h2 id=\"TypeScript的装饰器\"><a href=\"#TypeScript的装饰器\" class=\"headerlink\" title=\"TypeScript的装饰器\"></a>TypeScript的装饰器</h2><blockquote>\n<p>装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。<br>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。</p>\n</blockquote>\n<p>如何实现一个装饰器呢？</p>\n<p>如果我们要定制一个修饰器如何应用到一个声明上，我们得写一个装饰器工厂函数。 装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span>(<span class=\"params\">value: string</span>) </span>&#123; <span class=\"comment\">// 这是一个装饰器工厂</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123; <span class=\"comment\">//  这是装饰器</span></span><br><span class=\"line\">        <span class=\"comment\">// do something with \"target\" and \"value\"...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@color(<span class=\"string\">'blue'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"IoC和DI实现原理\"><a href=\"#IoC和DI实现原理\" class=\"headerlink\" title=\"IoC和DI实现原理\"></a>IoC和DI实现原理</h1><p>其实在了解完<code>Reflect.getMetadata</code>，我们就大概知道IoC和DI的实现原理，我们以一个<code>@Controller</code>为例, 具体步骤如下：</p>\n<ul>\n<li>实现<code>@Controller</code>装饰器工厂，标识待注入的类</li>\n<li>实现IoC容器，注册要被依赖注入的类</li>\n<li>获取待注入的类其构造函数所需要的参数类型，并实例化，返回待注入的类</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现Controller装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Controller</span>(<span class=\"params\">path: <span class=\"built_in\">string</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">        Reflect.defineMetadata(<span class=\"string\">'Controller'</span>, path, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要依赖注入的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> A()&#123;</span><br><span class=\"line\">    say()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaaaaa'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">\"/api\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> Demo()&#123;</span><br><span class=\"line\">    construtor(a: A )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = A;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    say()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Ioc容器和DI依赖注入</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Container &#123;</span><br><span class=\"line\">  provides = <span class=\"keyword\">new</span> Map()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 注册要被依赖注入类，形成IoC容器 后续可以做</span></span><br><span class=\"line\">  addProvide(provider) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.provides.set(provider.name, provider)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 注入依赖类</span></span><br><span class=\"line\">  inject(target) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取参数类型</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> paramTypes = Reflect.getMetadata(<span class=\"string\">'design:paramtypes'</span>, target) || []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> args = paramTypes.map(<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">type</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">type</span>() <span class=\"comment\">// 简单做一下实例化</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Reflect.construct(target, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> container = <span class=\"keyword\">new</span> Container()</span><br><span class=\"line\"><span class=\"keyword\">const</span> project = container.inject(Project)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// project就是最终生成返回使用的类</span></span><br><span class=\"line\"></span><br><span class=\"line\">project.say(); <span class=\"comment\">// 输出 aaaaaa</span></span><br></pre></td></tr></table></figure>\n\n<p>所以Nest.js实现IoC和DI的核心实现原理：</p>\n<ul>\n<li>通过装饰器给 class 或者对象添加 metadata</li>\n<li>运行的时候通过这些元数据来实现依赖的扫描，对象的创建等等功能</li>\n</ul>\n<p>当然，还有很多问题没解决，目前只是简单实现了依赖注入，上述IoC的问题还没有解决，由于篇幅较长，所以拆成几篇，放到后续继续研究。</p>"},{"title":"响应式布局中学习Flexbox","date":"2023-01-24T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n之前研究过一篇[《移动端适配UI的全部解决方案对比》](/2023/01/14/today/20220111/)，里面主要通过布局不变，改变布局组件元素的大小去适应移动端。但是这种方式对于PC端或者Pad等大屏幕并不适合，所以从想找找看是否有新的方案能否满足跨端自适应布局方式。\n\n目前同时解决PC端和移动端的响应式布局的解决方案以下几种：\n\n- 通过`@media`媒体查询去设置不同尺寸的样式\n- 通过`Flexbox` `Grid`等现代化布局去做响应式布局\n\n<!-- more -->\n\n# CSS排版布局\n\n先简单再复习一下css是什么：\n> CSS（层叠样式表）用于设置和布置网页——例如，更改内容的字体、颜色、大小和间距，将其拆分为多个列的布局，或添加动画和其他装饰功能。\n\n除了基础样式和动画外，CSS最大的一个功能就是告诉浏览器应该怎么对HTML元素进行排版布局。\n\n> CSS 页面布局技术允许我们拾取网页中的元素，并且控制它们相对正常布局流、周边元素、父容器或者主视口/窗口的位置。\n\n目前，CSS布局分为以下几个：\n\n- 正常布局流，Flow layout，流式布局，是由块级盒子(block)和内联盒子(inline-block)，块级盒子从上至下排列，每个块级盒子会独自占一行，内联盒子则会被父级块级元素的宽度内，它们与其他内联元素、相邻的文本内容（或者被包裹的）被安排在同一行。如果空间不够，溢出的文本或元素将移到新的一行。\n- 弹性盒子，Flexbox，与Flow layout最大的不同点在于，弹性盒子默认支持内部子元素（不管是块级还是内联）水平对齐，还支持等高，从而使得很多布局任务变得更加容易。后面我们详细讲解。\n- 网格，Grid，有点类似表格table布局，相比较Flexbox，Grid更加强大，能适用更加复杂的排版，它包含了列(Columns)、行(Row)等布局。\n- 浮动，Float，最初只用于在成块的文本内浮动图像，但是后来发现它能实现复杂的布局。一个浮动元素会被移出正常文档流，附到其父容器的左或右边，在正常布局中位于该浮动元素之下的内容，此时会围绕着浮动元素，填满其左或右侧的空间。\n- 定位，Position，正常的文档流布局中取出元素，并使它们具有不同的行为，例如放在另一个元素的上面，或者始终保持在浏览器视窗内的同一位置。\n- 多列布局，Column，有点类似Grid，比Grid简单，只是简单将容器分割成几列(`column-count`)，且可以设置（`column-width`）每一列的宽度\n\n\n## 其他知识点\n\n### BFC\n\n`BFC`(block formatting context)，块级格式化上下文，CSS中基于box的一个布局对象和单位，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n满足以下条件之一即为BFC:\n\n1. float的值不为none\n2. position的值不为static或者relative\n3. display的值为 table-cell, table-caption, inline-block,flex, 或者 inline-flex中的其中一个，现代化css用 `display:flow-root`\n4. overflow的值不为visible\n5. 根元素\n\nBFC有几个特点：\n\n- 不影响外部元素，外部元素也影响不到其内部\n- 计算BFC高度的时候，浮动元素的高度也计算在内\n\n\n### 响应式设计\n\n> 随着人们使用的屏幕尺寸的种类越来越多，出现了`响应式网页设计的概念（responsive web design，RWD）`，RWD 指的是允许 Web 页面适应不同屏幕宽度因素等，进行布局和外观的调整的一系列实践。\n\n响应式设计不是一种技术，而是一种设计方式或者理念，它指的是网页的布局应该随着屏幕的变化而自适应改变。\n\n# Flexbox\nFlexbox，Flexible Box， 俗称弹性盒子，是从网页默认流式布局(Flow layout)脱离出来的一种布局模式，其父元素容器还是遵循Flow layout，但是Flexbox中的元素都会遵循Flexbox新的布局方式。\n\n> MDN介绍，弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。\n\nFlexbox的出现主要是为了解决Flow layout布局的一些无法很好解决的问题，如下：\n\n- 一个子元素需要垂直居中显示在容器中\n- 多个子元素需要水平平均对齐在容器中，以及一旦子元素超过父容器的宽度，需要自动换行\n- 所有子元素需要显示同样的高度或者宽度\n\n所以弹性盒子其实是由两部分组成：\n\n- 容器，需要设置为`display:flex`，用来控制子元素内的布局\n- 子元素，遵循Flex布局方式所控制，但是也可以按照Flex布局做一些调整\n\n**同时需要注意一点，Flexbox弹性盒子内，元素的宽度不再是自身所设定的宽度，而是会根据容器设置的规则而发生变化。**\n\n实现一个弹性盒子，其实很简单，只需要设置容器的`display:flex`，即可实现，代码如下：\n\n```html\n<style>\n.container{\n    display: flex;\n}\n.item{\n\n}\n</style>\n<div class=\"container\">\n    <div class=\"item item1\">item1</div>\n    <div class=\"item item2\">item1</div>\n    <div class=\"item item3\">item1</div>\n</div>\n```\n\n## Flexbox的两条轴\n\n要了解Flexbox，首先得知道盒子内部是按照两条轴去进行布局，分别为：\n\n- 主轴，Primary axis，子元素将按照该轴的方向进行排版布局\n- 横轴，Cross axis，子元素默认会按照该轴的宽高度去拉伸自己本身的宽度高\n\n如下图所示：\n\n![](/assets/img/20230124-1.png)\n\n那么Flexbox的属性设置，主要就是围绕这两个轴，分别调整容器内部子元素的对齐方向，子元素的在轴的位置，轴之间的间隔等。\n\n## Flexbox的属性\n\n当然Flex布局的容器还支持其他设置属性：\n- flex-direction 设置子元素的对齐方向，如：垂直(column)、水平(row)\n- justify-content 控制子元素主轴对齐方向\n- align-items 控制子元素横轴对齐方向\n- gap 设置子元素的间隔距离\n- order 设置子元素展示顺序，忽略html的顺序\n- flex-wrap 子元素超过容器大小后是否换行\n\n子元素也可以设置自身属性：\n- flex-grow 设置子元素是否占用剩余空间，如果子元素都设置了，则会按照设置数字大小去做占用比例\n- flex-basis 子元素弹性宽度或者高度设置，当容器空间足够，则会按照此属性设置，如果空间不够，则会占据剩余的空间\n- flex-shrink 当子元素占用空间比容器大，默认会按照子元素占据比例进行缩放，该属性可以改变被压缩比例大小\n- align-self 子元素控制自己横轴对齐方向\n- margin 子元素设置auto后，可以达到类似`justify-content` 或 `align-items`的效果\n\n所有属性设置demo可以查看[Flexbox布局属性设置demo](/code/flex/demo.html)。\n\n## Flexbox的响应式布局\n\n其实了解Flexbox布局，其实再去实现响应式布局，其实已经没有那么难了，不需要`@media`媒体查询那么麻烦一个个设置对应屏幕尺寸，只需要按照以下几个属性去设置对应的即可完成响应式布局：\n\n- 设置一个Flex容器，预先设置好当子元素在不同屏幕的展示排版\n- 利用`flex-wrap: wrap;` 允许子元素自动换行\n- 在设置不同子元素`flex-basis` `flex-grow` 占据容器占比\n- 设置子元素`flex-shrink`是否缩放，从而避免元素被压缩的导致布局展示不对\n- 设置子元素的最小宽度`min-width`，从而避免元素被压缩太小\n\n# 参考资料\n[Flexbox 交互式指南](https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/)","source":"_posts/today/20230124.md","raw":"---\ntitle: 响应式布局中学习Flexbox\ndate: 2023-01-24 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n之前研究过一篇[《移动端适配UI的全部解决方案对比》](/2023/01/14/today/20220111/)，里面主要通过布局不变，改变布局组件元素的大小去适应移动端。但是这种方式对于PC端或者Pad等大屏幕并不适合，所以从想找找看是否有新的方案能否满足跨端自适应布局方式。\n\n目前同时解决PC端和移动端的响应式布局的解决方案以下几种：\n\n- 通过`@media`媒体查询去设置不同尺寸的样式\n- 通过`Flexbox` `Grid`等现代化布局去做响应式布局\n\n<!-- more -->\n\n# CSS排版布局\n\n先简单再复习一下css是什么：\n> CSS（层叠样式表）用于设置和布置网页——例如，更改内容的字体、颜色、大小和间距，将其拆分为多个列的布局，或添加动画和其他装饰功能。\n\n除了基础样式和动画外，CSS最大的一个功能就是告诉浏览器应该怎么对HTML元素进行排版布局。\n\n> CSS 页面布局技术允许我们拾取网页中的元素，并且控制它们相对正常布局流、周边元素、父容器或者主视口/窗口的位置。\n\n目前，CSS布局分为以下几个：\n\n- 正常布局流，Flow layout，流式布局，是由块级盒子(block)和内联盒子(inline-block)，块级盒子从上至下排列，每个块级盒子会独自占一行，内联盒子则会被父级块级元素的宽度内，它们与其他内联元素、相邻的文本内容（或者被包裹的）被安排在同一行。如果空间不够，溢出的文本或元素将移到新的一行。\n- 弹性盒子，Flexbox，与Flow layout最大的不同点在于，弹性盒子默认支持内部子元素（不管是块级还是内联）水平对齐，还支持等高，从而使得很多布局任务变得更加容易。后面我们详细讲解。\n- 网格，Grid，有点类似表格table布局，相比较Flexbox，Grid更加强大，能适用更加复杂的排版，它包含了列(Columns)、行(Row)等布局。\n- 浮动，Float，最初只用于在成块的文本内浮动图像，但是后来发现它能实现复杂的布局。一个浮动元素会被移出正常文档流，附到其父容器的左或右边，在正常布局中位于该浮动元素之下的内容，此时会围绕着浮动元素，填满其左或右侧的空间。\n- 定位，Position，正常的文档流布局中取出元素，并使它们具有不同的行为，例如放在另一个元素的上面，或者始终保持在浏览器视窗内的同一位置。\n- 多列布局，Column，有点类似Grid，比Grid简单，只是简单将容器分割成几列(`column-count`)，且可以设置（`column-width`）每一列的宽度\n\n\n## 其他知识点\n\n### BFC\n\n`BFC`(block formatting context)，块级格式化上下文，CSS中基于box的一个布局对象和单位，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。\n\n满足以下条件之一即为BFC:\n\n1. float的值不为none\n2. position的值不为static或者relative\n3. display的值为 table-cell, table-caption, inline-block,flex, 或者 inline-flex中的其中一个，现代化css用 `display:flow-root`\n4. overflow的值不为visible\n5. 根元素\n\nBFC有几个特点：\n\n- 不影响外部元素，外部元素也影响不到其内部\n- 计算BFC高度的时候，浮动元素的高度也计算在内\n\n\n### 响应式设计\n\n> 随着人们使用的屏幕尺寸的种类越来越多，出现了`响应式网页设计的概念（responsive web design，RWD）`，RWD 指的是允许 Web 页面适应不同屏幕宽度因素等，进行布局和外观的调整的一系列实践。\n\n响应式设计不是一种技术，而是一种设计方式或者理念，它指的是网页的布局应该随着屏幕的变化而自适应改变。\n\n# Flexbox\nFlexbox，Flexible Box， 俗称弹性盒子，是从网页默认流式布局(Flow layout)脱离出来的一种布局模式，其父元素容器还是遵循Flow layout，但是Flexbox中的元素都会遵循Flexbox新的布局方式。\n\n> MDN介绍，弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。\n\nFlexbox的出现主要是为了解决Flow layout布局的一些无法很好解决的问题，如下：\n\n- 一个子元素需要垂直居中显示在容器中\n- 多个子元素需要水平平均对齐在容器中，以及一旦子元素超过父容器的宽度，需要自动换行\n- 所有子元素需要显示同样的高度或者宽度\n\n所以弹性盒子其实是由两部分组成：\n\n- 容器，需要设置为`display:flex`，用来控制子元素内的布局\n- 子元素，遵循Flex布局方式所控制，但是也可以按照Flex布局做一些调整\n\n**同时需要注意一点，Flexbox弹性盒子内，元素的宽度不再是自身所设定的宽度，而是会根据容器设置的规则而发生变化。**\n\n实现一个弹性盒子，其实很简单，只需要设置容器的`display:flex`，即可实现，代码如下：\n\n```html\n<style>\n.container{\n    display: flex;\n}\n.item{\n\n}\n</style>\n<div class=\"container\">\n    <div class=\"item item1\">item1</div>\n    <div class=\"item item2\">item1</div>\n    <div class=\"item item3\">item1</div>\n</div>\n```\n\n## Flexbox的两条轴\n\n要了解Flexbox，首先得知道盒子内部是按照两条轴去进行布局，分别为：\n\n- 主轴，Primary axis，子元素将按照该轴的方向进行排版布局\n- 横轴，Cross axis，子元素默认会按照该轴的宽高度去拉伸自己本身的宽度高\n\n如下图所示：\n\n![](/assets/img/20230124-1.png)\n\n那么Flexbox的属性设置，主要就是围绕这两个轴，分别调整容器内部子元素的对齐方向，子元素的在轴的位置，轴之间的间隔等。\n\n## Flexbox的属性\n\n当然Flex布局的容器还支持其他设置属性：\n- flex-direction 设置子元素的对齐方向，如：垂直(column)、水平(row)\n- justify-content 控制子元素主轴对齐方向\n- align-items 控制子元素横轴对齐方向\n- gap 设置子元素的间隔距离\n- order 设置子元素展示顺序，忽略html的顺序\n- flex-wrap 子元素超过容器大小后是否换行\n\n子元素也可以设置自身属性：\n- flex-grow 设置子元素是否占用剩余空间，如果子元素都设置了，则会按照设置数字大小去做占用比例\n- flex-basis 子元素弹性宽度或者高度设置，当容器空间足够，则会按照此属性设置，如果空间不够，则会占据剩余的空间\n- flex-shrink 当子元素占用空间比容器大，默认会按照子元素占据比例进行缩放，该属性可以改变被压缩比例大小\n- align-self 子元素控制自己横轴对齐方向\n- margin 子元素设置auto后，可以达到类似`justify-content` 或 `align-items`的效果\n\n所有属性设置demo可以查看[Flexbox布局属性设置demo](/code/flex/demo.html)。\n\n## Flexbox的响应式布局\n\n其实了解Flexbox布局，其实再去实现响应式布局，其实已经没有那么难了，不需要`@media`媒体查询那么麻烦一个个设置对应屏幕尺寸，只需要按照以下几个属性去设置对应的即可完成响应式布局：\n\n- 设置一个Flex容器，预先设置好当子元素在不同屏幕的展示排版\n- 利用`flex-wrap: wrap;` 允许子元素自动换行\n- 在设置不同子元素`flex-basis` `flex-grow` 占据容器占比\n- 设置子元素`flex-shrink`是否缩放，从而避免元素被压缩的导致布局展示不对\n- 设置子元素的最小宽度`min-width`，从而避免元素被压缩太小\n\n# 参考资料\n[Flexbox 交互式指南](https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/)","slug":"today/20230124","published":1,"updated":"2023-01-29T09:46:47.797Z","_id":"cldztfmlc001bnxpc76u4b9d1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前研究过一篇<a href=\"/2023/01/14/today/20220111/\">《移动端适配UI的全部解决方案对比》</a>，里面主要通过布局不变，改变布局组件元素的大小去适应移动端。但是这种方式对于PC端或者Pad等大屏幕并不适合，所以从想找找看是否有新的方案能否满足跨端自适应布局方式。</p>\n<p>目前同时解决PC端和移动端的响应式布局的解决方案以下几种：</p>\n<ul>\n<li>通过<code>@media</code>媒体查询去设置不同尺寸的样式</li>\n<li>通过<code>Flexbox</code> <code>Grid</code>等现代化布局去做响应式布局</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"CSS排版布局\"><a href=\"#CSS排版布局\" class=\"headerlink\" title=\"CSS排版布局\"></a>CSS排版布局</h1><p>先简单再复习一下css是什么：</p>\n<blockquote>\n<p>CSS（层叠样式表）用于设置和布置网页——例如，更改内容的字体、颜色、大小和间距，将其拆分为多个列的布局，或添加动画和其他装饰功能。</p>\n</blockquote>\n<p>除了基础样式和动画外，CSS最大的一个功能就是告诉浏览器应该怎么对HTML元素进行排版布局。</p>\n<blockquote>\n<p>CSS 页面布局技术允许我们拾取网页中的元素，并且控制它们相对正常布局流、周边元素、父容器或者主视口/窗口的位置。</p>\n</blockquote>\n<p>目前，CSS布局分为以下几个：</p>\n<ul>\n<li>正常布局流，Flow layout，流式布局，是由块级盒子(block)和内联盒子(inline-block)，块级盒子从上至下排列，每个块级盒子会独自占一行，内联盒子则会被父级块级元素的宽度内，它们与其他内联元素、相邻的文本内容（或者被包裹的）被安排在同一行。如果空间不够，溢出的文本或元素将移到新的一行。</li>\n<li>弹性盒子，Flexbox，与Flow layout最大的不同点在于，弹性盒子默认支持内部子元素（不管是块级还是内联）水平对齐，还支持等高，从而使得很多布局任务变得更加容易。后面我们详细讲解。</li>\n<li>网格，Grid，有点类似表格table布局，相比较Flexbox，Grid更加强大，能适用更加复杂的排版，它包含了列(Columns)、行(Row)等布局。</li>\n<li>浮动，Float，最初只用于在成块的文本内浮动图像，但是后来发现它能实现复杂的布局。一个浮动元素会被移出正常文档流，附到其父容器的左或右边，在正常布局中位于该浮动元素之下的内容，此时会围绕着浮动元素，填满其左或右侧的空间。</li>\n<li>定位，Position，正常的文档流布局中取出元素，并使它们具有不同的行为，例如放在另一个元素的上面，或者始终保持在浏览器视窗内的同一位置。</li>\n<li>多列布局，Column，有点类似Grid，比Grid简单，只是简单将容器分割成几列(<code>column-count</code>)，且可以设置（<code>column-width</code>）每一列的宽度</li>\n</ul>\n<h2 id=\"其他知识点\"><a href=\"#其他知识点\" class=\"headerlink\" title=\"其他知识点\"></a>其他知识点</h2><h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p><code>BFC</code>(block formatting context)，块级格式化上下文，CSS中基于box的一个布局对象和单位，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>满足以下条件之一即为BFC:</p>\n<ol>\n<li>float的值不为none</li>\n<li>position的值不为static或者relative</li>\n<li>display的值为 table-cell, table-caption, inline-block,flex, 或者 inline-flex中的其中一个，现代化css用 <code>display:flow-root</code></li>\n<li>overflow的值不为visible</li>\n<li>根元素</li>\n</ol>\n<p>BFC有几个特点：</p>\n<ul>\n<li>不影响外部元素，外部元素也影响不到其内部</li>\n<li>计算BFC高度的时候，浮动元素的高度也计算在内</li>\n</ul>\n<h3 id=\"响应式设计\"><a href=\"#响应式设计\" class=\"headerlink\" title=\"响应式设计\"></a>响应式设计</h3><blockquote>\n<p>随着人们使用的屏幕尺寸的种类越来越多，出现了<code>响应式网页设计的概念（responsive web design，RWD）</code>，RWD 指的是允许 Web 页面适应不同屏幕宽度因素等，进行布局和外观的调整的一系列实践。</p>\n</blockquote>\n<p>响应式设计不是一种技术，而是一种设计方式或者理念，它指的是网页的布局应该随着屏幕的变化而自适应改变。</p>\n<h1 id=\"Flexbox\"><a href=\"#Flexbox\" class=\"headerlink\" title=\"Flexbox\"></a>Flexbox</h1><p>Flexbox，Flexible Box， 俗称弹性盒子，是从网页默认流式布局(Flow layout)脱离出来的一种布局模式，其父元素容器还是遵循Flow layout，但是Flexbox中的元素都会遵循Flexbox新的布局方式。</p>\n<blockquote>\n<p>MDN介绍，弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p>\n</blockquote>\n<p>Flexbox的出现主要是为了解决Flow layout布局的一些无法很好解决的问题，如下：</p>\n<ul>\n<li>一个子元素需要垂直居中显示在容器中</li>\n<li>多个子元素需要水平平均对齐在容器中，以及一旦子元素超过父容器的宽度，需要自动换行</li>\n<li>所有子元素需要显示同样的高度或者宽度</li>\n</ul>\n<p>所以弹性盒子其实是由两部分组成：</p>\n<ul>\n<li>容器，需要设置为<code>display:flex</code>，用来控制子元素内的布局</li>\n<li>子元素，遵循Flex布局方式所控制，但是也可以按照Flex布局做一些调整</li>\n</ul>\n<p><strong>同时需要注意一点，Flexbox弹性盒子内，元素的宽度不再是自身所设定的宽度，而是会根据容器设置的规则而发生变化。</strong></p>\n<p>实现一个弹性盒子，其实很简单，只需要设置容器的<code>display:flex</code>，即可实现，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.item</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item1\"</span>&gt;</span>item1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item2\"</span>&gt;</span>item1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item3\"</span>&gt;</span>item1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flexbox的两条轴\"><a href=\"#Flexbox的两条轴\" class=\"headerlink\" title=\"Flexbox的两条轴\"></a>Flexbox的两条轴</h2><p>要了解Flexbox，首先得知道盒子内部是按照两条轴去进行布局，分别为：</p>\n<ul>\n<li>主轴，Primary axis，子元素将按照该轴的方向进行排版布局</li>\n<li>横轴，Cross axis，子元素默认会按照该轴的宽高度去拉伸自己本身的宽度高</li>\n</ul>\n<p>如下图所示：</p>\n<p><img src=\"/assets/img/20230124-1.png\" alt></p>\n<p>那么Flexbox的属性设置，主要就是围绕这两个轴，分别调整容器内部子元素的对齐方向，子元素的在轴的位置，轴之间的间隔等。</p>\n<h2 id=\"Flexbox的属性\"><a href=\"#Flexbox的属性\" class=\"headerlink\" title=\"Flexbox的属性\"></a>Flexbox的属性</h2><p>当然Flex布局的容器还支持其他设置属性：</p>\n<ul>\n<li>flex-direction 设置子元素的对齐方向，如：垂直(column)、水平(row)</li>\n<li>justify-content 控制子元素主轴对齐方向</li>\n<li>align-items 控制子元素横轴对齐方向</li>\n<li>gap 设置子元素的间隔距离</li>\n<li>order 设置子元素展示顺序，忽略html的顺序</li>\n<li>flex-wrap 子元素超过容器大小后是否换行</li>\n</ul>\n<p>子元素也可以设置自身属性：</p>\n<ul>\n<li>flex-grow 设置子元素是否占用剩余空间，如果子元素都设置了，则会按照设置数字大小去做占用比例</li>\n<li>flex-basis 子元素弹性宽度或者高度设置，当容器空间足够，则会按照此属性设置，如果空间不够，则会占据剩余的空间</li>\n<li>flex-shrink 当子元素占用空间比容器大，默认会按照子元素占据比例进行缩放，该属性可以改变被压缩比例大小</li>\n<li>align-self 子元素控制自己横轴对齐方向</li>\n<li>margin 子元素设置auto后，可以达到类似<code>justify-content</code> 或 <code>align-items</code>的效果</li>\n</ul>\n<p>所有属性设置demo可以查看<a href=\"/code/flex/demo.html\">Flexbox布局属性设置demo</a>。</p>\n<h2 id=\"Flexbox的响应式布局\"><a href=\"#Flexbox的响应式布局\" class=\"headerlink\" title=\"Flexbox的响应式布局\"></a>Flexbox的响应式布局</h2><p>其实了解Flexbox布局，其实再去实现响应式布局，其实已经没有那么难了，不需要<code>@media</code>媒体查询那么麻烦一个个设置对应屏幕尺寸，只需要按照以下几个属性去设置对应的即可完成响应式布局：</p>\n<ul>\n<li>设置一个Flex容器，预先设置好当子元素在不同屏幕的展示排版</li>\n<li>利用<code>flex-wrap: wrap;</code> 允许子元素自动换行</li>\n<li>在设置不同子元素<code>flex-basis</code> <code>flex-grow</code> 占据容器占比</li>\n<li>设置子元素<code>flex-shrink</code>是否缩放，从而避免元素被压缩的导致布局展示不对</li>\n<li>设置子元素的最小宽度<code>min-width</code>，从而避免元素被压缩太小</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/\" target=\"_blank\" rel=\"noopener\">Flexbox 交互式指南</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前研究过一篇<a href=\"/2023/01/14/today/20220111/\">《移动端适配UI的全部解决方案对比》</a>，里面主要通过布局不变，改变布局组件元素的大小去适应移动端。但是这种方式对于PC端或者Pad等大屏幕并不适合，所以从想找找看是否有新的方案能否满足跨端自适应布局方式。</p>\n<p>目前同时解决PC端和移动端的响应式布局的解决方案以下几种：</p>\n<ul>\n<li>通过<code>@media</code>媒体查询去设置不同尺寸的样式</li>\n<li>通过<code>Flexbox</code> <code>Grid</code>等现代化布局去做响应式布局</li>\n</ul>","more":"<h1 id=\"CSS排版布局\"><a href=\"#CSS排版布局\" class=\"headerlink\" title=\"CSS排版布局\"></a>CSS排版布局</h1><p>先简单再复习一下css是什么：</p>\n<blockquote>\n<p>CSS（层叠样式表）用于设置和布置网页——例如，更改内容的字体、颜色、大小和间距，将其拆分为多个列的布局，或添加动画和其他装饰功能。</p>\n</blockquote>\n<p>除了基础样式和动画外，CSS最大的一个功能就是告诉浏览器应该怎么对HTML元素进行排版布局。</p>\n<blockquote>\n<p>CSS 页面布局技术允许我们拾取网页中的元素，并且控制它们相对正常布局流、周边元素、父容器或者主视口/窗口的位置。</p>\n</blockquote>\n<p>目前，CSS布局分为以下几个：</p>\n<ul>\n<li>正常布局流，Flow layout，流式布局，是由块级盒子(block)和内联盒子(inline-block)，块级盒子从上至下排列，每个块级盒子会独自占一行，内联盒子则会被父级块级元素的宽度内，它们与其他内联元素、相邻的文本内容（或者被包裹的）被安排在同一行。如果空间不够，溢出的文本或元素将移到新的一行。</li>\n<li>弹性盒子，Flexbox，与Flow layout最大的不同点在于，弹性盒子默认支持内部子元素（不管是块级还是内联）水平对齐，还支持等高，从而使得很多布局任务变得更加容易。后面我们详细讲解。</li>\n<li>网格，Grid，有点类似表格table布局，相比较Flexbox，Grid更加强大，能适用更加复杂的排版，它包含了列(Columns)、行(Row)等布局。</li>\n<li>浮动，Float，最初只用于在成块的文本内浮动图像，但是后来发现它能实现复杂的布局。一个浮动元素会被移出正常文档流，附到其父容器的左或右边，在正常布局中位于该浮动元素之下的内容，此时会围绕着浮动元素，填满其左或右侧的空间。</li>\n<li>定位，Position，正常的文档流布局中取出元素，并使它们具有不同的行为，例如放在另一个元素的上面，或者始终保持在浏览器视窗内的同一位置。</li>\n<li>多列布局，Column，有点类似Grid，比Grid简单，只是简单将容器分割成几列(<code>column-count</code>)，且可以设置（<code>column-width</code>）每一列的宽度</li>\n</ul>\n<h2 id=\"其他知识点\"><a href=\"#其他知识点\" class=\"headerlink\" title=\"其他知识点\"></a>其他知识点</h2><h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p><code>BFC</code>(block formatting context)，块级格式化上下文，CSS中基于box的一个布局对象和单位，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n<p>满足以下条件之一即为BFC:</p>\n<ol>\n<li>float的值不为none</li>\n<li>position的值不为static或者relative</li>\n<li>display的值为 table-cell, table-caption, inline-block,flex, 或者 inline-flex中的其中一个，现代化css用 <code>display:flow-root</code></li>\n<li>overflow的值不为visible</li>\n<li>根元素</li>\n</ol>\n<p>BFC有几个特点：</p>\n<ul>\n<li>不影响外部元素，外部元素也影响不到其内部</li>\n<li>计算BFC高度的时候，浮动元素的高度也计算在内</li>\n</ul>\n<h3 id=\"响应式设计\"><a href=\"#响应式设计\" class=\"headerlink\" title=\"响应式设计\"></a>响应式设计</h3><blockquote>\n<p>随着人们使用的屏幕尺寸的种类越来越多，出现了<code>响应式网页设计的概念（responsive web design，RWD）</code>，RWD 指的是允许 Web 页面适应不同屏幕宽度因素等，进行布局和外观的调整的一系列实践。</p>\n</blockquote>\n<p>响应式设计不是一种技术，而是一种设计方式或者理念，它指的是网页的布局应该随着屏幕的变化而自适应改变。</p>\n<h1 id=\"Flexbox\"><a href=\"#Flexbox\" class=\"headerlink\" title=\"Flexbox\"></a>Flexbox</h1><p>Flexbox，Flexible Box， 俗称弹性盒子，是从网页默认流式布局(Flow layout)脱离出来的一种布局模式，其父元素容器还是遵循Flow layout，但是Flexbox中的元素都会遵循Flexbox新的布局方式。</p>\n<blockquote>\n<p>MDN介绍，弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p>\n</blockquote>\n<p>Flexbox的出现主要是为了解决Flow layout布局的一些无法很好解决的问题，如下：</p>\n<ul>\n<li>一个子元素需要垂直居中显示在容器中</li>\n<li>多个子元素需要水平平均对齐在容器中，以及一旦子元素超过父容器的宽度，需要自动换行</li>\n<li>所有子元素需要显示同样的高度或者宽度</li>\n</ul>\n<p>所以弹性盒子其实是由两部分组成：</p>\n<ul>\n<li>容器，需要设置为<code>display:flex</code>，用来控制子元素内的布局</li>\n<li>子元素，遵循Flex布局方式所控制，但是也可以按照Flex布局做一些调整</li>\n</ul>\n<p><strong>同时需要注意一点，Flexbox弹性盒子内，元素的宽度不再是自身所设定的宽度，而是会根据容器设置的规则而发生变化。</strong></p>\n<p>实现一个弹性盒子，其实很简单，只需要设置容器的<code>display:flex</code>，即可实现，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span>&#123;</span></span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.item</span>&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item1\"</span>&gt;</span>item1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item2\"</span>&gt;</span>item1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item item3\"</span>&gt;</span>item1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flexbox的两条轴\"><a href=\"#Flexbox的两条轴\" class=\"headerlink\" title=\"Flexbox的两条轴\"></a>Flexbox的两条轴</h2><p>要了解Flexbox，首先得知道盒子内部是按照两条轴去进行布局，分别为：</p>\n<ul>\n<li>主轴，Primary axis，子元素将按照该轴的方向进行排版布局</li>\n<li>横轴，Cross axis，子元素默认会按照该轴的宽高度去拉伸自己本身的宽度高</li>\n</ul>\n<p>如下图所示：</p>\n<p><img src=\"/assets/img/20230124-1.png\" alt></p>\n<p>那么Flexbox的属性设置，主要就是围绕这两个轴，分别调整容器内部子元素的对齐方向，子元素的在轴的位置，轴之间的间隔等。</p>\n<h2 id=\"Flexbox的属性\"><a href=\"#Flexbox的属性\" class=\"headerlink\" title=\"Flexbox的属性\"></a>Flexbox的属性</h2><p>当然Flex布局的容器还支持其他设置属性：</p>\n<ul>\n<li>flex-direction 设置子元素的对齐方向，如：垂直(column)、水平(row)</li>\n<li>justify-content 控制子元素主轴对齐方向</li>\n<li>align-items 控制子元素横轴对齐方向</li>\n<li>gap 设置子元素的间隔距离</li>\n<li>order 设置子元素展示顺序，忽略html的顺序</li>\n<li>flex-wrap 子元素超过容器大小后是否换行</li>\n</ul>\n<p>子元素也可以设置自身属性：</p>\n<ul>\n<li>flex-grow 设置子元素是否占用剩余空间，如果子元素都设置了，则会按照设置数字大小去做占用比例</li>\n<li>flex-basis 子元素弹性宽度或者高度设置，当容器空间足够，则会按照此属性设置，如果空间不够，则会占据剩余的空间</li>\n<li>flex-shrink 当子元素占用空间比容器大，默认会按照子元素占据比例进行缩放，该属性可以改变被压缩比例大小</li>\n<li>align-self 子元素控制自己横轴对齐方向</li>\n<li>margin 子元素设置auto后，可以达到类似<code>justify-content</code> 或 <code>align-items</code>的效果</li>\n</ul>\n<p>所有属性设置demo可以查看<a href=\"/code/flex/demo.html\">Flexbox布局属性设置demo</a>。</p>\n<h2 id=\"Flexbox的响应式布局\"><a href=\"#Flexbox的响应式布局\" class=\"headerlink\" title=\"Flexbox的响应式布局\"></a>Flexbox的响应式布局</h2><p>其实了解Flexbox布局，其实再去实现响应式布局，其实已经没有那么难了，不需要<code>@media</code>媒体查询那么麻烦一个个设置对应屏幕尺寸，只需要按照以下几个属性去设置对应的即可完成响应式布局：</p>\n<ul>\n<li>设置一个Flex容器，预先设置好当子元素在不同屏幕的展示排版</li>\n<li>利用<code>flex-wrap: wrap;</code> 允许子元素自动换行</li>\n<li>在设置不同子元素<code>flex-basis</code> <code>flex-grow</code> 占据容器占比</li>\n<li>设置子元素<code>flex-shrink</code>是否缩放，从而避免元素被压缩的导致布局展示不对</li>\n<li>设置子元素的最小宽度<code>min-width</code>，从而避免元素被压缩太小</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/\" target=\"_blank\" rel=\"noopener\">Flexbox 交互式指南</a></p>"},{"title":":has伪类的到来延伸到其他伪元素和伪类的区别","date":"2023-01-28T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n最近从网上看到一个有趣的CSS应用，就是纯用CSS也能是父子树展示，具体效果如下：\n\n<ul class=\"tree\">\n  <li>\n    <details open>\n      <summary style=\"display: list-item;\">目录节点1</summary>\n      <ul >\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点1</summary>\n            <ul>\n              <li>子节点1-1</li>\n              <li>子节点1-2</li>\n            </ul>\n          </details>\n        </li>\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点2</summary>\n            <ul>\n              <li>子节点2-1</li>\n              <li>子节点2-2</li>\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </details>\n  </li>\n</ul>\n\n然后里面关联到一篇新闻，就是`:has`伪元素的出现会给CSS带来极大的变动，这是为什么，不就是一个CSS伪元素吗？因此去了解一下，才发现这个伪元素确实不一样，主要有以下几点：\n\n- 可以选择父级元素， `a:has(> img)`，包含`img元素`的`a元素`\n- 可以选择兄弟元素， `h1:has(+ p) `，后面为`p元素`的`h1元素`\n\n为什么有了它之后，CSS会有大变动，因为以往我们的样式都是直接选择 元素 或者 子元素 或者 后面的元素，如果要选择父元素或前面的元素只能通过命名规范去确定，比如上述两个例子：\n\n- `a:has(> img)`，我们只能通过`a.has-img`类似样式去命名\n- `h1:has(+ p)`，只能通过`h1.next-p`类似样式去命名\n\n大概清楚它能带来的变化，接下来我们来详细了解一下它。\n<!-- more -->\n\n# 是什么\n\n在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has)里是这么定义`:has()`的:\n\n> CSS 函数式伪类 `:has()` 表示一个元素，如果作为参数传递的任何相对选择器在锚定到该元素时，至少匹配一个元素。这个伪类通过把可容错相对选择器列表作为参数，提供了一种针对引用元素选择父元素或者先前的兄弟元素的方法。\n\n你可以这么理解`h1:has(+ p)`伪元素:\n\n- 第一步，会先筛选`h1`元素列表，如果列表长度大于1才会执行has()\n- 第二步，执行`+ p`，就是判断`h1`元素列表中哪些元素的下个元素为`p`\n- 第三步，将筛选后的元素列表返回\n\n再简单点说就是一个过滤器，过滤条件可以是任意CSS表达式。\n\n## 应用场景\n\n除了上述的场景外，`:has()` 还可以做以下几个场景：\n\n- 与`:is()` `:not()` 结合使用，如：`is:(h1, h2, h3):has(+ :not(h2,h3, h4))` \n- 表单必填项, 给每个必填项增加\"*\"\"文字，代码如下：\n\n```html\n<style>\nlabel:has(+input:required)::before{\n  content: '*';\n  color: red;\n}\n</style>\n<form>\n  <div>\n    <label>用户名</label>\n    <input required>\n  </div>\n  <div>\n    <label>备注</label>\n    <input>\n  </div>\n</form>\n```\n效果如下：\n<div style=\"border:1px solid #ccc;margin:20px;padding:20px;\">\n<style>\nlabel:has(+input:required)::before{\n  content: '*';\n  color: red;\n  width:1em;\n  display:inline-block;\n}\n</style>\n<form>\n  <div style=\"margin:10px\">\n    <label  style=\"display:inline-block;width:4em; text-align:right;\">用户名</label>\n    <input required>\n  </div>\n  <div style=\"margin:10px\">\n    <label  style=\"display:inline-block;width:4em; text-align:right;\">备注</label>\n    <input>\n  </div>\n</form>\n</div>\n\n\n# 伪类与伪元素\n了解完`:has()`伪类，那么来复习一下CSS中的其他伪类与伪元素。\n\n## 伪类\n\n伪元素，又称为伪类，是添加到CSS选择器上的关键字，给指定DOM元素添加特殊状态。MDN是这么定义的：\n\n> CSS 伪类是添加到选择器的关键字，用于指定所选元素的特殊状态。例如，伪类 :hover 可以用于选择一个按钮，当用户的指针悬停在按钮上时，设置此按钮的样式。 ——[MDN 伪类](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes)\n\n伪类一般组成为两部分： `:` + `伪类名`，按照伪类的功能进行划分，主要分为以下几类：\n\n- 元素显示状态伪类，如：`:fullscreen` `:hover`\n- 输入状态伪类，如：`:focus` `:actived`\n- 语言的伪类，如：`:lang()`\n- 位置伪类，如：`:left`\n- 资源状态伪类，如：`:playing` `:paused`\n- 时间方面的伪类\n- 树结构的伪类，如： `:nth-child()`\n- 用户行为伪类，如：`:actived`\n- 函数式伪类，如：`:where` `:is` `:not`\n\n其实我们真正在使用的没有几个，但是我们仍然要重点关注一下，能加快我们的开发效率，比如：元素显示状态伪类，用户行为伪类, 函数式伪类等\n\n## 伪元素\n\n> 伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。——[伪元素 MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements)\n\n从命名上你就可以看出来，伪元素其实是一个类似的元素东西，虽然有部分写法可以改变样式，但是大部分还是给CSS选择器对应元素增加元素，比较常见的伪元素有：\n\n而且从书写规范来讲，伪元素为`::`+`伪元素名`，比较常见的伪元素有以下几种：\n\n- `::before` 给元素添加最前面添加一个子伪元素\n- `::after` 给元素添加最后面添加一个子伪元素\n- `::first-line` 选择元素第一个\n- `::placeholder` 修改有`placehodler`的样式\n\n部分demo代码测试案例：\n```html\n<style>\n    .article-inner  p.demo-20230108::first-line { color:#f00 }\n    .article-inner  p.demo-20230108::first-letter { text-transform: uppercase }\n</style>\n<div style=\"width:400px; padding:20px; border:1px solid;\">\n    <p class='demo-20230108' style=\"word-break:break-all\">abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。</p>\n</div>\n```\n效果如下：\n\n<style>\n    .article-inner  p.demo-20230108::first-line { color:#f00 }\n    .article-inner  p.demo-20230108::first-letter { text-transform: uppercase }\n</style>\n<div style=\"width:400px; padding:20px; border:1px solid;\">\n    <p class='demo-20230108' style=\"word-break:break-all\">abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。</p>\n</div>\n\n## 两者区别\n\n只有一句话： `与伪元素比较，伪类能够根据状态改变元素样式。`\n\n\n# 参考资料\n[CSS :has()伪类她来了](https://www.zhangxinxu.com/wordpress/2022/08/css-has-pseudo-class/)","source":"_posts/today/20230128.md","raw":"---\ntitle: :has伪类的到来延伸到其他伪元素和伪类的区别\ndate: 2023-01-28 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n最近从网上看到一个有趣的CSS应用，就是纯用CSS也能是父子树展示，具体效果如下：\n\n<ul class=\"tree\">\n  <li>\n    <details open>\n      <summary style=\"display: list-item;\">目录节点1</summary>\n      <ul >\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点1</summary>\n            <ul>\n              <li>子节点1-1</li>\n              <li>子节点1-2</li>\n            </ul>\n          </details>\n        </li>\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点2</summary>\n            <ul>\n              <li>子节点2-1</li>\n              <li>子节点2-2</li>\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </details>\n  </li>\n</ul>\n\n然后里面关联到一篇新闻，就是`:has`伪元素的出现会给CSS带来极大的变动，这是为什么，不就是一个CSS伪元素吗？因此去了解一下，才发现这个伪元素确实不一样，主要有以下几点：\n\n- 可以选择父级元素， `a:has(> img)`，包含`img元素`的`a元素`\n- 可以选择兄弟元素， `h1:has(+ p) `，后面为`p元素`的`h1元素`\n\n为什么有了它之后，CSS会有大变动，因为以往我们的样式都是直接选择 元素 或者 子元素 或者 后面的元素，如果要选择父元素或前面的元素只能通过命名规范去确定，比如上述两个例子：\n\n- `a:has(> img)`，我们只能通过`a.has-img`类似样式去命名\n- `h1:has(+ p)`，只能通过`h1.next-p`类似样式去命名\n\n大概清楚它能带来的变化，接下来我们来详细了解一下它。\n<!-- more -->\n\n# 是什么\n\n在[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has)里是这么定义`:has()`的:\n\n> CSS 函数式伪类 `:has()` 表示一个元素，如果作为参数传递的任何相对选择器在锚定到该元素时，至少匹配一个元素。这个伪类通过把可容错相对选择器列表作为参数，提供了一种针对引用元素选择父元素或者先前的兄弟元素的方法。\n\n你可以这么理解`h1:has(+ p)`伪元素:\n\n- 第一步，会先筛选`h1`元素列表，如果列表长度大于1才会执行has()\n- 第二步，执行`+ p`，就是判断`h1`元素列表中哪些元素的下个元素为`p`\n- 第三步，将筛选后的元素列表返回\n\n再简单点说就是一个过滤器，过滤条件可以是任意CSS表达式。\n\n## 应用场景\n\n除了上述的场景外，`:has()` 还可以做以下几个场景：\n\n- 与`:is()` `:not()` 结合使用，如：`is:(h1, h2, h3):has(+ :not(h2,h3, h4))` \n- 表单必填项, 给每个必填项增加\"*\"\"文字，代码如下：\n\n```html\n<style>\nlabel:has(+input:required)::before{\n  content: '*';\n  color: red;\n}\n</style>\n<form>\n  <div>\n    <label>用户名</label>\n    <input required>\n  </div>\n  <div>\n    <label>备注</label>\n    <input>\n  </div>\n</form>\n```\n效果如下：\n<div style=\"border:1px solid #ccc;margin:20px;padding:20px;\">\n<style>\nlabel:has(+input:required)::before{\n  content: '*';\n  color: red;\n  width:1em;\n  display:inline-block;\n}\n</style>\n<form>\n  <div style=\"margin:10px\">\n    <label  style=\"display:inline-block;width:4em; text-align:right;\">用户名</label>\n    <input required>\n  </div>\n  <div style=\"margin:10px\">\n    <label  style=\"display:inline-block;width:4em; text-align:right;\">备注</label>\n    <input>\n  </div>\n</form>\n</div>\n\n\n# 伪类与伪元素\n了解完`:has()`伪类，那么来复习一下CSS中的其他伪类与伪元素。\n\n## 伪类\n\n伪元素，又称为伪类，是添加到CSS选择器上的关键字，给指定DOM元素添加特殊状态。MDN是这么定义的：\n\n> CSS 伪类是添加到选择器的关键字，用于指定所选元素的特殊状态。例如，伪类 :hover 可以用于选择一个按钮，当用户的指针悬停在按钮上时，设置此按钮的样式。 ——[MDN 伪类](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes)\n\n伪类一般组成为两部分： `:` + `伪类名`，按照伪类的功能进行划分，主要分为以下几类：\n\n- 元素显示状态伪类，如：`:fullscreen` `:hover`\n- 输入状态伪类，如：`:focus` `:actived`\n- 语言的伪类，如：`:lang()`\n- 位置伪类，如：`:left`\n- 资源状态伪类，如：`:playing` `:paused`\n- 时间方面的伪类\n- 树结构的伪类，如： `:nth-child()`\n- 用户行为伪类，如：`:actived`\n- 函数式伪类，如：`:where` `:is` `:not`\n\n其实我们真正在使用的没有几个，但是我们仍然要重点关注一下，能加快我们的开发效率，比如：元素显示状态伪类，用户行为伪类, 函数式伪类等\n\n## 伪元素\n\n> 伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。——[伪元素 MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements)\n\n从命名上你就可以看出来，伪元素其实是一个类似的元素东西，虽然有部分写法可以改变样式，但是大部分还是给CSS选择器对应元素增加元素，比较常见的伪元素有：\n\n而且从书写规范来讲，伪元素为`::`+`伪元素名`，比较常见的伪元素有以下几种：\n\n- `::before` 给元素添加最前面添加一个子伪元素\n- `::after` 给元素添加最后面添加一个子伪元素\n- `::first-line` 选择元素第一个\n- `::placeholder` 修改有`placehodler`的样式\n\n部分demo代码测试案例：\n```html\n<style>\n    .article-inner  p.demo-20230108::first-line { color:#f00 }\n    .article-inner  p.demo-20230108::first-letter { text-transform: uppercase }\n</style>\n<div style=\"width:400px; padding:20px; border:1px solid;\">\n    <p class='demo-20230108' style=\"word-break:break-all\">abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。</p>\n</div>\n```\n效果如下：\n\n<style>\n    .article-inner  p.demo-20230108::first-line { color:#f00 }\n    .article-inner  p.demo-20230108::first-letter { text-transform: uppercase }\n</style>\n<div style=\"width:400px; padding:20px; border:1px solid;\">\n    <p class='demo-20230108' style=\"word-break:break-all\">abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。</p>\n</div>\n\n## 两者区别\n\n只有一句话： `与伪元素比较，伪类能够根据状态改变元素样式。`\n\n\n# 参考资料\n[CSS :has()伪类她来了](https://www.zhangxinxu.com/wordpress/2022/08/css-has-pseudo-class/)","slug":"today/20230128","published":1,"updated":"2023-02-11T12:20:17.748Z","_id":"cldztfory001enxpciy605ent","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近从网上看到一个有趣的CSS应用，就是纯用CSS也能是父子树展示，具体效果如下：</p>\n<ul class=\"tree\">\n  <li>\n    <details open>\n      <summary style=\"display: list-item;\">目录节点1</summary>\n      <ul>\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点1</summary>\n            <ul>\n              <li>子节点1-1</li>\n              <li>子节点1-2</li>\n            </ul>\n          </details>\n        </li>\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点2</summary>\n            <ul>\n              <li>子节点2-1</li>\n              <li>子节点2-2</li>\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </details>\n  </li>\n</ul>\n\n<p>然后里面关联到一篇新闻，就是<code>:has</code>伪元素的出现会给CSS带来极大的变动，这是为什么，不就是一个CSS伪元素吗？因此去了解一下，才发现这个伪元素确实不一样，主要有以下几点：</p>\n<ul>\n<li>可以选择父级元素， <code>a:has(&gt; img)</code>，包含<code>img元素</code>的<code>a元素</code></li>\n<li>可以选择兄弟元素， <code>h1:has(+ p)</code>，后面为<code>p元素</code>的<code>h1元素</code></li>\n</ul>\n<p>为什么有了它之后，CSS会有大变动，因为以往我们的样式都是直接选择 元素 或者 子元素 或者 后面的元素，如果要选择父元素或前面的元素只能通过命名规范去确定，比如上述两个例子：</p>\n<ul>\n<li><code>a:has(&gt; img)</code>，我们只能通过<code>a.has-img</code>类似样式去命名</li>\n<li><code>h1:has(+ p)</code>，只能通过<code>h1.next-p</code>类似样式去命名</li>\n</ul>\n<p>大概清楚它能带来的变化，接下来我们来详细了解一下它。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has\" target=\"_blank\" rel=\"noopener\">MDN</a>里是这么定义<code>:has()</code>的:</p>\n<blockquote>\n<p>CSS 函数式伪类 <code>:has()</code> 表示一个元素，如果作为参数传递的任何相对选择器在锚定到该元素时，至少匹配一个元素。这个伪类通过把可容错相对选择器列表作为参数，提供了一种针对引用元素选择父元素或者先前的兄弟元素的方法。</p>\n</blockquote>\n<p>你可以这么理解<code>h1:has(+ p)</code>伪元素:</p>\n<ul>\n<li>第一步，会先筛选<code>h1</code>元素列表，如果列表长度大于1才会执行has()</li>\n<li>第二步，执行<code>+ p</code>，就是判断<code>h1</code>元素列表中哪些元素的下个元素为<code>p</code></li>\n<li>第三步，将筛选后的元素列表返回</li>\n</ul>\n<p>再简单点说就是一个过滤器，过滤条件可以是任意CSS表达式。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>除了上述的场景外，<code>:has()</code> 还可以做以下几个场景：</p>\n<ul>\n<li>与<code>:is()</code> <code>:not()</code> 结合使用，如：<code>is:(h1, h2, h3):has(+ :not(h2,h3, h4))</code> </li>\n<li>表单必填项, 给每个必填项增加”*””文字，代码如下：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:has(+input</span><span class=\"selector-pseudo\">:required)</span><span class=\"selector-pseudo\">::before</span>&#123;</span></span><br><span class=\"line\">  content: '*';</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>备注<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<div style=\"border:1px solid #ccc;margin:20px;padding:20px;\">\n<style>\nlabel:has(+input:required)::before{\n  content: '*';\n  color: red;\n  width:1em;\n  display:inline-block;\n}\n</style>\n<form>\n  <div style=\"margin:10px\">\n    <label style=\"display:inline-block;width:4em; text-align:right;\">用户名</label>\n    <input required>\n  </div>\n  <div style=\"margin:10px\">\n    <label style=\"display:inline-block;width:4em; text-align:right;\">备注</label>\n    <input>\n  </div>\n</form>\n</div>\n\n\n<h1 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h1><p>了解完<code>:has()</code>伪类，那么来复习一下CSS中的其他伪类与伪元素。</p>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><p>伪元素，又称为伪类，是添加到CSS选择器上的关键字，给指定DOM元素添加特殊状态。MDN是这么定义的：</p>\n<blockquote>\n<p>CSS 伪类是添加到选择器的关键字，用于指定所选元素的特殊状态。例如，伪类 :hover 可以用于选择一个按钮，当用户的指针悬停在按钮上时，设置此按钮的样式。 ——<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes\" target=\"_blank\" rel=\"noopener\">MDN 伪类</a></p>\n</blockquote>\n<p>伪类一般组成为两部分： <code>:</code> + <code>伪类名</code>，按照伪类的功能进行划分，主要分为以下几类：</p>\n<ul>\n<li>元素显示状态伪类，如：<code>:fullscreen</code> <code>:hover</code></li>\n<li>输入状态伪类，如：<code>:focus</code> <code>:actived</code></li>\n<li>语言的伪类，如：<code>:lang()</code></li>\n<li>位置伪类，如：<code>:left</code></li>\n<li>资源状态伪类，如：<code>:playing</code> <code>:paused</code></li>\n<li>时间方面的伪类</li>\n<li>树结构的伪类，如： <code>:nth-child()</code></li>\n<li>用户行为伪类，如：<code>:actived</code></li>\n<li>函数式伪类，如：<code>:where</code> <code>:is</code> <code>:not</code></li>\n</ul>\n<p>其实我们真正在使用的没有几个，但是我们仍然要重点关注一下，能加快我们的开发效率，比如：元素显示状态伪类，用户行为伪类, 函数式伪类等</p>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><blockquote>\n<p>伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。——<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements\" target=\"_blank\" rel=\"noopener\">伪元素 MDN</a></p>\n</blockquote>\n<p>从命名上你就可以看出来，伪元素其实是一个类似的元素东西，虽然有部分写法可以改变样式，但是大部分还是给CSS选择器对应元素增加元素，比较常见的伪元素有：</p>\n<p>而且从书写规范来讲，伪元素为<code>::</code>+<code>伪元素名</code>，比较常见的伪元素有以下几种：</p>\n<ul>\n<li><code>::before</code> 给元素添加最前面添加一个子伪元素</li>\n<li><code>::after</code> 给元素添加最后面添加一个子伪元素</li>\n<li><code>::first-line</code> 选择元素第一个</li>\n<li><code>::placeholder</code> 修改有<code>placehodler</code>的样式</li>\n</ul>\n<p>部分demo代码测试案例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.article-inner</span>  <span class=\"selector-tag\">p</span><span class=\"selector-class\">.demo-20230108</span><span class=\"selector-pseudo\">::first-line</span> &#123; <span class=\"attribute\">color</span>:<span class=\"number\">#f00</span> &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.article-inner</span>  <span class=\"selector-tag\">p</span><span class=\"selector-class\">.demo-20230108</span><span class=\"selector-pseudo\">::first-letter</span> &#123; <span class=\"attribute\">text-transform</span>: uppercase &#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:400px; padding:20px; border:1px solid;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">'demo-20230108'</span> <span class=\"attr\">style</span>=<span class=\"string\">\"word-break:break-all\"</span>&gt;</span>abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<style>\n    .article-inner  p.demo-20230108::first-line { color:#f00 }\n    .article-inner  p.demo-20230108::first-letter { text-transform: uppercase }\n</style>\n<div style=\"width:400px; padding:20px; border:1px solid;\">\n    <p class=\"demo-20230108\" style=\"word-break:break-all\">abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。</p>\n</div>\n\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><p>只有一句话： <code>与伪元素比较，伪类能够根据状态改变元素样式。</code></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.zhangxinxu.com/wordpress/2022/08/css-has-pseudo-class/\" target=\"_blank\" rel=\"noopener\">CSS :has()伪类她来了</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近从网上看到一个有趣的CSS应用，就是纯用CSS也能是父子树展示，具体效果如下：</p>\n<ul class=\"tree\">\n  <li>\n    <details open>\n      <summary style=\"display: list-item;\">目录节点1</summary>\n      <ul>\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点1</summary>\n            <ul>\n              <li>子节点1-1</li>\n              <li>子节点1-2</li>\n            </ul>\n          </details>\n        </li>\n        <li>\n          <details>\n            <summary style=\"display: list-item;\">节点2</summary>\n            <ul>\n              <li>子节点2-1</li>\n              <li>子节点2-2</li>\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </details>\n  </li>\n</ul>\n\n<p>然后里面关联到一篇新闻，就是<code>:has</code>伪元素的出现会给CSS带来极大的变动，这是为什么，不就是一个CSS伪元素吗？因此去了解一下，才发现这个伪元素确实不一样，主要有以下几点：</p>\n<ul>\n<li>可以选择父级元素， <code>a:has(&gt; img)</code>，包含<code>img元素</code>的<code>a元素</code></li>\n<li>可以选择兄弟元素， <code>h1:has(+ p)</code>，后面为<code>p元素</code>的<code>h1元素</code></li>\n</ul>\n<p>为什么有了它之后，CSS会有大变动，因为以往我们的样式都是直接选择 元素 或者 子元素 或者 后面的元素，如果要选择父元素或前面的元素只能通过命名规范去确定，比如上述两个例子：</p>\n<ul>\n<li><code>a:has(&gt; img)</code>，我们只能通过<code>a.has-img</code>类似样式去命名</li>\n<li><code>h1:has(+ p)</code>，只能通过<code>h1.next-p</code>类似样式去命名</li>\n</ul>\n<p>大概清楚它能带来的变化，接下来我们来详细了解一下它。</p>","more":"<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has\" target=\"_blank\" rel=\"noopener\">MDN</a>里是这么定义<code>:has()</code>的:</p>\n<blockquote>\n<p>CSS 函数式伪类 <code>:has()</code> 表示一个元素，如果作为参数传递的任何相对选择器在锚定到该元素时，至少匹配一个元素。这个伪类通过把可容错相对选择器列表作为参数，提供了一种针对引用元素选择父元素或者先前的兄弟元素的方法。</p>\n</blockquote>\n<p>你可以这么理解<code>h1:has(+ p)</code>伪元素:</p>\n<ul>\n<li>第一步，会先筛选<code>h1</code>元素列表，如果列表长度大于1才会执行has()</li>\n<li>第二步，执行<code>+ p</code>，就是判断<code>h1</code>元素列表中哪些元素的下个元素为<code>p</code></li>\n<li>第三步，将筛选后的元素列表返回</li>\n</ul>\n<p>再简单点说就是一个过滤器，过滤条件可以是任意CSS表达式。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>除了上述的场景外，<code>:has()</code> 还可以做以下几个场景：</p>\n<ul>\n<li>与<code>:is()</code> <code>:not()</code> 结合使用，如：<code>is:(h1, h2, h3):has(+ :not(h2,h3, h4))</code> </li>\n<li>表单必填项, 给每个必填项增加”*””文字，代码如下：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:has(+input</span><span class=\"selector-pseudo\">:required)</span><span class=\"selector-pseudo\">::before</span>&#123;</span></span><br><span class=\"line\">  content: '*';</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>备注<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<div style=\"border:1px solid #ccc;margin:20px;padding:20px;\">\n<style>\nlabel:has(+input:required)::before{\n  content: '*';\n  color: red;\n  width:1em;\n  display:inline-block;\n}\n</style>\n<form>\n  <div style=\"margin:10px\">\n    <label style=\"display:inline-block;width:4em; text-align:right;\">用户名</label>\n    <input required>\n  </div>\n  <div style=\"margin:10px\">\n    <label style=\"display:inline-block;width:4em; text-align:right;\">备注</label>\n    <input>\n  </div>\n</form>\n</div>\n\n\n<h1 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h1><p>了解完<code>:has()</code>伪类，那么来复习一下CSS中的其他伪类与伪元素。</p>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><p>伪元素，又称为伪类，是添加到CSS选择器上的关键字，给指定DOM元素添加特殊状态。MDN是这么定义的：</p>\n<blockquote>\n<p>CSS 伪类是添加到选择器的关键字，用于指定所选元素的特殊状态。例如，伪类 :hover 可以用于选择一个按钮，当用户的指针悬停在按钮上时，设置此按钮的样式。 ——<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes\" target=\"_blank\" rel=\"noopener\">MDN 伪类</a></p>\n</blockquote>\n<p>伪类一般组成为两部分： <code>:</code> + <code>伪类名</code>，按照伪类的功能进行划分，主要分为以下几类：</p>\n<ul>\n<li>元素显示状态伪类，如：<code>:fullscreen</code> <code>:hover</code></li>\n<li>输入状态伪类，如：<code>:focus</code> <code>:actived</code></li>\n<li>语言的伪类，如：<code>:lang()</code></li>\n<li>位置伪类，如：<code>:left</code></li>\n<li>资源状态伪类，如：<code>:playing</code> <code>:paused</code></li>\n<li>时间方面的伪类</li>\n<li>树结构的伪类，如： <code>:nth-child()</code></li>\n<li>用户行为伪类，如：<code>:actived</code></li>\n<li>函数式伪类，如：<code>:where</code> <code>:is</code> <code>:not</code></li>\n</ul>\n<p>其实我们真正在使用的没有几个，但是我们仍然要重点关注一下，能加快我们的开发效率，比如：元素显示状态伪类，用户行为伪类, 函数式伪类等</p>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><blockquote>\n<p>伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。——<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements\" target=\"_blank\" rel=\"noopener\">伪元素 MDN</a></p>\n</blockquote>\n<p>从命名上你就可以看出来，伪元素其实是一个类似的元素东西，虽然有部分写法可以改变样式，但是大部分还是给CSS选择器对应元素增加元素，比较常见的伪元素有：</p>\n<p>而且从书写规范来讲，伪元素为<code>::</code>+<code>伪元素名</code>，比较常见的伪元素有以下几种：</p>\n<ul>\n<li><code>::before</code> 给元素添加最前面添加一个子伪元素</li>\n<li><code>::after</code> 给元素添加最后面添加一个子伪元素</li>\n<li><code>::first-line</code> 选择元素第一个</li>\n<li><code>::placeholder</code> 修改有<code>placehodler</code>的样式</li>\n</ul>\n<p>部分demo代码测试案例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.article-inner</span>  <span class=\"selector-tag\">p</span><span class=\"selector-class\">.demo-20230108</span><span class=\"selector-pseudo\">::first-line</span> &#123; <span class=\"attribute\">color</span>:<span class=\"number\">#f00</span> &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.article-inner</span>  <span class=\"selector-tag\">p</span><span class=\"selector-class\">.demo-20230108</span><span class=\"selector-pseudo\">::first-letter</span> &#123; <span class=\"attribute\">text-transform</span>: uppercase &#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:400px; padding:20px; border:1px solid;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">'demo-20230108'</span> <span class=\"attr\">style</span>=<span class=\"string\">\"word-break:break-all\"</span>&gt;</span>abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<style>\n    .article-inner  p.demo-20230108::first-line { color:#f00 }\n    .article-inner  p.demo-20230108::first-letter { text-transform: uppercase }\n</style>\n<div style=\"width:400px; padding:20px; border:1px solid;\">\n    <p class=\"demo-20230108\" style=\"word-break:break-all\">abcdefg,首字母要大写，然后第一行是要红色的字体，换行后就变成正常的，这里是一段很长的测试文字。</p>\n</div>\n\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><p>只有一句话： <code>与伪元素比较，伪类能够根据状态改变元素样式。</code></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.zhangxinxu.com/wordpress/2022/08/css-has-pseudo-class/\" target=\"_blank\" rel=\"noopener\">CSS :has()伪类她来了</a></p>"},{"title":"从null、undefined、NaN的区别了解JS的原型链","date":"2023-01-29T10:00:01.000Z","toc":true,"_content":"\n# 简介\n\n由于在面试经常会遇到问题null，undefined，NaN之间的区别，因此想要深入且系统了解一下这些代表空之间的区别，以及它们底层的原理——原型链，同时还要搞明白`__proto__`和`prototype`分别是什么。\n\n为了更好系统的理解null，undefined，NaN之间的区别和关系，我们需要从Javascript语言设计底层去理解，为什么一个空值需要设计这么多个。为什么不能像Java，一个null就可以满足？\n\n我们先简单认识三者：\n\n- `undefined` 表示原始值undefined。它是一个 JavaScript 的 原始数据类型 \n- `null` 特指对象的值未设置。它是 JavaScript 基本类型 之一。\n- `NaN` 是一个表示非数字的值\n\n接下来主要从以下两个点去认识null，undefined，NaN之间的区别和关系：\n\n- 数据类型 `typeof`\n- `===` 判断\n- 原型 `prototype`\n\n<!-- more -->\n\n# 数据类型\n\n在Javascript中，`typeof`可以判断出当前变量的数据类型，主要以下几种数据类型：\n\n- `typeof undefined`，输出 `undefined`\n- `typeof NaN`，输出 `number`\n- `typeof null` 输出 `object`\n\n从上面的结果可以得知 `undefined`在JavaScript中是一种数据类型，而`NaN`和`null`则是某种数据类型的值。\n\n但是在JS在定义基础数据类型有以下集中种：\n\n- `number` 数字类型，包括数字 和 NaN\n- `string` 字符串类型\n- `boolean` 布尔类型 包括: true 和 false\n- `undefined` undefined未定义类型\n- `null`  null空数据类型\n- `bigint` ES2020新定义 BigInt大整数类型，主要用来解决大于 2^53 - 1 的整数，如：`const theBiggestInt = 9007199254740991n; const alsoHuge = BigInt(9007199254740991);`\n- `symbol` ES6定义 Symbol类型，应用场景：解决属性命名唯一性的问题，比如一个object里有两个属性名都一样，但是分别对不同的意思，可以通过Symbol类型去解决，如：`a = Symbol('test'); b = Symbol('test');obj = {[a]: 'test', [b]: 'test'}`\n\n同时typeof运算符还可以返回以下两种类型：\n\n- `function` 函数类型，新的`class`也是返回`function`\n- `object` 除了以上类型，其他对象统一返回`object`\n\n因此 `null`被单独归类成一种基础数据类型，但是为什么`typeof null` 得到的却是 `object`？\n\n## typeof\n先了解一下typeof是什么？\n\n> typeof是一个操作符而不是函数，用来检测给定变量的数据类型。\n\ntypeof是一个操作符，和 `+` `-` `=` 符号一样，只是用了`typeof`字母进行标识而已，类似还有：`delete` `void` `in` `instanceof`等。\n\n使用typeof需要注意以下几点：\n\n- typeof 操作符的优先级高于加法（+）等二进制操作符。因此，需要用括号来计算加法结果的类型。 如：`typeof someData + \" Wisen\"; // \"number Wisen\" ` `typeof (someData + \" Wisen\"); // \"string\"`\n- typeof 通常总是保证为它提供的任何操作数返回一个字符串。即使使用未声明的标识符，typeof 也会返回 \"undefined\"，而不是抛出错误。 但是在`let` `const`声明的变量，使用 typeof 会抛出一个 ReferenceError。因为`let` `const`声明的变量块作用域变量在块的头部处于“暂存死区”。\n- `typeof document.all === 'undefined'; // true` 因为所有浏览器都公开了一个类型为 undefined 的非标准宿主对象 `document.all`，但是 `document.all` 不等于 `undefined`，这种情况出现是在 Web 标准中，document.all 具有 \"undefined\" 类型的情况被归类为“故意违反”原始 ECMAScript Web 兼容性标准。\n- typeof 并不能检查出所有的类型，只能检查出上述所说的8种，针对其他类型可以通过原型链去判断获取，如： `Object.prototype.toString.call(x)` `x.constructor.name`\n\n### typeof 工作原理\n\n那么typeof真正是如何工作的呢？\n\n- 首先，会将所运算的变量数据在底层转换成二进制，而在Javascript设计中，是利用二进制前（低）三位存储其类型信息，如：000: 对象，1：整数， 100：字符串等\n- 其次，null存储起来转成二进制为`0000000000000000`，那么按照JS的设计原则， 低三位为`000`则代表对象\n- 因此，null在typeof计算后，会直接返回`object`\n\nPS： 注意细节， `undefined`：用 - （−2^30）表示。\n\n这里引用一下[迷渡 justjavac](https://github.com/justjavac)老师的几个解释：\n\n[JavaScript中typeof原理探究？](https://segmentfault.com/q/1010000011846328)\n[v8引擎是如何知道js数据类型的？](https://www.zhihu.com/question/62732293/answer/201723301)\n\n# ===运算符\n\n要讲三者的区别，还有一种方式就是通过 `===` 全等运算符，它们的表现如下：\n\n- `null === null // true` \n- `undefined === undefined // true`\n- `NaN === NaN // false`\n\n前两者比较好理解，毕竟都是等于自身，但是`NaN`不等于`NaN`就很容易给人带来误解。\n\n这里就需要先解释`===`和`==`的区别：\n\n- ==， 两边值类型不同的时候，要先进行类型转换，再比较两者的值。\n- ===，不做类型转换，类型不同的一定不等，然后对比两者的值。\n\n因此我们可以得到`===`的实现过程：\n\n- 先判断两者的数据类型是否一致\n- 再判断两者是否为基础数据类型，如果是数字类型还需要判断两者是否有为NaN，如果没有返回true，其他基础类型直接对比值\n- 如果是引用数据类型，如：object或function，则判断它们的引用对象是否为同一个，如：`a = function(){}; b= a; c=a; b===c; `\n\n## NaN\n\n> NaN 即 Not a Number ，代表该值不是一个数字number类型\n\n那么如何判断`NaN`值呢？答案是通过`isNaN(x)`或者`Number.isNaN(x)`函数去判断，这里也有坑就是`Number.isNaN(x)` 不会强制转换`x`为`number`,只是会判断x是否为`NaN`\n\n为什么JS要设计一直`NaN`值？ 个人猜测是因为JS是一门弱类型语言，它支持类型之间互相转换，其他基础数据类型都可以直接转换或者报类型错误，但是在`number`为了更好兼容加减乘除运算符，设计一个值为NaN(非数字)，当值无法转换`number`类型，将返回NaN。\n\n\n\n**同时，我们也需要了解`NaN`与`Infinity`的区别：**\n\n- NaN，是Not a Number的缩写，不是一个数字的意思。\n- Infinity，是指无穷大的数字，后面可以用BigInt数据类型代替。\n\n\n# 原型\n\n如果要了解到三者的本质，从三者的原型去区分：\n\n- `Object.prototype.toString.call(undefined) // [object Undefined]`，原型为自己本身或者没有原型，因为它是一个基础数据类型，且是全局对象(window)的一个属性，并不是一个实例化的对象\n- `Object.prototype.toString.call(null) // [object Null]`， 原型为自己本身，因为它是原型链上的最后一个\n- `Object.prototype.toString.call(null) // [object Number]`，原型为`Number`，因为它是属于`Number类型`\n\n那么什么是原型呢？\n\n我们需要明白原型是怎么出现的，是为了解决什么问题？\n\n> 原型机制，是JS语言实现面向对象编程中继承特性是设计的一种机制，这种继承机制与经典的面向对象编程语言的继承机制不同。\n> 传统的面向对象编程，实现对象继承，通过是定义一个父类，如果有个子类继承父类，那么在子类在实例化，会将父类的属性和方法都复制一份到子类的实例中\n> 而原型机制是每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推，最终形成`原型链 (prototype chain)`。\n> 这些属性和方法定义在 Object 的构造器函数 (constructor functions) 之上的prototype属性上，而非对象实例本身\n\n如何理解呢？下面通过一下几个点：\n\n- new一个对象的全过程\n- 如何实现继承？以及继承中的原型链？\n\n但是在搞清楚这个之前，我们还需要了解JS原型中经常会混淆两个属性，`prototype`和`__proto__`，所以我们先弄明白这两个属性分别是做什么的。\n\n## prototype和__proto__\n\n> 在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。\n> 那么只要是对象就会有属性`__proto__`，称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型对象`prototype`。\n\n为了更好的理解，我们通过一段代码和对应原型关系图去对比了解：\n\n```js\nA = function(){};\na = new A();\n```\n上述代码`prototype`和`__proto__`的关系如下图：\n\n![](/assets/img/20230130-1.png)\n\n通过上图我们可以很清晰的知道两者的区别：\n\n- `prototype`是一个对象，只有函数才有，实例化后的变量是没有的，且`prototype`原型允许扩展函数的方法或者属性，从而让实例化后的对象进行使用，再者就是`prototype`既然是对象那么它自己也会有`__proto__`属性\n- `__proto__`是实例化对象后拥有的属性，它的值主要指向该对象构造函数的原型`prototype`，从而形成`原型链`\n- 当一个实例化对象在调用某方法或某属性时，会先判断`__proto__`的`prototype`对象上是否有，如果没有则会往下一层`__proto__`去寻找\n\n## new的实现过程\n\ndemo代码如下：\n```js\nA = function(){};\n\na = new A();\n```\n\n那么在这一个过程中，js在底层中，做了哪些事情呢？ 通过上图我们可以很清楚的知道：\n\n- 创建全新的函数A实例化一个对象\n- 然后将对象的__proto__指向构造函数的prototype\n- 将对象的this指向到调用方的this\n- 如果函数无返回对象类型Object，则返回该函数对象\n\n## 继承与原型链\n\n继承其实在ES6后来说已经很简单了，因为定义了`class`和`extends`等语法糖，所以不需要再像之前通过原型去解决，但是为了更好的了解原型链，我们接下来尝试一下几种ES5时代实现继承的方式。\n\n### 原型指向实现\n\n```js\nfunction A(){\n    this.a = 'test';\n}\nA.prototype.say = function(){\n    console.log(this.a);\n}\n\nfunction B(){\n    // 需要将A的属性继承\n    A.call(this);\n}\nB.prototype.__proto__ = A.prototype;\n// 思考一下，为什么要将隐性原型指向A？\nB.__proto__ = A;\n\nvar b = new B();\n\nb.a; // test\nb.say(); // test\n\nb instanceof B; // true\nb instanceof A; // true\n```\n\n这里需要注意几个点：\n\n1. 在B构造函数里实现`A.call(this)`，是因为需要将A函数实现一遍，且A中this指向的属性绑定B函数中\n2. `B.prototype.__proto__ = A.prototype`这行是继承A的方法，后续如果要重写相同方法需要放在这行代码后面\n3. `B.__proto__ = A` 如果没有这行代码，貌似上面的结果并不会有太多异常，那么为什么要这行代码呢？(等待后续解释)\n\n\n# 总结\n\n这里再总结一下，在数据类型上，三者的区别主要是：\n\n- `undefined` 是一种基础数据类型，可以通过`typeof`直接识别\n- `null` 虽然也是一种基础数据类型，但是由于`typeof`从一开始实现机制问题，`typeof null`一直遗留下来返回的`object`\n- `NaN` 是`number`数据类型的一个值，代表无法识别为数字类型的值，如：`Number('abc') // NaN`\n\n在 `===` 运算符号上，区别主要是：\n\n- `undefined`，可以等于任何值为`undefined`的变量\n- `null`，可以等于任何值为`null`的变量\n- `NaN`，不等于任何值的变量，只能通过`isNaN`函数判断\n\n从原型上去了解三者，他们本质就完全不同：\n\n- `undefined`，原型为自己本身或者没有原型\n- `null`，原型为自己\n- `NaN`，原型为Number\n\n同时我们也清楚的认识到JS中原型和原型链，原型是JS设计实现面向对象的一种机制，主要通过两个东西实现原型对象`prototype`和隐性原型`__proto__`实现，这两者主要关系在于：\n\n- 隐性原型`__proto__`是一个实例化对象后的属性，会指向声明该对象的构造函数的原型对象`prototype`\n- 原型对象`prototype`是一个对象，一般只有函数才会有，它通常包括`constructor`构造函数指向函数本身，以及其他扩展方法和属性，同时它本身也拥有`__proto__`隐性原型属性\n\n当然JS的原型和原型链并没有那么简单，不仅仅只是实现继承这么简单，后续我们还需要关注原型链安全问题，后续请看[《JS原型链污染是怎么回事》](/2023/01/06/today/20220203/)。","source":"_posts/today/20230129.md","raw":"---\ntitle: 从null、undefined、NaN的区别了解JS的原型链\ndate: 2023-01-29 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 简介\n\n由于在面试经常会遇到问题null，undefined，NaN之间的区别，因此想要深入且系统了解一下这些代表空之间的区别，以及它们底层的原理——原型链，同时还要搞明白`__proto__`和`prototype`分别是什么。\n\n为了更好系统的理解null，undefined，NaN之间的区别和关系，我们需要从Javascript语言设计底层去理解，为什么一个空值需要设计这么多个。为什么不能像Java，一个null就可以满足？\n\n我们先简单认识三者：\n\n- `undefined` 表示原始值undefined。它是一个 JavaScript 的 原始数据类型 \n- `null` 特指对象的值未设置。它是 JavaScript 基本类型 之一。\n- `NaN` 是一个表示非数字的值\n\n接下来主要从以下两个点去认识null，undefined，NaN之间的区别和关系：\n\n- 数据类型 `typeof`\n- `===` 判断\n- 原型 `prototype`\n\n<!-- more -->\n\n# 数据类型\n\n在Javascript中，`typeof`可以判断出当前变量的数据类型，主要以下几种数据类型：\n\n- `typeof undefined`，输出 `undefined`\n- `typeof NaN`，输出 `number`\n- `typeof null` 输出 `object`\n\n从上面的结果可以得知 `undefined`在JavaScript中是一种数据类型，而`NaN`和`null`则是某种数据类型的值。\n\n但是在JS在定义基础数据类型有以下集中种：\n\n- `number` 数字类型，包括数字 和 NaN\n- `string` 字符串类型\n- `boolean` 布尔类型 包括: true 和 false\n- `undefined` undefined未定义类型\n- `null`  null空数据类型\n- `bigint` ES2020新定义 BigInt大整数类型，主要用来解决大于 2^53 - 1 的整数，如：`const theBiggestInt = 9007199254740991n; const alsoHuge = BigInt(9007199254740991);`\n- `symbol` ES6定义 Symbol类型，应用场景：解决属性命名唯一性的问题，比如一个object里有两个属性名都一样，但是分别对不同的意思，可以通过Symbol类型去解决，如：`a = Symbol('test'); b = Symbol('test');obj = {[a]: 'test', [b]: 'test'}`\n\n同时typeof运算符还可以返回以下两种类型：\n\n- `function` 函数类型，新的`class`也是返回`function`\n- `object` 除了以上类型，其他对象统一返回`object`\n\n因此 `null`被单独归类成一种基础数据类型，但是为什么`typeof null` 得到的却是 `object`？\n\n## typeof\n先了解一下typeof是什么？\n\n> typeof是一个操作符而不是函数，用来检测给定变量的数据类型。\n\ntypeof是一个操作符，和 `+` `-` `=` 符号一样，只是用了`typeof`字母进行标识而已，类似还有：`delete` `void` `in` `instanceof`等。\n\n使用typeof需要注意以下几点：\n\n- typeof 操作符的优先级高于加法（+）等二进制操作符。因此，需要用括号来计算加法结果的类型。 如：`typeof someData + \" Wisen\"; // \"number Wisen\" ` `typeof (someData + \" Wisen\"); // \"string\"`\n- typeof 通常总是保证为它提供的任何操作数返回一个字符串。即使使用未声明的标识符，typeof 也会返回 \"undefined\"，而不是抛出错误。 但是在`let` `const`声明的变量，使用 typeof 会抛出一个 ReferenceError。因为`let` `const`声明的变量块作用域变量在块的头部处于“暂存死区”。\n- `typeof document.all === 'undefined'; // true` 因为所有浏览器都公开了一个类型为 undefined 的非标准宿主对象 `document.all`，但是 `document.all` 不等于 `undefined`，这种情况出现是在 Web 标准中，document.all 具有 \"undefined\" 类型的情况被归类为“故意违反”原始 ECMAScript Web 兼容性标准。\n- typeof 并不能检查出所有的类型，只能检查出上述所说的8种，针对其他类型可以通过原型链去判断获取，如： `Object.prototype.toString.call(x)` `x.constructor.name`\n\n### typeof 工作原理\n\n那么typeof真正是如何工作的呢？\n\n- 首先，会将所运算的变量数据在底层转换成二进制，而在Javascript设计中，是利用二进制前（低）三位存储其类型信息，如：000: 对象，1：整数， 100：字符串等\n- 其次，null存储起来转成二进制为`0000000000000000`，那么按照JS的设计原则， 低三位为`000`则代表对象\n- 因此，null在typeof计算后，会直接返回`object`\n\nPS： 注意细节， `undefined`：用 - （−2^30）表示。\n\n这里引用一下[迷渡 justjavac](https://github.com/justjavac)老师的几个解释：\n\n[JavaScript中typeof原理探究？](https://segmentfault.com/q/1010000011846328)\n[v8引擎是如何知道js数据类型的？](https://www.zhihu.com/question/62732293/answer/201723301)\n\n# ===运算符\n\n要讲三者的区别，还有一种方式就是通过 `===` 全等运算符，它们的表现如下：\n\n- `null === null // true` \n- `undefined === undefined // true`\n- `NaN === NaN // false`\n\n前两者比较好理解，毕竟都是等于自身，但是`NaN`不等于`NaN`就很容易给人带来误解。\n\n这里就需要先解释`===`和`==`的区别：\n\n- ==， 两边值类型不同的时候，要先进行类型转换，再比较两者的值。\n- ===，不做类型转换，类型不同的一定不等，然后对比两者的值。\n\n因此我们可以得到`===`的实现过程：\n\n- 先判断两者的数据类型是否一致\n- 再判断两者是否为基础数据类型，如果是数字类型还需要判断两者是否有为NaN，如果没有返回true，其他基础类型直接对比值\n- 如果是引用数据类型，如：object或function，则判断它们的引用对象是否为同一个，如：`a = function(){}; b= a; c=a; b===c; `\n\n## NaN\n\n> NaN 即 Not a Number ，代表该值不是一个数字number类型\n\n那么如何判断`NaN`值呢？答案是通过`isNaN(x)`或者`Number.isNaN(x)`函数去判断，这里也有坑就是`Number.isNaN(x)` 不会强制转换`x`为`number`,只是会判断x是否为`NaN`\n\n为什么JS要设计一直`NaN`值？ 个人猜测是因为JS是一门弱类型语言，它支持类型之间互相转换，其他基础数据类型都可以直接转换或者报类型错误，但是在`number`为了更好兼容加减乘除运算符，设计一个值为NaN(非数字)，当值无法转换`number`类型，将返回NaN。\n\n\n\n**同时，我们也需要了解`NaN`与`Infinity`的区别：**\n\n- NaN，是Not a Number的缩写，不是一个数字的意思。\n- Infinity，是指无穷大的数字，后面可以用BigInt数据类型代替。\n\n\n# 原型\n\n如果要了解到三者的本质，从三者的原型去区分：\n\n- `Object.prototype.toString.call(undefined) // [object Undefined]`，原型为自己本身或者没有原型，因为它是一个基础数据类型，且是全局对象(window)的一个属性，并不是一个实例化的对象\n- `Object.prototype.toString.call(null) // [object Null]`， 原型为自己本身，因为它是原型链上的最后一个\n- `Object.prototype.toString.call(null) // [object Number]`，原型为`Number`，因为它是属于`Number类型`\n\n那么什么是原型呢？\n\n我们需要明白原型是怎么出现的，是为了解决什么问题？\n\n> 原型机制，是JS语言实现面向对象编程中继承特性是设计的一种机制，这种继承机制与经典的面向对象编程语言的继承机制不同。\n> 传统的面向对象编程，实现对象继承，通过是定义一个父类，如果有个子类继承父类，那么在子类在实例化，会将父类的属性和方法都复制一份到子类的实例中\n> 而原型机制是每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推，最终形成`原型链 (prototype chain)`。\n> 这些属性和方法定义在 Object 的构造器函数 (constructor functions) 之上的prototype属性上，而非对象实例本身\n\n如何理解呢？下面通过一下几个点：\n\n- new一个对象的全过程\n- 如何实现继承？以及继承中的原型链？\n\n但是在搞清楚这个之前，我们还需要了解JS原型中经常会混淆两个属性，`prototype`和`__proto__`，所以我们先弄明白这两个属性分别是做什么的。\n\n## prototype和__proto__\n\n> 在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。\n> 那么只要是对象就会有属性`__proto__`，称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型对象`prototype`。\n\n为了更好的理解，我们通过一段代码和对应原型关系图去对比了解：\n\n```js\nA = function(){};\na = new A();\n```\n上述代码`prototype`和`__proto__`的关系如下图：\n\n![](/assets/img/20230130-1.png)\n\n通过上图我们可以很清晰的知道两者的区别：\n\n- `prototype`是一个对象，只有函数才有，实例化后的变量是没有的，且`prototype`原型允许扩展函数的方法或者属性，从而让实例化后的对象进行使用，再者就是`prototype`既然是对象那么它自己也会有`__proto__`属性\n- `__proto__`是实例化对象后拥有的属性，它的值主要指向该对象构造函数的原型`prototype`，从而形成`原型链`\n- 当一个实例化对象在调用某方法或某属性时，会先判断`__proto__`的`prototype`对象上是否有，如果没有则会往下一层`__proto__`去寻找\n\n## new的实现过程\n\ndemo代码如下：\n```js\nA = function(){};\n\na = new A();\n```\n\n那么在这一个过程中，js在底层中，做了哪些事情呢？ 通过上图我们可以很清楚的知道：\n\n- 创建全新的函数A实例化一个对象\n- 然后将对象的__proto__指向构造函数的prototype\n- 将对象的this指向到调用方的this\n- 如果函数无返回对象类型Object，则返回该函数对象\n\n## 继承与原型链\n\n继承其实在ES6后来说已经很简单了，因为定义了`class`和`extends`等语法糖，所以不需要再像之前通过原型去解决，但是为了更好的了解原型链，我们接下来尝试一下几种ES5时代实现继承的方式。\n\n### 原型指向实现\n\n```js\nfunction A(){\n    this.a = 'test';\n}\nA.prototype.say = function(){\n    console.log(this.a);\n}\n\nfunction B(){\n    // 需要将A的属性继承\n    A.call(this);\n}\nB.prototype.__proto__ = A.prototype;\n// 思考一下，为什么要将隐性原型指向A？\nB.__proto__ = A;\n\nvar b = new B();\n\nb.a; // test\nb.say(); // test\n\nb instanceof B; // true\nb instanceof A; // true\n```\n\n这里需要注意几个点：\n\n1. 在B构造函数里实现`A.call(this)`，是因为需要将A函数实现一遍，且A中this指向的属性绑定B函数中\n2. `B.prototype.__proto__ = A.prototype`这行是继承A的方法，后续如果要重写相同方法需要放在这行代码后面\n3. `B.__proto__ = A` 如果没有这行代码，貌似上面的结果并不会有太多异常，那么为什么要这行代码呢？(等待后续解释)\n\n\n# 总结\n\n这里再总结一下，在数据类型上，三者的区别主要是：\n\n- `undefined` 是一种基础数据类型，可以通过`typeof`直接识别\n- `null` 虽然也是一种基础数据类型，但是由于`typeof`从一开始实现机制问题，`typeof null`一直遗留下来返回的`object`\n- `NaN` 是`number`数据类型的一个值，代表无法识别为数字类型的值，如：`Number('abc') // NaN`\n\n在 `===` 运算符号上，区别主要是：\n\n- `undefined`，可以等于任何值为`undefined`的变量\n- `null`，可以等于任何值为`null`的变量\n- `NaN`，不等于任何值的变量，只能通过`isNaN`函数判断\n\n从原型上去了解三者，他们本质就完全不同：\n\n- `undefined`，原型为自己本身或者没有原型\n- `null`，原型为自己\n- `NaN`，原型为Number\n\n同时我们也清楚的认识到JS中原型和原型链，原型是JS设计实现面向对象的一种机制，主要通过两个东西实现原型对象`prototype`和隐性原型`__proto__`实现，这两者主要关系在于：\n\n- 隐性原型`__proto__`是一个实例化对象后的属性，会指向声明该对象的构造函数的原型对象`prototype`\n- 原型对象`prototype`是一个对象，一般只有函数才会有，它通常包括`constructor`构造函数指向函数本身，以及其他扩展方法和属性，同时它本身也拥有`__proto__`隐性原型属性\n\n当然JS的原型和原型链并没有那么简单，不仅仅只是实现继承这么简单，后续我们还需要关注原型链安全问题，后续请看[《JS原型链污染是怎么回事》](/2023/01/06/today/20220203/)。","slug":"today/20230129","published":1,"updated":"2023-01-30T14:45:40.163Z","_id":"cldztfr7q001hnxpc1ysvj7ft","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>由于在面试经常会遇到问题null，undefined，NaN之间的区别，因此想要深入且系统了解一下这些代表空之间的区别，以及它们底层的原理——原型链，同时还要搞明白<code>__proto__</code>和<code>prototype</code>分别是什么。</p>\n<p>为了更好系统的理解null，undefined，NaN之间的区别和关系，我们需要从Javascript语言设计底层去理解，为什么一个空值需要设计这么多个。为什么不能像Java，一个null就可以满足？</p>\n<p>我们先简单认识三者：</p>\n<ul>\n<li><code>undefined</code> 表示原始值undefined。它是一个 JavaScript 的 原始数据类型 </li>\n<li><code>null</code> 特指对象的值未设置。它是 JavaScript 基本类型 之一。</li>\n<li><code>NaN</code> 是一个表示非数字的值</li>\n</ul>\n<p>接下来主要从以下两个点去认识null，undefined，NaN之间的区别和关系：</p>\n<ul>\n<li>数据类型 <code>typeof</code></li>\n<li><code>===</code> 判断</li>\n<li>原型 <code>prototype</code></li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>在Javascript中，<code>typeof</code>可以判断出当前变量的数据类型，主要以下几种数据类型：</p>\n<ul>\n<li><code>typeof undefined</code>，输出 <code>undefined</code></li>\n<li><code>typeof NaN</code>，输出 <code>number</code></li>\n<li><code>typeof null</code> 输出 <code>object</code></li>\n</ul>\n<p>从上面的结果可以得知 <code>undefined</code>在JavaScript中是一种数据类型，而<code>NaN</code>和<code>null</code>则是某种数据类型的值。</p>\n<p>但是在JS在定义基础数据类型有以下集中种：</p>\n<ul>\n<li><code>number</code> 数字类型，包括数字 和 NaN</li>\n<li><code>string</code> 字符串类型</li>\n<li><code>boolean</code> 布尔类型 包括: true 和 false</li>\n<li><code>undefined</code> undefined未定义类型</li>\n<li><code>null</code>  null空数据类型</li>\n<li><code>bigint</code> ES2020新定义 BigInt大整数类型，主要用来解决大于 2^53 - 1 的整数，如：<code>const theBiggestInt = 9007199254740991n; const alsoHuge = BigInt(9007199254740991);</code></li>\n<li><code>symbol</code> ES6定义 Symbol类型，应用场景：解决属性命名唯一性的问题，比如一个object里有两个属性名都一样，但是分别对不同的意思，可以通过Symbol类型去解决，如：<code>a = Symbol(&#39;test&#39;); b = Symbol(&#39;test&#39;);obj = {[a]: &#39;test&#39;, [b]: &#39;test&#39;}</code></li>\n</ul>\n<p>同时typeof运算符还可以返回以下两种类型：</p>\n<ul>\n<li><code>function</code> 函数类型，新的<code>class</code>也是返回<code>function</code></li>\n<li><code>object</code> 除了以上类型，其他对象统一返回<code>object</code></li>\n</ul>\n<p>因此 <code>null</code>被单独归类成一种基础数据类型，但是为什么<code>typeof null</code> 得到的却是 <code>object</code>？</p>\n<h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><p>先了解一下typeof是什么？</p>\n<blockquote>\n<p>typeof是一个操作符而不是函数，用来检测给定变量的数据类型。</p>\n</blockquote>\n<p>typeof是一个操作符，和 <code>+</code> <code>-</code> <code>=</code> 符号一样，只是用了<code>typeof</code>字母进行标识而已，类似还有：<code>delete</code> <code>void</code> <code>in</code> <code>instanceof</code>等。</p>\n<p>使用typeof需要注意以下几点：</p>\n<ul>\n<li>typeof 操作符的优先级高于加法（+）等二进制操作符。因此，需要用括号来计算加法结果的类型。 如：<code>typeof someData + &quot; Wisen&quot;; // &quot;number Wisen&quot;</code> <code>typeof (someData + &quot; Wisen&quot;); // &quot;string&quot;</code></li>\n<li>typeof 通常总是保证为它提供的任何操作数返回一个字符串。即使使用未声明的标识符，typeof 也会返回 “undefined”，而不是抛出错误。 但是在<code>let</code> <code>const</code>声明的变量，使用 typeof 会抛出一个 ReferenceError。因为<code>let</code> <code>const</code>声明的变量块作用域变量在块的头部处于“暂存死区”。</li>\n<li><code>typeof document.all === &#39;undefined&#39;; // true</code> 因为所有浏览器都公开了一个类型为 undefined 的非标准宿主对象 <code>document.all</code>，但是 <code>document.all</code> 不等于 <code>undefined</code>，这种情况出现是在 Web 标准中，document.all 具有 “undefined” 类型的情况被归类为“故意违反”原始 ECMAScript Web 兼容性标准。</li>\n<li>typeof 并不能检查出所有的类型，只能检查出上述所说的8种，针对其他类型可以通过原型链去判断获取，如： <code>Object.prototype.toString.call(x)</code> <code>x.constructor.name</code></li>\n</ul>\n<h3 id=\"typeof-工作原理\"><a href=\"#typeof-工作原理\" class=\"headerlink\" title=\"typeof 工作原理\"></a>typeof 工作原理</h3><p>那么typeof真正是如何工作的呢？</p>\n<ul>\n<li>首先，会将所运算的变量数据在底层转换成二进制，而在Javascript设计中，是利用二进制前（低）三位存储其类型信息，如：000: 对象，1：整数， 100：字符串等</li>\n<li>其次，null存储起来转成二进制为<code>0000000000000000</code>，那么按照JS的设计原则， 低三位为<code>000</code>则代表对象</li>\n<li>因此，null在typeof计算后，会直接返回<code>object</code></li>\n</ul>\n<p>PS： 注意细节， <code>undefined</code>：用 - （−2^30）表示。</p>\n<p>这里引用一下<a href=\"https://github.com/justjavac\" target=\"_blank\" rel=\"noopener\">迷渡 justjavac</a>老师的几个解释：</p>\n<p><a href=\"https://segmentfault.com/q/1010000011846328\" target=\"_blank\" rel=\"noopener\">JavaScript中typeof原理探究？</a><br><a href=\"https://www.zhihu.com/question/62732293/answer/201723301\" target=\"_blank\" rel=\"noopener\">v8引擎是如何知道js数据类型的？</a></p>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"===运算符\"></a>===运算符</h1><p>要讲三者的区别，还有一种方式就是通过 <code>===</code> 全等运算符，它们的表现如下：</p>\n<ul>\n<li><code>null === null // true</code> </li>\n<li><code>undefined === undefined // true</code></li>\n<li><code>NaN === NaN // false</code></li>\n</ul>\n<p>前两者比较好理解，毕竟都是等于自身，但是<code>NaN</code>不等于<code>NaN</code>就很容易给人带来误解。</p>\n<p>这里就需要先解释<code>===</code>和<code>==</code>的区别：</p>\n<ul>\n<li>==， 两边值类型不同的时候，要先进行类型转换，再比较两者的值。</li>\n<li>===，不做类型转换，类型不同的一定不等，然后对比两者的值。</li>\n</ul>\n<p>因此我们可以得到<code>===</code>的实现过程：</p>\n<ul>\n<li>先判断两者的数据类型是否一致</li>\n<li>再判断两者是否为基础数据类型，如果是数字类型还需要判断两者是否有为NaN，如果没有返回true，其他基础类型直接对比值</li>\n<li>如果是引用数据类型，如：object或function，则判断它们的引用对象是否为同一个，如：<code>a = function(){}; b= a; c=a; b===c;</code></li>\n</ul>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><blockquote>\n<p>NaN 即 Not a Number ，代表该值不是一个数字number类型</p>\n</blockquote>\n<p>那么如何判断<code>NaN</code>值呢？答案是通过<code>isNaN(x)</code>或者<code>Number.isNaN(x)</code>函数去判断，这里也有坑就是<code>Number.isNaN(x)</code> 不会强制转换<code>x</code>为<code>number</code>,只是会判断x是否为<code>NaN</code></p>\n<p>为什么JS要设计一直<code>NaN</code>值？ 个人猜测是因为JS是一门弱类型语言，它支持类型之间互相转换，其他基础数据类型都可以直接转换或者报类型错误，但是在<code>number</code>为了更好兼容加减乘除运算符，设计一个值为NaN(非数字)，当值无法转换<code>number</code>类型，将返回NaN。</p>\n<p><strong>同时，我们也需要了解<code>NaN</code>与<code>Infinity</code>的区别：</strong></p>\n<ul>\n<li>NaN，是Not a Number的缩写，不是一个数字的意思。</li>\n<li>Infinity，是指无穷大的数字，后面可以用BigInt数据类型代替。</li>\n</ul>\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><p>如果要了解到三者的本质，从三者的原型去区分：</p>\n<ul>\n<li><code>Object.prototype.toString.call(undefined) // [object Undefined]</code>，原型为自己本身或者没有原型，因为它是一个基础数据类型，且是全局对象(window)的一个属性，并不是一个实例化的对象</li>\n<li><code>Object.prototype.toString.call(null) // [object Null]</code>， 原型为自己本身，因为它是原型链上的最后一个</li>\n<li><code>Object.prototype.toString.call(null) // [object Number]</code>，原型为<code>Number</code>，因为它是属于<code>Number类型</code></li>\n</ul>\n<p>那么什么是原型呢？</p>\n<p>我们需要明白原型是怎么出现的，是为了解决什么问题？</p>\n<blockquote>\n<p>原型机制，是JS语言实现面向对象编程中继承特性是设计的一种机制，这种继承机制与经典的面向对象编程语言的继承机制不同。<br>传统的面向对象编程，实现对象继承，通过是定义一个父类，如果有个子类继承父类，那么在子类在实例化，会将父类的属性和方法都复制一份到子类的实例中<br>而原型机制是每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推，最终形成<code>原型链 (prototype chain)</code>。<br>这些属性和方法定义在 Object 的构造器函数 (constructor functions) 之上的prototype属性上，而非对象实例本身</p>\n</blockquote>\n<p>如何理解呢？下面通过一下几个点：</p>\n<ul>\n<li>new一个对象的全过程</li>\n<li>如何实现继承？以及继承中的原型链？</li>\n</ul>\n<p>但是在搞清楚这个之前，我们还需要了解JS原型中经常会混淆两个属性，<code>prototype</code>和<code>__proto__</code>，所以我们先弄明白这两个属性分别是做什么的。</p>\n<h2 id=\"prototype和proto\"><a href=\"#prototype和proto\" class=\"headerlink\" title=\"prototype和proto\"></a>prototype和<strong>proto</strong></h2><blockquote>\n<p>在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。<br>那么只要是对象就会有属性<code>__proto__</code>，称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型对象<code>prototype</code>。</p>\n</blockquote>\n<p>为了更好的理解，我们通过一段代码和对应原型关系图去对比了解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">a = <span class=\"keyword\">new</span> A();</span><br></pre></td></tr></table></figure>\n\n<p>上述代码<code>prototype</code>和<code>__proto__</code>的关系如下图：</p>\n<p><img src=\"/assets/img/20230130-1.png\" alt></p>\n<p>通过上图我们可以很清晰的知道两者的区别：</p>\n<ul>\n<li><code>prototype</code>是一个对象，只有函数才有，实例化后的变量是没有的，且<code>prototype</code>原型允许扩展函数的方法或者属性，从而让实例化后的对象进行使用，再者就是<code>prototype</code>既然是对象那么它自己也会有<code>__proto__</code>属性</li>\n<li><code>__proto__</code>是实例化对象后拥有的属性，它的值主要指向该对象构造函数的原型<code>prototype</code>，从而形成<code>原型链</code></li>\n<li>当一个实例化对象在调用某方法或某属性时，会先判断<code>__proto__</code>的<code>prototype</code>对象上是否有，如果没有则会往下一层<code>__proto__</code>去寻找</li>\n</ul>\n<h2 id=\"new的实现过程\"><a href=\"#new的实现过程\" class=\"headerlink\" title=\"new的实现过程\"></a>new的实现过程</h2><p>demo代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"keyword\">new</span> A();</span><br></pre></td></tr></table></figure>\n\n<p>那么在这一个过程中，js在底层中，做了哪些事情呢？ 通过上图我们可以很清楚的知道：</p>\n<ul>\n<li>创建全新的函数A实例化一个对象</li>\n<li>然后将对象的<strong>proto</strong>指向构造函数的prototype</li>\n<li>将对象的this指向到调用方的this</li>\n<li>如果函数无返回对象类型Object，则返回该函数对象</li>\n</ul>\n<h2 id=\"继承与原型链\"><a href=\"#继承与原型链\" class=\"headerlink\" title=\"继承与原型链\"></a>继承与原型链</h2><p>继承其实在ES6后来说已经很简单了，因为定义了<code>class</code>和<code>extends</code>等语法糖，所以不需要再像之前通过原型去解决，但是为了更好的了解原型链，我们接下来尝试一下几种ES5时代实现继承的方式。</p>\n<h3 id=\"原型指向实现\"><a href=\"#原型指向实现\" class=\"headerlink\" title=\"原型指向实现\"></a>原型指向实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要将A的属性继承</span></span><br><span class=\"line\">    A.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B.prototype.__proto__ = A.prototype;</span><br><span class=\"line\"><span class=\"comment\">// 思考一下，为什么要将隐性原型指向A？</span></span><br><span class=\"line\">B.__proto__ = A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\"></span><br><span class=\"line\">b.a; <span class=\"comment\">// test</span></span><br><span class=\"line\">b.say(); <span class=\"comment\">// test</span></span><br><span class=\"line\"></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> B; <span class=\"comment\">// true</span></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> A; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意几个点：</p>\n<ol>\n<li>在B构造函数里实现<code>A.call(this)</code>，是因为需要将A函数实现一遍，且A中this指向的属性绑定B函数中</li>\n<li><code>B.prototype.__proto__ = A.prototype</code>这行是继承A的方法，后续如果要重写相同方法需要放在这行代码后面</li>\n<li><code>B.__proto__ = A</code> 如果没有这行代码，貌似上面的结果并不会有太多异常，那么为什么要这行代码呢？(等待后续解释)</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这里再总结一下，在数据类型上，三者的区别主要是：</p>\n<ul>\n<li><code>undefined</code> 是一种基础数据类型，可以通过<code>typeof</code>直接识别</li>\n<li><code>null</code> 虽然也是一种基础数据类型，但是由于<code>typeof</code>从一开始实现机制问题，<code>typeof null</code>一直遗留下来返回的<code>object</code></li>\n<li><code>NaN</code> 是<code>number</code>数据类型的一个值，代表无法识别为数字类型的值，如：<code>Number(&#39;abc&#39;) // NaN</code></li>\n</ul>\n<p>在 <code>===</code> 运算符号上，区别主要是：</p>\n<ul>\n<li><code>undefined</code>，可以等于任何值为<code>undefined</code>的变量</li>\n<li><code>null</code>，可以等于任何值为<code>null</code>的变量</li>\n<li><code>NaN</code>，不等于任何值的变量，只能通过<code>isNaN</code>函数判断</li>\n</ul>\n<p>从原型上去了解三者，他们本质就完全不同：</p>\n<ul>\n<li><code>undefined</code>，原型为自己本身或者没有原型</li>\n<li><code>null</code>，原型为自己</li>\n<li><code>NaN</code>，原型为Number</li>\n</ul>\n<p>同时我们也清楚的认识到JS中原型和原型链，原型是JS设计实现面向对象的一种机制，主要通过两个东西实现原型对象<code>prototype</code>和隐性原型<code>__proto__</code>实现，这两者主要关系在于：</p>\n<ul>\n<li>隐性原型<code>__proto__</code>是一个实例化对象后的属性，会指向声明该对象的构造函数的原型对象<code>prototype</code></li>\n<li>原型对象<code>prototype</code>是一个对象，一般只有函数才会有，它通常包括<code>constructor</code>构造函数指向函数本身，以及其他扩展方法和属性，同时它本身也拥有<code>__proto__</code>隐性原型属性</li>\n</ul>\n<p>当然JS的原型和原型链并没有那么简单，不仅仅只是实现继承这么简单，后续我们还需要关注原型链安全问题，后续请看<a href=\"/2023/01/06/today/20220203/\">《JS原型链污染是怎么回事》</a>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>由于在面试经常会遇到问题null，undefined，NaN之间的区别，因此想要深入且系统了解一下这些代表空之间的区别，以及它们底层的原理——原型链，同时还要搞明白<code>__proto__</code>和<code>prototype</code>分别是什么。</p>\n<p>为了更好系统的理解null，undefined，NaN之间的区别和关系，我们需要从Javascript语言设计底层去理解，为什么一个空值需要设计这么多个。为什么不能像Java，一个null就可以满足？</p>\n<p>我们先简单认识三者：</p>\n<ul>\n<li><code>undefined</code> 表示原始值undefined。它是一个 JavaScript 的 原始数据类型 </li>\n<li><code>null</code> 特指对象的值未设置。它是 JavaScript 基本类型 之一。</li>\n<li><code>NaN</code> 是一个表示非数字的值</li>\n</ul>\n<p>接下来主要从以下两个点去认识null，undefined，NaN之间的区别和关系：</p>\n<ul>\n<li>数据类型 <code>typeof</code></li>\n<li><code>===</code> 判断</li>\n<li>原型 <code>prototype</code></li>\n</ul>","more":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>在Javascript中，<code>typeof</code>可以判断出当前变量的数据类型，主要以下几种数据类型：</p>\n<ul>\n<li><code>typeof undefined</code>，输出 <code>undefined</code></li>\n<li><code>typeof NaN</code>，输出 <code>number</code></li>\n<li><code>typeof null</code> 输出 <code>object</code></li>\n</ul>\n<p>从上面的结果可以得知 <code>undefined</code>在JavaScript中是一种数据类型，而<code>NaN</code>和<code>null</code>则是某种数据类型的值。</p>\n<p>但是在JS在定义基础数据类型有以下集中种：</p>\n<ul>\n<li><code>number</code> 数字类型，包括数字 和 NaN</li>\n<li><code>string</code> 字符串类型</li>\n<li><code>boolean</code> 布尔类型 包括: true 和 false</li>\n<li><code>undefined</code> undefined未定义类型</li>\n<li><code>null</code>  null空数据类型</li>\n<li><code>bigint</code> ES2020新定义 BigInt大整数类型，主要用来解决大于 2^53 - 1 的整数，如：<code>const theBiggestInt = 9007199254740991n; const alsoHuge = BigInt(9007199254740991);</code></li>\n<li><code>symbol</code> ES6定义 Symbol类型，应用场景：解决属性命名唯一性的问题，比如一个object里有两个属性名都一样，但是分别对不同的意思，可以通过Symbol类型去解决，如：<code>a = Symbol(&#39;test&#39;); b = Symbol(&#39;test&#39;);obj = {[a]: &#39;test&#39;, [b]: &#39;test&#39;}</code></li>\n</ul>\n<p>同时typeof运算符还可以返回以下两种类型：</p>\n<ul>\n<li><code>function</code> 函数类型，新的<code>class</code>也是返回<code>function</code></li>\n<li><code>object</code> 除了以上类型，其他对象统一返回<code>object</code></li>\n</ul>\n<p>因此 <code>null</code>被单独归类成一种基础数据类型，但是为什么<code>typeof null</code> 得到的却是 <code>object</code>？</p>\n<h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><p>先了解一下typeof是什么？</p>\n<blockquote>\n<p>typeof是一个操作符而不是函数，用来检测给定变量的数据类型。</p>\n</blockquote>\n<p>typeof是一个操作符，和 <code>+</code> <code>-</code> <code>=</code> 符号一样，只是用了<code>typeof</code>字母进行标识而已，类似还有：<code>delete</code> <code>void</code> <code>in</code> <code>instanceof</code>等。</p>\n<p>使用typeof需要注意以下几点：</p>\n<ul>\n<li>typeof 操作符的优先级高于加法（+）等二进制操作符。因此，需要用括号来计算加法结果的类型。 如：<code>typeof someData + &quot; Wisen&quot;; // &quot;number Wisen&quot;</code> <code>typeof (someData + &quot; Wisen&quot;); // &quot;string&quot;</code></li>\n<li>typeof 通常总是保证为它提供的任何操作数返回一个字符串。即使使用未声明的标识符，typeof 也会返回 “undefined”，而不是抛出错误。 但是在<code>let</code> <code>const</code>声明的变量，使用 typeof 会抛出一个 ReferenceError。因为<code>let</code> <code>const</code>声明的变量块作用域变量在块的头部处于“暂存死区”。</li>\n<li><code>typeof document.all === &#39;undefined&#39;; // true</code> 因为所有浏览器都公开了一个类型为 undefined 的非标准宿主对象 <code>document.all</code>，但是 <code>document.all</code> 不等于 <code>undefined</code>，这种情况出现是在 Web 标准中，document.all 具有 “undefined” 类型的情况被归类为“故意违反”原始 ECMAScript Web 兼容性标准。</li>\n<li>typeof 并不能检查出所有的类型，只能检查出上述所说的8种，针对其他类型可以通过原型链去判断获取，如： <code>Object.prototype.toString.call(x)</code> <code>x.constructor.name</code></li>\n</ul>\n<h3 id=\"typeof-工作原理\"><a href=\"#typeof-工作原理\" class=\"headerlink\" title=\"typeof 工作原理\"></a>typeof 工作原理</h3><p>那么typeof真正是如何工作的呢？</p>\n<ul>\n<li>首先，会将所运算的变量数据在底层转换成二进制，而在Javascript设计中，是利用二进制前（低）三位存储其类型信息，如：000: 对象，1：整数， 100：字符串等</li>\n<li>其次，null存储起来转成二进制为<code>0000000000000000</code>，那么按照JS的设计原则， 低三位为<code>000</code>则代表对象</li>\n<li>因此，null在typeof计算后，会直接返回<code>object</code></li>\n</ul>\n<p>PS： 注意细节， <code>undefined</code>：用 - （−2^30）表示。</p>\n<p>这里引用一下<a href=\"https://github.com/justjavac\" target=\"_blank\" rel=\"noopener\">迷渡 justjavac</a>老师的几个解释：</p>\n<p><a href=\"https://segmentfault.com/q/1010000011846328\" target=\"_blank\" rel=\"noopener\">JavaScript中typeof原理探究？</a><br><a href=\"https://www.zhihu.com/question/62732293/answer/201723301\" target=\"_blank\" rel=\"noopener\">v8引擎是如何知道js数据类型的？</a></p>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"===运算符\"></a>===运算符</h1><p>要讲三者的区别，还有一种方式就是通过 <code>===</code> 全等运算符，它们的表现如下：</p>\n<ul>\n<li><code>null === null // true</code> </li>\n<li><code>undefined === undefined // true</code></li>\n<li><code>NaN === NaN // false</code></li>\n</ul>\n<p>前两者比较好理解，毕竟都是等于自身，但是<code>NaN</code>不等于<code>NaN</code>就很容易给人带来误解。</p>\n<p>这里就需要先解释<code>===</code>和<code>==</code>的区别：</p>\n<ul>\n<li>==， 两边值类型不同的时候，要先进行类型转换，再比较两者的值。</li>\n<li>===，不做类型转换，类型不同的一定不等，然后对比两者的值。</li>\n</ul>\n<p>因此我们可以得到<code>===</code>的实现过程：</p>\n<ul>\n<li>先判断两者的数据类型是否一致</li>\n<li>再判断两者是否为基础数据类型，如果是数字类型还需要判断两者是否有为NaN，如果没有返回true，其他基础类型直接对比值</li>\n<li>如果是引用数据类型，如：object或function，则判断它们的引用对象是否为同一个，如：<code>a = function(){}; b= a; c=a; b===c;</code></li>\n</ul>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><blockquote>\n<p>NaN 即 Not a Number ，代表该值不是一个数字number类型</p>\n</blockquote>\n<p>那么如何判断<code>NaN</code>值呢？答案是通过<code>isNaN(x)</code>或者<code>Number.isNaN(x)</code>函数去判断，这里也有坑就是<code>Number.isNaN(x)</code> 不会强制转换<code>x</code>为<code>number</code>,只是会判断x是否为<code>NaN</code></p>\n<p>为什么JS要设计一直<code>NaN</code>值？ 个人猜测是因为JS是一门弱类型语言，它支持类型之间互相转换，其他基础数据类型都可以直接转换或者报类型错误，但是在<code>number</code>为了更好兼容加减乘除运算符，设计一个值为NaN(非数字)，当值无法转换<code>number</code>类型，将返回NaN。</p>\n<p><strong>同时，我们也需要了解<code>NaN</code>与<code>Infinity</code>的区别：</strong></p>\n<ul>\n<li>NaN，是Not a Number的缩写，不是一个数字的意思。</li>\n<li>Infinity，是指无穷大的数字，后面可以用BigInt数据类型代替。</li>\n</ul>\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><p>如果要了解到三者的本质，从三者的原型去区分：</p>\n<ul>\n<li><code>Object.prototype.toString.call(undefined) // [object Undefined]</code>，原型为自己本身或者没有原型，因为它是一个基础数据类型，且是全局对象(window)的一个属性，并不是一个实例化的对象</li>\n<li><code>Object.prototype.toString.call(null) // [object Null]</code>， 原型为自己本身，因为它是原型链上的最后一个</li>\n<li><code>Object.prototype.toString.call(null) // [object Number]</code>，原型为<code>Number</code>，因为它是属于<code>Number类型</code></li>\n</ul>\n<p>那么什么是原型呢？</p>\n<p>我们需要明白原型是怎么出现的，是为了解决什么问题？</p>\n<blockquote>\n<p>原型机制，是JS语言实现面向对象编程中继承特性是设计的一种机制，这种继承机制与经典的面向对象编程语言的继承机制不同。<br>传统的面向对象编程，实现对象继承，通过是定义一个父类，如果有个子类继承父类，那么在子类在实例化，会将父类的属性和方法都复制一份到子类的实例中<br>而原型机制是每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推，最终形成<code>原型链 (prototype chain)</code>。<br>这些属性和方法定义在 Object 的构造器函数 (constructor functions) 之上的prototype属性上，而非对象实例本身</p>\n</blockquote>\n<p>如何理解呢？下面通过一下几个点：</p>\n<ul>\n<li>new一个对象的全过程</li>\n<li>如何实现继承？以及继承中的原型链？</li>\n</ul>\n<p>但是在搞清楚这个之前，我们还需要了解JS原型中经常会混淆两个属性，<code>prototype</code>和<code>__proto__</code>，所以我们先弄明白这两个属性分别是做什么的。</p>\n<h2 id=\"prototype和proto\"><a href=\"#prototype和proto\" class=\"headerlink\" title=\"prototype和proto\"></a>prototype和<strong>proto</strong></h2><blockquote>\n<p>在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。<br>那么只要是对象就会有属性<code>__proto__</code>，称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型对象<code>prototype</code>。</p>\n</blockquote>\n<p>为了更好的理解，我们通过一段代码和对应原型关系图去对比了解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">a = <span class=\"keyword\">new</span> A();</span><br></pre></td></tr></table></figure>\n\n<p>上述代码<code>prototype</code>和<code>__proto__</code>的关系如下图：</p>\n<p><img src=\"/assets/img/20230130-1.png\" alt></p>\n<p>通过上图我们可以很清晰的知道两者的区别：</p>\n<ul>\n<li><code>prototype</code>是一个对象，只有函数才有，实例化后的变量是没有的，且<code>prototype</code>原型允许扩展函数的方法或者属性，从而让实例化后的对象进行使用，再者就是<code>prototype</code>既然是对象那么它自己也会有<code>__proto__</code>属性</li>\n<li><code>__proto__</code>是实例化对象后拥有的属性，它的值主要指向该对象构造函数的原型<code>prototype</code>，从而形成<code>原型链</code></li>\n<li>当一个实例化对象在调用某方法或某属性时，会先判断<code>__proto__</code>的<code>prototype</code>对象上是否有，如果没有则会往下一层<code>__proto__</code>去寻找</li>\n</ul>\n<h2 id=\"new的实现过程\"><a href=\"#new的实现过程\" class=\"headerlink\" title=\"new的实现过程\"></a>new的实现过程</h2><p>demo代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"keyword\">new</span> A();</span><br></pre></td></tr></table></figure>\n\n<p>那么在这一个过程中，js在底层中，做了哪些事情呢？ 通过上图我们可以很清楚的知道：</p>\n<ul>\n<li>创建全新的函数A实例化一个对象</li>\n<li>然后将对象的<strong>proto</strong>指向构造函数的prototype</li>\n<li>将对象的this指向到调用方的this</li>\n<li>如果函数无返回对象类型Object，则返回该函数对象</li>\n</ul>\n<h2 id=\"继承与原型链\"><a href=\"#继承与原型链\" class=\"headerlink\" title=\"继承与原型链\"></a>继承与原型链</h2><p>继承其实在ES6后来说已经很简单了，因为定义了<code>class</code>和<code>extends</code>等语法糖，所以不需要再像之前通过原型去解决，但是为了更好的了解原型链，我们接下来尝试一下几种ES5时代实现继承的方式。</p>\n<h3 id=\"原型指向实现\"><a href=\"#原型指向实现\" class=\"headerlink\" title=\"原型指向实现\"></a>原型指向实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要将A的属性继承</span></span><br><span class=\"line\">    A.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B.prototype.__proto__ = A.prototype;</span><br><span class=\"line\"><span class=\"comment\">// 思考一下，为什么要将隐性原型指向A？</span></span><br><span class=\"line\">B.__proto__ = A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\"></span><br><span class=\"line\">b.a; <span class=\"comment\">// test</span></span><br><span class=\"line\">b.say(); <span class=\"comment\">// test</span></span><br><span class=\"line\"></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> B; <span class=\"comment\">// true</span></span><br><span class=\"line\">b <span class=\"keyword\">instanceof</span> A; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意几个点：</p>\n<ol>\n<li>在B构造函数里实现<code>A.call(this)</code>，是因为需要将A函数实现一遍，且A中this指向的属性绑定B函数中</li>\n<li><code>B.prototype.__proto__ = A.prototype</code>这行是继承A的方法，后续如果要重写相同方法需要放在这行代码后面</li>\n<li><code>B.__proto__ = A</code> 如果没有这行代码，貌似上面的结果并不会有太多异常，那么为什么要这行代码呢？(等待后续解释)</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这里再总结一下，在数据类型上，三者的区别主要是：</p>\n<ul>\n<li><code>undefined</code> 是一种基础数据类型，可以通过<code>typeof</code>直接识别</li>\n<li><code>null</code> 虽然也是一种基础数据类型，但是由于<code>typeof</code>从一开始实现机制问题，<code>typeof null</code>一直遗留下来返回的<code>object</code></li>\n<li><code>NaN</code> 是<code>number</code>数据类型的一个值，代表无法识别为数字类型的值，如：<code>Number(&#39;abc&#39;) // NaN</code></li>\n</ul>\n<p>在 <code>===</code> 运算符号上，区别主要是：</p>\n<ul>\n<li><code>undefined</code>，可以等于任何值为<code>undefined</code>的变量</li>\n<li><code>null</code>，可以等于任何值为<code>null</code>的变量</li>\n<li><code>NaN</code>，不等于任何值的变量，只能通过<code>isNaN</code>函数判断</li>\n</ul>\n<p>从原型上去了解三者，他们本质就完全不同：</p>\n<ul>\n<li><code>undefined</code>，原型为自己本身或者没有原型</li>\n<li><code>null</code>，原型为自己</li>\n<li><code>NaN</code>，原型为Number</li>\n</ul>\n<p>同时我们也清楚的认识到JS中原型和原型链，原型是JS设计实现面向对象的一种机制，主要通过两个东西实现原型对象<code>prototype</code>和隐性原型<code>__proto__</code>实现，这两者主要关系在于：</p>\n<ul>\n<li>隐性原型<code>__proto__</code>是一个实例化对象后的属性，会指向声明该对象的构造函数的原型对象<code>prototype</code></li>\n<li>原型对象<code>prototype</code>是一个对象，一般只有函数才会有，它通常包括<code>constructor</code>构造函数指向函数本身，以及其他扩展方法和属性，同时它本身也拥有<code>__proto__</code>隐性原型属性</li>\n</ul>\n<p>当然JS的原型和原型链并没有那么简单，不仅仅只是实现继承这么简单，后续我们还需要关注原型链安全问题，后续请看<a href=\"/2023/01/06/today/20220203/\">《JS原型链污染是怎么回事》</a>。</p>"},{"title":"hexo网站提高SEO优化方法","date":"2023-01-31T10:00:01.000Z","toc":true,"_content":"\n# 主要步骤\n\n- 添加站点地图 `sitemap.xml`文件和搜索机器人文件`robots.txt`\n- 提交站点到搜索引擎(百度和谷歌)\n- hexo针对搜索的优化\n\n## 添加站点地图\n\n### 添加站点地图 `sitemap.xml`\n\n1. 添加hexo插件\n```shell\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n2. 修改`_config.yml`配置\n\n```yaml\nsitemap: \n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n### 搜索机器人文件`robots.txt`\n在source目录下新建`robots.txt`文件，文件内容如下：\n\n```\nUser-agent: *\nAllow: /\nAllow: /archives/\nAllow: /categories/\nAllow: /tags/ \nAllow: /resources/ \nDisallow: /vendors/\nDisallow: /js/\nDisallow: /css/\nDisallow: /fonts/\nDisallow: /vendors/\nDisallow: /fancybox/\n\nSitemap: https://hoxis.github.io/sitemap.xml\nSitemap: https://hoxis.github.io/baidusitemap.xml\n```\n\n<!-- more -->\n\n## 提交站点\n\n- [谷歌Search Console](https://search.google.com/search-console?utm_source=about-page&resource_id=https://qborfy.com/)  直接按照引导添加即可`sitemap.xml`文件\n- [百度站长平台](https://ziyuan.baidu.com/linksubmit/url)  按照其引导提交站点即可，主要是`sitemap.xml`文件\n\n## hexo优化建议\n\n- 出站链接添加`nofollow`标签\n- 添加关键字，主要在文章首部地方添加`keywords`和`description`\n- 修改博文链接，将hexo默认`domain/year/month/day/postname`改为`title`\n\n# 参考资料\n\n[Hexo博客Next主题SEO优化方法](https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html)","source":"_posts/today/20230131.md","raw":"---\ntitle: hexo网站提高SEO优化方法\ndate: 2023-01-31 18:00:01\ntoc: true\ntags:\n    - 每日更新\n---\n\n# 主要步骤\n\n- 添加站点地图 `sitemap.xml`文件和搜索机器人文件`robots.txt`\n- 提交站点到搜索引擎(百度和谷歌)\n- hexo针对搜索的优化\n\n## 添加站点地图\n\n### 添加站点地图 `sitemap.xml`\n\n1. 添加hexo插件\n```shell\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n2. 修改`_config.yml`配置\n\n```yaml\nsitemap: \n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n### 搜索机器人文件`robots.txt`\n在source目录下新建`robots.txt`文件，文件内容如下：\n\n```\nUser-agent: *\nAllow: /\nAllow: /archives/\nAllow: /categories/\nAllow: /tags/ \nAllow: /resources/ \nDisallow: /vendors/\nDisallow: /js/\nDisallow: /css/\nDisallow: /fonts/\nDisallow: /vendors/\nDisallow: /fancybox/\n\nSitemap: https://hoxis.github.io/sitemap.xml\nSitemap: https://hoxis.github.io/baidusitemap.xml\n```\n\n<!-- more -->\n\n## 提交站点\n\n- [谷歌Search Console](https://search.google.com/search-console?utm_source=about-page&resource_id=https://qborfy.com/)  直接按照引导添加即可`sitemap.xml`文件\n- [百度站长平台](https://ziyuan.baidu.com/linksubmit/url)  按照其引导提交站点即可，主要是`sitemap.xml`文件\n\n## hexo优化建议\n\n- 出站链接添加`nofollow`标签\n- 添加关键字，主要在文章首部地方添加`keywords`和`description`\n- 修改博文链接，将hexo默认`domain/year/month/day/postname`改为`title`\n\n# 参考资料\n\n[Hexo博客Next主题SEO优化方法](https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html)","slug":"today/20230131","published":1,"updated":"2023-02-02T06:58:03.831Z","_id":"cldztfuy5001knxpcqjm7f5pz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h1><ul>\n<li>添加站点地图 <code>sitemap.xml</code>文件和搜索机器人文件<code>robots.txt</code></li>\n<li>提交站点到搜索引擎(百度和谷歌)</li>\n<li>hexo针对搜索的优化</li>\n</ul>\n<h2 id=\"添加站点地图\"><a href=\"#添加站点地图\" class=\"headerlink\" title=\"添加站点地图\"></a>添加站点地图</h2><h3 id=\"添加站点地图-sitemap-xml\"><a href=\"#添加站点地图-sitemap-xml\" class=\"headerlink\" title=\"添加站点地图 sitemap.xml\"></a>添加站点地图 <code>sitemap.xml</code></h3><ol>\n<li><p>添加hexo插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>_config.yml</code>配置</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sitemap:</span> </span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索机器人文件robots-txt\"><a href=\"#搜索机器人文件robots-txt\" class=\"headerlink\" title=\"搜索机器人文件robots.txt\"></a>搜索机器人文件<code>robots.txt</code></h3><p>在source目录下新建<code>robots.txt</code>文件，文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-agent: *</span><br><span class=\"line\">Allow: /</span><br><span class=\"line\">Allow: /archives/</span><br><span class=\"line\">Allow: /categories/</span><br><span class=\"line\">Allow: /tags/ </span><br><span class=\"line\">Allow: /resources/ </span><br><span class=\"line\">Disallow: /vendors/</span><br><span class=\"line\">Disallow: /js/</span><br><span class=\"line\">Disallow: /css/</span><br><span class=\"line\">Disallow: /fonts/</span><br><span class=\"line\">Disallow: /vendors/</span><br><span class=\"line\">Disallow: /fancybox/</span><br><span class=\"line\"></span><br><span class=\"line\">Sitemap: https://hoxis.github.io/sitemap.xml</span><br><span class=\"line\">Sitemap: https://hoxis.github.io/baidusitemap.xml</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"提交站点\"><a href=\"#提交站点\" class=\"headerlink\" title=\"提交站点\"></a>提交站点</h2><ul>\n<li><a href=\"https://search.google.com/search-console?utm_source=about-page&resource_id=https://qborfy.com/\" target=\"_blank\" rel=\"noopener\">谷歌Search Console</a>  直接按照引导添加即可<code>sitemap.xml</code>文件</li>\n<li><a href=\"https://ziyuan.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">百度站长平台</a>  按照其引导提交站点即可，主要是<code>sitemap.xml</code>文件</li>\n</ul>\n<h2 id=\"hexo优化建议\"><a href=\"#hexo优化建议\" class=\"headerlink\" title=\"hexo优化建议\"></a>hexo优化建议</h2><ul>\n<li>出站链接添加<code>nofollow</code>标签</li>\n<li>添加关键字，主要在文章首部地方添加<code>keywords</code>和<code>description</code></li>\n<li>修改博文链接，将hexo默认<code>domain/year/month/day/postname</code>改为<code>title</code></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html\" target=\"_blank\" rel=\"noopener\">Hexo博客Next主题SEO优化方法</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h1><ul>\n<li>添加站点地图 <code>sitemap.xml</code>文件和搜索机器人文件<code>robots.txt</code></li>\n<li>提交站点到搜索引擎(百度和谷歌)</li>\n<li>hexo针对搜索的优化</li>\n</ul>\n<h2 id=\"添加站点地图\"><a href=\"#添加站点地图\" class=\"headerlink\" title=\"添加站点地图\"></a>添加站点地图</h2><h3 id=\"添加站点地图-sitemap-xml\"><a href=\"#添加站点地图-sitemap-xml\" class=\"headerlink\" title=\"添加站点地图 sitemap.xml\"></a>添加站点地图 <code>sitemap.xml</code></h3><ol>\n<li><p>添加hexo插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>_config.yml</code>配置</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sitemap:</span> </span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">sitemap.xml</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索机器人文件robots-txt\"><a href=\"#搜索机器人文件robots-txt\" class=\"headerlink\" title=\"搜索机器人文件robots.txt\"></a>搜索机器人文件<code>robots.txt</code></h3><p>在source目录下新建<code>robots.txt</code>文件，文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-agent: *</span><br><span class=\"line\">Allow: /</span><br><span class=\"line\">Allow: /archives/</span><br><span class=\"line\">Allow: /categories/</span><br><span class=\"line\">Allow: /tags/ </span><br><span class=\"line\">Allow: /resources/ </span><br><span class=\"line\">Disallow: /vendors/</span><br><span class=\"line\">Disallow: /js/</span><br><span class=\"line\">Disallow: /css/</span><br><span class=\"line\">Disallow: /fonts/</span><br><span class=\"line\">Disallow: /vendors/</span><br><span class=\"line\">Disallow: /fancybox/</span><br><span class=\"line\"></span><br><span class=\"line\">Sitemap: https://hoxis.github.io/sitemap.xml</span><br><span class=\"line\">Sitemap: https://hoxis.github.io/baidusitemap.xml</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"提交站点\"><a href=\"#提交站点\" class=\"headerlink\" title=\"提交站点\"></a>提交站点</h2><ul>\n<li><a href=\"https://search.google.com/search-console?utm_source=about-page&resource_id=https://qborfy.com/\" target=\"_blank\" rel=\"noopener\">谷歌Search Console</a>  直接按照引导添加即可<code>sitemap.xml</code>文件</li>\n<li><a href=\"https://ziyuan.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">百度站长平台</a>  按照其引导提交站点即可，主要是<code>sitemap.xml</code>文件</li>\n</ul>\n<h2 id=\"hexo优化建议\"><a href=\"#hexo优化建议\" class=\"headerlink\" title=\"hexo优化建议\"></a>hexo优化建议</h2><ul>\n<li>出站链接添加<code>nofollow</code>标签</li>\n<li>添加关键字，主要在文章首部地方添加<code>keywords</code>和<code>description</code></li>\n<li>修改博文链接，将hexo默认<code>domain/year/month/day/postname</code>改为<code>title</code></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html\" target=\"_blank\" rel=\"noopener\">Hexo博客Next主题SEO优化方法</a></p>"},{"title":"css变量了解到项目落地","date":"2023-02-08T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n最近在打开一些网站的，查看其CSS样式的时候，发现如下图：\n\n![](/assets/img/20230208-1.png)\n\n所以就很好奇，原来现在CSS样式变量已经可以正式投入生产使用了，所以希望能够做个简单了解。\n\n浏览器的兼容性：\n![](/assets/img/20230208-2.png)\n\n\n<!-- more -->\n\n# CSS变量var()\n\n## 是什么\n\n> 自定义属性（有时候也被称作CSS 变量或者级联变量）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： --main-color: black;），由 var() 函数来获取值（比如： color: var(--main-color);）\n\n通俗的说，就是CSS以后不需要用`less`或`css`也能正常使用变量去定义一些常用值。\n\n## 怎么用\n\n1. 声明以及对应作用域\n```css\n/* 可以HTML 文档的任何地方访问到它 */\n:root {\n  --main-bg-color: brown;\n}\n:where(html){\n  \n}\n/* 只能在element元素下面所对应使用 */\nelement {\n  --main-bg-color: brown;\n}\n```\n\n2. 引用变量\n\n```css\nelement {\n  background-color: var(--main-bg-color);\n}\n\n```\n\n3. 自带继承\n\n```html\n\n<style>\n.one{\n    /** 无法使用 var(--test) */\n}\n.two {\n  --test: 10px;\n}\n\n.three {\n    /** 重写 var(--test) = 2em */\n  --test: 2em;\n}    \n.four {\n    /** 继承.two的变量 var(--test) = 10px */\n}\n</style>\n\n<div class=\"one\">\n  <div class=\"two\">\n    <div class=\"three\"></div>\n    <div class=\"four\"></div>\n  </div>\n</div>\n```\n\n4. 自定义属性备用值\n\n`var(--my-var, xxx)`，当一个变量未定义或非法值的时候，可以`red`用来做正常显示值，备用值并不是用于实现浏览器兼容性的。\n\n```css\n.two {\n  color: var(--my-var, red); /* 入股my-var 没有定义，则用red显示 */\n}\n```\n\n5. JS获取变量值\n\n```js\n/设置变量\ndocument.querySelector('p').style.setProperty('--weight','bold');\n//读取变量\ndocument.querySelector('p').style.getPropertyValue('--weight');\n//删除变量\ndocument.querySelector('p').style.removeProperty('--weight');\n\n```\n\n# CSS变量实战\n\n在前端项目中如何使用CSS变量，一般是通过构建工具生成的兼容性代码。\n\n## 浏览器是否支持\n\n```js\nconst isSupported = window.CSS && window.CSS.supports && window.CSS.supports('--a',0);\nif(isSupported) {\n    /* 这里面是支持css变量的操作 */\n}else {\n    /* 这里面是不支持css变量的操作 */\n}\n```\n也可以通过CSS中`@supports`做判断：\n```css\n@supports ( (--a: 0)) {\n  /* supported */\n}\n@supports ( not (--a: 0)) {\n  /* not supported */\n}\n```\n\n## 应用场景\n\n- 最常用的是网站换主题，在开发过程直接按照CSS变量去编写，而不需要去了解SASS或LESS的语法\n- 原本一些动画效果，需要多个css样式区分，现在可以通过css变量实现，从而减少代码\n- 结合JS操作事件+更改CSS变量，实现更多CSS效果\n\n## 变量库\n\n[open-props CSS常用变量收集库](https://open-props.style/)\n\n```css\n@import \"https://unpkg.com/open-props\";\n\n.card {\n  border-radius: var(--radius-2);\n  padding: var(--size-fluid-3);\n  box-shadow: var(--shadow-2);\n\n  &:hover {\n    box-shadow: var(--shadow-3);\n  }\n\n  @media (--motionOK) {\n    animation: var(--animation-fade-in);\n  }\n}\n```\n\n# 参考资料\n\n[CSS自定义变量 MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties)","source":"_posts/today/20230208.md","raw":"---\ntitle: css变量了解到项目落地\ndate: 2023-02-08 18:00:01\ntoc: true\ntags:\n    - 每日更新\n---\n\n# 背景\n\n最近在打开一些网站的，查看其CSS样式的时候，发现如下图：\n\n![](/assets/img/20230208-1.png)\n\n所以就很好奇，原来现在CSS样式变量已经可以正式投入生产使用了，所以希望能够做个简单了解。\n\n浏览器的兼容性：\n![](/assets/img/20230208-2.png)\n\n\n<!-- more -->\n\n# CSS变量var()\n\n## 是什么\n\n> 自定义属性（有时候也被称作CSS 变量或者级联变量）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： --main-color: black;），由 var() 函数来获取值（比如： color: var(--main-color);）\n\n通俗的说，就是CSS以后不需要用`less`或`css`也能正常使用变量去定义一些常用值。\n\n## 怎么用\n\n1. 声明以及对应作用域\n```css\n/* 可以HTML 文档的任何地方访问到它 */\n:root {\n  --main-bg-color: brown;\n}\n:where(html){\n  \n}\n/* 只能在element元素下面所对应使用 */\nelement {\n  --main-bg-color: brown;\n}\n```\n\n2. 引用变量\n\n```css\nelement {\n  background-color: var(--main-bg-color);\n}\n\n```\n\n3. 自带继承\n\n```html\n\n<style>\n.one{\n    /** 无法使用 var(--test) */\n}\n.two {\n  --test: 10px;\n}\n\n.three {\n    /** 重写 var(--test) = 2em */\n  --test: 2em;\n}    \n.four {\n    /** 继承.two的变量 var(--test) = 10px */\n}\n</style>\n\n<div class=\"one\">\n  <div class=\"two\">\n    <div class=\"three\"></div>\n    <div class=\"four\"></div>\n  </div>\n</div>\n```\n\n4. 自定义属性备用值\n\n`var(--my-var, xxx)`，当一个变量未定义或非法值的时候，可以`red`用来做正常显示值，备用值并不是用于实现浏览器兼容性的。\n\n```css\n.two {\n  color: var(--my-var, red); /* 入股my-var 没有定义，则用red显示 */\n}\n```\n\n5. JS获取变量值\n\n```js\n/设置变量\ndocument.querySelector('p').style.setProperty('--weight','bold');\n//读取变量\ndocument.querySelector('p').style.getPropertyValue('--weight');\n//删除变量\ndocument.querySelector('p').style.removeProperty('--weight');\n\n```\n\n# CSS变量实战\n\n在前端项目中如何使用CSS变量，一般是通过构建工具生成的兼容性代码。\n\n## 浏览器是否支持\n\n```js\nconst isSupported = window.CSS && window.CSS.supports && window.CSS.supports('--a',0);\nif(isSupported) {\n    /* 这里面是支持css变量的操作 */\n}else {\n    /* 这里面是不支持css变量的操作 */\n}\n```\n也可以通过CSS中`@supports`做判断：\n```css\n@supports ( (--a: 0)) {\n  /* supported */\n}\n@supports ( not (--a: 0)) {\n  /* not supported */\n}\n```\n\n## 应用场景\n\n- 最常用的是网站换主题，在开发过程直接按照CSS变量去编写，而不需要去了解SASS或LESS的语法\n- 原本一些动画效果，需要多个css样式区分，现在可以通过css变量实现，从而减少代码\n- 结合JS操作事件+更改CSS变量，实现更多CSS效果\n\n## 变量库\n\n[open-props CSS常用变量收集库](https://open-props.style/)\n\n```css\n@import \"https://unpkg.com/open-props\";\n\n.card {\n  border-radius: var(--radius-2);\n  padding: var(--size-fluid-3);\n  box-shadow: var(--shadow-2);\n\n  &:hover {\n    box-shadow: var(--shadow-3);\n  }\n\n  @media (--motionOK) {\n    animation: var(--animation-fade-in);\n  }\n}\n```\n\n# 参考资料\n\n[CSS自定义变量 MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties)","slug":"today/20230208","published":1,"updated":"2023-02-09T08:21:57.520Z","_id":"cldztgd3m0024nxpcbyjw3i4b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在打开一些网站的，查看其CSS样式的时候，发现如下图：</p>\n<p><img src=\"/assets/img/20230208-1.png\" alt></p>\n<p>所以就很好奇，原来现在CSS样式变量已经可以正式投入生产使用了，所以希望能够做个简单了解。</p>\n<p>浏览器的兼容性：<br><img src=\"/assets/img/20230208-2.png\" alt></p>\n<a id=\"more\"></a>\n\n<h1 id=\"CSS变量var\"><a href=\"#CSS变量var\" class=\"headerlink\" title=\"CSS变量var()\"></a>CSS变量var()</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>自定义属性（有时候也被称作CSS 变量或者级联变量）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： –main-color: black;），由 var() 函数来获取值（比如： color: var(–main-color);）</p>\n</blockquote>\n<p>通俗的说，就是CSS以后不需要用<code>less</code>或<code>css</code>也能正常使用变量去定义一些常用值。</p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><ol>\n<li><p>声明以及对应作用域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 可以HTML 文档的任何地方访问到它 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:where(html)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 只能在element元素下面所对应使用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引用变量</p>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--main-bg-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>自带继承</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.one</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/** 无法使用 var(--test) */</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.two</span> &#123;</span></span><br><span class=\"line\">  --test: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.three</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/** 重写 var(--test) = 2em */</span></span></span><br><span class=\"line\">  --test: 2em;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.four</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/** 继承.two的变量 var(--test) = 10px */</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"one\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"four\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>自定义属性备用值</li>\n</ol>\n<p><code>var(--my-var, xxx)</code>，当一个变量未定义或非法值的时候，可以<code>red</code>用来做正常显示值，备用值并不是用于实现浏览器兼容性的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.two</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--my-var, red); <span class=\"comment\">/* 入股my-var 没有定义，则用red显示 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>JS获取变量值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/设置变量</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).style.setProperty(<span class=\"string\">'--weight'</span>,<span class=\"string\">'bold'</span>);</span><br><span class=\"line\"><span class=\"comment\">//读取变量</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).style.getPropertyValue(<span class=\"string\">'--weight'</span>);</span><br><span class=\"line\"><span class=\"comment\">//删除变量</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).style.removeProperty(<span class=\"string\">'--weight'</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CSS变量实战\"><a href=\"#CSS变量实战\" class=\"headerlink\" title=\"CSS变量实战\"></a>CSS变量实战</h1><p>在前端项目中如何使用CSS变量，一般是通过构建工具生成的兼容性代码。</p>\n<h2 id=\"浏览器是否支持\"><a href=\"#浏览器是否支持\" class=\"headerlink\" title=\"浏览器是否支持\"></a>浏览器是否支持</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSupported = <span class=\"built_in\">window</span>.CSS &amp;&amp; <span class=\"built_in\">window</span>.CSS.supports &amp;&amp; <span class=\"built_in\">window</span>.CSS.supports(<span class=\"string\">'--a'</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(isSupported) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 这里面是支持css变量的操作 */</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 这里面是不支持css变量的操作 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过CSS中<code>@supports</code>做判断：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">supports</span> ( (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* supported */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">supports</span> ( not (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* not supported */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>最常用的是网站换主题，在开发过程直接按照CSS变量去编写，而不需要去了解SASS或LESS的语法</li>\n<li>原本一些动画效果，需要多个css样式区分，现在可以通过css变量实现，从而减少代码</li>\n<li>结合JS操作事件+更改CSS变量，实现更多CSS效果</li>\n</ul>\n<h2 id=\"变量库\"><a href=\"#变量库\" class=\"headerlink\" title=\"变量库\"></a>变量库</h2><p><a href=\"https://open-props.style/\" target=\"_blank\" rel=\"noopener\">open-props CSS常用变量收集库</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"https://unpkg.com/open-props\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"built_in\">var</span>(--radius-2);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--size-fluid-3);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"built_in\">var</span>(--shadow-2);</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">box-shadow</span>: <span class=\"selector-tag\">var</span>(<span class=\"selector-tag\">--shadow-3</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"keyword\">media</span> (--motionOK) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">var</span>(<span class=\"selector-tag\">--animation-fade-in</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties\" target=\"_blank\" rel=\"noopener\">CSS自定义变量 MDN</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在打开一些网站的，查看其CSS样式的时候，发现如下图：</p>\n<p><img src=\"/assets/img/20230208-1.png\" alt></p>\n<p>所以就很好奇，原来现在CSS样式变量已经可以正式投入生产使用了，所以希望能够做个简单了解。</p>\n<p>浏览器的兼容性：<br><img src=\"/assets/img/20230208-2.png\" alt></p>","more":"<h1 id=\"CSS变量var\"><a href=\"#CSS变量var\" class=\"headerlink\" title=\"CSS变量var()\"></a>CSS变量var()</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><blockquote>\n<p>自定义属性（有时候也被称作CSS 变量或者级联变量）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： –main-color: black;），由 var() 函数来获取值（比如： color: var(–main-color);）</p>\n</blockquote>\n<p>通俗的说，就是CSS以后不需要用<code>less</code>或<code>css</code>也能正常使用变量去定义一些常用值。</p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><ol>\n<li><p>声明以及对应作用域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 可以HTML 文档的任何地方访问到它 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-pseudo\">:where(html)</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 只能在element元素下面所对应使用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引用变量</p>\n</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--main-bg-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>自带继承</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.one</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/** 无法使用 var(--test) */</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.two</span> &#123;</span></span><br><span class=\"line\">  --test: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.three</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/** 重写 var(--test) = 2em */</span></span></span><br><span class=\"line\">  --test: 2em;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.four</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/** 继承.two的变量 var(--test) = 10px */</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"one\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"two\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"four\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>自定义属性备用值</li>\n</ol>\n<p><code>var(--my-var, xxx)</code>，当一个变量未定义或非法值的时候，可以<code>red</code>用来做正常显示值，备用值并不是用于实现浏览器兼容性的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.two</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--my-var, red); <span class=\"comment\">/* 入股my-var 没有定义，则用red显示 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>JS获取变量值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/设置变量</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).style.setProperty(<span class=\"string\">'--weight'</span>,<span class=\"string\">'bold'</span>);</span><br><span class=\"line\"><span class=\"comment\">//读取变量</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).style.getPropertyValue(<span class=\"string\">'--weight'</span>);</span><br><span class=\"line\"><span class=\"comment\">//删除变量</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).style.removeProperty(<span class=\"string\">'--weight'</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CSS变量实战\"><a href=\"#CSS变量实战\" class=\"headerlink\" title=\"CSS变量实战\"></a>CSS变量实战</h1><p>在前端项目中如何使用CSS变量，一般是通过构建工具生成的兼容性代码。</p>\n<h2 id=\"浏览器是否支持\"><a href=\"#浏览器是否支持\" class=\"headerlink\" title=\"浏览器是否支持\"></a>浏览器是否支持</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSupported = <span class=\"built_in\">window</span>.CSS &amp;&amp; <span class=\"built_in\">window</span>.CSS.supports &amp;&amp; <span class=\"built_in\">window</span>.CSS.supports(<span class=\"string\">'--a'</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(isSupported) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 这里面是支持css变量的操作 */</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 这里面是不支持css变量的操作 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过CSS中<code>@supports</code>做判断：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">supports</span> ( (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* supported */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">supports</span> ( not (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* not supported */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>最常用的是网站换主题，在开发过程直接按照CSS变量去编写，而不需要去了解SASS或LESS的语法</li>\n<li>原本一些动画效果，需要多个css样式区分，现在可以通过css变量实现，从而减少代码</li>\n<li>结合JS操作事件+更改CSS变量，实现更多CSS效果</li>\n</ul>\n<h2 id=\"变量库\"><a href=\"#变量库\" class=\"headerlink\" title=\"变量库\"></a>变量库</h2><p><a href=\"https://open-props.style/\" target=\"_blank\" rel=\"noopener\">open-props CSS常用变量收集库</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"https://unpkg.com/open-props\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"built_in\">var</span>(--radius-2);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--size-fluid-3);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"built_in\">var</span>(--shadow-2);</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">box-shadow</span>: <span class=\"selector-tag\">var</span>(<span class=\"selector-tag\">--shadow-3</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"keyword\">media</span> (--motionOK) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">var</span>(<span class=\"selector-tag\">--animation-fade-in</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties\" target=\"_blank\" rel=\"noopener\">CSS自定义变量 MDN</a></p>"},{"title":"Linux如何快速删除大量文件","date":"2023-02-13T10:00:01.000Z","toc":true,"_content":"\n# 背景\n最近服务器经常遇到磁盘占用空间满的告警，因此跟进定位问题后，发现原来是airflow的有好几个任务每分钟都在产生日志文件，导致磁盘空间占用率暴涨，因此想了几个策略：\n\n- airflow降低日志文件输出大小，将原来`info`级别日志跳高到`warning`\n- 定时清理日志文件\n\n# 问题\n\n问题就出现在清理日志文件，打算先清除一遍，主要清除一个月以前的日志文件，命令为`find /data/airflow/ -name '*.log' -and -mtime +30 -type f |xargs rm`。\n\n但是等了半天发现日志文件一直无法清除掉，不知道为什么？\n\n<!-- more -->\n\n后面直接上机器删除文件，采用`rm -rf ./*.log`，发现报错如下：\n\n```shell\n/bin/rm: argument list too long\n```\n\n> 原因：  删除文件中包含的小文件数量过多，通常是由于受到 shell 参数个数限制所致\n\n虽然网上有其他方案可以快速解决，比如：`find`减少文件数量。\n\n这下子就搞的很郁闷了，后面上网找了方案，发现可以通过`rsync`去快速删除大量文件，因此想记录总结一下。\n\n# 原理\n\n## Linux文件存储原理\n\n我们需要对Linux文件存储原理做一个基本的了解，Linux文件存储数据是放在一张`inode 表`，里面每一个文件的节点，每个节点包括以下内容：\n\n- 文件类型\n- 权限\n- UID，GID\n- `i_nlink` 链接数（指向这个文件名路径名称个数）\n- `i_count` 使用数（指使用这个文件的进程数）\n- 该文件的大小和不同的时间戳\n- 指向磁盘上文件的数据块指针\n- 有关文件的其他数据\n\nLinux文件真正删除的过程：\n\n- `i_nlink=0` 没有人进行链接使用，包括任何硬链接\n- `i_count=0` 没有任何进程使用\n\n\n## rm原理\n\nrm的原理：减少磁盘引用计数`i_nlink`，就是减少其他文件对这个文件链接，实际并没有删除文件内容。\n\n因此，如果日志文件正在其他进程使用，`rm`并不是真正删除，`i_count`并不会减少，因此也不会释放磁盘空间。\n\n如果想要真正删除一个文件，还需要同时将`i_count`降至0。\n\n了解完rm的原理，也就真正明白为什么`find /opt/airflow/logs -name '*.*' -and -mtime +30 -type f | xargs rm -rvf`命令会这么慢，因为它要去找日志文件的所有link链接，然后一一删除掉。\n\n\n## 解决方案\n\n最终在网上找了最佳解决方案，就是使用`rsync`。\n\n`rsync`本身的就是将两个文件夹作同步使用，如何使用`rsync`删除文件，步骤是这样子:\n\n- 如果将一个空文件夹，同步到要删除的文件夹里，是不是等于将文件夹清空了呢？\n\n很取巧的方式，但是也很有效果，具体命令如下：\n\n```shell\n#制造一个空文件夹\nmkdir -p /opt/airflow/empty;\n\n#执行rsync同步空文件夹\nrsync --delete-before -aO  /opt/airflow/empty/ /opt/airflow/logs/;\n```\n\n命令详解：\n\n- `--delete-before` 接收者在传输之前进行删除操作\n- `-a` 归档模式，表示以递归方式传输文件，并保持所有文件属性\n\n# 参考资料\n\n- [Linux 下删除大量文件效率对比，看谁删的快！](https://cloud.tencent.com/developer/article/1647290)\n- [Linux下文件删除的原理](https://www.cnblogs.com/cherishry/p/5886069.html)\n\n\n","source":"_posts/today/20230213.md","raw":"---\ntitle: Linux如何快速删除大量文件\ndate: 2023-02-13 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n最近服务器经常遇到磁盘占用空间满的告警，因此跟进定位问题后，发现原来是airflow的有好几个任务每分钟都在产生日志文件，导致磁盘空间占用率暴涨，因此想了几个策略：\n\n- airflow降低日志文件输出大小，将原来`info`级别日志跳高到`warning`\n- 定时清理日志文件\n\n# 问题\n\n问题就出现在清理日志文件，打算先清除一遍，主要清除一个月以前的日志文件，命令为`find /data/airflow/ -name '*.log' -and -mtime +30 -type f |xargs rm`。\n\n但是等了半天发现日志文件一直无法清除掉，不知道为什么？\n\n<!-- more -->\n\n后面直接上机器删除文件，采用`rm -rf ./*.log`，发现报错如下：\n\n```shell\n/bin/rm: argument list too long\n```\n\n> 原因：  删除文件中包含的小文件数量过多，通常是由于受到 shell 参数个数限制所致\n\n虽然网上有其他方案可以快速解决，比如：`find`减少文件数量。\n\n这下子就搞的很郁闷了，后面上网找了方案，发现可以通过`rsync`去快速删除大量文件，因此想记录总结一下。\n\n# 原理\n\n## Linux文件存储原理\n\n我们需要对Linux文件存储原理做一个基本的了解，Linux文件存储数据是放在一张`inode 表`，里面每一个文件的节点，每个节点包括以下内容：\n\n- 文件类型\n- 权限\n- UID，GID\n- `i_nlink` 链接数（指向这个文件名路径名称个数）\n- `i_count` 使用数（指使用这个文件的进程数）\n- 该文件的大小和不同的时间戳\n- 指向磁盘上文件的数据块指针\n- 有关文件的其他数据\n\nLinux文件真正删除的过程：\n\n- `i_nlink=0` 没有人进行链接使用，包括任何硬链接\n- `i_count=0` 没有任何进程使用\n\n\n## rm原理\n\nrm的原理：减少磁盘引用计数`i_nlink`，就是减少其他文件对这个文件链接，实际并没有删除文件内容。\n\n因此，如果日志文件正在其他进程使用，`rm`并不是真正删除，`i_count`并不会减少，因此也不会释放磁盘空间。\n\n如果想要真正删除一个文件，还需要同时将`i_count`降至0。\n\n了解完rm的原理，也就真正明白为什么`find /opt/airflow/logs -name '*.*' -and -mtime +30 -type f | xargs rm -rvf`命令会这么慢，因为它要去找日志文件的所有link链接，然后一一删除掉。\n\n\n## 解决方案\n\n最终在网上找了最佳解决方案，就是使用`rsync`。\n\n`rsync`本身的就是将两个文件夹作同步使用，如何使用`rsync`删除文件，步骤是这样子:\n\n- 如果将一个空文件夹，同步到要删除的文件夹里，是不是等于将文件夹清空了呢？\n\n很取巧的方式，但是也很有效果，具体命令如下：\n\n```shell\n#制造一个空文件夹\nmkdir -p /opt/airflow/empty;\n\n#执行rsync同步空文件夹\nrsync --delete-before -aO  /opt/airflow/empty/ /opt/airflow/logs/;\n```\n\n命令详解：\n\n- `--delete-before` 接收者在传输之前进行删除操作\n- `-a` 归档模式，表示以递归方式传输文件，并保持所有文件属性\n\n# 参考资料\n\n- [Linux 下删除大量文件效率对比，看谁删的快！](https://cloud.tencent.com/developer/article/1647290)\n- [Linux下文件删除的原理](https://www.cnblogs.com/cherishry/p/5886069.html)\n\n\n","slug":"today/20230213","published":1,"updated":"2023-02-14T02:07:25.227Z","_id":"cldzxh8v0002lnxpc1qm8lnow","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近服务器经常遇到磁盘占用空间满的告警，因此跟进定位问题后，发现原来是airflow的有好几个任务每分钟都在产生日志文件，导致磁盘空间占用率暴涨，因此想了几个策略：</p>\n<ul>\n<li>airflow降低日志文件输出大小，将原来<code>info</code>级别日志跳高到<code>warning</code></li>\n<li>定时清理日志文件</li>\n</ul>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>问题就出现在清理日志文件，打算先清除一遍，主要清除一个月以前的日志文件，命令为<code>find /data/airflow/ -name &#39;*.log&#39; -and -mtime +30 -type f |xargs rm</code>。</p>\n<p>但是等了半天发现日志文件一直无法清除掉，不知道为什么？</p>\n<a id=\"more\"></a>\n\n<p>后面直接上机器删除文件，采用<code>rm -rf ./*.log</code>，发现报错如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/rm: argument list too long</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原因：  删除文件中包含的小文件数量过多，通常是由于受到 shell 参数个数限制所致</p>\n</blockquote>\n<p>虽然网上有其他方案可以快速解决，比如：<code>find</code>减少文件数量。</p>\n<p>这下子就搞的很郁闷了，后面上网找了方案，发现可以通过<code>rsync</code>去快速删除大量文件，因此想记录总结一下。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><h2 id=\"Linux文件存储原理\"><a href=\"#Linux文件存储原理\" class=\"headerlink\" title=\"Linux文件存储原理\"></a>Linux文件存储原理</h2><p>我们需要对Linux文件存储原理做一个基本的了解，Linux文件存储数据是放在一张<code>inode 表</code>，里面每一个文件的节点，每个节点包括以下内容：</p>\n<ul>\n<li>文件类型</li>\n<li>权限</li>\n<li>UID，GID</li>\n<li><code>i_nlink</code> 链接数（指向这个文件名路径名称个数）</li>\n<li><code>i_count</code> 使用数（指使用这个文件的进程数）</li>\n<li>该文件的大小和不同的时间戳</li>\n<li>指向磁盘上文件的数据块指针</li>\n<li>有关文件的其他数据</li>\n</ul>\n<p>Linux文件真正删除的过程：</p>\n<ul>\n<li><code>i_nlink=0</code> 没有人进行链接使用，包括任何硬链接</li>\n<li><code>i_count=0</code> 没有任何进程使用</li>\n</ul>\n<h2 id=\"rm原理\"><a href=\"#rm原理\" class=\"headerlink\" title=\"rm原理\"></a>rm原理</h2><p>rm的原理：减少磁盘引用计数<code>i_nlink</code>，就是减少其他文件对这个文件链接，实际并没有删除文件内容。</p>\n<p>因此，如果日志文件正在其他进程使用，<code>rm</code>并不是真正删除，<code>i_count</code>并不会减少，因此也不会释放磁盘空间。</p>\n<p>如果想要真正删除一个文件，还需要同时将<code>i_count</code>降至0。</p>\n<p>了解完rm的原理，也就真正明白为什么<code>find /opt/airflow/logs -name &#39;*.*&#39; -and -mtime +30 -type f | xargs rm -rvf</code>命令会这么慢，因为它要去找日志文件的所有link链接，然后一一删除掉。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>最终在网上找了最佳解决方案，就是使用<code>rsync</code>。</p>\n<p><code>rsync</code>本身的就是将两个文件夹作同步使用，如何使用<code>rsync</code>删除文件，步骤是这样子:</p>\n<ul>\n<li>如果将一个空文件夹，同步到要删除的文件夹里，是不是等于将文件夹清空了呢？</li>\n</ul>\n<p>很取巧的方式，但是也很有效果，具体命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>制造一个空文件夹</span><br><span class=\"line\">mkdir -p /opt/airflow/empty;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>执行rsync同步空文件夹</span><br><span class=\"line\">rsync --delete-before -aO  /opt/airflow/empty/ /opt/airflow/logs/;</span><br></pre></td></tr></table></figure>\n\n<p>命令详解：</p>\n<ul>\n<li><code>--delete-before</code> 接收者在传输之前进行删除操作</li>\n<li><code>-a</code> 归档模式，表示以递归方式传输文件，并保持所有文件属性</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1647290\" target=\"_blank\" rel=\"noopener\">Linux 下删除大量文件效率对比，看谁删的快！</a></li>\n<li><a href=\"https://www.cnblogs.com/cherishry/p/5886069.html\" target=\"_blank\" rel=\"noopener\">Linux下文件删除的原理</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近服务器经常遇到磁盘占用空间满的告警，因此跟进定位问题后，发现原来是airflow的有好几个任务每分钟都在产生日志文件，导致磁盘空间占用率暴涨，因此想了几个策略：</p>\n<ul>\n<li>airflow降低日志文件输出大小，将原来<code>info</code>级别日志跳高到<code>warning</code></li>\n<li>定时清理日志文件</li>\n</ul>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>问题就出现在清理日志文件，打算先清除一遍，主要清除一个月以前的日志文件，命令为<code>find /data/airflow/ -name &#39;*.log&#39; -and -mtime +30 -type f |xargs rm</code>。</p>\n<p>但是等了半天发现日志文件一直无法清除掉，不知道为什么？</p>","more":"<p>后面直接上机器删除文件，采用<code>rm -rf ./*.log</code>，发现报错如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/rm: argument list too long</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原因：  删除文件中包含的小文件数量过多，通常是由于受到 shell 参数个数限制所致</p>\n</blockquote>\n<p>虽然网上有其他方案可以快速解决，比如：<code>find</code>减少文件数量。</p>\n<p>这下子就搞的很郁闷了，后面上网找了方案，发现可以通过<code>rsync</code>去快速删除大量文件，因此想记录总结一下。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><h2 id=\"Linux文件存储原理\"><a href=\"#Linux文件存储原理\" class=\"headerlink\" title=\"Linux文件存储原理\"></a>Linux文件存储原理</h2><p>我们需要对Linux文件存储原理做一个基本的了解，Linux文件存储数据是放在一张<code>inode 表</code>，里面每一个文件的节点，每个节点包括以下内容：</p>\n<ul>\n<li>文件类型</li>\n<li>权限</li>\n<li>UID，GID</li>\n<li><code>i_nlink</code> 链接数（指向这个文件名路径名称个数）</li>\n<li><code>i_count</code> 使用数（指使用这个文件的进程数）</li>\n<li>该文件的大小和不同的时间戳</li>\n<li>指向磁盘上文件的数据块指针</li>\n<li>有关文件的其他数据</li>\n</ul>\n<p>Linux文件真正删除的过程：</p>\n<ul>\n<li><code>i_nlink=0</code> 没有人进行链接使用，包括任何硬链接</li>\n<li><code>i_count=0</code> 没有任何进程使用</li>\n</ul>\n<h2 id=\"rm原理\"><a href=\"#rm原理\" class=\"headerlink\" title=\"rm原理\"></a>rm原理</h2><p>rm的原理：减少磁盘引用计数<code>i_nlink</code>，就是减少其他文件对这个文件链接，实际并没有删除文件内容。</p>\n<p>因此，如果日志文件正在其他进程使用，<code>rm</code>并不是真正删除，<code>i_count</code>并不会减少，因此也不会释放磁盘空间。</p>\n<p>如果想要真正删除一个文件，还需要同时将<code>i_count</code>降至0。</p>\n<p>了解完rm的原理，也就真正明白为什么<code>find /opt/airflow/logs -name &#39;*.*&#39; -and -mtime +30 -type f | xargs rm -rvf</code>命令会这么慢，因为它要去找日志文件的所有link链接，然后一一删除掉。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>最终在网上找了最佳解决方案，就是使用<code>rsync</code>。</p>\n<p><code>rsync</code>本身的就是将两个文件夹作同步使用，如何使用<code>rsync</code>删除文件，步骤是这样子:</p>\n<ul>\n<li>如果将一个空文件夹，同步到要删除的文件夹里，是不是等于将文件夹清空了呢？</li>\n</ul>\n<p>很取巧的方式，但是也很有效果，具体命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>制造一个空文件夹</span><br><span class=\"line\">mkdir -p /opt/airflow/empty;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>执行rsync同步空文件夹</span><br><span class=\"line\">rsync --delete-before -aO  /opt/airflow/empty/ /opt/airflow/logs/;</span><br></pre></td></tr></table></figure>\n\n<p>命令详解：</p>\n<ul>\n<li><code>--delete-before</code> 接收者在传输之前进行删除操作</li>\n<li><code>-a</code> 归档模式，表示以递归方式传输文件，并保持所有文件属性</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1647290\" target=\"_blank\" rel=\"noopener\">Linux 下删除大量文件效率对比，看谁删的快！</a></li>\n<li><a href=\"https://www.cnblogs.com/cherishry/p/5886069.html\" target=\"_blank\" rel=\"noopener\">Linux下文件删除的原理</a></li>\n</ul>"},{"title":"前端安全-JS原型链污染是怎么回事","date":"2023-02-09T10:00:01.000Z","toc":true,"_content":"\n# 介绍\n\n面试题经常会提到一个问题，就是前端安全问题哪些，我们基本上都回答上来以下几个：\n\n- XSS脚本攻击，利用网站漏洞，注入非法脚本\n- CSRF跨站请求伪造，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求\n- 运营商劫持，一般是经过某些运营商DNS网关后，在外层套入iframe，然后实现页面劫持\n\n但是在前端安全中，还有一个问题就是 ：`JS原型链污染`， 那么是原型链污染怎么回事，请看下面详细介绍。\n\n> 这里插入一条新闻，新出一个很邪恶的js库叫[Evil.js](https://github.com/wll8/lodash-utils)，名字还取得很lodash，其中主要就是利用原型prototype进行重写项目中常用的方法，如：\n> - Array.map 有5%概率会丢失最后一个元素，\n> - 当数组长度可以被7整除时，Array.includes 永远返回false。\n\n所以学会如何防御项目内被攻击，了解更多JS原型安全知识很重要，起码周末不用调试半天问题，才发现项目中代码被恶意写入。\n\n<!-- more -->\n\n在看这篇文章，请确保自己对JS原型和原型链有一定了解，如果忘记或缺乏了解的话，可以看我之前的文案[从null、undefined、NaN的区别了解JS的原型链](today/20220129.html#原型)再次复习和学习一下。\n\n# 原型链污染\n\n## 是什么\n下面通过一段代码，我们能够快速了解原型链是如何污染的？\n```js\nconst foo = {\n    bar: 1\n};\n\n// 如果这里将foo.__proto__改掉\n\nfoo.__proto__.bar = 2\n\nconsole.log(foo.bar); // 这里正常输出 1\n\n// 新声明一个\n\nconst zoo = {};\n\nconsole.log(zoo.bar); // 这里错误输出 2\n\n```\n\n从上述代码可以概括一下，原型链攻击是：\n\n> 在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。\n\n## 攻击场景\n\n其实我们主要看哪些场景会允许代码设置`__proto__`？主要有以下两种：\n\n- 对象merge\n- 对象clone\n- Node.js的construtor\n\n### merge demo案例\n\n一般实现对象的merge代码实现如下：\n\n```js\nfunction merge(target, source) {\n    for (let key in source) {\n        if (key in source && key in target) {\n            merge(target[key], source[key])\n        } else {\n            target[key] = source[key]\n        }\n    }\n}\n\n// 运行代码\nlet o1 = {}\nlet o2 = {a: 1, \"__proto__\": {b: 2}}\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 = {}\nconsole.log(o3.b) // 发现原型链没有被污染\n```\n这是为什么呢？因为声明变量的时候，\"___proto__\"并不是一个key，即使修改也不会改变Object的原型。\n\n那么如何做到\"___proto__\"成为一个key，可以将demo代码调整一下，如：\n\n```js\nlet o1 = {}\nlet o2 = JSON.parse('{\"a\": 1, \"__proto__\": {\"b\": 2}}')\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 = {}\nconsole.log(o3.b) // 输出2\n```\n\nmerge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。如： `lodash.merge`。\n\n\n## 实际应用问题\n\n> Code-Breaking 2018 Thejs 分析\n\n```js\n// ...\nconst lodash = require('lodash')\n// ...\n\napp.engine('ejs', function (filePath, options, callback) { \n// define the template engine\n    fs.readFile(filePath, (err, content) => {\n        if (err) return callback(new Error(err))\n        let compiled = lodash.template(content)\n        let rendered = compiled({...options})\n\n        return callback(null, rendered)\n    })\n})\n//...\n\napp.all('/', (req, res) => {\n    let data = req.session.data || {language: [], category: []}\n    if (req.method == 'POST') {\n        data = lodash.merge(data, req.body)\n        req.session.data = data\n    }\n\n    res.render('index', {\n        language: data.language, \n        category: data.category\n    })\n})\n```\n\n题目是利用`lodash.template` + `lodash.merge`两个方法实现部分功能：\n\n- 用户提交的信息，用merge方法合并到session里，session里最终保存你提交的所有信息\n- 然后利用merge方法注入原型污染\n- 最后利用template中的方法，完成整个网站污染\n\n整个案例其实比较重要的一点就是，提交参数的时候序列化提交参数是否有做防御，如何没有的话那么很容易就中招了。\n\n## 如何防御\n分不同情况做防御：\n\n### 引入npm包导致的\n\n- 项目代码扫描，主要是针对构建好的代码进行扫描，是否`Evil.js`修改内置原型的情况进行告警提示\n- 禁止修改原型，如：使用`Object.freeze`\n\n### 针对node.js\n- 针对node服务端接口参数进行序列化的时候，禁止非法`key`值传入\n- 禁止修改原型，如：使用`Object.freeze`\n- 采用`Object.create(null)`创建对象，避免直接使用`{}`\n- 使用`map`数据类型创建\n- 不对参数做`JSON.parse`转换，采用封装后的反序列化方法\n- 尽量采用安全的`merge`或`clone`库方法\n\n\n# 参考资料\n\n- [深入理解 JavaScript Prototype 污染攻击](https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html)\n- [再探 JavaScript 原型链污染到 RCE](https://xz.aliyun.com/t/7025)\n- [Javascript原型链攻击与防御](https://www.freebuf.com/articles/web/216373.html)","source":"_posts/today/20230209.md","raw":"---\ntitle: 前端安全-JS原型链污染是怎么回事\ndate: 2023-02-09 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 介绍\n\n面试题经常会提到一个问题，就是前端安全问题哪些，我们基本上都回答上来以下几个：\n\n- XSS脚本攻击，利用网站漏洞，注入非法脚本\n- CSRF跨站请求伪造，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求\n- 运营商劫持，一般是经过某些运营商DNS网关后，在外层套入iframe，然后实现页面劫持\n\n但是在前端安全中，还有一个问题就是 ：`JS原型链污染`， 那么是原型链污染怎么回事，请看下面详细介绍。\n\n> 这里插入一条新闻，新出一个很邪恶的js库叫[Evil.js](https://github.com/wll8/lodash-utils)，名字还取得很lodash，其中主要就是利用原型prototype进行重写项目中常用的方法，如：\n> - Array.map 有5%概率会丢失最后一个元素，\n> - 当数组长度可以被7整除时，Array.includes 永远返回false。\n\n所以学会如何防御项目内被攻击，了解更多JS原型安全知识很重要，起码周末不用调试半天问题，才发现项目中代码被恶意写入。\n\n<!-- more -->\n\n在看这篇文章，请确保自己对JS原型和原型链有一定了解，如果忘记或缺乏了解的话，可以看我之前的文案[从null、undefined、NaN的区别了解JS的原型链](today/20220129.html#原型)再次复习和学习一下。\n\n# 原型链污染\n\n## 是什么\n下面通过一段代码，我们能够快速了解原型链是如何污染的？\n```js\nconst foo = {\n    bar: 1\n};\n\n// 如果这里将foo.__proto__改掉\n\nfoo.__proto__.bar = 2\n\nconsole.log(foo.bar); // 这里正常输出 1\n\n// 新声明一个\n\nconst zoo = {};\n\nconsole.log(zoo.bar); // 这里错误输出 2\n\n```\n\n从上述代码可以概括一下，原型链攻击是：\n\n> 在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。\n\n## 攻击场景\n\n其实我们主要看哪些场景会允许代码设置`__proto__`？主要有以下两种：\n\n- 对象merge\n- 对象clone\n- Node.js的construtor\n\n### merge demo案例\n\n一般实现对象的merge代码实现如下：\n\n```js\nfunction merge(target, source) {\n    for (let key in source) {\n        if (key in source && key in target) {\n            merge(target[key], source[key])\n        } else {\n            target[key] = source[key]\n        }\n    }\n}\n\n// 运行代码\nlet o1 = {}\nlet o2 = {a: 1, \"__proto__\": {b: 2}}\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 = {}\nconsole.log(o3.b) // 发现原型链没有被污染\n```\n这是为什么呢？因为声明变量的时候，\"___proto__\"并不是一个key，即使修改也不会改变Object的原型。\n\n那么如何做到\"___proto__\"成为一个key，可以将demo代码调整一下，如：\n\n```js\nlet o1 = {}\nlet o2 = JSON.parse('{\"a\": 1, \"__proto__\": {\"b\": 2}}')\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 = {}\nconsole.log(o3.b) // 输出2\n```\n\nmerge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。如： `lodash.merge`。\n\n\n## 实际应用问题\n\n> Code-Breaking 2018 Thejs 分析\n\n```js\n// ...\nconst lodash = require('lodash')\n// ...\n\napp.engine('ejs', function (filePath, options, callback) { \n// define the template engine\n    fs.readFile(filePath, (err, content) => {\n        if (err) return callback(new Error(err))\n        let compiled = lodash.template(content)\n        let rendered = compiled({...options})\n\n        return callback(null, rendered)\n    })\n})\n//...\n\napp.all('/', (req, res) => {\n    let data = req.session.data || {language: [], category: []}\n    if (req.method == 'POST') {\n        data = lodash.merge(data, req.body)\n        req.session.data = data\n    }\n\n    res.render('index', {\n        language: data.language, \n        category: data.category\n    })\n})\n```\n\n题目是利用`lodash.template` + `lodash.merge`两个方法实现部分功能：\n\n- 用户提交的信息，用merge方法合并到session里，session里最终保存你提交的所有信息\n- 然后利用merge方法注入原型污染\n- 最后利用template中的方法，完成整个网站污染\n\n整个案例其实比较重要的一点就是，提交参数的时候序列化提交参数是否有做防御，如何没有的话那么很容易就中招了。\n\n## 如何防御\n分不同情况做防御：\n\n### 引入npm包导致的\n\n- 项目代码扫描，主要是针对构建好的代码进行扫描，是否`Evil.js`修改内置原型的情况进行告警提示\n- 禁止修改原型，如：使用`Object.freeze`\n\n### 针对node.js\n- 针对node服务端接口参数进行序列化的时候，禁止非法`key`值传入\n- 禁止修改原型，如：使用`Object.freeze`\n- 采用`Object.create(null)`创建对象，避免直接使用`{}`\n- 使用`map`数据类型创建\n- 不对参数做`JSON.parse`转换，采用封装后的反序列化方法\n- 尽量采用安全的`merge`或`clone`库方法\n\n\n# 参考资料\n\n- [深入理解 JavaScript Prototype 污染攻击](https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html)\n- [再探 JavaScript 原型链污染到 RCE](https://xz.aliyun.com/t/7025)\n- [Javascript原型链攻击与防御](https://www.freebuf.com/articles/web/216373.html)","slug":"today/20230209","published":1,"updated":"2023-02-09T14:30:43.918Z","_id":"cldzxhjrw002onxpccfvgri4h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>面试题经常会提到一个问题，就是前端安全问题哪些，我们基本上都回答上来以下几个：</p>\n<ul>\n<li>XSS脚本攻击，利用网站漏洞，注入非法脚本</li>\n<li>CSRF跨站请求伪造，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求</li>\n<li>运营商劫持，一般是经过某些运营商DNS网关后，在外层套入iframe，然后实现页面劫持</li>\n</ul>\n<p>但是在前端安全中，还有一个问题就是 ：<code>JS原型链污染</code>， 那么是原型链污染怎么回事，请看下面详细介绍。</p>\n<blockquote>\n<p>这里插入一条新闻，新出一个很邪恶的js库叫<a href=\"https://github.com/wll8/lodash-utils\" target=\"_blank\" rel=\"noopener\">Evil.js</a>，名字还取得很lodash，其中主要就是利用原型prototype进行重写项目中常用的方法，如：</p>\n<ul>\n<li>Array.map 有5%概率会丢失最后一个元素，</li>\n<li>当数组长度可以被7整除时，Array.includes 永远返回false。</li>\n</ul>\n</blockquote>\n<p>所以学会如何防御项目内被攻击，了解更多JS原型安全知识很重要，起码周末不用调试半天问题，才发现项目中代码被恶意写入。</p>\n<a id=\"more\"></a>\n\n<p>在看这篇文章，请确保自己对JS原型和原型链有一定了解，如果忘记或缺乏了解的话，可以看我之前的文案<a href=\"today/20220129.html#原型\">从null、undefined、NaN的区别了解JS的原型链</a>再次复习和学习一下。</p>\n<h1 id=\"原型链污染\"><a href=\"#原型链污染\" class=\"headerlink\" title=\"原型链污染\"></a>原型链污染</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>下面通过一段代码，我们能够快速了解原型链是如何污染的？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    bar: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果这里将foo.__proto__改掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.__proto__.bar = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.bar); <span class=\"comment\">// 这里正常输出 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新声明一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zoo = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zoo.bar); <span class=\"comment\">// 这里错误输出 2</span></span><br></pre></td></tr></table></figure>\n\n<p>从上述代码可以概括一下，原型链攻击是：</p>\n<blockquote>\n<p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p>\n</blockquote>\n<h2 id=\"攻击场景\"><a href=\"#攻击场景\" class=\"headerlink\" title=\"攻击场景\"></a>攻击场景</h2><p>其实我们主要看哪些场景会允许代码设置<code>__proto__</code>？主要有以下两种：</p>\n<ul>\n<li>对象merge</li>\n<li>对象clone</li>\n<li>Node.js的construtor</li>\n</ul>\n<h3 id=\"merge-demo案例\"><a href=\"#merge-demo案例\" class=\"headerlink\" title=\"merge demo案例\"></a>merge demo案例</h3><p>一般实现对象的merge代码实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">target, source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> source &amp;&amp; key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            merge(target[key], source[key])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"string\">\"__proto__\"</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">merge(o1, o2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1.a, o1.b)</span><br><span class=\"line\"></span><br><span class=\"line\">o3 = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.b) <span class=\"comment\">// 发现原型链没有被污染</span></span><br></pre></td></tr></table></figure>\n\n<p>这是为什么呢？因为声明变量的时候，”<strong>_proto</strong>“并不是一个key，即使修改也不会改变Object的原型。</p>\n<p>那么如何做到”<strong>_proto</strong>“成为一个key，可以将demo代码调整一下，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"a\": 1, \"__proto__\": &#123;\"b\": 2&#125;&#125;'</span>)</span><br><span class=\"line\">merge(o1, o2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1.a, o1.b)</span><br><span class=\"line\"></span><br><span class=\"line\">o3 = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.b) <span class=\"comment\">// 输出2</span></span><br></pre></td></tr></table></figure>\n\n<p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。如： <code>lodash.merge</code>。</p>\n<h2 id=\"实际应用问题\"><a href=\"#实际应用问题\" class=\"headerlink\" title=\"实际应用问题\"></a>实际应用问题</h2><blockquote>\n<p>Code-Breaking 2018 Thejs 分析</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lodash = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.engine(<span class=\"string\">'ejs'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">filePath, options, callback</span>) </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// define the template engine</span></span><br><span class=\"line\">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(err))</span><br><span class=\"line\">        <span class=\"keyword\">let</span> compiled = lodash.template(content)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, rendered)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.all(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = req.session.data || &#123;<span class=\"attr\">language</span>: [], <span class=\"attr\">category</span>: []&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.method == <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">        data = lodash.merge(data, req.body)</span><br><span class=\"line\">        req.session.data = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">        language: data.language, </span><br><span class=\"line\">        category: data.category</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>题目是利用<code>lodash.template</code> + <code>lodash.merge</code>两个方法实现部分功能：</p>\n<ul>\n<li>用户提交的信息，用merge方法合并到session里，session里最终保存你提交的所有信息</li>\n<li>然后利用merge方法注入原型污染</li>\n<li>最后利用template中的方法，完成整个网站污染</li>\n</ul>\n<p>整个案例其实比较重要的一点就是，提交参数的时候序列化提交参数是否有做防御，如何没有的话那么很容易就中招了。</p>\n<h2 id=\"如何防御\"><a href=\"#如何防御\" class=\"headerlink\" title=\"如何防御\"></a>如何防御</h2><p>分不同情况做防御：</p>\n<h3 id=\"引入npm包导致的\"><a href=\"#引入npm包导致的\" class=\"headerlink\" title=\"引入npm包导致的\"></a>引入npm包导致的</h3><ul>\n<li>项目代码扫描，主要是针对构建好的代码进行扫描，是否<code>Evil.js</code>修改内置原型的情况进行告警提示</li>\n<li>禁止修改原型，如：使用<code>Object.freeze</code></li>\n</ul>\n<h3 id=\"针对node-js\"><a href=\"#针对node-js\" class=\"headerlink\" title=\"针对node.js\"></a>针对node.js</h3><ul>\n<li>针对node服务端接口参数进行序列化的时候，禁止非法<code>key</code>值传入</li>\n<li>禁止修改原型，如：使用<code>Object.freeze</code></li>\n<li>采用<code>Object.create(null)</code>创建对象，避免直接使用<code>{}</code></li>\n<li>使用<code>map</code>数据类型创建</li>\n<li>不对参数做<code>JSON.parse</code>转换，采用封装后的反序列化方法</li>\n<li>尽量采用安全的<code>merge</code>或<code>clone</code>库方法</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript Prototype 污染攻击</a></li>\n<li><a href=\"https://xz.aliyun.com/t/7025\" target=\"_blank\" rel=\"noopener\">再探 JavaScript 原型链污染到 RCE</a></li>\n<li><a href=\"https://www.freebuf.com/articles/web/216373.html\" target=\"_blank\" rel=\"noopener\">Javascript原型链攻击与防御</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>面试题经常会提到一个问题，就是前端安全问题哪些，我们基本上都回答上来以下几个：</p>\n<ul>\n<li>XSS脚本攻击，利用网站漏洞，注入非法脚本</li>\n<li>CSRF跨站请求伪造，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求</li>\n<li>运营商劫持，一般是经过某些运营商DNS网关后，在外层套入iframe，然后实现页面劫持</li>\n</ul>\n<p>但是在前端安全中，还有一个问题就是 ：<code>JS原型链污染</code>， 那么是原型链污染怎么回事，请看下面详细介绍。</p>\n<blockquote>\n<p>这里插入一条新闻，新出一个很邪恶的js库叫<a href=\"https://github.com/wll8/lodash-utils\" target=\"_blank\" rel=\"noopener\">Evil.js</a>，名字还取得很lodash，其中主要就是利用原型prototype进行重写项目中常用的方法，如：</p>\n<ul>\n<li>Array.map 有5%概率会丢失最后一个元素，</li>\n<li>当数组长度可以被7整除时，Array.includes 永远返回false。</li>\n</ul>\n</blockquote>\n<p>所以学会如何防御项目内被攻击，了解更多JS原型安全知识很重要，起码周末不用调试半天问题，才发现项目中代码被恶意写入。</p>","more":"<p>在看这篇文章，请确保自己对JS原型和原型链有一定了解，如果忘记或缺乏了解的话，可以看我之前的文案<a href=\"today/20220129.html#原型\">从null、undefined、NaN的区别了解JS的原型链</a>再次复习和学习一下。</p>\n<h1 id=\"原型链污染\"><a href=\"#原型链污染\" class=\"headerlink\" title=\"原型链污染\"></a>原型链污染</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>下面通过一段代码，我们能够快速了解原型链是如何污染的？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = &#123;</span><br><span class=\"line\">    bar: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果这里将foo.__proto__改掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.__proto__.bar = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.bar); <span class=\"comment\">// 这里正常输出 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新声明一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zoo = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zoo.bar); <span class=\"comment\">// 这里错误输出 2</span></span><br></pre></td></tr></table></figure>\n\n<p>从上述代码可以概括一下，原型链攻击是：</p>\n<blockquote>\n<p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p>\n</blockquote>\n<h2 id=\"攻击场景\"><a href=\"#攻击场景\" class=\"headerlink\" title=\"攻击场景\"></a>攻击场景</h2><p>其实我们主要看哪些场景会允许代码设置<code>__proto__</code>？主要有以下两种：</p>\n<ul>\n<li>对象merge</li>\n<li>对象clone</li>\n<li>Node.js的construtor</li>\n</ul>\n<h3 id=\"merge-demo案例\"><a href=\"#merge-demo案例\" class=\"headerlink\" title=\"merge demo案例\"></a>merge demo案例</h3><p>一般实现对象的merge代码实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">target, source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> source &amp;&amp; key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            merge(target[key], source[key])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"string\">\"__proto__\"</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">merge(o1, o2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1.a, o1.b)</span><br><span class=\"line\"></span><br><span class=\"line\">o3 = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.b) <span class=\"comment\">// 发现原型链没有被污染</span></span><br></pre></td></tr></table></figure>\n\n<p>这是为什么呢？因为声明变量的时候，”<strong>_proto</strong>“并不是一个key，即使修改也不会改变Object的原型。</p>\n<p>那么如何做到”<strong>_proto</strong>“成为一个key，可以将demo代码调整一下，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"a\": 1, \"__proto__\": &#123;\"b\": 2&#125;&#125;'</span>)</span><br><span class=\"line\">merge(o1, o2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o1.a, o1.b)</span><br><span class=\"line\"></span><br><span class=\"line\">o3 = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.b) <span class=\"comment\">// 输出2</span></span><br></pre></td></tr></table></figure>\n\n<p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。如： <code>lodash.merge</code>。</p>\n<h2 id=\"实际应用问题\"><a href=\"#实际应用问题\" class=\"headerlink\" title=\"实际应用问题\"></a>实际应用问题</h2><blockquote>\n<p>Code-Breaking 2018 Thejs 分析</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lodash = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.engine(<span class=\"string\">'ejs'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">filePath, options, callback</span>) </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// define the template engine</span></span><br><span class=\"line\">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(err))</span><br><span class=\"line\">        <span class=\"keyword\">let</span> compiled = lodash.template(content)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, rendered)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.all(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = req.session.data || &#123;<span class=\"attr\">language</span>: [], <span class=\"attr\">category</span>: []&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.method == <span class=\"string\">'POST'</span>) &#123;</span><br><span class=\"line\">        data = lodash.merge(data, req.body)</span><br><span class=\"line\">        req.session.data = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">        language: data.language, </span><br><span class=\"line\">        category: data.category</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>题目是利用<code>lodash.template</code> + <code>lodash.merge</code>两个方法实现部分功能：</p>\n<ul>\n<li>用户提交的信息，用merge方法合并到session里，session里最终保存你提交的所有信息</li>\n<li>然后利用merge方法注入原型污染</li>\n<li>最后利用template中的方法，完成整个网站污染</li>\n</ul>\n<p>整个案例其实比较重要的一点就是，提交参数的时候序列化提交参数是否有做防御，如何没有的话那么很容易就中招了。</p>\n<h2 id=\"如何防御\"><a href=\"#如何防御\" class=\"headerlink\" title=\"如何防御\"></a>如何防御</h2><p>分不同情况做防御：</p>\n<h3 id=\"引入npm包导致的\"><a href=\"#引入npm包导致的\" class=\"headerlink\" title=\"引入npm包导致的\"></a>引入npm包导致的</h3><ul>\n<li>项目代码扫描，主要是针对构建好的代码进行扫描，是否<code>Evil.js</code>修改内置原型的情况进行告警提示</li>\n<li>禁止修改原型，如：使用<code>Object.freeze</code></li>\n</ul>\n<h3 id=\"针对node-js\"><a href=\"#针对node-js\" class=\"headerlink\" title=\"针对node.js\"></a>针对node.js</h3><ul>\n<li>针对node服务端接口参数进行序列化的时候，禁止非法<code>key</code>值传入</li>\n<li>禁止修改原型，如：使用<code>Object.freeze</code></li>\n<li>采用<code>Object.create(null)</code>创建对象，避免直接使用<code>{}</code></li>\n<li>使用<code>map</code>数据类型创建</li>\n<li>不对参数做<code>JSON.parse</code>转换，采用封装后的反序列化方法</li>\n<li>尽量采用安全的<code>merge</code>或<code>clone</code>库方法</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript Prototype 污染攻击</a></li>\n<li><a href=\"https://xz.aliyun.com/t/7025\" target=\"_blank\" rel=\"noopener\">再探 JavaScript 原型链污染到 RCE</a></li>\n<li><a href=\"https://www.freebuf.com/articles/web/216373.html\" target=\"_blank\" rel=\"noopener\">Javascript原型链攻击与防御</a></li>\n</ul>"},{"title":"可以从ChatGPT学到什么(一)","date":"2023-02-16T10:00:01.000Z","toc":true,"_content":"\n# 背景\n最近`chatgpt`智能对答火的一塌涂地，就是你找`chatgpt`咨询，它不仅能理解你的意思，还能给出准确的答案，而且能够从上下文理解你的意思。\n\n简单的说，就不再是之前的智能对答，如果遇到不理解的问题回复【我好像不太理解你的问题】。\n\n更有甚者，利用chatgpt完成论文编写，同时还有帮小孩子写作业、程序员利用它整理某个业务的实现思路，作者利用其帮忙写小说细节等等。\n\n我尝试问了一些常规问题，如下图所示，可以更好的理解`chatgpt`的能力。\n\n1. 如何以`Nest.js`框架实现用户登录功能\n<!-- more -->\n![](/assets/img/20230216-1.jpeg)\n\n2. 直接将高考作文题要求放入，如下：\n> 请以“像一道闪电”为题目，写一段抒情文字或一首小诗。要求：感情真挚，语言生动，有感染力。要求800字。 —— 2022年北京卷\n\n![](/assets/img/20230216-2.png)\n\n\n因此，作为程序员，没有理由不去深入且完整的了解它，故而有这篇小白科普文。\n# 概念\n为了更好的了解后面的内容，我们需要提前对一些知识概念了解一下。\n\n## 人工智能\n\n> 人工智能 (AI) 是计算机模拟人类智能行为的功能。 通过 AI，计算机可以分析图像、理解语音、以自然方式交互，以及使用数据进行预测。\n\n目前AI开发流程分为：\n1. 确定目的模型，AI最终是用来做什么，如：图像识别、语言识别等\n1. 准备训练数据，收集和预处理数据，如：要识别一只猫，可能需要几十万张不同猫的图片\n1. 训练模型，也叫建模，通过各种算法、方法和技巧去创建，最终输出模型，如：从不同图片中去识别猫的，需要写算法、然后标注结果是否准确，这里的模型你可以理解成“只会识别猫的眼睛”\n1. 评估模型，反复的调整算法参数、数据，不断评估训练生成的模型，最终得到满意的模型，如：告诉【眼睛模型】哪些图片是猫，哪些图片不是猫，猫的特征有什么，直到【眼睛模型】可以识别出所有的猫的图片和不是猫的图片\n1. 部署模型，将模型应用到正式的实际数据或新产生数据中，进行预测、评价，如：把【眼睛模型】去接触真实世界，看到一些真实猫图片或视频\n\n总结来说，AI就是可以模拟人的部分行为，如上文举例所说的【眼睛模型】，就是实现人类眼睛可以识别猫的功能，扩展开来就是可以充当人的眼睛去识别万物。\n\n当然有些更加智能的模型可以重复2/3/4三个步骤让自己变得更加完善（这也叫【无监督模型或自监督模型】）。\n## 语言模型\n从前面了解到【模型】的概念，从通俗的理解模型是一个模仿人类某个功能，从技术上讲模型是一段算法代码。\n\n因此语言模型从这两个方面来说：\n\n- 许多自然语言处理方面的应用，如：语音识别[1]，机器翻译[2]，词性标注，句法分析[3]，手写体识别[4]和资讯检索\n- 从技术上来讲，是一个概率分布的算法\n\n我们对语言模型可以理解成，一个能够识别自然语言（包括语音，语义识别等）的算法模型即可。\n\n常用的语言模型算法有以下几种：\n- ELMo 华盛顿大学提出的算法 \n- GPT OpenAI提出的算法\n- BERT Google提出的算法\n\n## GPT\n\n> Generative Pre-trained Transformer (GPT)，是一种基于互联网可用数据训练的文本生成深度学习模型。\n\nGPT的整个发展过程分为：\n\n- GPT-1，有一定的泛化能力，能够用于和监督任务无关的 NLP 任务，如：自然语言推理：判断两个句子的关系；问答与常识推理：输入文章及若干答案，输出答案的准确率等\n- GPT-2，使用无监督预训练模型做有监督任务，比GTP-1拥有更加强大能力，能阅读摘要、聊天、续写、编故事，甚至生成假新闻等，甚至可以假扮网络角色进行会话聊天，如：微软的小冰。\n- GPT-3，作为一个无监督模型，几乎可以完成自然语言处理的绝大部分任务，如面向问题的搜索、阅读理解、语义推断、机器翻译、文章生成和自动问答等等。\n- GPT3.5，是一系列模型，使用`人类反馈强化学习(RLHF)`，与`GPT-3`最大的区别在使用互联网的资料直接训练。\n- GPT-4，针对GPT-3不分青红皂白和质量好坏地对网络上的所有文本进行学习，进而生产出错误的、恶意冒犯的、甚至是攻击性的语言输出的缺陷，而准备提出新的升级模型。\n\n**一个无监督模型功能多效果好，似乎让人们看到了通用人工智能的希望，可能这就是 GPT-3 影响如此之大的主要原因。**\n\n有了这些概念性的知识后，我们就可以开始认识`ChatGPT`。\n# ChatGPT\n\n## 是什么\n在官网上定义如下：\n\n> ChatGPT: 专门针对对话而优化的语言模型。同时已经训练了一个名为ChatGPT的模型，它以对话的方式进行交互。对话形式使ChatGPT能够回答后续问题，承认错误，挑战不正确的前提，拒绝不适当的请求。ChatGPT是InstructGPT的兄弟模型，InstructGPT被训练为遵循提示中的说明并提供详细的响应。 —— [ChatGPT官网](https://openai.com/blog/chatgpt/)\n\n按照我所理解来说，ChatGPT是：\n\n- 一个基于`GPT-3.5系列模型` + `人类反馈强化学习(RLHF)`实现的语言模型\n- 一个可以正常对话聊天、自动纠正错误的智能对话机器人(快速，而不需要等待太长时间)\n- 一个链接互联网所有公开信息，能检索到所有信息和总结的智能搜索引擎\n- 一个可以辅助你实现相关工作（如：作业，代码，论文等）的智能工具\n\n**[InstructGPT](https://openai.com/blog/instruction-following/) VS ChatGPT**\n\n- 两者都是基于`GPT-3.5系列模型`做调整的语言模型\n- `InstructGPT`是一个问题就一个回答，如果回答不正确就调整， `ChatGPT`则是一个问题就多个回答，然后学习将这些回答进行排序\n\n\n如何使用：\n\n其实如果可以直接访问[ChatGPT官网](https://chat.openai.com/)就可以直接用，国内也有很多插件可以使用。\n\n## 影响什么\nChatGPT的火爆是AI多年沉淀的一次技术爆发，距离上一次AI技术的热点新闻还是在谷歌的阿尔法狗战胜世界围棋冠军李世石（2016年）。\n\n我们可以先收集一下目前使用AI技术的一些场景：\n\n- 各种识别，人脸、指纹等\n- 智能辅助驾驶\n- 各种转义，如：语音转文字，文字转语音， 翻译等\n- 各种语音助手，如：Siri，小爱同学等\n\n其实，AI在我们生活中已经随处可见，只是有时候我们觉得这些功能还是比较属于机器范围内的，如有时候小爱同学会说“我没听清楚你的问题”这种明显非智能回答，给我们造成一种认知觉得AI很傻。\n\n因此，ChatGPT的火爆之处在于：它真的可以像一个人类给予你想要的回答，更加准确的说，它是一个负责任的智能AI，能竭尽所能的给你想要的答案。\n\n接下来，我从网上搜索了一些资料，从几个行业讲一下它可能会带来的影响。\n### 教育行业\n其实最大的担心就是，大家利用chatgpt去写作业或论文，尤其是学龄前儿童和中小学阶段，正是属于知识探索期，chatgpt是否会影响学生的学习吗？\n\n这里引用一段话，针对国内的，吴永和教授的一个观点：\n> 面向未来，作为承担2021年度国家社会科学基金重大项目“面向未成年人的人工智能技术规范研究”的首席专家，吴永和从五个方面给出了教育人工智能发展的建议：\n> - 一、是进行理论的奠基，确定价值观、战略方向，做好顶层设计；\n> - 二、是提升人类的人工智能核心素养，从而使师生能正确驾驭智能工具；\n> - 三、是完善技术应用的监管，保持人工智能的向善性，使技术能够更好地为人服务；\n> - 四、是考虑技术和教育深度融合的伦理问题，更好地做到人机共融；\n> - 五、是落实相关标准，比如教育人工智能的算法描述信息、安全描述框架、伦理审查规范。\n\n### IT行业\n网络已经有很多人利用chatgpt去生成代码甚至正式上线，那么是否会代替程序员，或者以后程序员已经如何学习发展？\n\n这里引用知乎上的一个问答[OpenAI 的超级对话模型 ChatGPT 会导致程序员大规模失业吗？](https://www.zhihu.com/question/570403406)，总结一下精彩回答：\n> - chatgpt作为一个管家型查找，把喂到你嘴里这个功能发挥到了极致。\n> - chatgpt给出的代码实现和\"背题家\"也出奇的相似\n> - chatGPT最多能看作一个助手, 对于广大程序员来说是一个不错的辅助工具\n> - AI的发展已经明确告诉你了，不要卷细节上的东西，提升核心竞争力，就是你的解决问题的思路\n> - 没有思想的人才是最快被取代的\n> - ChatGPT 又来了，这次我是什么感觉呢？感觉真的 Google 和 StackOverflow 已经不好用了\n> - 借助 Copilot 和 ChatGPT，程序员的自我感觉更棒了！可以更加肆无忌惮地在未知领域里自由探索了！\n\n\n### 其他行业\n\n引用知乎上的问答[ChatGPT 会取代人的哪些工作？哪些人群的职业规划需要转变？](https://www.zhihu.com/question/582809884/answer/2883146417)，总结一下精彩回答：\n\n> - 内容行业：文字+图像处理效率的提升，更加庞大的内容生态也有了存在的基础，推动芯片和硬件的提升，从而实现更宏大的数字世界\n> - 游戏行业：npc会和你流畅的对话，黄油里面可以根据你的xp来叫主人或者变态，新的需求会生成，也催生新的经济形态\n> - 这将是人工智能诞生以来，人类的工作第一次真正接近被大规模替代的时点——不是部分工作被替代，而是大规模被替代的开始。\n> - ChatGPT的商业模式，可能不会像搜索那样依赖广告，难以出现大规模的2C级应用，而更可能是2B，主要运用于工作场景\n> - 会提问题的人将是最后的赢家，可以让你的工作不但不会被AI取代，反而创造了全新的工作方式\n\n# 总结\n\n第一篇关于ChatGPT的了解就先写到这里，作为AI小白，我们可以学习到：\n\n- AI模型是的训练过程：确定模型>准备数据>训练模型>调整模型>部署模型\n- ChatGPT的实质定义，利用互联网的资料训练`GPT-3.5模型`而成的一个对话式的语言模型\n- ChatGPT的出现可能带来的改变，可以将某些行业岗位的价值重新定义，但是却能提高更多岗位的工作效率和价值，从而提升整个社会运转速度\n\n最后，问ChatGPT我能从你这里学到什么？如下图：\n\n![](/assets/img/20230216-3.png)\n\n# 参考资料\n\n- [华为 AI开发基本流程介绍](https://support.huaweicloud.com/productdesc-modelarts/modelarts_01_0010.html)\n- [谷歌 人工智能 (AI) 体系结构设计](https://learn.microsoft.com/zh-cn/azure/architecture/data-guide/big-data/ai-overview)\n- [ChatGPT的崛起：从GPT-1到GPT-3，AIGC时代即将到来](https://www.8btc.com/article/6791988)\n- [自己搭建chatpt](https://github.com/BlinkDL/ChatRWKV)\n- [GPT-3 demo应用收集](https://gpt3demo.com/)\n- [用ChatGPT写作业会毁了孩子的学业吗？](http://edu.china.com.cn/2023-02/15/content_85106877.htm)","source":"_posts/today/20230216.md","raw":"---\ntitle: 可以从ChatGPT学到什么(一)\ndate: 2023-02-16 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n最近`chatgpt`智能对答火的一塌涂地，就是你找`chatgpt`咨询，它不仅能理解你的意思，还能给出准确的答案，而且能够从上下文理解你的意思。\n\n简单的说，就不再是之前的智能对答，如果遇到不理解的问题回复【我好像不太理解你的问题】。\n\n更有甚者，利用chatgpt完成论文编写，同时还有帮小孩子写作业、程序员利用它整理某个业务的实现思路，作者利用其帮忙写小说细节等等。\n\n我尝试问了一些常规问题，如下图所示，可以更好的理解`chatgpt`的能力。\n\n1. 如何以`Nest.js`框架实现用户登录功能\n<!-- more -->\n![](/assets/img/20230216-1.jpeg)\n\n2. 直接将高考作文题要求放入，如下：\n> 请以“像一道闪电”为题目，写一段抒情文字或一首小诗。要求：感情真挚，语言生动，有感染力。要求800字。 —— 2022年北京卷\n\n![](/assets/img/20230216-2.png)\n\n\n因此，作为程序员，没有理由不去深入且完整的了解它，故而有这篇小白科普文。\n# 概念\n为了更好的了解后面的内容，我们需要提前对一些知识概念了解一下。\n\n## 人工智能\n\n> 人工智能 (AI) 是计算机模拟人类智能行为的功能。 通过 AI，计算机可以分析图像、理解语音、以自然方式交互，以及使用数据进行预测。\n\n目前AI开发流程分为：\n1. 确定目的模型，AI最终是用来做什么，如：图像识别、语言识别等\n1. 准备训练数据，收集和预处理数据，如：要识别一只猫，可能需要几十万张不同猫的图片\n1. 训练模型，也叫建模，通过各种算法、方法和技巧去创建，最终输出模型，如：从不同图片中去识别猫的，需要写算法、然后标注结果是否准确，这里的模型你可以理解成“只会识别猫的眼睛”\n1. 评估模型，反复的调整算法参数、数据，不断评估训练生成的模型，最终得到满意的模型，如：告诉【眼睛模型】哪些图片是猫，哪些图片不是猫，猫的特征有什么，直到【眼睛模型】可以识别出所有的猫的图片和不是猫的图片\n1. 部署模型，将模型应用到正式的实际数据或新产生数据中，进行预测、评价，如：把【眼睛模型】去接触真实世界，看到一些真实猫图片或视频\n\n总结来说，AI就是可以模拟人的部分行为，如上文举例所说的【眼睛模型】，就是实现人类眼睛可以识别猫的功能，扩展开来就是可以充当人的眼睛去识别万物。\n\n当然有些更加智能的模型可以重复2/3/4三个步骤让自己变得更加完善（这也叫【无监督模型或自监督模型】）。\n## 语言模型\n从前面了解到【模型】的概念，从通俗的理解模型是一个模仿人类某个功能，从技术上讲模型是一段算法代码。\n\n因此语言模型从这两个方面来说：\n\n- 许多自然语言处理方面的应用，如：语音识别[1]，机器翻译[2]，词性标注，句法分析[3]，手写体识别[4]和资讯检索\n- 从技术上来讲，是一个概率分布的算法\n\n我们对语言模型可以理解成，一个能够识别自然语言（包括语音，语义识别等）的算法模型即可。\n\n常用的语言模型算法有以下几种：\n- ELMo 华盛顿大学提出的算法 \n- GPT OpenAI提出的算法\n- BERT Google提出的算法\n\n## GPT\n\n> Generative Pre-trained Transformer (GPT)，是一种基于互联网可用数据训练的文本生成深度学习模型。\n\nGPT的整个发展过程分为：\n\n- GPT-1，有一定的泛化能力，能够用于和监督任务无关的 NLP 任务，如：自然语言推理：判断两个句子的关系；问答与常识推理：输入文章及若干答案，输出答案的准确率等\n- GPT-2，使用无监督预训练模型做有监督任务，比GTP-1拥有更加强大能力，能阅读摘要、聊天、续写、编故事，甚至生成假新闻等，甚至可以假扮网络角色进行会话聊天，如：微软的小冰。\n- GPT-3，作为一个无监督模型，几乎可以完成自然语言处理的绝大部分任务，如面向问题的搜索、阅读理解、语义推断、机器翻译、文章生成和自动问答等等。\n- GPT3.5，是一系列模型，使用`人类反馈强化学习(RLHF)`，与`GPT-3`最大的区别在使用互联网的资料直接训练。\n- GPT-4，针对GPT-3不分青红皂白和质量好坏地对网络上的所有文本进行学习，进而生产出错误的、恶意冒犯的、甚至是攻击性的语言输出的缺陷，而准备提出新的升级模型。\n\n**一个无监督模型功能多效果好，似乎让人们看到了通用人工智能的希望，可能这就是 GPT-3 影响如此之大的主要原因。**\n\n有了这些概念性的知识后，我们就可以开始认识`ChatGPT`。\n# ChatGPT\n\n## 是什么\n在官网上定义如下：\n\n> ChatGPT: 专门针对对话而优化的语言模型。同时已经训练了一个名为ChatGPT的模型，它以对话的方式进行交互。对话形式使ChatGPT能够回答后续问题，承认错误，挑战不正确的前提，拒绝不适当的请求。ChatGPT是InstructGPT的兄弟模型，InstructGPT被训练为遵循提示中的说明并提供详细的响应。 —— [ChatGPT官网](https://openai.com/blog/chatgpt/)\n\n按照我所理解来说，ChatGPT是：\n\n- 一个基于`GPT-3.5系列模型` + `人类反馈强化学习(RLHF)`实现的语言模型\n- 一个可以正常对话聊天、自动纠正错误的智能对话机器人(快速，而不需要等待太长时间)\n- 一个链接互联网所有公开信息，能检索到所有信息和总结的智能搜索引擎\n- 一个可以辅助你实现相关工作（如：作业，代码，论文等）的智能工具\n\n**[InstructGPT](https://openai.com/blog/instruction-following/) VS ChatGPT**\n\n- 两者都是基于`GPT-3.5系列模型`做调整的语言模型\n- `InstructGPT`是一个问题就一个回答，如果回答不正确就调整， `ChatGPT`则是一个问题就多个回答，然后学习将这些回答进行排序\n\n\n如何使用：\n\n其实如果可以直接访问[ChatGPT官网](https://chat.openai.com/)就可以直接用，国内也有很多插件可以使用。\n\n## 影响什么\nChatGPT的火爆是AI多年沉淀的一次技术爆发，距离上一次AI技术的热点新闻还是在谷歌的阿尔法狗战胜世界围棋冠军李世石（2016年）。\n\n我们可以先收集一下目前使用AI技术的一些场景：\n\n- 各种识别，人脸、指纹等\n- 智能辅助驾驶\n- 各种转义，如：语音转文字，文字转语音， 翻译等\n- 各种语音助手，如：Siri，小爱同学等\n\n其实，AI在我们生活中已经随处可见，只是有时候我们觉得这些功能还是比较属于机器范围内的，如有时候小爱同学会说“我没听清楚你的问题”这种明显非智能回答，给我们造成一种认知觉得AI很傻。\n\n因此，ChatGPT的火爆之处在于：它真的可以像一个人类给予你想要的回答，更加准确的说，它是一个负责任的智能AI，能竭尽所能的给你想要的答案。\n\n接下来，我从网上搜索了一些资料，从几个行业讲一下它可能会带来的影响。\n### 教育行业\n其实最大的担心就是，大家利用chatgpt去写作业或论文，尤其是学龄前儿童和中小学阶段，正是属于知识探索期，chatgpt是否会影响学生的学习吗？\n\n这里引用一段话，针对国内的，吴永和教授的一个观点：\n> 面向未来，作为承担2021年度国家社会科学基金重大项目“面向未成年人的人工智能技术规范研究”的首席专家，吴永和从五个方面给出了教育人工智能发展的建议：\n> - 一、是进行理论的奠基，确定价值观、战略方向，做好顶层设计；\n> - 二、是提升人类的人工智能核心素养，从而使师生能正确驾驭智能工具；\n> - 三、是完善技术应用的监管，保持人工智能的向善性，使技术能够更好地为人服务；\n> - 四、是考虑技术和教育深度融合的伦理问题，更好地做到人机共融；\n> - 五、是落实相关标准，比如教育人工智能的算法描述信息、安全描述框架、伦理审查规范。\n\n### IT行业\n网络已经有很多人利用chatgpt去生成代码甚至正式上线，那么是否会代替程序员，或者以后程序员已经如何学习发展？\n\n这里引用知乎上的一个问答[OpenAI 的超级对话模型 ChatGPT 会导致程序员大规模失业吗？](https://www.zhihu.com/question/570403406)，总结一下精彩回答：\n> - chatgpt作为一个管家型查找，把喂到你嘴里这个功能发挥到了极致。\n> - chatgpt给出的代码实现和\"背题家\"也出奇的相似\n> - chatGPT最多能看作一个助手, 对于广大程序员来说是一个不错的辅助工具\n> - AI的发展已经明确告诉你了，不要卷细节上的东西，提升核心竞争力，就是你的解决问题的思路\n> - 没有思想的人才是最快被取代的\n> - ChatGPT 又来了，这次我是什么感觉呢？感觉真的 Google 和 StackOverflow 已经不好用了\n> - 借助 Copilot 和 ChatGPT，程序员的自我感觉更棒了！可以更加肆无忌惮地在未知领域里自由探索了！\n\n\n### 其他行业\n\n引用知乎上的问答[ChatGPT 会取代人的哪些工作？哪些人群的职业规划需要转变？](https://www.zhihu.com/question/582809884/answer/2883146417)，总结一下精彩回答：\n\n> - 内容行业：文字+图像处理效率的提升，更加庞大的内容生态也有了存在的基础，推动芯片和硬件的提升，从而实现更宏大的数字世界\n> - 游戏行业：npc会和你流畅的对话，黄油里面可以根据你的xp来叫主人或者变态，新的需求会生成，也催生新的经济形态\n> - 这将是人工智能诞生以来，人类的工作第一次真正接近被大规模替代的时点——不是部分工作被替代，而是大规模被替代的开始。\n> - ChatGPT的商业模式，可能不会像搜索那样依赖广告，难以出现大规模的2C级应用，而更可能是2B，主要运用于工作场景\n> - 会提问题的人将是最后的赢家，可以让你的工作不但不会被AI取代，反而创造了全新的工作方式\n\n# 总结\n\n第一篇关于ChatGPT的了解就先写到这里，作为AI小白，我们可以学习到：\n\n- AI模型是的训练过程：确定模型>准备数据>训练模型>调整模型>部署模型\n- ChatGPT的实质定义，利用互联网的资料训练`GPT-3.5模型`而成的一个对话式的语言模型\n- ChatGPT的出现可能带来的改变，可以将某些行业岗位的价值重新定义，但是却能提高更多岗位的工作效率和价值，从而提升整个社会运转速度\n\n最后，问ChatGPT我能从你这里学到什么？如下图：\n\n![](/assets/img/20230216-3.png)\n\n# 参考资料\n\n- [华为 AI开发基本流程介绍](https://support.huaweicloud.com/productdesc-modelarts/modelarts_01_0010.html)\n- [谷歌 人工智能 (AI) 体系结构设计](https://learn.microsoft.com/zh-cn/azure/architecture/data-guide/big-data/ai-overview)\n- [ChatGPT的崛起：从GPT-1到GPT-3，AIGC时代即将到来](https://www.8btc.com/article/6791988)\n- [自己搭建chatpt](https://github.com/BlinkDL/ChatRWKV)\n- [GPT-3 demo应用收集](https://gpt3demo.com/)\n- [用ChatGPT写作业会毁了孩子的学业吗？](http://edu.china.com.cn/2023-02/15/content_85106877.htm)","slug":"today/20230216","published":1,"updated":"2023-02-20T15:56:00.764Z","_id":"cldzxides0033nxpc1la1skec","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近<code>chatgpt</code>智能对答火的一塌涂地，就是你找<code>chatgpt</code>咨询，它不仅能理解你的意思，还能给出准确的答案，而且能够从上下文理解你的意思。</p>\n<p>简单的说，就不再是之前的智能对答，如果遇到不理解的问题回复【我好像不太理解你的问题】。</p>\n<p>更有甚者，利用chatgpt完成论文编写，同时还有帮小孩子写作业、程序员利用它整理某个业务的实现思路，作者利用其帮忙写小说细节等等。</p>\n<p>我尝试问了一些常规问题，如下图所示，可以更好的理解<code>chatgpt</code>的能力。</p>\n<ol>\n<li><p>如何以<code>Nest.js</code>框架实现用户登录功能</p>\n<a id=\"more\"></a>\n<p><img src=\"/assets/img/20230216-1.jpeg\" alt></p>\n</li>\n<li><p>直接将高考作文题要求放入，如下：</p>\n<blockquote>\n<p>请以“像一道闪电”为题目，写一段抒情文字或一首小诗。要求：感情真挚，语言生动，有感染力。要求800字。 —— 2022年北京卷</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/assets/img/20230216-2.png\" alt></p>\n<p>因此，作为程序员，没有理由不去深入且完整的了解它，故而有这篇小白科普文。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>为了更好的了解后面的内容，我们需要提前对一些知识概念了解一下。</p>\n<h2 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h2><blockquote>\n<p>人工智能 (AI) 是计算机模拟人类智能行为的功能。 通过 AI，计算机可以分析图像、理解语音、以自然方式交互，以及使用数据进行预测。</p>\n</blockquote>\n<p>目前AI开发流程分为：</p>\n<ol>\n<li>确定目的模型，AI最终是用来做什么，如：图像识别、语言识别等</li>\n<li>准备训练数据，收集和预处理数据，如：要识别一只猫，可能需要几十万张不同猫的图片</li>\n<li>训练模型，也叫建模，通过各种算法、方法和技巧去创建，最终输出模型，如：从不同图片中去识别猫的，需要写算法、然后标注结果是否准确，这里的模型你可以理解成“只会识别猫的眼睛”</li>\n<li>评估模型，反复的调整算法参数、数据，不断评估训练生成的模型，最终得到满意的模型，如：告诉【眼睛模型】哪些图片是猫，哪些图片不是猫，猫的特征有什么，直到【眼睛模型】可以识别出所有的猫的图片和不是猫的图片</li>\n<li>部署模型，将模型应用到正式的实际数据或新产生数据中，进行预测、评价，如：把【眼睛模型】去接触真实世界，看到一些真实猫图片或视频</li>\n</ol>\n<p>总结来说，AI就是可以模拟人的部分行为，如上文举例所说的【眼睛模型】，就是实现人类眼睛可以识别猫的功能，扩展开来就是可以充当人的眼睛去识别万物。</p>\n<p>当然有些更加智能的模型可以重复2/3/4三个步骤让自己变得更加完善（这也叫【无监督模型或自监督模型】）。</p>\n<h2 id=\"语言模型\"><a href=\"#语言模型\" class=\"headerlink\" title=\"语言模型\"></a>语言模型</h2><p>从前面了解到【模型】的概念，从通俗的理解模型是一个模仿人类某个功能，从技术上讲模型是一段算法代码。</p>\n<p>因此语言模型从这两个方面来说：</p>\n<ul>\n<li>许多自然语言处理方面的应用，如：语音识别[1]，机器翻译[2]，词性标注，句法分析[3]，手写体识别[4]和资讯检索</li>\n<li>从技术上来讲，是一个概率分布的算法</li>\n</ul>\n<p>我们对语言模型可以理解成，一个能够识别自然语言（包括语音，语义识别等）的算法模型即可。</p>\n<p>常用的语言模型算法有以下几种：</p>\n<ul>\n<li>ELMo 华盛顿大学提出的算法 </li>\n<li>GPT OpenAI提出的算法</li>\n<li>BERT Google提出的算法</li>\n</ul>\n<h2 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h2><blockquote>\n<p>Generative Pre-trained Transformer (GPT)，是一种基于互联网可用数据训练的文本生成深度学习模型。</p>\n</blockquote>\n<p>GPT的整个发展过程分为：</p>\n<ul>\n<li>GPT-1，有一定的泛化能力，能够用于和监督任务无关的 NLP 任务，如：自然语言推理：判断两个句子的关系；问答与常识推理：输入文章及若干答案，输出答案的准确率等</li>\n<li>GPT-2，使用无监督预训练模型做有监督任务，比GTP-1拥有更加强大能力，能阅读摘要、聊天、续写、编故事，甚至生成假新闻等，甚至可以假扮网络角色进行会话聊天，如：微软的小冰。</li>\n<li>GPT-3，作为一个无监督模型，几乎可以完成自然语言处理的绝大部分任务，如面向问题的搜索、阅读理解、语义推断、机器翻译、文章生成和自动问答等等。</li>\n<li>GPT3.5，是一系列模型，使用<code>人类反馈强化学习(RLHF)</code>，与<code>GPT-3</code>最大的区别在使用互联网的资料直接训练。</li>\n<li>GPT-4，针对GPT-3不分青红皂白和质量好坏地对网络上的所有文本进行学习，进而生产出错误的、恶意冒犯的、甚至是攻击性的语言输出的缺陷，而准备提出新的升级模型。</li>\n</ul>\n<p><strong>一个无监督模型功能多效果好，似乎让人们看到了通用人工智能的希望，可能这就是 GPT-3 影响如此之大的主要原因。</strong></p>\n<p>有了这些概念性的知识后，我们就可以开始认识<code>ChatGPT</code>。</p>\n<h1 id=\"ChatGPT\"><a href=\"#ChatGPT\" class=\"headerlink\" title=\"ChatGPT\"></a>ChatGPT</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>在官网上定义如下：</p>\n<blockquote>\n<p>ChatGPT: 专门针对对话而优化的语言模型。同时已经训练了一个名为ChatGPT的模型，它以对话的方式进行交互。对话形式使ChatGPT能够回答后续问题，承认错误，挑战不正确的前提，拒绝不适当的请求。ChatGPT是InstructGPT的兄弟模型，InstructGPT被训练为遵循提示中的说明并提供详细的响应。 —— <a href=\"https://openai.com/blog/chatgpt/\" target=\"_blank\" rel=\"noopener\">ChatGPT官网</a></p>\n</blockquote>\n<p>按照我所理解来说，ChatGPT是：</p>\n<ul>\n<li>一个基于<code>GPT-3.5系列模型</code> + <code>人类反馈强化学习(RLHF)</code>实现的语言模型</li>\n<li>一个可以正常对话聊天、自动纠正错误的智能对话机器人(快速，而不需要等待太长时间)</li>\n<li>一个链接互联网所有公开信息，能检索到所有信息和总结的智能搜索引擎</li>\n<li>一个可以辅助你实现相关工作（如：作业，代码，论文等）的智能工具</li>\n</ul>\n<p><strong><a href=\"https://openai.com/blog/instruction-following/\" target=\"_blank\" rel=\"noopener\">InstructGPT</a> VS ChatGPT</strong></p>\n<ul>\n<li>两者都是基于<code>GPT-3.5系列模型</code>做调整的语言模型</li>\n<li><code>InstructGPT</code>是一个问题就一个回答，如果回答不正确就调整， <code>ChatGPT</code>则是一个问题就多个回答，然后学习将这些回答进行排序</li>\n</ul>\n<p>如何使用：</p>\n<p>其实如果可以直接访问<a href=\"https://chat.openai.com/\" target=\"_blank\" rel=\"noopener\">ChatGPT官网</a>就可以直接用，国内也有很多插件可以使用。</p>\n<h2 id=\"影响什么\"><a href=\"#影响什么\" class=\"headerlink\" title=\"影响什么\"></a>影响什么</h2><p>ChatGPT的火爆是AI多年沉淀的一次技术爆发，距离上一次AI技术的热点新闻还是在谷歌的阿尔法狗战胜世界围棋冠军李世石（2016年）。</p>\n<p>我们可以先收集一下目前使用AI技术的一些场景：</p>\n<ul>\n<li>各种识别，人脸、指纹等</li>\n<li>智能辅助驾驶</li>\n<li>各种转义，如：语音转文字，文字转语音， 翻译等</li>\n<li>各种语音助手，如：Siri，小爱同学等</li>\n</ul>\n<p>其实，AI在我们生活中已经随处可见，只是有时候我们觉得这些功能还是比较属于机器范围内的，如有时候小爱同学会说“我没听清楚你的问题”这种明显非智能回答，给我们造成一种认知觉得AI很傻。</p>\n<p>因此，ChatGPT的火爆之处在于：它真的可以像一个人类给予你想要的回答，更加准确的说，它是一个负责任的智能AI，能竭尽所能的给你想要的答案。</p>\n<p>接下来，我从网上搜索了一些资料，从几个行业讲一下它可能会带来的影响。</p>\n<h3 id=\"教育行业\"><a href=\"#教育行业\" class=\"headerlink\" title=\"教育行业\"></a>教育行业</h3><p>其实最大的担心就是，大家利用chatgpt去写作业或论文，尤其是学龄前儿童和中小学阶段，正是属于知识探索期，chatgpt是否会影响学生的学习吗？</p>\n<p>这里引用一段话，针对国内的，吴永和教授的一个观点：</p>\n<blockquote>\n<p>面向未来，作为承担2021年度国家社会科学基金重大项目“面向未成年人的人工智能技术规范研究”的首席专家，吴永和从五个方面给出了教育人工智能发展的建议：</p>\n<ul>\n<li>一、是进行理论的奠基，确定价值观、战略方向，做好顶层设计；</li>\n<li>二、是提升人类的人工智能核心素养，从而使师生能正确驾驭智能工具；</li>\n<li>三、是完善技术应用的监管，保持人工智能的向善性，使技术能够更好地为人服务；</li>\n<li>四、是考虑技术和教育深度融合的伦理问题，更好地做到人机共融；</li>\n<li>五、是落实相关标准，比如教育人工智能的算法描述信息、安全描述框架、伦理审查规范。</li>\n</ul>\n</blockquote>\n<h3 id=\"IT行业\"><a href=\"#IT行业\" class=\"headerlink\" title=\"IT行业\"></a>IT行业</h3><p>网络已经有很多人利用chatgpt去生成代码甚至正式上线，那么是否会代替程序员，或者以后程序员已经如何学习发展？</p>\n<p>这里引用知乎上的一个问答<a href=\"https://www.zhihu.com/question/570403406\" target=\"_blank\" rel=\"noopener\">OpenAI 的超级对话模型 ChatGPT 会导致程序员大规模失业吗？</a>，总结一下精彩回答：</p>\n<blockquote>\n<ul>\n<li>chatgpt作为一个管家型查找，把喂到你嘴里这个功能发挥到了极致。</li>\n<li>chatgpt给出的代码实现和”背题家”也出奇的相似</li>\n<li>chatGPT最多能看作一个助手, 对于广大程序员来说是一个不错的辅助工具</li>\n<li>AI的发展已经明确告诉你了，不要卷细节上的东西，提升核心竞争力，就是你的解决问题的思路</li>\n<li>没有思想的人才是最快被取代的</li>\n<li>ChatGPT 又来了，这次我是什么感觉呢？感觉真的 Google 和 StackOverflow 已经不好用了</li>\n<li>借助 Copilot 和 ChatGPT，程序员的自我感觉更棒了！可以更加肆无忌惮地在未知领域里自由探索了！</li>\n</ul>\n</blockquote>\n<h3 id=\"其他行业\"><a href=\"#其他行业\" class=\"headerlink\" title=\"其他行业\"></a>其他行业</h3><p>引用知乎上的问答<a href=\"https://www.zhihu.com/question/582809884/answer/2883146417\" target=\"_blank\" rel=\"noopener\">ChatGPT 会取代人的哪些工作？哪些人群的职业规划需要转变？</a>，总结一下精彩回答：</p>\n<blockquote>\n<ul>\n<li>内容行业：文字+图像处理效率的提升，更加庞大的内容生态也有了存在的基础，推动芯片和硬件的提升，从而实现更宏大的数字世界</li>\n<li>游戏行业：npc会和你流畅的对话，黄油里面可以根据你的xp来叫主人或者变态，新的需求会生成，也催生新的经济形态</li>\n<li>这将是人工智能诞生以来，人类的工作第一次真正接近被大规模替代的时点——不是部分工作被替代，而是大规模被替代的开始。</li>\n<li>ChatGPT的商业模式，可能不会像搜索那样依赖广告，难以出现大规模的2C级应用，而更可能是2B，主要运用于工作场景</li>\n<li>会提问题的人将是最后的赢家，可以让你的工作不但不会被AI取代，反而创造了全新的工作方式</li>\n</ul>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>第一篇关于ChatGPT的了解就先写到这里，作为AI小白，我们可以学习到：</p>\n<ul>\n<li>AI模型是的训练过程：确定模型&gt;准备数据&gt;训练模型&gt;调整模型&gt;部署模型</li>\n<li>ChatGPT的实质定义，利用互联网的资料训练<code>GPT-3.5模型</code>而成的一个对话式的语言模型</li>\n<li>ChatGPT的出现可能带来的改变，可以将某些行业岗位的价值重新定义，但是却能提高更多岗位的工作效率和价值，从而提升整个社会运转速度</li>\n</ul>\n<p>最后，问ChatGPT我能从你这里学到什么？如下图：</p>\n<p><img src=\"/assets/img/20230216-3.png\" alt></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://support.huaweicloud.com/productdesc-modelarts/modelarts_01_0010.html\" target=\"_blank\" rel=\"noopener\">华为 AI开发基本流程介绍</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/azure/architecture/data-guide/big-data/ai-overview\" target=\"_blank\" rel=\"noopener\">谷歌 人工智能 (AI) 体系结构设计</a></li>\n<li><a href=\"https://www.8btc.com/article/6791988\" target=\"_blank\" rel=\"noopener\">ChatGPT的崛起：从GPT-1到GPT-3，AIGC时代即将到来</a></li>\n<li><a href=\"https://github.com/BlinkDL/ChatRWKV\" target=\"_blank\" rel=\"noopener\">自己搭建chatpt</a></li>\n<li><a href=\"https://gpt3demo.com/\" target=\"_blank\" rel=\"noopener\">GPT-3 demo应用收集</a></li>\n<li><a href=\"http://edu.china.com.cn/2023-02/15/content_85106877.htm\" target=\"_blank\" rel=\"noopener\">用ChatGPT写作业会毁了孩子的学业吗？</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近<code>chatgpt</code>智能对答火的一塌涂地，就是你找<code>chatgpt</code>咨询，它不仅能理解你的意思，还能给出准确的答案，而且能够从上下文理解你的意思。</p>\n<p>简单的说，就不再是之前的智能对答，如果遇到不理解的问题回复【我好像不太理解你的问题】。</p>\n<p>更有甚者，利用chatgpt完成论文编写，同时还有帮小孩子写作业、程序员利用它整理某个业务的实现思路，作者利用其帮忙写小说细节等等。</p>\n<p>我尝试问了一些常规问题，如下图所示，可以更好的理解<code>chatgpt</code>的能力。</p>\n<ol>\n<li><p>如何以<code>Nest.js</code>框架实现用户登录功能</p>","more":"<p><img src=\"/assets/img/20230216-1.jpeg\" alt></p>\n</li>\n<li><p>直接将高考作文题要求放入，如下：</p>\n<blockquote>\n<p>请以“像一道闪电”为题目，写一段抒情文字或一首小诗。要求：感情真挚，语言生动，有感染力。要求800字。 —— 2022年北京卷</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/assets/img/20230216-2.png\" alt></p>\n<p>因此，作为程序员，没有理由不去深入且完整的了解它，故而有这篇小白科普文。</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>为了更好的了解后面的内容，我们需要提前对一些知识概念了解一下。</p>\n<h2 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h2><blockquote>\n<p>人工智能 (AI) 是计算机模拟人类智能行为的功能。 通过 AI，计算机可以分析图像、理解语音、以自然方式交互，以及使用数据进行预测。</p>\n</blockquote>\n<p>目前AI开发流程分为：</p>\n<ol>\n<li>确定目的模型，AI最终是用来做什么，如：图像识别、语言识别等</li>\n<li>准备训练数据，收集和预处理数据，如：要识别一只猫，可能需要几十万张不同猫的图片</li>\n<li>训练模型，也叫建模，通过各种算法、方法和技巧去创建，最终输出模型，如：从不同图片中去识别猫的，需要写算法、然后标注结果是否准确，这里的模型你可以理解成“只会识别猫的眼睛”</li>\n<li>评估模型，反复的调整算法参数、数据，不断评估训练生成的模型，最终得到满意的模型，如：告诉【眼睛模型】哪些图片是猫，哪些图片不是猫，猫的特征有什么，直到【眼睛模型】可以识别出所有的猫的图片和不是猫的图片</li>\n<li>部署模型，将模型应用到正式的实际数据或新产生数据中，进行预测、评价，如：把【眼睛模型】去接触真实世界，看到一些真实猫图片或视频</li>\n</ol>\n<p>总结来说，AI就是可以模拟人的部分行为，如上文举例所说的【眼睛模型】，就是实现人类眼睛可以识别猫的功能，扩展开来就是可以充当人的眼睛去识别万物。</p>\n<p>当然有些更加智能的模型可以重复2/3/4三个步骤让自己变得更加完善（这也叫【无监督模型或自监督模型】）。</p>\n<h2 id=\"语言模型\"><a href=\"#语言模型\" class=\"headerlink\" title=\"语言模型\"></a>语言模型</h2><p>从前面了解到【模型】的概念，从通俗的理解模型是一个模仿人类某个功能，从技术上讲模型是一段算法代码。</p>\n<p>因此语言模型从这两个方面来说：</p>\n<ul>\n<li>许多自然语言处理方面的应用，如：语音识别[1]，机器翻译[2]，词性标注，句法分析[3]，手写体识别[4]和资讯检索</li>\n<li>从技术上来讲，是一个概率分布的算法</li>\n</ul>\n<p>我们对语言模型可以理解成，一个能够识别自然语言（包括语音，语义识别等）的算法模型即可。</p>\n<p>常用的语言模型算法有以下几种：</p>\n<ul>\n<li>ELMo 华盛顿大学提出的算法 </li>\n<li>GPT OpenAI提出的算法</li>\n<li>BERT Google提出的算法</li>\n</ul>\n<h2 id=\"GPT\"><a href=\"#GPT\" class=\"headerlink\" title=\"GPT\"></a>GPT</h2><blockquote>\n<p>Generative Pre-trained Transformer (GPT)，是一种基于互联网可用数据训练的文本生成深度学习模型。</p>\n</blockquote>\n<p>GPT的整个发展过程分为：</p>\n<ul>\n<li>GPT-1，有一定的泛化能力，能够用于和监督任务无关的 NLP 任务，如：自然语言推理：判断两个句子的关系；问答与常识推理：输入文章及若干答案，输出答案的准确率等</li>\n<li>GPT-2，使用无监督预训练模型做有监督任务，比GTP-1拥有更加强大能力，能阅读摘要、聊天、续写、编故事，甚至生成假新闻等，甚至可以假扮网络角色进行会话聊天，如：微软的小冰。</li>\n<li>GPT-3，作为一个无监督模型，几乎可以完成自然语言处理的绝大部分任务，如面向问题的搜索、阅读理解、语义推断、机器翻译、文章生成和自动问答等等。</li>\n<li>GPT3.5，是一系列模型，使用<code>人类反馈强化学习(RLHF)</code>，与<code>GPT-3</code>最大的区别在使用互联网的资料直接训练。</li>\n<li>GPT-4，针对GPT-3不分青红皂白和质量好坏地对网络上的所有文本进行学习，进而生产出错误的、恶意冒犯的、甚至是攻击性的语言输出的缺陷，而准备提出新的升级模型。</li>\n</ul>\n<p><strong>一个无监督模型功能多效果好，似乎让人们看到了通用人工智能的希望，可能这就是 GPT-3 影响如此之大的主要原因。</strong></p>\n<p>有了这些概念性的知识后，我们就可以开始认识<code>ChatGPT</code>。</p>\n<h1 id=\"ChatGPT\"><a href=\"#ChatGPT\" class=\"headerlink\" title=\"ChatGPT\"></a>ChatGPT</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>在官网上定义如下：</p>\n<blockquote>\n<p>ChatGPT: 专门针对对话而优化的语言模型。同时已经训练了一个名为ChatGPT的模型，它以对话的方式进行交互。对话形式使ChatGPT能够回答后续问题，承认错误，挑战不正确的前提，拒绝不适当的请求。ChatGPT是InstructGPT的兄弟模型，InstructGPT被训练为遵循提示中的说明并提供详细的响应。 —— <a href=\"https://openai.com/blog/chatgpt/\" target=\"_blank\" rel=\"noopener\">ChatGPT官网</a></p>\n</blockquote>\n<p>按照我所理解来说，ChatGPT是：</p>\n<ul>\n<li>一个基于<code>GPT-3.5系列模型</code> + <code>人类反馈强化学习(RLHF)</code>实现的语言模型</li>\n<li>一个可以正常对话聊天、自动纠正错误的智能对话机器人(快速，而不需要等待太长时间)</li>\n<li>一个链接互联网所有公开信息，能检索到所有信息和总结的智能搜索引擎</li>\n<li>一个可以辅助你实现相关工作（如：作业，代码，论文等）的智能工具</li>\n</ul>\n<p><strong><a href=\"https://openai.com/blog/instruction-following/\" target=\"_blank\" rel=\"noopener\">InstructGPT</a> VS ChatGPT</strong></p>\n<ul>\n<li>两者都是基于<code>GPT-3.5系列模型</code>做调整的语言模型</li>\n<li><code>InstructGPT</code>是一个问题就一个回答，如果回答不正确就调整， <code>ChatGPT</code>则是一个问题就多个回答，然后学习将这些回答进行排序</li>\n</ul>\n<p>如何使用：</p>\n<p>其实如果可以直接访问<a href=\"https://chat.openai.com/\" target=\"_blank\" rel=\"noopener\">ChatGPT官网</a>就可以直接用，国内也有很多插件可以使用。</p>\n<h2 id=\"影响什么\"><a href=\"#影响什么\" class=\"headerlink\" title=\"影响什么\"></a>影响什么</h2><p>ChatGPT的火爆是AI多年沉淀的一次技术爆发，距离上一次AI技术的热点新闻还是在谷歌的阿尔法狗战胜世界围棋冠军李世石（2016年）。</p>\n<p>我们可以先收集一下目前使用AI技术的一些场景：</p>\n<ul>\n<li>各种识别，人脸、指纹等</li>\n<li>智能辅助驾驶</li>\n<li>各种转义，如：语音转文字，文字转语音， 翻译等</li>\n<li>各种语音助手，如：Siri，小爱同学等</li>\n</ul>\n<p>其实，AI在我们生活中已经随处可见，只是有时候我们觉得这些功能还是比较属于机器范围内的，如有时候小爱同学会说“我没听清楚你的问题”这种明显非智能回答，给我们造成一种认知觉得AI很傻。</p>\n<p>因此，ChatGPT的火爆之处在于：它真的可以像一个人类给予你想要的回答，更加准确的说，它是一个负责任的智能AI，能竭尽所能的给你想要的答案。</p>\n<p>接下来，我从网上搜索了一些资料，从几个行业讲一下它可能会带来的影响。</p>\n<h3 id=\"教育行业\"><a href=\"#教育行业\" class=\"headerlink\" title=\"教育行业\"></a>教育行业</h3><p>其实最大的担心就是，大家利用chatgpt去写作业或论文，尤其是学龄前儿童和中小学阶段，正是属于知识探索期，chatgpt是否会影响学生的学习吗？</p>\n<p>这里引用一段话，针对国内的，吴永和教授的一个观点：</p>\n<blockquote>\n<p>面向未来，作为承担2021年度国家社会科学基金重大项目“面向未成年人的人工智能技术规范研究”的首席专家，吴永和从五个方面给出了教育人工智能发展的建议：</p>\n<ul>\n<li>一、是进行理论的奠基，确定价值观、战略方向，做好顶层设计；</li>\n<li>二、是提升人类的人工智能核心素养，从而使师生能正确驾驭智能工具；</li>\n<li>三、是完善技术应用的监管，保持人工智能的向善性，使技术能够更好地为人服务；</li>\n<li>四、是考虑技术和教育深度融合的伦理问题，更好地做到人机共融；</li>\n<li>五、是落实相关标准，比如教育人工智能的算法描述信息、安全描述框架、伦理审查规范。</li>\n</ul>\n</blockquote>\n<h3 id=\"IT行业\"><a href=\"#IT行业\" class=\"headerlink\" title=\"IT行业\"></a>IT行业</h3><p>网络已经有很多人利用chatgpt去生成代码甚至正式上线，那么是否会代替程序员，或者以后程序员已经如何学习发展？</p>\n<p>这里引用知乎上的一个问答<a href=\"https://www.zhihu.com/question/570403406\" target=\"_blank\" rel=\"noopener\">OpenAI 的超级对话模型 ChatGPT 会导致程序员大规模失业吗？</a>，总结一下精彩回答：</p>\n<blockquote>\n<ul>\n<li>chatgpt作为一个管家型查找，把喂到你嘴里这个功能发挥到了极致。</li>\n<li>chatgpt给出的代码实现和”背题家”也出奇的相似</li>\n<li>chatGPT最多能看作一个助手, 对于广大程序员来说是一个不错的辅助工具</li>\n<li>AI的发展已经明确告诉你了，不要卷细节上的东西，提升核心竞争力，就是你的解决问题的思路</li>\n<li>没有思想的人才是最快被取代的</li>\n<li>ChatGPT 又来了，这次我是什么感觉呢？感觉真的 Google 和 StackOverflow 已经不好用了</li>\n<li>借助 Copilot 和 ChatGPT，程序员的自我感觉更棒了！可以更加肆无忌惮地在未知领域里自由探索了！</li>\n</ul>\n</blockquote>\n<h3 id=\"其他行业\"><a href=\"#其他行业\" class=\"headerlink\" title=\"其他行业\"></a>其他行业</h3><p>引用知乎上的问答<a href=\"https://www.zhihu.com/question/582809884/answer/2883146417\" target=\"_blank\" rel=\"noopener\">ChatGPT 会取代人的哪些工作？哪些人群的职业规划需要转变？</a>，总结一下精彩回答：</p>\n<blockquote>\n<ul>\n<li>内容行业：文字+图像处理效率的提升，更加庞大的内容生态也有了存在的基础，推动芯片和硬件的提升，从而实现更宏大的数字世界</li>\n<li>游戏行业：npc会和你流畅的对话，黄油里面可以根据你的xp来叫主人或者变态，新的需求会生成，也催生新的经济形态</li>\n<li>这将是人工智能诞生以来，人类的工作第一次真正接近被大规模替代的时点——不是部分工作被替代，而是大规模被替代的开始。</li>\n<li>ChatGPT的商业模式，可能不会像搜索那样依赖广告，难以出现大规模的2C级应用，而更可能是2B，主要运用于工作场景</li>\n<li>会提问题的人将是最后的赢家，可以让你的工作不但不会被AI取代，反而创造了全新的工作方式</li>\n</ul>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>第一篇关于ChatGPT的了解就先写到这里，作为AI小白，我们可以学习到：</p>\n<ul>\n<li>AI模型是的训练过程：确定模型&gt;准备数据&gt;训练模型&gt;调整模型&gt;部署模型</li>\n<li>ChatGPT的实质定义，利用互联网的资料训练<code>GPT-3.5模型</code>而成的一个对话式的语言模型</li>\n<li>ChatGPT的出现可能带来的改变，可以将某些行业岗位的价值重新定义，但是却能提高更多岗位的工作效率和价值，从而提升整个社会运转速度</li>\n</ul>\n<p>最后，问ChatGPT我能从你这里学到什么？如下图：</p>\n<p><img src=\"/assets/img/20230216-3.png\" alt></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://support.huaweicloud.com/productdesc-modelarts/modelarts_01_0010.html\" target=\"_blank\" rel=\"noopener\">华为 AI开发基本流程介绍</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-cn/azure/architecture/data-guide/big-data/ai-overview\" target=\"_blank\" rel=\"noopener\">谷歌 人工智能 (AI) 体系结构设计</a></li>\n<li><a href=\"https://www.8btc.com/article/6791988\" target=\"_blank\" rel=\"noopener\">ChatGPT的崛起：从GPT-1到GPT-3，AIGC时代即将到来</a></li>\n<li><a href=\"https://github.com/BlinkDL/ChatRWKV\" target=\"_blank\" rel=\"noopener\">自己搭建chatpt</a></li>\n<li><a href=\"https://gpt3demo.com/\" target=\"_blank\" rel=\"noopener\">GPT-3 demo应用收集</a></li>\n<li><a href=\"http://edu.china.com.cn/2023-02/15/content_85106877.htm\" target=\"_blank\" rel=\"noopener\">用ChatGPT写作业会毁了孩子的学业吗？</a></li>\n</ul>"},{"title":"从微前端到模块联邦","date":"2023-02-17T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n\n# 参考资料\n\n[模块联邦在微前端架构中的实践](https://mp.weixin.qq.com/s/8vfTp-FZbYNk2k8gCIGc8w)","source":"_posts/today/20230217.md","raw":"---\ntitle: 从微前端到模块联邦\ndate: 2023-02-17 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n\n# 参考资料\n\n[模块联邦在微前端架构中的实践](https://mp.weixin.qq.com/s/8vfTp-FZbYNk2k8gCIGc8w)","slug":"today/20230217","published":1,"updated":"2023-02-22T11:37:34.740Z","_id":"cldzxioec0036nxpccvkufwhz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s/8vfTp-FZbYNk2k8gCIGc8w\" target=\"_blank\" rel=\"noopener\">模块联邦在微前端架构中的实践</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s/8vfTp-FZbYNk2k8gCIGc8w\" target=\"_blank\" rel=\"noopener\">模块联邦在微前端架构中的实践</a></p>\n"},{"title":"通过 JS 构建我们自己的 JS 解释器","date":"2023-01-06T10:00:01.000Z","toc":true,"_content":"\n\n# 参考资料\n\n[giao-js](https://segmentfault.com/a/1190000038252581re)","source":"_posts/today/20230218.md","raw":"---\ntitle: 通过 JS 构建我们自己的 JS 解释器\ndate: 2023-01-06 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n\n# 参考资料\n\n[giao-js](https://segmentfault.com/a/1190000038252581re)","slug":"today/20230218","published":1,"updated":"2023-02-08T13:35:03.070Z","_id":"cldzxj1z80039nxpclollwgzp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://segmentfault.com/a/1190000038252581re\" target=\"_blank\" rel=\"noopener\">giao-js</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://segmentfault.com/a/1190000038252581re\" target=\"_blank\" rel=\"noopener\">giao-js</a></p>\n"},{"title":"低代码系列——介绍","date":"2023-01-22T13:51:01.000Z","toc":true,"top":10,"_content":"\n# 系列文章\n\n- [《低代码系列——js沙箱设计》](/lowcode/sandbox.html)\n- [《低代码系列——组件描述DSL》(编写中)](/lowcode/component.html)\n\n# 低代码\n\n## 是什么\n\n低代码，可以理解成开发人员为了快速完成页面开发而搭建一个快速构建页面平台，里面一般包括几个功能点：\n\n- 无需写代码即可完成页面UI布局\n- 支持页面进行二次代码开发\n- 支持页面或系统级别的导出或部署发布\n\n简单的说，就是快速、稳定的输出开发所需要的页面，减少重复性劳动，提高开发效率。\n\n<!-- more -->\n\n## 实现方式\n\n目前市面的低代码的实现方式主要有几种：\n\n国内开源目前还在维护更新的：\n\n- [百度 amis](https://github.com/baidu/amis)  前端低代码框架，通过 JSON 配置就能生成各种页面。\n- [阿里 lowcode engine](https://github.com/alibaba/lowcode-engine) 低代码引擎\n- [阿里 formilyjs](https://formilyjs.org/) 表单编辑器\n- [华炎魔方](https://github.com/steedos/steedos-platform/) 数据驱动低代码平台\n- [OpenDataV ](https://github.com/AnsGoo/openDataV)  纯前端的拖拽式、可视化、低代码数据可视化\n- [mall-cook](https://github.com/wangyuan389/mall-cook) 商城低代码平台，可视化搭建H5、小程序多端商城\n- [nocobase](https://github.com/nocobase/nocobase) 一个可伸缩性优先的开源无代码/低代码平台，用于构建内部工具\n\n虽然有些项目不维护了，但是值得借鉴：\n- [imove 逻辑编排器](https://github.com/i5ting/imove) \n\n值得阅读一些文章\n\n- [AI驱动的无代码平台--如何使用chat GPT抽象域语言](https://medium.com/@andreasmuelder/ai-powered-low-code-platform-by-example-how-to-use-chatgpt-to-abstract-from-domain-languages-625c3abf0e49)\n\n以上数据来源：\n[github/awesome-lowcode 国内低代码平台从业者交流](https://github.com/taowen/awesome-lowcode)\n\n\n## 资料收集\n\n\n### 组件中心相关\n\n[如何设计可视化搭建平台的组件商店？](https://juejin.cn/post/6986824393653485605)\n[浅谈低代码平台远程组件加载方案](https://juejin.cn/post/7127440050937151525)\n\n### 拖拽相关\n[可视化拖拽组件库一些技术要点原理分析](https://juejin.cn/post/6908502083075325959)\n[可视化拖拽组件库一些技术要点原理分析（二）](https://juejin.cn/post/6918881497264947207)\n[可视化拖拽组件库一些技术要点原理分析（三）](https://juejin.cn/post/6929302655118344200)\n[可视化拖拽组件库一些技术要点原理分析（四）](https://juejin.cn/post/7129311619963682830)\n\n# 架构设计\n\n## 架构图\n\n{% diagramsnet \"/assets/drawio/lowcode.drawio\" %}\n\n## 模块设计\n{% pullquote mindmap mindmap-md %}\n- 低代码平台\n  - 核心模块\n    - 编辑器\n    - 编译引擎\n  - 平台能力\n    - 管理能力\n      - 系统\n      - 页面\n    - 版本控制\n      - 页面版本控制\n      - 页面发布流程\n    - 权限登录\n      - 登录\n      - 权限\n{% endpullquote %}\n\n## 编辑器设计\n\n{% pullquote mindmap mindmap-md %}\n- 编辑器\n  - 组件描述\n    - DSL\n  - 画布布局\n  - 拖拽\n  - 组件快速引入\n    - 组件引入插件\n{% endpullquote %}\n\n## 编译引擎\n","source":"_posts/lowcode/index.md","raw":"---\ntitle: 低代码系列——介绍\ndate: 2023-01-22 21:51:01\ntoc: true\ntags:\n    - 技术分享\n    - 低代码\ntop: 10\n---\n\n# 系列文章\n\n- [《低代码系列——js沙箱设计》](/lowcode/sandbox.html)\n- [《低代码系列——组件描述DSL》(编写中)](/lowcode/component.html)\n\n# 低代码\n\n## 是什么\n\n低代码，可以理解成开发人员为了快速完成页面开发而搭建一个快速构建页面平台，里面一般包括几个功能点：\n\n- 无需写代码即可完成页面UI布局\n- 支持页面进行二次代码开发\n- 支持页面或系统级别的导出或部署发布\n\n简单的说，就是快速、稳定的输出开发所需要的页面，减少重复性劳动，提高开发效率。\n\n<!-- more -->\n\n## 实现方式\n\n目前市面的低代码的实现方式主要有几种：\n\n国内开源目前还在维护更新的：\n\n- [百度 amis](https://github.com/baidu/amis)  前端低代码框架，通过 JSON 配置就能生成各种页面。\n- [阿里 lowcode engine](https://github.com/alibaba/lowcode-engine) 低代码引擎\n- [阿里 formilyjs](https://formilyjs.org/) 表单编辑器\n- [华炎魔方](https://github.com/steedos/steedos-platform/) 数据驱动低代码平台\n- [OpenDataV ](https://github.com/AnsGoo/openDataV)  纯前端的拖拽式、可视化、低代码数据可视化\n- [mall-cook](https://github.com/wangyuan389/mall-cook) 商城低代码平台，可视化搭建H5、小程序多端商城\n- [nocobase](https://github.com/nocobase/nocobase) 一个可伸缩性优先的开源无代码/低代码平台，用于构建内部工具\n\n虽然有些项目不维护了，但是值得借鉴：\n- [imove 逻辑编排器](https://github.com/i5ting/imove) \n\n值得阅读一些文章\n\n- [AI驱动的无代码平台--如何使用chat GPT抽象域语言](https://medium.com/@andreasmuelder/ai-powered-low-code-platform-by-example-how-to-use-chatgpt-to-abstract-from-domain-languages-625c3abf0e49)\n\n以上数据来源：\n[github/awesome-lowcode 国内低代码平台从业者交流](https://github.com/taowen/awesome-lowcode)\n\n\n## 资料收集\n\n\n### 组件中心相关\n\n[如何设计可视化搭建平台的组件商店？](https://juejin.cn/post/6986824393653485605)\n[浅谈低代码平台远程组件加载方案](https://juejin.cn/post/7127440050937151525)\n\n### 拖拽相关\n[可视化拖拽组件库一些技术要点原理分析](https://juejin.cn/post/6908502083075325959)\n[可视化拖拽组件库一些技术要点原理分析（二）](https://juejin.cn/post/6918881497264947207)\n[可视化拖拽组件库一些技术要点原理分析（三）](https://juejin.cn/post/6929302655118344200)\n[可视化拖拽组件库一些技术要点原理分析（四）](https://juejin.cn/post/7129311619963682830)\n\n# 架构设计\n\n## 架构图\n\n{% diagramsnet \"/assets/drawio/lowcode.drawio\" %}\n\n## 模块设计\n{% pullquote mindmap mindmap-md %}\n- 低代码平台\n  - 核心模块\n    - 编辑器\n    - 编译引擎\n  - 平台能力\n    - 管理能力\n      - 系统\n      - 页面\n    - 版本控制\n      - 页面版本控制\n      - 页面发布流程\n    - 权限登录\n      - 登录\n      - 权限\n{% endpullquote %}\n\n## 编辑器设计\n\n{% pullquote mindmap mindmap-md %}\n- 编辑器\n  - 组件描述\n    - DSL\n  - 画布布局\n  - 拖拽\n  - 组件快速引入\n    - 组件引入插件\n{% endpullquote %}\n\n## 编译引擎\n","slug":"lowcode/index","published":1,"updated":"2023-02-18T13:49:08.982Z","_id":"cldzxn4j6003cnxpc37zmn224","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"系列文章\"><a href=\"#系列文章\" class=\"headerlink\" title=\"系列文章\"></a>系列文章</h1><ul>\n<li><a href=\"/lowcode/sandbox.html\">《低代码系列——js沙箱设计》</a></li>\n<li><a href=\"/lowcode/component.html\">《低代码系列——组件描述DSL》(编写中)</a></li>\n</ul>\n<h1 id=\"低代码\"><a href=\"#低代码\" class=\"headerlink\" title=\"低代码\"></a>低代码</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>低代码，可以理解成开发人员为了快速完成页面开发而搭建一个快速构建页面平台，里面一般包括几个功能点：</p>\n<ul>\n<li>无需写代码即可完成页面UI布局</li>\n<li>支持页面进行二次代码开发</li>\n<li>支持页面或系统级别的导出或部署发布</li>\n</ul>\n<p>简单的说，就是快速、稳定的输出开发所需要的页面，减少重复性劳动，提高开发效率。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>目前市面的低代码的实现方式主要有几种：</p>\n<p>国内开源目前还在维护更新的：</p>\n<ul>\n<li><a href=\"https://github.com/baidu/amis\" target=\"_blank\" rel=\"noopener\">百度 amis</a>  前端低代码框架，通过 JSON 配置就能生成各种页面。</li>\n<li><a href=\"https://github.com/alibaba/lowcode-engine\" target=\"_blank\" rel=\"noopener\">阿里 lowcode engine</a> 低代码引擎</li>\n<li><a href=\"https://formilyjs.org/\" target=\"_blank\" rel=\"noopener\">阿里 formilyjs</a> 表单编辑器</li>\n<li><a href=\"https://github.com/steedos/steedos-platform/\" target=\"_blank\" rel=\"noopener\">华炎魔方</a> 数据驱动低代码平台</li>\n<li><a href=\"https://github.com/AnsGoo/openDataV\" target=\"_blank\" rel=\"noopener\">OpenDataV </a>  纯前端的拖拽式、可视化、低代码数据可视化</li>\n<li><a href=\"https://github.com/wangyuan389/mall-cook\" target=\"_blank\" rel=\"noopener\">mall-cook</a> 商城低代码平台，可视化搭建H5、小程序多端商城</li>\n<li><a href=\"https://github.com/nocobase/nocobase\" target=\"_blank\" rel=\"noopener\">nocobase</a> 一个可伸缩性优先的开源无代码/低代码平台，用于构建内部工具</li>\n</ul>\n<p>虽然有些项目不维护了，但是值得借鉴：</p>\n<ul>\n<li><a href=\"https://github.com/i5ting/imove\" target=\"_blank\" rel=\"noopener\">imove 逻辑编排器</a> </li>\n</ul>\n<p>值得阅读一些文章</p>\n<ul>\n<li><a href=\"https://medium.com/@andreasmuelder/ai-powered-low-code-platform-by-example-how-to-use-chatgpt-to-abstract-from-domain-languages-625c3abf0e49\" target=\"_blank\" rel=\"noopener\">AI驱动的无代码平台–如何使用chat GPT抽象域语言</a></li>\n</ul>\n<p>以上数据来源：<br><a href=\"https://github.com/taowen/awesome-lowcode\" target=\"_blank\" rel=\"noopener\">github/awesome-lowcode 国内低代码平台从业者交流</a></p>\n<h2 id=\"资料收集\"><a href=\"#资料收集\" class=\"headerlink\" title=\"资料收集\"></a>资料收集</h2><h3 id=\"组件中心相关\"><a href=\"#组件中心相关\" class=\"headerlink\" title=\"组件中心相关\"></a>组件中心相关</h3><p><a href=\"https://juejin.cn/post/6986824393653485605\" target=\"_blank\" rel=\"noopener\">如何设计可视化搭建平台的组件商店？</a><br><a href=\"https://juejin.cn/post/7127440050937151525\" target=\"_blank\" rel=\"noopener\">浅谈低代码平台远程组件加载方案</a></p>\n<h3 id=\"拖拽相关\"><a href=\"#拖拽相关\" class=\"headerlink\" title=\"拖拽相关\"></a>拖拽相关</h3><p><a href=\"https://juejin.cn/post/6908502083075325959\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析</a><br><a href=\"https://juejin.cn/post/6918881497264947207\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析（二）</a><br><a href=\"https://juejin.cn/post/6929302655118344200\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析（三）</a><br><a href=\"https://juejin.cn/post/7129311619963682830\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析（四）</a></p>\n<h1 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h1><h2 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h2>\n<div class=\"mxgraph-container\">\n    <div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/lowcode.drawio&quot;}\"></div>\n</div>\n\n\n<h2 id=\"模块设计\"><a href=\"#模块设计\" class=\"headerlink\" title=\"模块设计\"></a>模块设计</h2><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>低代码平台<ul>\n<li>核心模块<ul>\n<li>编辑器</li>\n<li>编译引擎</li>\n</ul>\n</li>\n<li>平台能力<ul>\n<li>管理能力<ul>\n<li>系统</li>\n<li>页面</li>\n</ul>\n</li>\n<li>版本控制<ul>\n<li>页面版本控制</li>\n<li>页面发布流程</li>\n</ul>\n</li>\n<li>权限登录<ul>\n<li>登录</li>\n<li>权限</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n\n<h2 id=\"编辑器设计\"><a href=\"#编辑器设计\" class=\"headerlink\" title=\"编辑器设计\"></a>编辑器设计</h2><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>编辑器<ul>\n<li>组件描述<ul>\n<li>DSL</li>\n</ul>\n</li>\n<li>画布布局</li>\n<li>拖拽</li>\n<li>组件快速引入<ul>\n<li>组件引入插件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n\n<h2 id=\"编译引擎\"><a href=\"#编译引擎\" class=\"headerlink\" title=\"编译引擎\"></a>编译引擎</h2><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"系列文章\"><a href=\"#系列文章\" class=\"headerlink\" title=\"系列文章\"></a>系列文章</h1><ul>\n<li><a href=\"/lowcode/sandbox.html\">《低代码系列——js沙箱设计》</a></li>\n<li><a href=\"/lowcode/component.html\">《低代码系列——组件描述DSL》(编写中)</a></li>\n</ul>\n<h1 id=\"低代码\"><a href=\"#低代码\" class=\"headerlink\" title=\"低代码\"></a>低代码</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>低代码，可以理解成开发人员为了快速完成页面开发而搭建一个快速构建页面平台，里面一般包括几个功能点：</p>\n<ul>\n<li>无需写代码即可完成页面UI布局</li>\n<li>支持页面进行二次代码开发</li>\n<li>支持页面或系统级别的导出或部署发布</li>\n</ul>\n<p>简单的说，就是快速、稳定的输出开发所需要的页面，减少重复性劳动，提高开发效率。</p>","more":"<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>目前市面的低代码的实现方式主要有几种：</p>\n<p>国内开源目前还在维护更新的：</p>\n<ul>\n<li><a href=\"https://github.com/baidu/amis\" target=\"_blank\" rel=\"noopener\">百度 amis</a>  前端低代码框架，通过 JSON 配置就能生成各种页面。</li>\n<li><a href=\"https://github.com/alibaba/lowcode-engine\" target=\"_blank\" rel=\"noopener\">阿里 lowcode engine</a> 低代码引擎</li>\n<li><a href=\"https://formilyjs.org/\" target=\"_blank\" rel=\"noopener\">阿里 formilyjs</a> 表单编辑器</li>\n<li><a href=\"https://github.com/steedos/steedos-platform/\" target=\"_blank\" rel=\"noopener\">华炎魔方</a> 数据驱动低代码平台</li>\n<li><a href=\"https://github.com/AnsGoo/openDataV\" target=\"_blank\" rel=\"noopener\">OpenDataV </a>  纯前端的拖拽式、可视化、低代码数据可视化</li>\n<li><a href=\"https://github.com/wangyuan389/mall-cook\" target=\"_blank\" rel=\"noopener\">mall-cook</a> 商城低代码平台，可视化搭建H5、小程序多端商城</li>\n<li><a href=\"https://github.com/nocobase/nocobase\" target=\"_blank\" rel=\"noopener\">nocobase</a> 一个可伸缩性优先的开源无代码/低代码平台，用于构建内部工具</li>\n</ul>\n<p>虽然有些项目不维护了，但是值得借鉴：</p>\n<ul>\n<li><a href=\"https://github.com/i5ting/imove\" target=\"_blank\" rel=\"noopener\">imove 逻辑编排器</a> </li>\n</ul>\n<p>值得阅读一些文章</p>\n<ul>\n<li><a href=\"https://medium.com/@andreasmuelder/ai-powered-low-code-platform-by-example-how-to-use-chatgpt-to-abstract-from-domain-languages-625c3abf0e49\" target=\"_blank\" rel=\"noopener\">AI驱动的无代码平台–如何使用chat GPT抽象域语言</a></li>\n</ul>\n<p>以上数据来源：<br><a href=\"https://github.com/taowen/awesome-lowcode\" target=\"_blank\" rel=\"noopener\">github/awesome-lowcode 国内低代码平台从业者交流</a></p>\n<h2 id=\"资料收集\"><a href=\"#资料收集\" class=\"headerlink\" title=\"资料收集\"></a>资料收集</h2><h3 id=\"组件中心相关\"><a href=\"#组件中心相关\" class=\"headerlink\" title=\"组件中心相关\"></a>组件中心相关</h3><p><a href=\"https://juejin.cn/post/6986824393653485605\" target=\"_blank\" rel=\"noopener\">如何设计可视化搭建平台的组件商店？</a><br><a href=\"https://juejin.cn/post/7127440050937151525\" target=\"_blank\" rel=\"noopener\">浅谈低代码平台远程组件加载方案</a></p>\n<h3 id=\"拖拽相关\"><a href=\"#拖拽相关\" class=\"headerlink\" title=\"拖拽相关\"></a>拖拽相关</h3><p><a href=\"https://juejin.cn/post/6908502083075325959\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析</a><br><a href=\"https://juejin.cn/post/6918881497264947207\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析（二）</a><br><a href=\"https://juejin.cn/post/6929302655118344200\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析（三）</a><br><a href=\"https://juejin.cn/post/7129311619963682830\" target=\"_blank\" rel=\"noopener\">可视化拖拽组件库一些技术要点原理分析（四）</a></p>\n<h1 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h1><h2 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h2>\n<div class=\"mxgraph-container\">\n    <div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;lightbox&quot;:false,&quot;nav&quot;:true,&quot;resize&quot;:false,&quot;page&quot;:0,&quot;toolbar&quot;:&quot;lightbox zoom layers pages&quot;,&quot;url&quot;:&quot;/assets/drawio/lowcode.drawio&quot;}\"></div>\n</div>\n\n\n<h2 id=\"模块设计\"><a href=\"#模块设计\" class=\"headerlink\" title=\"模块设计\"></a>模块设计</h2><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>低代码平台<ul>\n<li>核心模块<ul>\n<li>编辑器</li>\n<li>编译引擎</li>\n</ul>\n</li>\n<li>平台能力<ul>\n<li>管理能力<ul>\n<li>系统</li>\n<li>页面</li>\n</ul>\n</li>\n<li>版本控制<ul>\n<li>页面版本控制</li>\n<li>页面发布流程</li>\n</ul>\n</li>\n<li>权限登录<ul>\n<li>登录</li>\n<li>权限</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n\n<h2 id=\"编辑器设计\"><a href=\"#编辑器设计\" class=\"headerlink\" title=\"编辑器设计\"></a>编辑器设计</h2><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>编辑器<ul>\n<li>组件描述<ul>\n<li>DSL</li>\n</ul>\n</li>\n<li>画布布局</li>\n<li>拖拽</li>\n<li>组件快速引入<ul>\n<li>组件引入插件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n\n<h2 id=\"编译引擎\"><a href=\"#编译引擎\" class=\"headerlink\" title=\"编译引擎\"></a>编译引擎</h2>"},{"title":"低代码系列——js沙箱设计","date":"2023-02-01T10:00:01.000Z","toc":true,"_content":"\n# 简介\n\n由于自己参与过低代码平台开发，所以希望能把我自己开发低代码中遇到的问题或者一些设计思路进行总结汇总，这是开始写的第一篇，也是比较基础的一篇，关于低代码平台的介绍会放在介绍篇章，这篇就不做过多介绍。\n\n这里为什么会一开始介绍js沙箱设计呢？\n\n因为低代码平台，会运行用户本身自己编写的业务逻辑代码，这里就需要平台去运行用户写的js代码，但是js代码保存到数据库是一个字符串，那么平台应该怎么运行呢？\n\n答案是js沙箱，那么如何设计一个沙箱呢？按照低代码平台的需要特性，主要以下几方面：\n\n- 隔离，隔离是为了保证当前执行代码不影响整个平台的代码\n- 插入，沙箱允许插入平台的内置对象\n- 容错，沙箱内代码即使有错误，也不影响整个平台执行\n\n<!-- more -->\n# 沙箱\n在设计沙箱之前，我们先对沙箱有个了解：\n\n> 在计算机安全中，沙箱（Sandbox）是一种用于隔离正在运行程序的安全机制，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境，内部程序的执行不会影响到外部程序的运行。\n\n通俗的讲，就是由我们主程序自己设定一个区域，用来执行代码，且这段代码如何执行都不会影响到外部的主程序。\n\n举几个我们开发中经常会用的沙箱：\n\n- Vue template里的表达式，如: `<div>{{ 1+1 }}</div>`，执行`1+1`就是Vue设计的一个沙箱机制\n- 开发Chrome插件，插件里的代码有很多限制条件，循序Chrome插件规则，那么插件的运行环境和规则也是一个沙箱\n- 在线代码编辑器， CodeSanbox在执行脚本也会单独成立一个沙箱去隔离执行代码，防止代码访问或影响主页面\n- 微前端`qiangun`或`single-spa `框架里主应用和子应用之间的完全隔离，也是一种沙箱机制，如: 应用之间CSS样式不能互相影响\n\n在了解完沙箱是什么后，那么在JavaScript语言里如何实现沙箱呢？主要有以下几种方式：\n\n- 使用 with 声明\n- 使用 new Function 声明\n- 基于 Proxy实现\n- 基于属性 diff实现\n- 基于 iframe实现\n- 基于 ES 提案 ShadowRealm API\n\n# 前置知识\n\n## with关键字\n\n> with 扩展一个语句的作用域链。 —— [MDN with](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with)\n> JavaScript 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 context 或者包含这个变量的函数有关。'with'语句将某个对象添加到作用域链的顶部，如果在 statement 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。\n\n按照个人比较容易理解的意思，就是给一段代码加上指定对象为该作用的全局变量。示例代码如下：\n\n```js\n\nMath.floor(1.1) // 1\n\n// 使用with\nwith(Math){\n    floor(1.1) // 1\n}\n```\n\n## new Function\n`new Function(argStr, codeStr)`是能将字符串代码转换为可执行的函数。具体示例如下：\n\n```js\nconst name = 'test';\n\nconst test = new Function('arg', 'console.log(arg)');\n// 这里等于 test = (arg)=> {console.log(arg)};\n\ntest(name); // test\n\n```\n\n## Proxy\n\n> Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。[Proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n\nProxy只能代理`object`类型的变量，针对基础类型的代理只能将其封装到对象里再进行代理监听。\n\nProxy代理方法如下：\n\n- `getPrototypeOf(target)` 代理获取原型的方法\n- `setPrototypeOf(target, newProto)` 设置原型，如果不想设置原型，可以`return false`\n- `isExtensible(target)`  拦截对对象的 `Object.isExtensible()`，必须返回一个 Boolean 值，判断一个对象是否是可扩展的\n- `preventExtensions(target)` 拦截`Object.preventExtensions()`，让一个对象变的不可扩展，也就是永远不能再添加新的属性\n- `getOwnPropertyDescriptor(target, prop)` 拦截`Object.getOwnPropertyDescriptor()`，拦截获取对象属性的描述符\n- `defineProperty(target, property, descriptor)` 拦截`Object.defineProperty()`\n- `has(target, key)`，针对 in 操作符的代理方法\n- `get(target, property, receiver)`，用于拦截对象的读取属性操作\n- `set()`，设置属性值操作的捕获器。\n- `construct()`，用于拦截 new 操作符\n\n与`Object.defineProperty`主要区别(可拦截方法比`Object.defineProperty`多)：\n\n- Proxy代理的是整个对象，Object.defineProperty只代理对象上的某个属性,如果是多层嵌套的数据需要循环递归绑定;\n- 对象上定义新属性时，Proxy可以监听到，Object.defineProperty监听不到，需要借助$set方法;\n- 数组的某些方法(push、unshift和splice)Object.defineProperty监听不到，Proxy可以监听到;\n\n## Symbol.unscopables\n\n> 指用于指定对象值，其对象自身和继承的从关联对象的 with 环境绑定中排除的属性名称。\n\n可以这么理解，就是为了防止`with`添加作用域的时候，将某个属性从作用域中排除掉，代码如下：\n```js\na = {\n    p: 1,\n    b: 2\n}\n// 禁止将a.p放到with作用域中\na[Symbol.unscopables] = {p: true}\n\nwith(a){\n    console.log(p) // 报错 p not defined\n    console.log(b) // 正常输出\n}\n```\n\n因此很多内置对象都设置该值为true，从而降低with的侵入，具体如下：\n```js\nArray.prototype[Symbol.unscopables];\n/*{\n  copyWithin: true,\n  entries: true,\n  fill: true,\n  find: true,\n  findIndex: true,\n  flat: true,\n  flatMap: true,\n  includes: true,\n  keys: true,\n  values: true,\n}*/\n```\n\n\n# 沙箱实现\n\n沙箱实现步骤一般如下：\n\n- 解析代码，动态执行\n- 修改代码的作用域，避免进行向上全局查询\n- 创建全局对象的替代对象，避免污染全局对象\n- 执行代码\n\n## 基于Proxy实现\n\n前面基础知识将到Proxy是一个可以代理对象的方法，那么其实可以按照将一些全局对象做代理后放入到沙箱里。主要有两个步骤：\n\n- 使用`new Function`将代码字符串转为可执行函数\n- 加`with`生成局部作用域\n- 使用`createFake`方法生成替代对象`fakeWindow`\n- 使用`Proxy`代理拦截`set` `get`操作，更新到`fakeWindow`中\n- 当沙箱不用时，将`window`重置回\n\n简易沙箱示例代码如下：\n\n```js\nconst { complieCode2Fn, createFakeWindow } = require('./complieCode.js');\n\nclass ProxySandbox {\n    constructor(global) {\n        const rawGlobal = global;\n        const fakeWindow = createFakeWindow(global);\n        this.proxyBox = new Proxy(fakeWindow, {\n            // 拦截所有属性，防止到 Proxy 对象以外的作用域链查找。\n            has(target, key) {\n                return true;\n            },\n            get(target, key, receiver) {\n                console.log('get', key, target[key])\n                // 加固，防止逃逸\n                if (key === Symbol.unscopables) {\n                    return undefined;\n                }\n                // 通过Reflect获取\n                let temp = Reflect.get(target, key, receiver);\n                if(!target.hasOwnProperty(key)){\n                    temp = rawGlobal[key];\n                }\n                return temp;\n            },\n            set(target, key, newValue) {\n                if (!target.hasOwnProperty(key) && fakeWindow.hasOwnProperty(key)) {\n                    const descriptor = Object.getOwnPropertyDescriptor(sandbox, key);\n                    const { writable, configurable, enumerable } = descriptor;\n                    if (writable) {\n                        // 中独有的属性如果可以写，同样需要复制到fakeWindow中\n                        Object.defineProperty(target, p, {\n                            configurable,\n                            enumerable,\n                            writable,\n                            newValue,\n                        });\n                    }\n                } else {\n                    target[key] = newValue;\n                }\n\n                return true;\n            }\n        });\n        return this;\n    }\n\n    excute(code){\n        const fn = complieCode2Fn(code);\n        return fn(this.proxyBox);\n    }\n}\n\nconst fakeBox = new ProxySandbox(global);\n\nconst code = `a = 1;console.log('a:', a);return a;`\n\nconsole.log(fakeBox.excute(code));  // 输出a:1\nconsole.log('在沙箱外获取沙箱内设置的全局值a:', a); // a is not defined\n\n```\n\n问题1： 如何防止`Array.isArray`重写后不影响顶部window？\n\n```js\n```js\nconst code = `\n\n    Array.isArray = ()=> true;\n`\nconsole.log(Array.isArray('a')); // 输出true 正常应该是false\n```\n\n-  生成`fakeWindow`对象时候，遍历内置`Array`，通过`Object.freeze`冻结其修改的可能性\n\n问题2： 提前关闭 sandbox 的 with 语境，如 '} alert(this); {'  或者使用 eval 和 new Function 直接逃逸，如何解决？\n\n- 解析code字符串，利用堆栈深度检测算法，将非法字符串 `{}`做简单计算 或者 `eval` 等关键字，然后报错处理\n\n问题3： 如何解决修改原型链方法实现逃逸，既可以获取沙箱外的对象？\n\n```js\nconst code = `\n\n    ({}).constructor.prototype.toString = () => {\n\n        console.log('Escape')\n\n    }\n\n`\nconsole.log(({}).toString()) // 输出Escape 正常应该输出[object Object]\n```\n- 这种只能在原型链上下功夫，将所有的原型链做一次封装，从而\n\n\n## 基于iframe实现\n\n利用`iframe`天然隔离机制，加上`postMessage`通讯机制，可以快速实现一个简易沙箱，具体步骤如下：\n\n- 创建一个iframe，获取其window作为替代对象\n- 将function执行放到iframe里，不会影响其沙箱外程序使用\n\n```js\nclass IframeSandbox {\n    constructor() {\n        // 创建一个 iframe 对象，取出其中的原生浏览器全局对象作为沙箱的全局对象\n        const iframe = document.createElement('iframe', {url: 'about:blank'})\n        document.body.appendChild(iframe)\n        this.sandboxGlobal = iframe.contentWindow // 沙箱运行时的全局对象\n    }\n\n    excute(code){\n        const fn = new this.sandboxGlobal.Function('sandbox', `with(sandbox){${code}}`)\n        return fn(this.sandboxGlobal);\n    }\n}\n\nconst fakeBox = new IframeSandbox();\nconst code = `a = 1;console.log(a)`\n\nconsole.log(fakeBox.excute(code));  // 输出a:1\nconsole.log('在沙箱外获取沙箱内设置的全局值a:', a); // a is not defined\n```\n\n问题1： 需要解决其调用`parent`进行逃逸获取？\n\n- 最佳方案是通过`Proxy`对iframe的window对象进行拦截代理即可\n\n## 基于ShadowRealm 提案的实现\n\n> ShadowRealm API 是一个新的 JavaScript 提案，它允许一个 JS 运行时创建多个高度隔离的 JS 运行环境（realm），每个 realm 具有独立的全局对象和内建对象。\n\n通俗的说，这是JavaScript自带的沙箱API，你可以利用它快速实现上面需要通过proxy或iframe才能实现的隔离机制。\n\nShadowRealm声明：\n\n```js\ndeclare class ShadowRealm {\n  constructor();\n  evaluate(sourceText: string): PrimitiveValueOrCallable;\n  importValue(specifier: string, bindingName: string): Promise<PrimitiveValueOrCallable>;\n}\n```\n\n- `evaluate(sourceText: string)` 同步执行代码字符串，类似 eval()\n- `importValue(specifier: string, bindingName: string)` 异步执行代码字符串\n\n示例：\n```js\nconst sr = new ShadowRealm();\nglobalThis.test = 'test';\nsr.evaluate(`globalThis.test = 'test ShadowRealm'; console.log(globalThis.test)`) // 输出 test ShadowRealm\n\n// 创建一个文件  my-module.js\nexport function sum(...values) {\n  return values.reduce((prev, value) => prev + value);\n}\n\n// main.js\nconst sr = new ShadowRealm();\nconst wrappedSum = await sr.importValue('./my-module.js', 'sum'); // 加载js模块，然后获取里面函数\nconsole.log(wrappedSum('hi', ' ', 'folks', '!')); // 输出 hi folks !\n\n```\n\n其实再来实现一个沙箱就很简单了，因为ShadownRealm本身就是一个沙箱。\n\n## 其他方案\n\n### Web Workers \n\n`Web Workers `代码运行在独立的进程中，通信是异步的，无法获取当前程序一些属性或共享状态，且有一点无法不支持 DOM 操作，必须通过 postMessage 通知 UI 主线程来实现\n```js\nfunction workerSandbox(appCode) {\n var blob = new Blob([appCode]);\n var appWorker = new Worker(window.URL.createObjectURL(blob));\n} \n\nworkerSandbox('const a = 1;console.log(a);') // 输出1\n\nconsole.log(a) // a not defined\n```\n\n### vm 模块\nNode.js 上的 vm 模块，与 ShadowRealm API 类似，但具有更多功能：缓存 JavaScript 引擎、拦截 import() 等等。但它唯一的缺点就是不能跨平台，只能在 Node.js 环境下使用。\n```js\nconst vm = require('vm');\nconst sandbox = {\n    a: 1\n};\nvm.createContext(sandbox)\n\nconst whatIsThis = vm.runInContext(`\n    a = 2 ;\n`, sandbox);\n\nconsole.log(sandbox) // 输出2\n```\n\n# 沙箱错误捕获\n\n在完成沙箱主体后，还需要对沙箱内部错误进行捕获再次处理，从而不影响主体程序的执行。\n\n这一块其实就在执行动态代码那里，做一层`try/catch`基本上可以完成的错误捕获。\n\n\n# 沙箱逃逸\n\n沙箱逃逸（Sandbox Escape），沙箱于作者而言是一种安全策略，但于使用者而言可能是一种束缚。脑洞大开的开发者们尝试用各种方式摆脱这种束缚，也称之为沙箱逃逸。\n\n沙箱逃逸的几种方式：\n\n- 访问沙箱执行上下文中某个对象内部属性时，如：通过window.parent\n- 通过访问原型链实现逃逸\n\n如何解决沙箱逃逸：\n\n> 自定义解释器，分析源程序结构从而手动控制每一条语句的执行逻辑，如：`Babel`等\n\n简单的说，就是用JS去实现JS解释器，将每行代码进行解析，然后增加一些安全机制，从而避免非法代码入侵。\n\n后续会专门写个文章去实现一个简单的JS解释器，这里就不做多阐述。更新后会放在这里链接。\n\n# 参考资料\n\n- [MDN Proxy](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n- [qiankun中JS沙箱的实现](https://github.com/careyke/frontend_knowledge_structure/blob/master/microFrontend/question02_03_js_sandbox.md)\n- [CodeSandbox 如何工作](https://cloud.tencent.com/developer/article/1482264)\n- [Javascript 新特性前瞻 —— ShadowRealms](https://juejin.cn/post/7089822133559230501)","source":"_posts/lowcode/sandbox.md","raw":"---\ntitle: 低代码系列——js沙箱设计\ndate: 2023-02-01 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n    - 低代码\n---\n\n# 简介\n\n由于自己参与过低代码平台开发，所以希望能把我自己开发低代码中遇到的问题或者一些设计思路进行总结汇总，这是开始写的第一篇，也是比较基础的一篇，关于低代码平台的介绍会放在介绍篇章，这篇就不做过多介绍。\n\n这里为什么会一开始介绍js沙箱设计呢？\n\n因为低代码平台，会运行用户本身自己编写的业务逻辑代码，这里就需要平台去运行用户写的js代码，但是js代码保存到数据库是一个字符串，那么平台应该怎么运行呢？\n\n答案是js沙箱，那么如何设计一个沙箱呢？按照低代码平台的需要特性，主要以下几方面：\n\n- 隔离，隔离是为了保证当前执行代码不影响整个平台的代码\n- 插入，沙箱允许插入平台的内置对象\n- 容错，沙箱内代码即使有错误，也不影响整个平台执行\n\n<!-- more -->\n# 沙箱\n在设计沙箱之前，我们先对沙箱有个了解：\n\n> 在计算机安全中，沙箱（Sandbox）是一种用于隔离正在运行程序的安全机制，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境，内部程序的执行不会影响到外部程序的运行。\n\n通俗的讲，就是由我们主程序自己设定一个区域，用来执行代码，且这段代码如何执行都不会影响到外部的主程序。\n\n举几个我们开发中经常会用的沙箱：\n\n- Vue template里的表达式，如: `<div>{{ 1+1 }}</div>`，执行`1+1`就是Vue设计的一个沙箱机制\n- 开发Chrome插件，插件里的代码有很多限制条件，循序Chrome插件规则，那么插件的运行环境和规则也是一个沙箱\n- 在线代码编辑器， CodeSanbox在执行脚本也会单独成立一个沙箱去隔离执行代码，防止代码访问或影响主页面\n- 微前端`qiangun`或`single-spa `框架里主应用和子应用之间的完全隔离，也是一种沙箱机制，如: 应用之间CSS样式不能互相影响\n\n在了解完沙箱是什么后，那么在JavaScript语言里如何实现沙箱呢？主要有以下几种方式：\n\n- 使用 with 声明\n- 使用 new Function 声明\n- 基于 Proxy实现\n- 基于属性 diff实现\n- 基于 iframe实现\n- 基于 ES 提案 ShadowRealm API\n\n# 前置知识\n\n## with关键字\n\n> with 扩展一个语句的作用域链。 —— [MDN with](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with)\n> JavaScript 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 context 或者包含这个变量的函数有关。'with'语句将某个对象添加到作用域链的顶部，如果在 statement 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。\n\n按照个人比较容易理解的意思，就是给一段代码加上指定对象为该作用的全局变量。示例代码如下：\n\n```js\n\nMath.floor(1.1) // 1\n\n// 使用with\nwith(Math){\n    floor(1.1) // 1\n}\n```\n\n## new Function\n`new Function(argStr, codeStr)`是能将字符串代码转换为可执行的函数。具体示例如下：\n\n```js\nconst name = 'test';\n\nconst test = new Function('arg', 'console.log(arg)');\n// 这里等于 test = (arg)=> {console.log(arg)};\n\ntest(name); // test\n\n```\n\n## Proxy\n\n> Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。[Proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n\nProxy只能代理`object`类型的变量，针对基础类型的代理只能将其封装到对象里再进行代理监听。\n\nProxy代理方法如下：\n\n- `getPrototypeOf(target)` 代理获取原型的方法\n- `setPrototypeOf(target, newProto)` 设置原型，如果不想设置原型，可以`return false`\n- `isExtensible(target)`  拦截对对象的 `Object.isExtensible()`，必须返回一个 Boolean 值，判断一个对象是否是可扩展的\n- `preventExtensions(target)` 拦截`Object.preventExtensions()`，让一个对象变的不可扩展，也就是永远不能再添加新的属性\n- `getOwnPropertyDescriptor(target, prop)` 拦截`Object.getOwnPropertyDescriptor()`，拦截获取对象属性的描述符\n- `defineProperty(target, property, descriptor)` 拦截`Object.defineProperty()`\n- `has(target, key)`，针对 in 操作符的代理方法\n- `get(target, property, receiver)`，用于拦截对象的读取属性操作\n- `set()`，设置属性值操作的捕获器。\n- `construct()`，用于拦截 new 操作符\n\n与`Object.defineProperty`主要区别(可拦截方法比`Object.defineProperty`多)：\n\n- Proxy代理的是整个对象，Object.defineProperty只代理对象上的某个属性,如果是多层嵌套的数据需要循环递归绑定;\n- 对象上定义新属性时，Proxy可以监听到，Object.defineProperty监听不到，需要借助$set方法;\n- 数组的某些方法(push、unshift和splice)Object.defineProperty监听不到，Proxy可以监听到;\n\n## Symbol.unscopables\n\n> 指用于指定对象值，其对象自身和继承的从关联对象的 with 环境绑定中排除的属性名称。\n\n可以这么理解，就是为了防止`with`添加作用域的时候，将某个属性从作用域中排除掉，代码如下：\n```js\na = {\n    p: 1,\n    b: 2\n}\n// 禁止将a.p放到with作用域中\na[Symbol.unscopables] = {p: true}\n\nwith(a){\n    console.log(p) // 报错 p not defined\n    console.log(b) // 正常输出\n}\n```\n\n因此很多内置对象都设置该值为true，从而降低with的侵入，具体如下：\n```js\nArray.prototype[Symbol.unscopables];\n/*{\n  copyWithin: true,\n  entries: true,\n  fill: true,\n  find: true,\n  findIndex: true,\n  flat: true,\n  flatMap: true,\n  includes: true,\n  keys: true,\n  values: true,\n}*/\n```\n\n\n# 沙箱实现\n\n沙箱实现步骤一般如下：\n\n- 解析代码，动态执行\n- 修改代码的作用域，避免进行向上全局查询\n- 创建全局对象的替代对象，避免污染全局对象\n- 执行代码\n\n## 基于Proxy实现\n\n前面基础知识将到Proxy是一个可以代理对象的方法，那么其实可以按照将一些全局对象做代理后放入到沙箱里。主要有两个步骤：\n\n- 使用`new Function`将代码字符串转为可执行函数\n- 加`with`生成局部作用域\n- 使用`createFake`方法生成替代对象`fakeWindow`\n- 使用`Proxy`代理拦截`set` `get`操作，更新到`fakeWindow`中\n- 当沙箱不用时，将`window`重置回\n\n简易沙箱示例代码如下：\n\n```js\nconst { complieCode2Fn, createFakeWindow } = require('./complieCode.js');\n\nclass ProxySandbox {\n    constructor(global) {\n        const rawGlobal = global;\n        const fakeWindow = createFakeWindow(global);\n        this.proxyBox = new Proxy(fakeWindow, {\n            // 拦截所有属性，防止到 Proxy 对象以外的作用域链查找。\n            has(target, key) {\n                return true;\n            },\n            get(target, key, receiver) {\n                console.log('get', key, target[key])\n                // 加固，防止逃逸\n                if (key === Symbol.unscopables) {\n                    return undefined;\n                }\n                // 通过Reflect获取\n                let temp = Reflect.get(target, key, receiver);\n                if(!target.hasOwnProperty(key)){\n                    temp = rawGlobal[key];\n                }\n                return temp;\n            },\n            set(target, key, newValue) {\n                if (!target.hasOwnProperty(key) && fakeWindow.hasOwnProperty(key)) {\n                    const descriptor = Object.getOwnPropertyDescriptor(sandbox, key);\n                    const { writable, configurable, enumerable } = descriptor;\n                    if (writable) {\n                        // 中独有的属性如果可以写，同样需要复制到fakeWindow中\n                        Object.defineProperty(target, p, {\n                            configurable,\n                            enumerable,\n                            writable,\n                            newValue,\n                        });\n                    }\n                } else {\n                    target[key] = newValue;\n                }\n\n                return true;\n            }\n        });\n        return this;\n    }\n\n    excute(code){\n        const fn = complieCode2Fn(code);\n        return fn(this.proxyBox);\n    }\n}\n\nconst fakeBox = new ProxySandbox(global);\n\nconst code = `a = 1;console.log('a:', a);return a;`\n\nconsole.log(fakeBox.excute(code));  // 输出a:1\nconsole.log('在沙箱外获取沙箱内设置的全局值a:', a); // a is not defined\n\n```\n\n问题1： 如何防止`Array.isArray`重写后不影响顶部window？\n\n```js\n```js\nconst code = `\n\n    Array.isArray = ()=> true;\n`\nconsole.log(Array.isArray('a')); // 输出true 正常应该是false\n```\n\n-  生成`fakeWindow`对象时候，遍历内置`Array`，通过`Object.freeze`冻结其修改的可能性\n\n问题2： 提前关闭 sandbox 的 with 语境，如 '} alert(this); {'  或者使用 eval 和 new Function 直接逃逸，如何解决？\n\n- 解析code字符串，利用堆栈深度检测算法，将非法字符串 `{}`做简单计算 或者 `eval` 等关键字，然后报错处理\n\n问题3： 如何解决修改原型链方法实现逃逸，既可以获取沙箱外的对象？\n\n```js\nconst code = `\n\n    ({}).constructor.prototype.toString = () => {\n\n        console.log('Escape')\n\n    }\n\n`\nconsole.log(({}).toString()) // 输出Escape 正常应该输出[object Object]\n```\n- 这种只能在原型链上下功夫，将所有的原型链做一次封装，从而\n\n\n## 基于iframe实现\n\n利用`iframe`天然隔离机制，加上`postMessage`通讯机制，可以快速实现一个简易沙箱，具体步骤如下：\n\n- 创建一个iframe，获取其window作为替代对象\n- 将function执行放到iframe里，不会影响其沙箱外程序使用\n\n```js\nclass IframeSandbox {\n    constructor() {\n        // 创建一个 iframe 对象，取出其中的原生浏览器全局对象作为沙箱的全局对象\n        const iframe = document.createElement('iframe', {url: 'about:blank'})\n        document.body.appendChild(iframe)\n        this.sandboxGlobal = iframe.contentWindow // 沙箱运行时的全局对象\n    }\n\n    excute(code){\n        const fn = new this.sandboxGlobal.Function('sandbox', `with(sandbox){${code}}`)\n        return fn(this.sandboxGlobal);\n    }\n}\n\nconst fakeBox = new IframeSandbox();\nconst code = `a = 1;console.log(a)`\n\nconsole.log(fakeBox.excute(code));  // 输出a:1\nconsole.log('在沙箱外获取沙箱内设置的全局值a:', a); // a is not defined\n```\n\n问题1： 需要解决其调用`parent`进行逃逸获取？\n\n- 最佳方案是通过`Proxy`对iframe的window对象进行拦截代理即可\n\n## 基于ShadowRealm 提案的实现\n\n> ShadowRealm API 是一个新的 JavaScript 提案，它允许一个 JS 运行时创建多个高度隔离的 JS 运行环境（realm），每个 realm 具有独立的全局对象和内建对象。\n\n通俗的说，这是JavaScript自带的沙箱API，你可以利用它快速实现上面需要通过proxy或iframe才能实现的隔离机制。\n\nShadowRealm声明：\n\n```js\ndeclare class ShadowRealm {\n  constructor();\n  evaluate(sourceText: string): PrimitiveValueOrCallable;\n  importValue(specifier: string, bindingName: string): Promise<PrimitiveValueOrCallable>;\n}\n```\n\n- `evaluate(sourceText: string)` 同步执行代码字符串，类似 eval()\n- `importValue(specifier: string, bindingName: string)` 异步执行代码字符串\n\n示例：\n```js\nconst sr = new ShadowRealm();\nglobalThis.test = 'test';\nsr.evaluate(`globalThis.test = 'test ShadowRealm'; console.log(globalThis.test)`) // 输出 test ShadowRealm\n\n// 创建一个文件  my-module.js\nexport function sum(...values) {\n  return values.reduce((prev, value) => prev + value);\n}\n\n// main.js\nconst sr = new ShadowRealm();\nconst wrappedSum = await sr.importValue('./my-module.js', 'sum'); // 加载js模块，然后获取里面函数\nconsole.log(wrappedSum('hi', ' ', 'folks', '!')); // 输出 hi folks !\n\n```\n\n其实再来实现一个沙箱就很简单了，因为ShadownRealm本身就是一个沙箱。\n\n## 其他方案\n\n### Web Workers \n\n`Web Workers `代码运行在独立的进程中，通信是异步的，无法获取当前程序一些属性或共享状态，且有一点无法不支持 DOM 操作，必须通过 postMessage 通知 UI 主线程来实现\n```js\nfunction workerSandbox(appCode) {\n var blob = new Blob([appCode]);\n var appWorker = new Worker(window.URL.createObjectURL(blob));\n} \n\nworkerSandbox('const a = 1;console.log(a);') // 输出1\n\nconsole.log(a) // a not defined\n```\n\n### vm 模块\nNode.js 上的 vm 模块，与 ShadowRealm API 类似，但具有更多功能：缓存 JavaScript 引擎、拦截 import() 等等。但它唯一的缺点就是不能跨平台，只能在 Node.js 环境下使用。\n```js\nconst vm = require('vm');\nconst sandbox = {\n    a: 1\n};\nvm.createContext(sandbox)\n\nconst whatIsThis = vm.runInContext(`\n    a = 2 ;\n`, sandbox);\n\nconsole.log(sandbox) // 输出2\n```\n\n# 沙箱错误捕获\n\n在完成沙箱主体后，还需要对沙箱内部错误进行捕获再次处理，从而不影响主体程序的执行。\n\n这一块其实就在执行动态代码那里，做一层`try/catch`基本上可以完成的错误捕获。\n\n\n# 沙箱逃逸\n\n沙箱逃逸（Sandbox Escape），沙箱于作者而言是一种安全策略，但于使用者而言可能是一种束缚。脑洞大开的开发者们尝试用各种方式摆脱这种束缚，也称之为沙箱逃逸。\n\n沙箱逃逸的几种方式：\n\n- 访问沙箱执行上下文中某个对象内部属性时，如：通过window.parent\n- 通过访问原型链实现逃逸\n\n如何解决沙箱逃逸：\n\n> 自定义解释器，分析源程序结构从而手动控制每一条语句的执行逻辑，如：`Babel`等\n\n简单的说，就是用JS去实现JS解释器，将每行代码进行解析，然后增加一些安全机制，从而避免非法代码入侵。\n\n后续会专门写个文章去实现一个简单的JS解释器，这里就不做多阐述。更新后会放在这里链接。\n\n# 参考资料\n\n- [MDN Proxy](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n- [qiankun中JS沙箱的实现](https://github.com/careyke/frontend_knowledge_structure/blob/master/microFrontend/question02_03_js_sandbox.md)\n- [CodeSandbox 如何工作](https://cloud.tencent.com/developer/article/1482264)\n- [Javascript 新特性前瞻 —— ShadowRealms](https://juejin.cn/post/7089822133559230501)","slug":"lowcode/sandbox","published":1,"updated":"2023-02-12T12:54:07.461Z","_id":"cldzxp2yv003knxpcu02dws9f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>由于自己参与过低代码平台开发，所以希望能把我自己开发低代码中遇到的问题或者一些设计思路进行总结汇总，这是开始写的第一篇，也是比较基础的一篇，关于低代码平台的介绍会放在介绍篇章，这篇就不做过多介绍。</p>\n<p>这里为什么会一开始介绍js沙箱设计呢？</p>\n<p>因为低代码平台，会运行用户本身自己编写的业务逻辑代码，这里就需要平台去运行用户写的js代码，但是js代码保存到数据库是一个字符串，那么平台应该怎么运行呢？</p>\n<p>答案是js沙箱，那么如何设计一个沙箱呢？按照低代码平台的需要特性，主要以下几方面：</p>\n<ul>\n<li>隔离，隔离是为了保证当前执行代码不影响整个平台的代码</li>\n<li>插入，沙箱允许插入平台的内置对象</li>\n<li>容错，沙箱内代码即使有错误，也不影响整个平台执行</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"沙箱\"><a href=\"#沙箱\" class=\"headerlink\" title=\"沙箱\"></a>沙箱</h1><p>在设计沙箱之前，我们先对沙箱有个了解：</p>\n<blockquote>\n<p>在计算机安全中，沙箱（Sandbox）是一种用于隔离正在运行程序的安全机制，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境，内部程序的执行不会影响到外部程序的运行。</p>\n</blockquote>\n<p>通俗的讲，就是由我们主程序自己设定一个区域，用来执行代码，且这段代码如何执行都不会影响到外部的主程序。</p>\n<p>举几个我们开发中经常会用的沙箱：</p>\n<ul>\n<li>Vue template里的表达式，如: <code>&lt;div&gt;2&lt;/div&gt;</code>，执行<code>1+1</code>就是Vue设计的一个沙箱机制</li>\n<li>开发Chrome插件，插件里的代码有很多限制条件，循序Chrome插件规则，那么插件的运行环境和规则也是一个沙箱</li>\n<li>在线代码编辑器， CodeSanbox在执行脚本也会单独成立一个沙箱去隔离执行代码，防止代码访问或影响主页面</li>\n<li>微前端<code>qiangun</code>或<code>single-spa</code>框架里主应用和子应用之间的完全隔离，也是一种沙箱机制，如: 应用之间CSS样式不能互相影响</li>\n</ul>\n<p>在了解完沙箱是什么后，那么在JavaScript语言里如何实现沙箱呢？主要有以下几种方式：</p>\n<ul>\n<li>使用 with 声明</li>\n<li>使用 new Function 声明</li>\n<li>基于 Proxy实现</li>\n<li>基于属性 diff实现</li>\n<li>基于 iframe实现</li>\n<li>基于 ES 提案 ShadowRealm API</li>\n</ul>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"with关键字\"><a href=\"#with关键字\" class=\"headerlink\" title=\"with关键字\"></a>with关键字</h2><blockquote>\n<p>with 扩展一个语句的作用域链。 —— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with\" target=\"_blank\" rel=\"noopener\">MDN with</a><br>JavaScript 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 context 或者包含这个变量的函数有关。’with’语句将某个对象添加到作用域链的顶部，如果在 statement 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。</p>\n</blockquote>\n<p>按照个人比较容易理解的意思，就是给一段代码加上指定对象为该作用的全局变量。示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"number\">1.1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用with</span></span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"built_in\">Math</span>)&#123;</span><br><span class=\"line\">    floor(<span class=\"number\">1.1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"new-Function\"><a href=\"#new-Function\" class=\"headerlink\" title=\"new Function\"></a>new Function</h2><p><code>new Function(argStr, codeStr)</code>是能将字符串代码转换为可执行的函数。具体示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'arg'</span>, <span class=\"string\">'console.log(arg)'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 这里等于 test = (arg)=&gt; &#123;console.log(arg)&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(name); <span class=\"comment\">// test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><blockquote>\n<p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">Proxy MDN</a></p>\n</blockquote>\n<p>Proxy只能代理<code>object</code>类型的变量，针对基础类型的代理只能将其封装到对象里再进行代理监听。</p>\n<p>Proxy代理方法如下：</p>\n<ul>\n<li><code>getPrototypeOf(target)</code> 代理获取原型的方法</li>\n<li><code>setPrototypeOf(target, newProto)</code> 设置原型，如果不想设置原型，可以<code>return false</code></li>\n<li><code>isExtensible(target)</code>  拦截对对象的 <code>Object.isExtensible()</code>，必须返回一个 Boolean 值，判断一个对象是否是可扩展的</li>\n<li><code>preventExtensions(target)</code> 拦截<code>Object.preventExtensions()</code>，让一个对象变的不可扩展，也就是永远不能再添加新的属性</li>\n<li><code>getOwnPropertyDescriptor(target, prop)</code> 拦截<code>Object.getOwnPropertyDescriptor()</code>，拦截获取对象属性的描述符</li>\n<li><code>defineProperty(target, property, descriptor)</code> 拦截<code>Object.defineProperty()</code></li>\n<li><code>has(target, key)</code>，针对 in 操作符的代理方法</li>\n<li><code>get(target, property, receiver)</code>，用于拦截对象的读取属性操作</li>\n<li><code>set()</code>，设置属性值操作的捕获器。</li>\n<li><code>construct()</code>，用于拦截 new 操作符</li>\n</ul>\n<p>与<code>Object.defineProperty</code>主要区别(可拦截方法比<code>Object.defineProperty</code>多)：</p>\n<ul>\n<li>Proxy代理的是整个对象，Object.defineProperty只代理对象上的某个属性,如果是多层嵌套的数据需要循环递归绑定;</li>\n<li>对象上定义新属性时，Proxy可以监听到，Object.defineProperty监听不到，需要借助$set方法;</li>\n<li>数组的某些方法(push、unshift和splice)Object.defineProperty监听不到，Proxy可以监听到;</li>\n</ul>\n<h2 id=\"Symbol-unscopables\"><a href=\"#Symbol-unscopables\" class=\"headerlink\" title=\"Symbol.unscopables\"></a>Symbol.unscopables</h2><blockquote>\n<p>指用于指定对象值，其对象自身和继承的从关联对象的 with 环境绑定中排除的属性名称。</p>\n</blockquote>\n<p>可以这么理解，就是为了防止<code>with</code>添加作用域的时候，将某个属性从作用域中排除掉，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;</span><br><span class=\"line\">    p: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 禁止将a.p放到with作用域中</span></span><br><span class=\"line\">a[<span class=\"built_in\">Symbol</span>.unscopables] = &#123;<span class=\"attr\">p</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(a)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p) <span class=\"comment\">// 报错 p not defined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 正常输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此很多内置对象都设置该值为true，从而降低with的侵入，具体如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype[<span class=\"built_in\">Symbol</span>.unscopables];</span><br><span class=\"line\"><span class=\"comment\">/*&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  copyWithin: true,</span></span><br><span class=\"line\"><span class=\"comment\">  entries: true,</span></span><br><span class=\"line\"><span class=\"comment\">  fill: true,</span></span><br><span class=\"line\"><span class=\"comment\">  find: true,</span></span><br><span class=\"line\"><span class=\"comment\">  findIndex: true,</span></span><br><span class=\"line\"><span class=\"comment\">  flat: true,</span></span><br><span class=\"line\"><span class=\"comment\">  flatMap: true,</span></span><br><span class=\"line\"><span class=\"comment\">  includes: true,</span></span><br><span class=\"line\"><span class=\"comment\">  keys: true,</span></span><br><span class=\"line\"><span class=\"comment\">  values: true,</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"沙箱实现\"><a href=\"#沙箱实现\" class=\"headerlink\" title=\"沙箱实现\"></a>沙箱实现</h1><p>沙箱实现步骤一般如下：</p>\n<ul>\n<li>解析代码，动态执行</li>\n<li>修改代码的作用域，避免进行向上全局查询</li>\n<li>创建全局对象的替代对象，避免污染全局对象</li>\n<li>执行代码</li>\n</ul>\n<h2 id=\"基于Proxy实现\"><a href=\"#基于Proxy实现\" class=\"headerlink\" title=\"基于Proxy实现\"></a>基于Proxy实现</h2><p>前面基础知识将到Proxy是一个可以代理对象的方法，那么其实可以按照将一些全局对象做代理后放入到沙箱里。主要有两个步骤：</p>\n<ul>\n<li>使用<code>new Function</code>将代码字符串转为可执行函数</li>\n<li>加<code>with</code>生成局部作用域</li>\n<li>使用<code>createFake</code>方法生成替代对象<code>fakeWindow</code></li>\n<li>使用<code>Proxy</code>代理拦截<code>set</code> <code>get</code>操作，更新到<code>fakeWindow</code>中</li>\n<li>当沙箱不用时，将<code>window</code>重置回</li>\n</ul>\n<p>简易沙箱示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; complieCode2Fn, createFakeWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./complieCode.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxySandbox</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(global) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rawGlobal = global;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fakeWindow = createFakeWindow(global);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyBox = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(fakeWindow, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拦截所有属性，防止到 Proxy 对象以外的作用域链查找。</span></span><br><span class=\"line\">            has(target, key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">get</span>(target, key, receiver) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, key, target[key])</span><br><span class=\"line\">                <span class=\"comment\">// 加固，防止逃逸</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key === <span class=\"built_in\">Symbol</span>.unscopables) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 通过Reflect获取</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> temp = <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!target.hasOwnProperty(key))&#123;</span><br><span class=\"line\">                    temp = rawGlobal[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">set</span>(target, key, newValue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!target.hasOwnProperty(key) &amp;&amp; fakeWindow.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(sandbox, key);</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> &#123; writable, configurable, enumerable &#125; = descriptor;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (writable) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 中独有的属性如果可以写，同样需要复制到fakeWindow中</span></span><br><span class=\"line\">                        <span class=\"built_in\">Object</span>.defineProperty(target, p, &#123;</span><br><span class=\"line\">                            configurable,</span><br><span class=\"line\">                            enumerable,</span><br><span class=\"line\">                            writable,</span><br><span class=\"line\">                            newValue,</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    target[key] = newValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    excute(code)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fn = complieCode2Fn(code);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(<span class=\"keyword\">this</span>.proxyBox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fakeBox = <span class=\"keyword\">new</span> ProxySandbox(global);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`a = 1;console.log('a:', a);return a;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fakeBox.excute(code));  <span class=\"comment\">// 输出a:1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'在沙箱外获取沙箱内设置的全局值a:'</span>, a); <span class=\"comment\">// a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>问题1： 如何防止<code>Array.isArray</code>重写后不影响顶部window？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br><span class=\"line\"><span class=\"string\">const code = `</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.isArray = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">console.log(Array.isArray('a')); // 输出true 正常应该是false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成<code>fakeWindow</code>对象时候，遍历内置<code>Array</code>，通过<code>Object.freeze</code>冻结其修改的可能性</li>\n</ul>\n<p>问题2： 提前关闭 sandbox 的 with 语境，如 ‘} alert(this); {‘  或者使用 eval 和 new Function 直接逃逸，如何解决？</p>\n<ul>\n<li>解析code字符串，利用堆栈深度检测算法，将非法字符串 <code>{}</code>做简单计算 或者 <code>eval</code> 等关键字，然后报错处理</li>\n</ul>\n<p>问题3： 如何解决修改原型链方法实现逃逸，既可以获取沙箱外的对象？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    (&#123;&#125;).constructor.prototype.toString = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        console.log('Escape')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((&#123;&#125;).toString()) <span class=\"comment\">// 输出Escape 正常应该输出[object Object]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这种只能在原型链上下功夫，将所有的原型链做一次封装，从而</li>\n</ul>\n<h2 id=\"基于iframe实现\"><a href=\"#基于iframe实现\" class=\"headerlink\" title=\"基于iframe实现\"></a>基于iframe实现</h2><p>利用<code>iframe</code>天然隔离机制，加上<code>postMessage</code>通讯机制，可以快速实现一个简易沙箱，具体步骤如下：</p>\n<ul>\n<li>创建一个iframe，获取其window作为替代对象</li>\n<li>将function执行放到iframe里，不会影响其沙箱外程序使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IframeSandbox</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个 iframe 对象，取出其中的原生浏览器全局对象作为沙箱的全局对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>, &#123;<span class=\"attr\">url</span>: <span class=\"string\">'about:blank'</span>&#125;)</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(iframe)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sandboxGlobal = iframe.contentWindow <span class=\"comment\">// 沙箱运行时的全局对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    excute(code)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fn = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.sandboxGlobal.Function(<span class=\"string\">'sandbox'</span>, <span class=\"string\">`with(sandbox)&#123;<span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(<span class=\"keyword\">this</span>.sandboxGlobal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fakeBox = <span class=\"keyword\">new</span> IframeSandbox();</span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`a = 1;console.log(a)`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fakeBox.excute(code));  <span class=\"comment\">// 输出a:1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'在沙箱外获取沙箱内设置的全局值a:'</span>, a); <span class=\"comment\">// a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>问题1： 需要解决其调用<code>parent</code>进行逃逸获取？</p>\n<ul>\n<li>最佳方案是通过<code>Proxy</code>对iframe的window对象进行拦截代理即可</li>\n</ul>\n<h2 id=\"基于ShadowRealm-提案的实现\"><a href=\"#基于ShadowRealm-提案的实现\" class=\"headerlink\" title=\"基于ShadowRealm 提案的实现\"></a>基于ShadowRealm 提案的实现</h2><blockquote>\n<p>ShadowRealm API 是一个新的 JavaScript 提案，它允许一个 JS 运行时创建多个高度隔离的 JS 运行环境（realm），每个 realm 具有独立的全局对象和内建对象。</p>\n</blockquote>\n<p>通俗的说，这是JavaScript自带的沙箱API，你可以利用它快速实现上面需要通过proxy或iframe才能实现的隔离机制。</p>\n<p>ShadowRealm声明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadowRealm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>();</span><br><span class=\"line\">  evaluate(sourceText: string): PrimitiveValueOrCallable;</span><br><span class=\"line\">  importValue(specifier: string, bindingName: string): Promise&lt;PrimitiveValueOrCallable&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>evaluate(sourceText: string)</code> 同步执行代码字符串，类似 eval()</li>\n<li><code>importValue(specifier: string, bindingName: string)</code> 异步执行代码字符串</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sr = <span class=\"keyword\">new</span> ShadowRealm();</span><br><span class=\"line\">globalThis.test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">sr.evaluate(<span class=\"string\">`globalThis.test = 'test ShadowRealm'; console.log(globalThis.test)`</span>) <span class=\"comment\">// 输出 test ShadowRealm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个文件  my-module.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values.reduce(<span class=\"function\">(<span class=\"params\">prev, value</span>) =&gt;</span> prev + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sr = <span class=\"keyword\">new</span> ShadowRealm();</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrappedSum = <span class=\"keyword\">await</span> sr.importValue(<span class=\"string\">'./my-module.js'</span>, <span class=\"string\">'sum'</span>); <span class=\"comment\">// 加载js模块，然后获取里面函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wrappedSum(<span class=\"string\">'hi'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'folks'</span>, <span class=\"string\">'!'</span>)); <span class=\"comment\">// 输出 hi folks !</span></span><br></pre></td></tr></table></figure>\n\n<p>其实再来实现一个沙箱就很简单了，因为ShadownRealm本身就是一个沙箱。</p>\n<h2 id=\"其他方案\"><a href=\"#其他方案\" class=\"headerlink\" title=\"其他方案\"></a>其他方案</h2><h3 id=\"Web-Workers\"><a href=\"#Web-Workers\" class=\"headerlink\" title=\"Web Workers\"></a>Web Workers</h3><p><code>Web Workers</code>代码运行在独立的进程中，通信是异步的，无法获取当前程序一些属性或共享状态，且有一点无法不支持 DOM 操作，必须通过 postMessage 通知 UI 主线程来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workerSandbox</span>(<span class=\"params\">appCode</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([appCode]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> appWorker = <span class=\"keyword\">new</span> Worker(<span class=\"built_in\">window</span>.URL.createObjectURL(blob));</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">workerSandbox(<span class=\"string\">'const a = 1;console.log(a);'</span>) <span class=\"comment\">// 输出1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// a not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vm-模块\"><a href=\"#vm-模块\" class=\"headerlink\" title=\"vm 模块\"></a>vm 模块</h3><p>Node.js 上的 vm 模块，与 ShadowRealm API 类似，但具有更多功能：缓存 JavaScript 引擎、拦截 import() 等等。但它唯一的缺点就是不能跨平台，只能在 Node.js 环境下使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"built_in\">require</span>(<span class=\"string\">'vm'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sandbox = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vm.createContext(sandbox)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> whatIsThis = vm.runInContext(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    a = 2 ;</span></span><br><span class=\"line\"><span class=\"string\">`</span>, sandbox);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sandbox) <span class=\"comment\">// 输出2</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"沙箱错误捕获\"><a href=\"#沙箱错误捕获\" class=\"headerlink\" title=\"沙箱错误捕获\"></a>沙箱错误捕获</h1><p>在完成沙箱主体后，还需要对沙箱内部错误进行捕获再次处理，从而不影响主体程序的执行。</p>\n<p>这一块其实就在执行动态代码那里，做一层<code>try/catch</code>基本上可以完成的错误捕获。</p>\n<h1 id=\"沙箱逃逸\"><a href=\"#沙箱逃逸\" class=\"headerlink\" title=\"沙箱逃逸\"></a>沙箱逃逸</h1><p>沙箱逃逸（Sandbox Escape），沙箱于作者而言是一种安全策略，但于使用者而言可能是一种束缚。脑洞大开的开发者们尝试用各种方式摆脱这种束缚，也称之为沙箱逃逸。</p>\n<p>沙箱逃逸的几种方式：</p>\n<ul>\n<li>访问沙箱执行上下文中某个对象内部属性时，如：通过window.parent</li>\n<li>通过访问原型链实现逃逸</li>\n</ul>\n<p>如何解决沙箱逃逸：</p>\n<blockquote>\n<p>自定义解释器，分析源程序结构从而手动控制每一条语句的执行逻辑，如：<code>Babel</code>等</p>\n</blockquote>\n<p>简单的说，就是用JS去实现JS解释器，将每行代码进行解析，然后增加一些安全机制，从而避免非法代码入侵。</p>\n<p>后续会专门写个文章去实现一个简单的JS解释器，这里就不做多阐述。更新后会放在这里链接。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">MDN Proxy</a></li>\n<li><a href=\"https://github.com/careyke/frontend_knowledge_structure/blob/master/microFrontend/question02_03_js_sandbox.md\" target=\"_blank\" rel=\"noopener\">qiankun中JS沙箱的实现</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1482264\" target=\"_blank\" rel=\"noopener\">CodeSandbox 如何工作</a></li>\n<li><a href=\"https://juejin.cn/post/7089822133559230501\" target=\"_blank\" rel=\"noopener\">Javascript 新特性前瞻 —— ShadowRealms</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>由于自己参与过低代码平台开发，所以希望能把我自己开发低代码中遇到的问题或者一些设计思路进行总结汇总，这是开始写的第一篇，也是比较基础的一篇，关于低代码平台的介绍会放在介绍篇章，这篇就不做过多介绍。</p>\n<p>这里为什么会一开始介绍js沙箱设计呢？</p>\n<p>因为低代码平台，会运行用户本身自己编写的业务逻辑代码，这里就需要平台去运行用户写的js代码，但是js代码保存到数据库是一个字符串，那么平台应该怎么运行呢？</p>\n<p>答案是js沙箱，那么如何设计一个沙箱呢？按照低代码平台的需要特性，主要以下几方面：</p>\n<ul>\n<li>隔离，隔离是为了保证当前执行代码不影响整个平台的代码</li>\n<li>插入，沙箱允许插入平台的内置对象</li>\n<li>容错，沙箱内代码即使有错误，也不影响整个平台执行</li>\n</ul>","more":"<h1 id=\"沙箱\"><a href=\"#沙箱\" class=\"headerlink\" title=\"沙箱\"></a>沙箱</h1><p>在设计沙箱之前，我们先对沙箱有个了解：</p>\n<blockquote>\n<p>在计算机安全中，沙箱（Sandbox）是一种用于隔离正在运行程序的安全机制，通常用于执行未经测试或不受信任的程序或代码，它会为待执行的程序创建一个独立的执行环境，内部程序的执行不会影响到外部程序的运行。</p>\n</blockquote>\n<p>通俗的讲，就是由我们主程序自己设定一个区域，用来执行代码，且这段代码如何执行都不会影响到外部的主程序。</p>\n<p>举几个我们开发中经常会用的沙箱：</p>\n<ul>\n<li>Vue template里的表达式，如: <code>&lt;div&gt;2&lt;/div&gt;</code>，执行<code>1+1</code>就是Vue设计的一个沙箱机制</li>\n<li>开发Chrome插件，插件里的代码有很多限制条件，循序Chrome插件规则，那么插件的运行环境和规则也是一个沙箱</li>\n<li>在线代码编辑器， CodeSanbox在执行脚本也会单独成立一个沙箱去隔离执行代码，防止代码访问或影响主页面</li>\n<li>微前端<code>qiangun</code>或<code>single-spa</code>框架里主应用和子应用之间的完全隔离，也是一种沙箱机制，如: 应用之间CSS样式不能互相影响</li>\n</ul>\n<p>在了解完沙箱是什么后，那么在JavaScript语言里如何实现沙箱呢？主要有以下几种方式：</p>\n<ul>\n<li>使用 with 声明</li>\n<li>使用 new Function 声明</li>\n<li>基于 Proxy实现</li>\n<li>基于属性 diff实现</li>\n<li>基于 iframe实现</li>\n<li>基于 ES 提案 ShadowRealm API</li>\n</ul>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"with关键字\"><a href=\"#with关键字\" class=\"headerlink\" title=\"with关键字\"></a>with关键字</h2><blockquote>\n<p>with 扩展一个语句的作用域链。 —— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with\" target=\"_blank\" rel=\"noopener\">MDN with</a><br>JavaScript 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 context 或者包含这个变量的函数有关。’with’语句将某个对象添加到作用域链的顶部，如果在 statement 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。</p>\n</blockquote>\n<p>按照个人比较容易理解的意思，就是给一段代码加上指定对象为该作用的全局变量。示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(<span class=\"number\">1.1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用with</span></span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"built_in\">Math</span>)&#123;</span><br><span class=\"line\">    floor(<span class=\"number\">1.1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"new-Function\"><a href=\"#new-Function\" class=\"headerlink\" title=\"new Function\"></a>new Function</h2><p><code>new Function(argStr, codeStr)</code>是能将字符串代码转换为可执行的函数。具体示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'arg'</span>, <span class=\"string\">'console.log(arg)'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 这里等于 test = (arg)=&gt; &#123;console.log(arg)&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(name); <span class=\"comment\">// test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><blockquote>\n<p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">Proxy MDN</a></p>\n</blockquote>\n<p>Proxy只能代理<code>object</code>类型的变量，针对基础类型的代理只能将其封装到对象里再进行代理监听。</p>\n<p>Proxy代理方法如下：</p>\n<ul>\n<li><code>getPrototypeOf(target)</code> 代理获取原型的方法</li>\n<li><code>setPrototypeOf(target, newProto)</code> 设置原型，如果不想设置原型，可以<code>return false</code></li>\n<li><code>isExtensible(target)</code>  拦截对对象的 <code>Object.isExtensible()</code>，必须返回一个 Boolean 值，判断一个对象是否是可扩展的</li>\n<li><code>preventExtensions(target)</code> 拦截<code>Object.preventExtensions()</code>，让一个对象变的不可扩展，也就是永远不能再添加新的属性</li>\n<li><code>getOwnPropertyDescriptor(target, prop)</code> 拦截<code>Object.getOwnPropertyDescriptor()</code>，拦截获取对象属性的描述符</li>\n<li><code>defineProperty(target, property, descriptor)</code> 拦截<code>Object.defineProperty()</code></li>\n<li><code>has(target, key)</code>，针对 in 操作符的代理方法</li>\n<li><code>get(target, property, receiver)</code>，用于拦截对象的读取属性操作</li>\n<li><code>set()</code>，设置属性值操作的捕获器。</li>\n<li><code>construct()</code>，用于拦截 new 操作符</li>\n</ul>\n<p>与<code>Object.defineProperty</code>主要区别(可拦截方法比<code>Object.defineProperty</code>多)：</p>\n<ul>\n<li>Proxy代理的是整个对象，Object.defineProperty只代理对象上的某个属性,如果是多层嵌套的数据需要循环递归绑定;</li>\n<li>对象上定义新属性时，Proxy可以监听到，Object.defineProperty监听不到，需要借助$set方法;</li>\n<li>数组的某些方法(push、unshift和splice)Object.defineProperty监听不到，Proxy可以监听到;</li>\n</ul>\n<h2 id=\"Symbol-unscopables\"><a href=\"#Symbol-unscopables\" class=\"headerlink\" title=\"Symbol.unscopables\"></a>Symbol.unscopables</h2><blockquote>\n<p>指用于指定对象值，其对象自身和继承的从关联对象的 with 环境绑定中排除的属性名称。</p>\n</blockquote>\n<p>可以这么理解，就是为了防止<code>with</code>添加作用域的时候，将某个属性从作用域中排除掉，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;</span><br><span class=\"line\">    p: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 禁止将a.p放到with作用域中</span></span><br><span class=\"line\">a[<span class=\"built_in\">Symbol</span>.unscopables] = &#123;<span class=\"attr\">p</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(a)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p) <span class=\"comment\">// 报错 p not defined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 正常输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此很多内置对象都设置该值为true，从而降低with的侵入，具体如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype[<span class=\"built_in\">Symbol</span>.unscopables];</span><br><span class=\"line\"><span class=\"comment\">/*&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  copyWithin: true,</span></span><br><span class=\"line\"><span class=\"comment\">  entries: true,</span></span><br><span class=\"line\"><span class=\"comment\">  fill: true,</span></span><br><span class=\"line\"><span class=\"comment\">  find: true,</span></span><br><span class=\"line\"><span class=\"comment\">  findIndex: true,</span></span><br><span class=\"line\"><span class=\"comment\">  flat: true,</span></span><br><span class=\"line\"><span class=\"comment\">  flatMap: true,</span></span><br><span class=\"line\"><span class=\"comment\">  includes: true,</span></span><br><span class=\"line\"><span class=\"comment\">  keys: true,</span></span><br><span class=\"line\"><span class=\"comment\">  values: true,</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"沙箱实现\"><a href=\"#沙箱实现\" class=\"headerlink\" title=\"沙箱实现\"></a>沙箱实现</h1><p>沙箱实现步骤一般如下：</p>\n<ul>\n<li>解析代码，动态执行</li>\n<li>修改代码的作用域，避免进行向上全局查询</li>\n<li>创建全局对象的替代对象，避免污染全局对象</li>\n<li>执行代码</li>\n</ul>\n<h2 id=\"基于Proxy实现\"><a href=\"#基于Proxy实现\" class=\"headerlink\" title=\"基于Proxy实现\"></a>基于Proxy实现</h2><p>前面基础知识将到Proxy是一个可以代理对象的方法，那么其实可以按照将一些全局对象做代理后放入到沙箱里。主要有两个步骤：</p>\n<ul>\n<li>使用<code>new Function</code>将代码字符串转为可执行函数</li>\n<li>加<code>with</code>生成局部作用域</li>\n<li>使用<code>createFake</code>方法生成替代对象<code>fakeWindow</code></li>\n<li>使用<code>Proxy</code>代理拦截<code>set</code> <code>get</code>操作，更新到<code>fakeWindow</code>中</li>\n<li>当沙箱不用时，将<code>window</code>重置回</li>\n</ul>\n<p>简易沙箱示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; complieCode2Fn, createFakeWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./complieCode.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxySandbox</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(global) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> rawGlobal = global;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fakeWindow = createFakeWindow(global);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyBox = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(fakeWindow, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拦截所有属性，防止到 Proxy 对象以外的作用域链查找。</span></span><br><span class=\"line\">            has(target, key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">get</span>(target, key, receiver) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, key, target[key])</span><br><span class=\"line\">                <span class=\"comment\">// 加固，防止逃逸</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key === <span class=\"built_in\">Symbol</span>.unscopables) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 通过Reflect获取</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> temp = <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!target.hasOwnProperty(key))&#123;</span><br><span class=\"line\">                    temp = rawGlobal[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">set</span>(target, key, newValue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!target.hasOwnProperty(key) &amp;&amp; fakeWindow.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(sandbox, key);</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> &#123; writable, configurable, enumerable &#125; = descriptor;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (writable) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 中独有的属性如果可以写，同样需要复制到fakeWindow中</span></span><br><span class=\"line\">                        <span class=\"built_in\">Object</span>.defineProperty(target, p, &#123;</span><br><span class=\"line\">                            configurable,</span><br><span class=\"line\">                            enumerable,</span><br><span class=\"line\">                            writable,</span><br><span class=\"line\">                            newValue,</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    target[key] = newValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    excute(code)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fn = complieCode2Fn(code);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(<span class=\"keyword\">this</span>.proxyBox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fakeBox = <span class=\"keyword\">new</span> ProxySandbox(global);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`a = 1;console.log('a:', a);return a;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fakeBox.excute(code));  <span class=\"comment\">// 输出a:1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'在沙箱外获取沙箱内设置的全局值a:'</span>, a); <span class=\"comment\">// a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>问题1： 如何防止<code>Array.isArray</code>重写后不影响顶部window？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br><span class=\"line\"><span class=\"string\">const code = `</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.isArray = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">console.log(Array.isArray('a')); // 输出true 正常应该是false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成<code>fakeWindow</code>对象时候，遍历内置<code>Array</code>，通过<code>Object.freeze</code>冻结其修改的可能性</li>\n</ul>\n<p>问题2： 提前关闭 sandbox 的 with 语境，如 ‘} alert(this); {‘  或者使用 eval 和 new Function 直接逃逸，如何解决？</p>\n<ul>\n<li>解析code字符串，利用堆栈深度检测算法，将非法字符串 <code>{}</code>做简单计算 或者 <code>eval</code> 等关键字，然后报错处理</li>\n</ul>\n<p>问题3： 如何解决修改原型链方法实现逃逸，既可以获取沙箱外的对象？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    (&#123;&#125;).constructor.prototype.toString = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        console.log('Escape')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((&#123;&#125;).toString()) <span class=\"comment\">// 输出Escape 正常应该输出[object Object]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这种只能在原型链上下功夫，将所有的原型链做一次封装，从而</li>\n</ul>\n<h2 id=\"基于iframe实现\"><a href=\"#基于iframe实现\" class=\"headerlink\" title=\"基于iframe实现\"></a>基于iframe实现</h2><p>利用<code>iframe</code>天然隔离机制，加上<code>postMessage</code>通讯机制，可以快速实现一个简易沙箱，具体步骤如下：</p>\n<ul>\n<li>创建一个iframe，获取其window作为替代对象</li>\n<li>将function执行放到iframe里，不会影响其沙箱外程序使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IframeSandbox</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个 iframe 对象，取出其中的原生浏览器全局对象作为沙箱的全局对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>, &#123;<span class=\"attr\">url</span>: <span class=\"string\">'about:blank'</span>&#125;)</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(iframe)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sandboxGlobal = iframe.contentWindow <span class=\"comment\">// 沙箱运行时的全局对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    excute(code)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fn = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.sandboxGlobal.Function(<span class=\"string\">'sandbox'</span>, <span class=\"string\">`with(sandbox)&#123;<span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(<span class=\"keyword\">this</span>.sandboxGlobal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fakeBox = <span class=\"keyword\">new</span> IframeSandbox();</span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"string\">`a = 1;console.log(a)`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fakeBox.excute(code));  <span class=\"comment\">// 输出a:1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'在沙箱外获取沙箱内设置的全局值a:'</span>, a); <span class=\"comment\">// a is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>问题1： 需要解决其调用<code>parent</code>进行逃逸获取？</p>\n<ul>\n<li>最佳方案是通过<code>Proxy</code>对iframe的window对象进行拦截代理即可</li>\n</ul>\n<h2 id=\"基于ShadowRealm-提案的实现\"><a href=\"#基于ShadowRealm-提案的实现\" class=\"headerlink\" title=\"基于ShadowRealm 提案的实现\"></a>基于ShadowRealm 提案的实现</h2><blockquote>\n<p>ShadowRealm API 是一个新的 JavaScript 提案，它允许一个 JS 运行时创建多个高度隔离的 JS 运行环境（realm），每个 realm 具有独立的全局对象和内建对象。</p>\n</blockquote>\n<p>通俗的说，这是JavaScript自带的沙箱API，你可以利用它快速实现上面需要通过proxy或iframe才能实现的隔离机制。</p>\n<p>ShadowRealm声明：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadowRealm</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>();</span><br><span class=\"line\">  evaluate(sourceText: string): PrimitiveValueOrCallable;</span><br><span class=\"line\">  importValue(specifier: string, bindingName: string): Promise&lt;PrimitiveValueOrCallable&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>evaluate(sourceText: string)</code> 同步执行代码字符串，类似 eval()</li>\n<li><code>importValue(specifier: string, bindingName: string)</code> 异步执行代码字符串</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sr = <span class=\"keyword\">new</span> ShadowRealm();</span><br><span class=\"line\">globalThis.test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">sr.evaluate(<span class=\"string\">`globalThis.test = 'test ShadowRealm'; console.log(globalThis.test)`</span>) <span class=\"comment\">// 输出 test ShadowRealm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个文件  my-module.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values.reduce(<span class=\"function\">(<span class=\"params\">prev, value</span>) =&gt;</span> prev + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sr = <span class=\"keyword\">new</span> ShadowRealm();</span><br><span class=\"line\"><span class=\"keyword\">const</span> wrappedSum = <span class=\"keyword\">await</span> sr.importValue(<span class=\"string\">'./my-module.js'</span>, <span class=\"string\">'sum'</span>); <span class=\"comment\">// 加载js模块，然后获取里面函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wrappedSum(<span class=\"string\">'hi'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'folks'</span>, <span class=\"string\">'!'</span>)); <span class=\"comment\">// 输出 hi folks !</span></span><br></pre></td></tr></table></figure>\n\n<p>其实再来实现一个沙箱就很简单了，因为ShadownRealm本身就是一个沙箱。</p>\n<h2 id=\"其他方案\"><a href=\"#其他方案\" class=\"headerlink\" title=\"其他方案\"></a>其他方案</h2><h3 id=\"Web-Workers\"><a href=\"#Web-Workers\" class=\"headerlink\" title=\"Web Workers\"></a>Web Workers</h3><p><code>Web Workers</code>代码运行在独立的进程中，通信是异步的，无法获取当前程序一些属性或共享状态，且有一点无法不支持 DOM 操作，必须通过 postMessage 通知 UI 主线程来实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workerSandbox</span>(<span class=\"params\">appCode</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([appCode]);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> appWorker = <span class=\"keyword\">new</span> Worker(<span class=\"built_in\">window</span>.URL.createObjectURL(blob));</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">workerSandbox(<span class=\"string\">'const a = 1;console.log(a);'</span>) <span class=\"comment\">// 输出1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// a not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vm-模块\"><a href=\"#vm-模块\" class=\"headerlink\" title=\"vm 模块\"></a>vm 模块</h3><p>Node.js 上的 vm 模块，与 ShadowRealm API 类似，但具有更多功能：缓存 JavaScript 引擎、拦截 import() 等等。但它唯一的缺点就是不能跨平台，只能在 Node.js 环境下使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"built_in\">require</span>(<span class=\"string\">'vm'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sandbox = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vm.createContext(sandbox)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> whatIsThis = vm.runInContext(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    a = 2 ;</span></span><br><span class=\"line\"><span class=\"string\">`</span>, sandbox);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sandbox) <span class=\"comment\">// 输出2</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"沙箱错误捕获\"><a href=\"#沙箱错误捕获\" class=\"headerlink\" title=\"沙箱错误捕获\"></a>沙箱错误捕获</h1><p>在完成沙箱主体后，还需要对沙箱内部错误进行捕获再次处理，从而不影响主体程序的执行。</p>\n<p>这一块其实就在执行动态代码那里，做一层<code>try/catch</code>基本上可以完成的错误捕获。</p>\n<h1 id=\"沙箱逃逸\"><a href=\"#沙箱逃逸\" class=\"headerlink\" title=\"沙箱逃逸\"></a>沙箱逃逸</h1><p>沙箱逃逸（Sandbox Escape），沙箱于作者而言是一种安全策略，但于使用者而言可能是一种束缚。脑洞大开的开发者们尝试用各种方式摆脱这种束缚，也称之为沙箱逃逸。</p>\n<p>沙箱逃逸的几种方式：</p>\n<ul>\n<li>访问沙箱执行上下文中某个对象内部属性时，如：通过window.parent</li>\n<li>通过访问原型链实现逃逸</li>\n</ul>\n<p>如何解决沙箱逃逸：</p>\n<blockquote>\n<p>自定义解释器，分析源程序结构从而手动控制每一条语句的执行逻辑，如：<code>Babel</code>等</p>\n</blockquote>\n<p>简单的说，就是用JS去实现JS解释器，将每行代码进行解析，然后增加一些安全机制，从而避免非法代码入侵。</p>\n<p>后续会专门写个文章去实现一个简单的JS解释器，这里就不做多阐述。更新后会放在这里链接。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">MDN Proxy</a></li>\n<li><a href=\"https://github.com/careyke/frontend_knowledge_structure/blob/master/microFrontend/question02_03_js_sandbox.md\" target=\"_blank\" rel=\"noopener\">qiankun中JS沙箱的实现</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1482264\" target=\"_blank\" rel=\"noopener\">CodeSandbox 如何工作</a></li>\n<li><a href=\"https://juejin.cn/post/7089822133559230501\" target=\"_blank\" rel=\"noopener\">Javascript 新特性前瞻 —— ShadowRealms</a></li>\n</ul>"},{"title":"低代码系列——组件描述DSL","date":"2023-02-12T00:51:01.000Z","_content":"\n# 背景\n之前写了一篇[《低代码系列——js沙箱设计》](/lowcode/sandbox.html)，于是萌生了干脆将完整的低代码平台设计的整个过程都整理一遍，然后输出文章，同时准备搞个人开源项目用来实现低代码平台。\n\n低代码平台核心部分是编辑器，编辑器里最重要一块如何将组件抽象化，存储到一个可描述的对象中。\n\n下面我们就针对这种组件抽象描述做一次深入的设计。\n\n# 组件\n\n## 是什么\n\n\n\n# 参考资料\n\n[JSON Schema 规范](https://json-schema.apifox.cn/)\n[JSON 可视化](https://jsoncrack.com/)","source":"_posts/lowcode/component.md","raw":"---\ntitle: 低代码系列——组件描述DSL\ndate: 2023-02-12 08:51:01\ntags:\n    - 技术分享\n    - 低代码\n---\n\n# 背景\n之前写了一篇[《低代码系列——js沙箱设计》](/lowcode/sandbox.html)，于是萌生了干脆将完整的低代码平台设计的整个过程都整理一遍，然后输出文章，同时准备搞个人开源项目用来实现低代码平台。\n\n低代码平台核心部分是编辑器，编辑器里最重要一块如何将组件抽象化，存储到一个可描述的对象中。\n\n下面我们就针对这种组件抽象描述做一次深入的设计。\n\n# 组件\n\n## 是什么\n\n\n\n# 参考资料\n\n[JSON Schema 规范](https://json-schema.apifox.cn/)\n[JSON 可视化](https://jsoncrack.com/)","slug":"lowcode/component","published":1,"updated":"2023-02-13T13:28:37.860Z","_id":"cldzxtpug0001sqpc9tfp3ixp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前写了一篇<a href=\"/lowcode/sandbox.html\">《低代码系列——js沙箱设计》</a>，于是萌生了干脆将完整的低代码平台设计的整个过程都整理一遍，然后输出文章，同时准备搞个人开源项目用来实现低代码平台。</p>\n<p>低代码平台核心部分是编辑器，编辑器里最重要一块如何将组件抽象化，存储到一个可描述的对象中。</p>\n<p>下面我们就针对这种组件抽象描述做一次深入的设计。</p>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://json-schema.apifox.cn/\" target=\"_blank\" rel=\"noopener\">JSON Schema 规范</a><br><a href=\"https://jsoncrack.com/\" target=\"_blank\" rel=\"noopener\">JSON 可视化</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>之前写了一篇<a href=\"/lowcode/sandbox.html\">《低代码系列——js沙箱设计》</a>，于是萌生了干脆将完整的低代码平台设计的整个过程都整理一遍，然后输出文章，同时准备搞个人开源项目用来实现低代码平台。</p>\n<p>低代码平台核心部分是编辑器，编辑器里最重要一块如何将组件抽象化，存储到一个可描述的对象中。</p>\n<p>下面我们就针对这种组件抽象描述做一次深入的设计。</p>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://json-schema.apifox.cn/\" target=\"_blank\" rel=\"noopener\">JSON Schema 规范</a><br><a href=\"https://jsoncrack.com/\" target=\"_blank\" rel=\"noopener\">JSON 可视化</a></p>\n"},{"title":"从pnpm到对比各种js包管理工具","date":"2023-01-06T10:00:01.000Z","toc":true,"_content":"\n\n# 参考资料\n","source":"_posts/today/20230219.md","raw":"---\ntitle: 从pnpm到对比各种js包管理工具\ndate: 2023-01-06 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n\n# 参考资料\n","slug":"today/20230219","published":1,"updated":"2023-02-20T13:01:07.048Z","_id":"cle1dt4jn0003h5pcmbmyz9vi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1>"},{"title":"从Prometheus学会搭建监控系统","date":"2023-01-06T10:00:01.000Z","toc":true,"_content":"\n\n# 参考资料\n\n[Prometheus中文教程](https://yunlzheng.gitbook.io/prometheus-book/)","source":"_posts/today/20230220.md","raw":"---\ntitle: 从Prometheus学会搭建监控系统\ndate: 2023-01-06 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n\n# 参考资料\n\n[Prometheus中文教程](https://yunlzheng.gitbook.io/prometheus-book/)","slug":"today/20230220","published":1,"updated":"2023-02-13T14:02:34.662Z","_id":"cle2vxjj90003nipcokn9x1wm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://yunlzheng.gitbook.io/prometheus-book/\" target=\"_blank\" rel=\"noopener\">Prometheus中文教程</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://yunlzheng.gitbook.io/prometheus-book/\" target=\"_blank\" rel=\"noopener\">Prometheus中文教程</a></p>\n"},{"title":"从Copilot学到了什么","date":"2023-02-11T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n\n# 参考资料\n\n[盘点开源“Copilot”，do it yourself](https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/)\n[如何搭建免费的GitHub Copilot？](https://blog.csdn.net/gel1234/article/details/127050405)","source":"_posts/today/20230221.md","raw":"---\ntitle: 从Copilot学到了什么\ndate: 2023-02-11 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n\n# 参考资料\n\n[盘点开源“Copilot”，do it yourself](https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/)\n[如何搭建免费的GitHub Copilot？](https://blog.csdn.net/gel1234/article/details/127050405)","slug":"today/20230221","published":1,"updated":"2023-02-13T14:03:16.059Z","_id":"cle2vycx10009nipclo9fq7xr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/\" target=\"_blank\" rel=\"noopener\">盘点开源“Copilot”，do it yourself</a><br><a href=\"https://blog.csdn.net/gel1234/article/details/127050405\" target=\"_blank\" rel=\"noopener\">如何搭建免费的GitHub Copilot？</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/\" target=\"_blank\" rel=\"noopener\">盘点开源“Copilot”，do it yourself</a><br><a href=\"https://blog.csdn.net/gel1234/article/details/127050405\" target=\"_blank\" rel=\"noopener\">如何搭建免费的GitHub Copilot？</a></p>\n"},{"title":"个人技术栈(持续更新)","date":"2023-02-14T14:00:00.000Z","top":10,"_content":"\n# 技术栈\n主要总结个人技术栈，会不停更新，直到部分被淘汰。\n\n<!-- more -->\n{% pullquote mindmap mindmap-md %}\n- 个人\n  - 语言\n    - JavaScript\n      - JavaScript\n      - Typescript\n      - Node.js\n    - CSS\n    - HTML\n  - 框架\n    - Vue\n    - React\n  - 工程化\n    - 构建工具\n      - WebPack\n      - Rollup\n      - Vite\n      - 已淘汰\n        - gulp\n    - 测试\n      - 单元测试\n      - 自动化测试\n    - 脚手架\n  - 运维\n  - 移动端\n    - Native\n      - React native\n      - Weex\n      - Flutter\n      - hippy\n    - 小程序\n      - Uniapp\n  - 算法\n  - 软技能\n    - PPT\n{% endpullquote %}","source":"_posts/study/front-stack.md","raw":"---\ntitle: 个人技术栈(持续更新)\ndate: 2023-02-14 22:00:00\ntop: 10\ntags:\n    - 学习总结\n---\n\n# 技术栈\n主要总结个人技术栈，会不停更新，直到部分被淘汰。\n\n<!-- more -->\n{% pullquote mindmap mindmap-md %}\n- 个人\n  - 语言\n    - JavaScript\n      - JavaScript\n      - Typescript\n      - Node.js\n    - CSS\n    - HTML\n  - 框架\n    - Vue\n    - React\n  - 工程化\n    - 构建工具\n      - WebPack\n      - Rollup\n      - Vite\n      - 已淘汰\n        - gulp\n    - 测试\n      - 单元测试\n      - 自动化测试\n    - 脚手架\n  - 运维\n  - 移动端\n    - Native\n      - React native\n      - Weex\n      - Flutter\n      - hippy\n    - 小程序\n      - Uniapp\n  - 算法\n  - 软技能\n    - PPT\n{% endpullquote %}","slug":"study/front-stack","published":1,"updated":"2023-02-14T13:16:34.626Z","_id":"cle3wdg0m000cnipczm67j234","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1><p>主要总结个人技术栈，会不停更新，直到部分被淘汰。</p>\n<a id=\"more\"></a>\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>个人<ul>\n<li>语言<ul>\n<li>JavaScript<ul>\n<li>JavaScript</li>\n<li>Typescript</li>\n<li>Node.js</li>\n</ul>\n</li>\n<li>CSS</li>\n<li>HTML</li>\n</ul>\n</li>\n<li>框架<ul>\n<li>Vue</li>\n<li>React</li>\n</ul>\n</li>\n<li>工程化<ul>\n<li>构建工具<ul>\n<li>WebPack</li>\n<li>Rollup</li>\n<li>Vite</li>\n<li>已淘汰<ul>\n<li>gulp</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>测试<ul>\n<li>单元测试</li>\n<li>自动化测试</li>\n</ul>\n</li>\n<li>脚手架</li>\n</ul>\n</li>\n<li>运维</li>\n<li>移动端<ul>\n<li>Native<ul>\n<li>React native</li>\n<li>Weex</li>\n<li>Flutter</li>\n<li>hippy</li>\n</ul>\n</li>\n<li>小程序<ul>\n<li>Uniapp</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算法</li>\n<li>软技能<ul>\n<li>PPT</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1><p>主要总结个人技术栈，会不停更新，直到部分被淘汰。</p>","more":"<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>个人<ul>\n<li>语言<ul>\n<li>JavaScript<ul>\n<li>JavaScript</li>\n<li>Typescript</li>\n<li>Node.js</li>\n</ul>\n</li>\n<li>CSS</li>\n<li>HTML</li>\n</ul>\n</li>\n<li>框架<ul>\n<li>Vue</li>\n<li>React</li>\n</ul>\n</li>\n<li>工程化<ul>\n<li>构建工具<ul>\n<li>WebPack</li>\n<li>Rollup</li>\n<li>Vite</li>\n<li>已淘汰<ul>\n<li>gulp</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>测试<ul>\n<li>单元测试</li>\n<li>自动化测试</li>\n</ul>\n</li>\n<li>脚手架</li>\n</ul>\n</li>\n<li>运维</li>\n<li>移动端<ul>\n<li>Native<ul>\n<li>React native</li>\n<li>Weex</li>\n<li>Flutter</li>\n<li>hippy</li>\n</ul>\n</li>\n<li>小程序<ul>\n<li>Uniapp</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算法</li>\n<li>软技能<ul>\n<li>PPT</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>"},{"title":"创业idea——AI种植与花店","date":"2023-02-14T13:51:01.000Z","_content":"\n# 背景\n\n此想法源于一个抖音视频，里面有个商业模式，通过摄像头+气味嗅觉捕捉器+液体分析器，可以识别当前植物的状态，且占地面积不大，可以直接树立到家里墙上。大概如下图所示：\n\n![](/assets/img/idea-20230214-3.png)\n<!-- more -->\n![](/assets/img/idea-20230214-1.png)\n![](/assets/img/idea-20230214-2.png)\n\n\n# 创业想法\n因此萌生出一种想法，目前还没有关注这一块，家里大部分的时候也有盆栽或者绿植，都是从花店里直接购买的，那么如果利用这种技术去实现互利网AI种植，是不是一种创新的创业思维呢？\n\n目前花店主要有以下几种痛点：\n\n- 购买盆栽后，没有完整的种植经验，很快就死了\n- 无法知道自己需要什么的盆栽\n\n\n商业模式：\n\n- 分尺寸，如：小盆栽适合办公位，中大型的适合放在家庭做墙壁或者隔墙板，超大型就是AI农业大棚型\n- 商场里租一个大店铺，除了宣传，还可以将一些位置租给某些用户，给他们去做亲子活动\n\n后续可以尝试继续研究，留此文做一个念想。\n\n# 已经实施的项目\n\n- [马斯克弟弟 火星种菜项目 SquareRoot](https://www.squarerootsgrow.com/about)","source":"_posts/ideas/20230214.md","raw":"---\ntitle: 创业idea——AI种植与花店\ndate: 2023-02-14 21:51:01\ntags:\n    - 奇思妙想\n---\n\n# 背景\n\n此想法源于一个抖音视频，里面有个商业模式，通过摄像头+气味嗅觉捕捉器+液体分析器，可以识别当前植物的状态，且占地面积不大，可以直接树立到家里墙上。大概如下图所示：\n\n![](/assets/img/idea-20230214-3.png)\n<!-- more -->\n![](/assets/img/idea-20230214-1.png)\n![](/assets/img/idea-20230214-2.png)\n\n\n# 创业想法\n因此萌生出一种想法，目前还没有关注这一块，家里大部分的时候也有盆栽或者绿植，都是从花店里直接购买的，那么如果利用这种技术去实现互利网AI种植，是不是一种创新的创业思维呢？\n\n目前花店主要有以下几种痛点：\n\n- 购买盆栽后，没有完整的种植经验，很快就死了\n- 无法知道自己需要什么的盆栽\n\n\n商业模式：\n\n- 分尺寸，如：小盆栽适合办公位，中大型的适合放在家庭做墙壁或者隔墙板，超大型就是AI农业大棚型\n- 商场里租一个大店铺，除了宣传，还可以将一些位置租给某些用户，给他们去做亲子活动\n\n后续可以尝试继续研究，留此文做一个念想。\n\n# 已经实施的项目\n\n- [马斯克弟弟 火星种菜项目 SquareRoot](https://www.squarerootsgrow.com/about)","slug":"ideas/20230214","published":1,"updated":"2023-02-14T13:27:10.323Z","_id":"cle48sx2n000gnipc54nee4ju","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>此想法源于一个抖音视频，里面有个商业模式，通过摄像头+气味嗅觉捕捉器+液体分析器，可以识别当前植物的状态，且占地面积不大，可以直接树立到家里墙上。大概如下图所示：</p>\n<p><img src=\"/assets/img/idea-20230214-3.png\" alt></p>\n<a id=\"more\"></a>\n<p><img src=\"/assets/img/idea-20230214-1.png\" alt><br><img src=\"/assets/img/idea-20230214-2.png\" alt></p>\n<h1 id=\"创业想法\"><a href=\"#创业想法\" class=\"headerlink\" title=\"创业想法\"></a>创业想法</h1><p>因此萌生出一种想法，目前还没有关注这一块，家里大部分的时候也有盆栽或者绿植，都是从花店里直接购买的，那么如果利用这种技术去实现互利网AI种植，是不是一种创新的创业思维呢？</p>\n<p>目前花店主要有以下几种痛点：</p>\n<ul>\n<li>购买盆栽后，没有完整的种植经验，很快就死了</li>\n<li>无法知道自己需要什么的盆栽</li>\n</ul>\n<p>商业模式：</p>\n<ul>\n<li>分尺寸，如：小盆栽适合办公位，中大型的适合放在家庭做墙壁或者隔墙板，超大型就是AI农业大棚型</li>\n<li>商场里租一个大店铺，除了宣传，还可以将一些位置租给某些用户，给他们去做亲子活动</li>\n</ul>\n<p>后续可以尝试继续研究，留此文做一个念想。</p>\n<h1 id=\"已经实施的项目\"><a href=\"#已经实施的项目\" class=\"headerlink\" title=\"已经实施的项目\"></a>已经实施的项目</h1><ul>\n<li><a href=\"https://www.squarerootsgrow.com/about\" target=\"_blank\" rel=\"noopener\">马斯克弟弟 火星种菜项目 SquareRoot</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>此想法源于一个抖音视频，里面有个商业模式，通过摄像头+气味嗅觉捕捉器+液体分析器，可以识别当前植物的状态，且占地面积不大，可以直接树立到家里墙上。大概如下图所示：</p>\n<p><img src=\"/assets/img/idea-20230214-3.png\" alt></p>","more":"<p><img src=\"/assets/img/idea-20230214-1.png\" alt><br><img src=\"/assets/img/idea-20230214-2.png\" alt></p>\n<h1 id=\"创业想法\"><a href=\"#创业想法\" class=\"headerlink\" title=\"创业想法\"></a>创业想法</h1><p>因此萌生出一种想法，目前还没有关注这一块，家里大部分的时候也有盆栽或者绿植，都是从花店里直接购买的，那么如果利用这种技术去实现互利网AI种植，是不是一种创新的创业思维呢？</p>\n<p>目前花店主要有以下几种痛点：</p>\n<ul>\n<li>购买盆栽后，没有完整的种植经验，很快就死了</li>\n<li>无法知道自己需要什么的盆栽</li>\n</ul>\n<p>商业模式：</p>\n<ul>\n<li>分尺寸，如：小盆栽适合办公位，中大型的适合放在家庭做墙壁或者隔墙板，超大型就是AI农业大棚型</li>\n<li>商场里租一个大店铺，除了宣传，还可以将一些位置租给某些用户，给他们去做亲子活动</li>\n</ul>\n<p>后续可以尝试继续研究，留此文做一个念想。</p>\n<h1 id=\"已经实施的项目\"><a href=\"#已经实施的项目\" class=\"headerlink\" title=\"已经实施的项目\"></a>已经实施的项目</h1><ul>\n<li><a href=\"https://www.squarerootsgrow.com/about\" target=\"_blank\" rel=\"noopener\">马斯克弟弟 火星种菜项目 SquareRoot</a></li>\n</ul>"},{"title":"如何实现HTTP2.0","date":"2023-02-11T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n\n# 参考资料\n\n[盘点开源“Copilot”，do it yourself](https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/)\n[如何搭建免费的GitHub Copilot？](https://blog.csdn.net/gel1234/article/details/127050405)","source":"_posts/today/20230222.md","raw":"---\ntitle: 如何实现HTTP2.0\ndate: 2023-02-11 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n\n# 参考资料\n\n[盘点开源“Copilot”，do it yourself](https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/)\n[如何搭建免费的GitHub Copilot？](https://blog.csdn.net/gel1234/article/details/127050405)","slug":"today/20230222","published":1,"updated":"2023-02-14T13:37:49.613Z","_id":"cle4abw7x000lnipcl0yi2slx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/\" target=\"_blank\" rel=\"noopener\">盘点开源“Copilot”，do it yourself</a><br><a href=\"https://blog.csdn.net/gel1234/article/details/127050405\" target=\"_blank\" rel=\"noopener\">如何搭建免费的GitHub Copilot？</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://lowin.li/2022/06/27/pan-dian-kai-yuan-copilot/\" target=\"_blank\" rel=\"noopener\">盘点开源“Copilot”，do it yourself</a><br><a href=\"https://blog.csdn.net/gel1234/article/details/127050405\" target=\"_blank\" rel=\"noopener\">如何搭建免费的GitHub Copilot？</a></p>\n"},{"title":"不要再使用轮询了，请用SSE服务端推送完成页面实时查询","date":"2023-02-11T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n\n# 参考资料\n[数据不够实时：试试长连接？](https://mp.weixin.qq.com/s/K8g2PNO4Ixc1LrUafXunPQ)\n","source":"_posts/today/20230223.md","raw":"---\ntitle: 不要再使用轮询了，请用SSE服务端推送完成页面实时查询\ndate: 2023-02-11 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n\n# 参考资料\n[数据不够实时：试试长连接？](https://mp.weixin.qq.com/s/K8g2PNO4Ixc1LrUafXunPQ)\n","slug":"today/20230223","published":1,"updated":"2023-02-14T13:41:26.762Z","_id":"cle4ahj0n000rnipcy3tc3a5e","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s/K8g2PNO4Ixc1LrUafXunPQ\" target=\"_blank\" rel=\"noopener\">数据不够实时：试试长连接？</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s/K8g2PNO4Ixc1LrUafXunPQ\" target=\"_blank\" rel=\"noopener\">数据不够实时：试试长连接？</a></p>\n"},{"title":"性能优化我们到底能做些什么东西","date":"2023-02-11T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n\n# 参考资料\n[性能优化经验分享](https://mp.weixin.qq.com/s/ZfIWKRbF3Yq7sNFG2TsQFw)\n","source":"_posts/today/20230224.md","raw":"---\ntitle: 性能优化我们到底能做些什么东西\ndate: 2023-02-11 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n\n# 参考资料\n[性能优化经验分享](https://mp.weixin.qq.com/s/ZfIWKRbF3Yq7sNFG2TsQFw)\n","slug":"today/20230224","published":1,"updated":"2023-02-14T13:49:13.528Z","_id":"cle4avdca000xnipcrdzwt1hq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s/ZfIWKRbF3Yq7sNFG2TsQFw\" target=\"_blank\" rel=\"noopener\">性能优化经验分享</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s/ZfIWKRbF3Yq7sNFG2TsQFw\" target=\"_blank\" rel=\"noopener\">性能优化经验分享</a></p>\n"},{"title":"数据可视化收集","date":"2023-02-14T13:51:01.000Z","_content":"\n# 数据可视化收集\n收集数据可视化或报表开源系统，为了能够根据不同数据源展示可视化界面。\n\n## DataEase\n人人可用的开源数据可视化分析工具\n\n- \n官网地址：[https://dataease.io/](https://dataease.io/)\nGithub： [https://github.com/dataease/dataease/](https://github.com/dataease/dataease/)","source":"_posts/ideas/20230215.md","raw":"\n---\ntitle: 数据可视化收集\ndate: 2023-02-14 21:51:01\ntags:\n    - 奇思妙想\n---\n\n# 数据可视化收集\n收集数据可视化或报表开源系统，为了能够根据不同数据源展示可视化界面。\n\n## DataEase\n人人可用的开源数据可视化分析工具\n\n- \n官网地址：[https://dataease.io/](https://dataease.io/)\nGithub： [https://github.com/dataease/dataease/](https://github.com/dataease/dataease/)","slug":"ideas/20230215","published":1,"updated":"2023-02-15T06:46:08.054Z","_id":"cle5b3zl30010nipcdmtke3hq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据可视化收集\"><a href=\"#数据可视化收集\" class=\"headerlink\" title=\"数据可视化收集\"></a>数据可视化收集</h1><p>收集数据可视化或报表开源系统，为了能够根据不同数据源展示可视化界面。</p>\n<h2 id=\"DataEase\"><a href=\"#DataEase\" class=\"headerlink\" title=\"DataEase\"></a>DataEase</h2><p>人人可用的开源数据可视化分析工具</p>\n<ul>\n<li>官网地址：<a href=\"https://dataease.io/\" target=\"_blank\" rel=\"noopener\">https://dataease.io/</a><br>Github： <a href=\"https://github.com/dataease/dataease/\" target=\"_blank\" rel=\"noopener\">https://github.com/dataease/dataease/</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据可视化收集\"><a href=\"#数据可视化收集\" class=\"headerlink\" title=\"数据可视化收集\"></a>数据可视化收集</h1><p>收集数据可视化或报表开源系统，为了能够根据不同数据源展示可视化界面。</p>\n<h2 id=\"DataEase\"><a href=\"#DataEase\" class=\"headerlink\" title=\"DataEase\"></a>DataEase</h2><p>人人可用的开源数据可视化分析工具</p>\n<ul>\n<li>官网地址：<a href=\"https://dataease.io/\" target=\"_blank\" rel=\"noopener\">https://dataease.io/</a><br>Github： <a href=\"https://github.com/dataease/dataease/\" target=\"_blank\" rel=\"noopener\">https://github.com/dataease/dataease/</a></li>\n</ul>\n"},{"title":"Meteor.js尝鲜实战","date":"2023-01-06T10:00:01.000Z","toc":true,"_content":"\n\n# 参考资料\n\n[把 puppeteer 融入调试流程，调试体验爽翻了！](https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd)","source":"_posts/today/20230225.md","raw":"---\ntitle: Meteor.js尝鲜实战\ndate: 2023-01-06 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n\n# 参考资料\n\n[把 puppeteer 融入调试流程，调试体验爽翻了！](https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd)","slug":"today/20230225","published":1,"updated":"2023-02-01T08:06:54.889Z","_id":"cle5qot8e0012nipcoq7t2o7c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">把 puppeteer 融入调试流程，调试体验爽翻了！</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">把 puppeteer 融入调试流程，调试体验爽翻了！</a></p>\n"},{"title":"前端自动化UI测试的完整方案","date":"2023-02-15T10:00:01.000Z","toc":true,"_content":"\n# 背景\n\n开发公共平台项目，测试资源相对比较少，因此对开发者自身而言，为了维护项目的稳定性，需要对平台做各类测试，即使有测试环境，但是也很容易缺乏测试场景导致带着bug上线的情况。\n\n因此我们需要做完整自动化测试方案，来避免这类常规错误，提高平台的可用性和稳定性。\n\n这里先简单描述自动化测试的分类：\n\n- 单元测试，验证独立的单元模块代码或函数是否正常工作\n- 集成测试，验证多个单元模块间的协同工作\n- UI 测试，只针对前端UI部分测试，后端数据采用mock方式\n- 端到端测试，从用户的角度，通过机器来模仿用户在真实浏览器中验证应用交互\n- 快照测试，验证程序的UI变化\n\n接下来我们将根据这些测试类如何在项目中落地完整方案。\n\n<!-- more -->\n\n# 单元测试\n前端项目主要用的单元测试框架为`Jest`和`Mocha`，下面就`Jest`框架如何实现一个单元测试。\n\n## 实现步骤\n\n1. 安装依赖\n```shell\nnpm i jest --save-dev\n# 如果是typescript还需要安装 ts\nnpm i ts-jest babel-jest --save-dev\n# 安装类型\nnpm i @types/jest --save-dev\n```\n\n2. 新增测试命令，在`package.json`中`scripts`新增代码\n```js\n{\n    ...\n    \"scripts\": {\n        \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\",\n  },\n}\n```\n\n3. 新增配置文件`jest.config.js`，参考配置如下：\n```js\nmodule.exports = {\n    \"testEnvironment\": \"node\",\n    testMatch: [ //匹配测试用例的文件\n        '<rootDir>/test/**/*.test.ts'\n    ],\n    transform: {\n        '^.+\\\\.js$': '<rootDir>/node_modules/babel-jest', // babel编译\n        '^.+\\\\.ts$': '<rootDir>/node_modules/ts-jest', // typescript编译\n    },\n    \"collectCoverage\": true\n}\n```\n\n4. 编写单元测试代码，在根目录下新建测试文件`test/sum.test.js`，标识对`a.ts`文件做测试，代码如下：\n\n```js\n//sum.ts\nexport const sum = (a, b) => {\n    return a + b;\n}\n\n//sum.test.ts\nimport { sum } from '../src/sum'\n\ntest(\"test two num sum\", async () => {\n    const res = sum(5, 6);\n    expect(typeof res).toBe(\"number\")\n    expect(res).toBe(11)\n})\n```\n\n5. 开始自动化测试`yarn test`或者`npm run test`，然后会出现如下：\n\n```shel\nPASS  ./sum.test.ts\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n sum.ts   |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.394 s, estimated 3 s\n```\n简单说明一下上面的表格几个字段作用：\n\n- File，标识当前测试的文件\n- Stmts，语句覆盖率（statement coverage）：是不是每个语句都执行了\n- Branch，分支覆盖率（branch coverage）：是不是每个if代码块都执行了\n- Funcs，函数覆盖率（function coverage）：是不是每个函数都调用了\n- Lines，行覆盖率（line coverage）：是不是每一行都执行了\n\n## 怎么提高单元测试覆盖率\n\n分为两个部分：\n\n- 提高代码质量，减少代码块的大小，减少各类复杂逻辑判断，不去测试有依赖性函数，如：需接口、数据库等\n- 提高开发意愿，一自动化生成单元测试，二采用设置覆盖率指标，三是确定单元测试规范（哪些模块需要写，哪些不需要写）\n\n# 集成测试\n集成测试主要是测试当单元模块组合到一起之后是否功能正常。\n\n相比较单元测试只是针对某个函数或方案做单一功能测试，集成测试是针对某个功能模块做完整的测试，因此在测试粒度上的选择，需要开发自己去衡量，但是一般的选择如下几种：\n\n- 如果有UI展示的，一般通过router分割页面粒度去进行测试，尽可能的少mock依赖，尽量的渲染全子组件\n- 如果是库不含JS的，则以功能模块为粒度进行测试，测试数据尽量丰富且贴近真实数据\n\n具体实现步骤其实和单元测试一样，只是所写的测试功能比单元测试范围要大且完整。\n\n# UI 测试\n\n> 相比较后面`端到端测试`，UI测试只是对于前端的测试，是脱离真实后端环境的，仅仅只是将前端放在真实环境中运行，而后端和数据都应该使用 Mock 的。\n\nUI 测试在前端上，也可以叫组件测试\n那么如何实现UI测试，其实依旧可以使用`Jest`、`Enzyme` `selenium` `Vitest`等框架，目前都支持将`Vue`、`React`等组件进行模拟渲染完成。\n\n利用`Jest`实现对React UI组件测试，代码如下：\n```js\n// React Home.jsx\nconst Home = ()=>{\n    return (\n        <div>\n            <h1>Home</h1>\n        </div>\n    )\n};\n\n// home.test.js\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\"; // createRoot 是React18 新出的特性\nimport { act } from \"react-dom/test-utils\"; // react支持测试动作\n\nimport Home from \"../src/pages/home\";\n\nglobal.IS_REACT_ACT_ENVIRONMENT = true\n\nlet root = null;\nlet container = null;\nbeforeEach(() => {\n    // 创建一个 DOM 元素作为渲染目标\n    container = document.createElement(\"div\");\n    document.body.appendChild(container);\n    root = createRoot(container)\n});\n\nafterEach(() => {\n    // 退出时进行清理\n    // root.unmount(container);\n    container.remove();\n    container = null;\n});\n\nit(\"渲染有或无名称\", () => {\n    act(() => {\n        root.render(<Home />);\n    });\n    expect(container.textContent).toBe(\"Home\");\n});\n\n```\n\n当然你依然可以使用`Jest`去做Vue UI 测试，但是`Vitest`实现在vite项目中更加好用，代码如下：\n```js\n// Home.vue\n<script setup lang=\"ts\">\ndefineProps<{ msg: string }>()\n</script>\n\n<template>\n  <h1>{{ msg }}</h1>\n</template>\n\n//home.test.js\nimport { mount } from '@vue/test-utils'\nimport Home from '../src/components/Home.vue'\n\ntest('mount component', async () => {\n    expect(Home).toBeTruthy()\n    const wrapper = mount(Home, {\n        props: {\n            msg: 'Home',\n        },\n      })\n    expect(wrapper.html()).toContain('Home')\n})\n```\n##  快照测试\n\n快照测试是属于UI测试的一种分类，主要用于区分同样的数据下，页面UI展示是否发生变化，如果不一样则比较测试结果失败，有异常或者功能迭代。针对快照测试详细说明如下：\n\n> 快照测试类似于“找不同”游戏。快照测试会给运行中的应用程序拍一张图片，并将其与以前保存的图片进行比较。如果图像不同，则测试失败。这种测试方法对确保应用程序代码变更后是否仍然可以正确渲染很有帮助。\n>\n> 当然，在前端中，其实并不是比较图片，而是比较前后生成的html结构，本质上是一个字符串的比较。\n\n同理，如果一个功能模块，针对同样的输入，得出的结果是不一样，那么也是一种快照测试。\n\n利用`Jest`实现快照测试代码如下（基本和UI测试一样）：\n```js\n// home.test.js\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { act } from \"react-dom/test-utils\";\nimport pretty from \"pretty\";\n\nimport Home from \"../src/pages/home\";\n\nglobal.IS_REACT_ACT_ENVIRONMENT = true\n\nlet root = null;\nlet container = null;\nbeforeEach(() => {\n    // 创建一个 DOM 元素作为渲染目标\n    container = document.createElement(\"div\");\n    document.body.appendChild(container);\n    root = createRoot(container)\n});\n\nafterEach(() => {\n    // 退出时进行清理\n    // root.unmount(container);\n    container.remove();\n    container = null;\n});\n\nit(\"渲染有或无名称\", () => {\n    act(() => {\n        root.render(<Home />);\n    });\n    expect(container.textContent).toBe(\"Home\");\n\n    // 快照对比 这里你可以先把html结构存储一份，然后再拿出来对比\n    expect(\n        pretty(container.innerHTML)).\n        toMatchInlineSnapshot(`\n\"<div>\n  <h1>Home1</h1>\n</div>\"\n`);\n});\n```\n\n# E2E测试\n\nE2E测试，也叫端到端测试，就是模拟真实环境下，用户不同操作行为的测试。\n\n目前主要进行E2E测试框架有如下几种：\n\n- puppeteer 一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome\n- cypress  现代网络构建的下一代前端测试工具， 编写更快、更容易和更可靠的测试\n- Selenium  是开源的自动化测试工具，它主要是用于Web 应用程序的自动化测试，不只局限于此，同时支持所有基于web 的管理任务自动化\n- NightWatch 是一个用于web应用和网站上执行自动化端到端（end-to-end）测试的集成框架，用于主流浏览器中，简化编写和执行多种类型地测试程序\n\n这几者的区别后面会有专门文章去描述，现在我们先利用`cypress`实现E2E测试代码， 以Vue项目为主，如下：\n步骤一，安装依赖\n```\nyarn add cypress -D\n```\n步骤二，新增脚本，package.json\n```json\n{\n    \"scripts\": {\n        \"cypress\": \"cypress open\"\n    }\n}\n```\n步骤三，后面按照其提示去添加测试文件，比如：`index.cy.ts`，然后修改代码如下：\n```js\ndescribe('template spec', () => {\n  it('has home text', () => {\n    // 访问首页\n    cy.visit('http://localhost:5173/')\n    // 断言是否有 Home 文字\n    cy.contains('Home')\n  })\n})\n```\n具体效果如下图：\n\n![](/assets/img/20230215.png)\n\n当然E2E没有这么简单，还有一些点击、输入等事件，甚至可以模拟登录等，这些详细操作放在后面cypress实战篇去讲解。\n\n# 测试覆盖率\n了解自动化测试后，我们还需要对测试覆盖率进行一个完整的了解。\n> 测试覆盖率(test coverage)是衡量软件测试完整性的一个重要指标。掌握测试覆盖率数据，有利于客观认识软件质量，正确了解测试状态，有效改进测试工作。\n\n其实上面提到单元测试的时候已经有讲过一些，这里再做一个完整都介绍。\n\n覆盖率主要分为以下几种：\n\n- 代码覆盖率， 如上述所说分为几种，如：行覆盖率、函数覆盖率等\n- 需求覆盖率，测试所覆盖的需求数量与总需求数量的比值\n\n# 总结\n\n自动化测试在前端开发是必不可少的一个环节，因为前端是直接面向用户的，即使有测试团队支持，也难免会出现测试遗漏的场景，或者加大测试人力成本。\n\n当然不同项目的自动化测试所需要的环节是不一样的，根据个人经验，建议不同场景采用自动化测试如下：\n\n- 开发纯函数库，建议写更多的单元测试 + 少量的集成测试\n- 开发组件库，建议写更多的单元测试、为每个组件编写快照测试、写少量的集成测试 + 端到端测试\n- 开发业务系统，建议写更多的集成测试、为工具类库、算法写单元测试、写少量的端到端测试\n- 开发公共平台项目，建议写更多的集成测试和完整的端到端测试\n\n\n# 相关资料\n\n- [React测试demo代码](https://github.com/qiubohong/qiubohong.github.io/tree/master/code/react/my-app)\n- [Vue测试demo代码](https://github.com/qiubohong/qiubohong.github.io/tree/master/code/vue/vite-project)\n\n# 参考资料\n\n- [把 puppeteer 融入调试流程，调试体验爽翻了！](https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd)\n- [JS最佳测试实践](https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme-zh-CN.md)\n- [如何使用Playwright绕过验证登录做端到端测试](https://blog.checklyhq.com/how-to-bypass-totp-based-2fa-login-flows-with-playwright/)\n- [前端自动化测试入门](https://juejin.cn/post/6844904194600599560)","source":"_posts/today/20230215.md","raw":"---\ntitle: 前端自动化UI测试的完整方案\ndate: 2023-02-15 18:00:01\ntoc: true\ntags:\n    - 每日更新\n    - 技术分享\n---\n\n# 背景\n\n开发公共平台项目，测试资源相对比较少，因此对开发者自身而言，为了维护项目的稳定性，需要对平台做各类测试，即使有测试环境，但是也很容易缺乏测试场景导致带着bug上线的情况。\n\n因此我们需要做完整自动化测试方案，来避免这类常规错误，提高平台的可用性和稳定性。\n\n这里先简单描述自动化测试的分类：\n\n- 单元测试，验证独立的单元模块代码或函数是否正常工作\n- 集成测试，验证多个单元模块间的协同工作\n- UI 测试，只针对前端UI部分测试，后端数据采用mock方式\n- 端到端测试，从用户的角度，通过机器来模仿用户在真实浏览器中验证应用交互\n- 快照测试，验证程序的UI变化\n\n接下来我们将根据这些测试类如何在项目中落地完整方案。\n\n<!-- more -->\n\n# 单元测试\n前端项目主要用的单元测试框架为`Jest`和`Mocha`，下面就`Jest`框架如何实现一个单元测试。\n\n## 实现步骤\n\n1. 安装依赖\n```shell\nnpm i jest --save-dev\n# 如果是typescript还需要安装 ts\nnpm i ts-jest babel-jest --save-dev\n# 安装类型\nnpm i @types/jest --save-dev\n```\n\n2. 新增测试命令，在`package.json`中`scripts`新增代码\n```js\n{\n    ...\n    \"scripts\": {\n        \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\",\n  },\n}\n```\n\n3. 新增配置文件`jest.config.js`，参考配置如下：\n```js\nmodule.exports = {\n    \"testEnvironment\": \"node\",\n    testMatch: [ //匹配测试用例的文件\n        '<rootDir>/test/**/*.test.ts'\n    ],\n    transform: {\n        '^.+\\\\.js$': '<rootDir>/node_modules/babel-jest', // babel编译\n        '^.+\\\\.ts$': '<rootDir>/node_modules/ts-jest', // typescript编译\n    },\n    \"collectCoverage\": true\n}\n```\n\n4. 编写单元测试代码，在根目录下新建测试文件`test/sum.test.js`，标识对`a.ts`文件做测试，代码如下：\n\n```js\n//sum.ts\nexport const sum = (a, b) => {\n    return a + b;\n}\n\n//sum.test.ts\nimport { sum } from '../src/sum'\n\ntest(\"test two num sum\", async () => {\n    const res = sum(5, 6);\n    expect(typeof res).toBe(\"number\")\n    expect(res).toBe(11)\n})\n```\n\n5. 开始自动化测试`yarn test`或者`npm run test`，然后会出现如下：\n\n```shel\nPASS  ./sum.test.ts\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |                   \n sum.ts   |     100 |      100 |     100 |     100 |                   \n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.394 s, estimated 3 s\n```\n简单说明一下上面的表格几个字段作用：\n\n- File，标识当前测试的文件\n- Stmts，语句覆盖率（statement coverage）：是不是每个语句都执行了\n- Branch，分支覆盖率（branch coverage）：是不是每个if代码块都执行了\n- Funcs，函数覆盖率（function coverage）：是不是每个函数都调用了\n- Lines，行覆盖率（line coverage）：是不是每一行都执行了\n\n## 怎么提高单元测试覆盖率\n\n分为两个部分：\n\n- 提高代码质量，减少代码块的大小，减少各类复杂逻辑判断，不去测试有依赖性函数，如：需接口、数据库等\n- 提高开发意愿，一自动化生成单元测试，二采用设置覆盖率指标，三是确定单元测试规范（哪些模块需要写，哪些不需要写）\n\n# 集成测试\n集成测试主要是测试当单元模块组合到一起之后是否功能正常。\n\n相比较单元测试只是针对某个函数或方案做单一功能测试，集成测试是针对某个功能模块做完整的测试，因此在测试粒度上的选择，需要开发自己去衡量，但是一般的选择如下几种：\n\n- 如果有UI展示的，一般通过router分割页面粒度去进行测试，尽可能的少mock依赖，尽量的渲染全子组件\n- 如果是库不含JS的，则以功能模块为粒度进行测试，测试数据尽量丰富且贴近真实数据\n\n具体实现步骤其实和单元测试一样，只是所写的测试功能比单元测试范围要大且完整。\n\n# UI 测试\n\n> 相比较后面`端到端测试`，UI测试只是对于前端的测试，是脱离真实后端环境的，仅仅只是将前端放在真实环境中运行，而后端和数据都应该使用 Mock 的。\n\nUI 测试在前端上，也可以叫组件测试\n那么如何实现UI测试，其实依旧可以使用`Jest`、`Enzyme` `selenium` `Vitest`等框架，目前都支持将`Vue`、`React`等组件进行模拟渲染完成。\n\n利用`Jest`实现对React UI组件测试，代码如下：\n```js\n// React Home.jsx\nconst Home = ()=>{\n    return (\n        <div>\n            <h1>Home</h1>\n        </div>\n    )\n};\n\n// home.test.js\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\"; // createRoot 是React18 新出的特性\nimport { act } from \"react-dom/test-utils\"; // react支持测试动作\n\nimport Home from \"../src/pages/home\";\n\nglobal.IS_REACT_ACT_ENVIRONMENT = true\n\nlet root = null;\nlet container = null;\nbeforeEach(() => {\n    // 创建一个 DOM 元素作为渲染目标\n    container = document.createElement(\"div\");\n    document.body.appendChild(container);\n    root = createRoot(container)\n});\n\nafterEach(() => {\n    // 退出时进行清理\n    // root.unmount(container);\n    container.remove();\n    container = null;\n});\n\nit(\"渲染有或无名称\", () => {\n    act(() => {\n        root.render(<Home />);\n    });\n    expect(container.textContent).toBe(\"Home\");\n});\n\n```\n\n当然你依然可以使用`Jest`去做Vue UI 测试，但是`Vitest`实现在vite项目中更加好用，代码如下：\n```js\n// Home.vue\n<script setup lang=\"ts\">\ndefineProps<{ msg: string }>()\n</script>\n\n<template>\n  <h1>{{ msg }}</h1>\n</template>\n\n//home.test.js\nimport { mount } from '@vue/test-utils'\nimport Home from '../src/components/Home.vue'\n\ntest('mount component', async () => {\n    expect(Home).toBeTruthy()\n    const wrapper = mount(Home, {\n        props: {\n            msg: 'Home',\n        },\n      })\n    expect(wrapper.html()).toContain('Home')\n})\n```\n##  快照测试\n\n快照测试是属于UI测试的一种分类，主要用于区分同样的数据下，页面UI展示是否发生变化，如果不一样则比较测试结果失败，有异常或者功能迭代。针对快照测试详细说明如下：\n\n> 快照测试类似于“找不同”游戏。快照测试会给运行中的应用程序拍一张图片，并将其与以前保存的图片进行比较。如果图像不同，则测试失败。这种测试方法对确保应用程序代码变更后是否仍然可以正确渲染很有帮助。\n>\n> 当然，在前端中，其实并不是比较图片，而是比较前后生成的html结构，本质上是一个字符串的比较。\n\n同理，如果一个功能模块，针对同样的输入，得出的结果是不一样，那么也是一种快照测试。\n\n利用`Jest`实现快照测试代码如下（基本和UI测试一样）：\n```js\n// home.test.js\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { act } from \"react-dom/test-utils\";\nimport pretty from \"pretty\";\n\nimport Home from \"../src/pages/home\";\n\nglobal.IS_REACT_ACT_ENVIRONMENT = true\n\nlet root = null;\nlet container = null;\nbeforeEach(() => {\n    // 创建一个 DOM 元素作为渲染目标\n    container = document.createElement(\"div\");\n    document.body.appendChild(container);\n    root = createRoot(container)\n});\n\nafterEach(() => {\n    // 退出时进行清理\n    // root.unmount(container);\n    container.remove();\n    container = null;\n});\n\nit(\"渲染有或无名称\", () => {\n    act(() => {\n        root.render(<Home />);\n    });\n    expect(container.textContent).toBe(\"Home\");\n\n    // 快照对比 这里你可以先把html结构存储一份，然后再拿出来对比\n    expect(\n        pretty(container.innerHTML)).\n        toMatchInlineSnapshot(`\n\"<div>\n  <h1>Home1</h1>\n</div>\"\n`);\n});\n```\n\n# E2E测试\n\nE2E测试，也叫端到端测试，就是模拟真实环境下，用户不同操作行为的测试。\n\n目前主要进行E2E测试框架有如下几种：\n\n- puppeteer 一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome\n- cypress  现代网络构建的下一代前端测试工具， 编写更快、更容易和更可靠的测试\n- Selenium  是开源的自动化测试工具，它主要是用于Web 应用程序的自动化测试，不只局限于此，同时支持所有基于web 的管理任务自动化\n- NightWatch 是一个用于web应用和网站上执行自动化端到端（end-to-end）测试的集成框架，用于主流浏览器中，简化编写和执行多种类型地测试程序\n\n这几者的区别后面会有专门文章去描述，现在我们先利用`cypress`实现E2E测试代码， 以Vue项目为主，如下：\n步骤一，安装依赖\n```\nyarn add cypress -D\n```\n步骤二，新增脚本，package.json\n```json\n{\n    \"scripts\": {\n        \"cypress\": \"cypress open\"\n    }\n}\n```\n步骤三，后面按照其提示去添加测试文件，比如：`index.cy.ts`，然后修改代码如下：\n```js\ndescribe('template spec', () => {\n  it('has home text', () => {\n    // 访问首页\n    cy.visit('http://localhost:5173/')\n    // 断言是否有 Home 文字\n    cy.contains('Home')\n  })\n})\n```\n具体效果如下图：\n\n![](/assets/img/20230215.png)\n\n当然E2E没有这么简单，还有一些点击、输入等事件，甚至可以模拟登录等，这些详细操作放在后面cypress实战篇去讲解。\n\n# 测试覆盖率\n了解自动化测试后，我们还需要对测试覆盖率进行一个完整的了解。\n> 测试覆盖率(test coverage)是衡量软件测试完整性的一个重要指标。掌握测试覆盖率数据，有利于客观认识软件质量，正确了解测试状态，有效改进测试工作。\n\n其实上面提到单元测试的时候已经有讲过一些，这里再做一个完整都介绍。\n\n覆盖率主要分为以下几种：\n\n- 代码覆盖率， 如上述所说分为几种，如：行覆盖率、函数覆盖率等\n- 需求覆盖率，测试所覆盖的需求数量与总需求数量的比值\n\n# 总结\n\n自动化测试在前端开发是必不可少的一个环节，因为前端是直接面向用户的，即使有测试团队支持，也难免会出现测试遗漏的场景，或者加大测试人力成本。\n\n当然不同项目的自动化测试所需要的环节是不一样的，根据个人经验，建议不同场景采用自动化测试如下：\n\n- 开发纯函数库，建议写更多的单元测试 + 少量的集成测试\n- 开发组件库，建议写更多的单元测试、为每个组件编写快照测试、写少量的集成测试 + 端到端测试\n- 开发业务系统，建议写更多的集成测试、为工具类库、算法写单元测试、写少量的端到端测试\n- 开发公共平台项目，建议写更多的集成测试和完整的端到端测试\n\n\n# 相关资料\n\n- [React测试demo代码](https://github.com/qiubohong/qiubohong.github.io/tree/master/code/react/my-app)\n- [Vue测试demo代码](https://github.com/qiubohong/qiubohong.github.io/tree/master/code/vue/vite-project)\n\n# 参考资料\n\n- [把 puppeteer 融入调试流程，调试体验爽翻了！](https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd)\n- [JS最佳测试实践](https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme-zh-CN.md)\n- [如何使用Playwright绕过验证登录做端到端测试](https://blog.checklyhq.com/how-to-bypass-totp-based-2fa-login-flows-with-playwright/)\n- [前端自动化测试入门](https://juejin.cn/post/6844904194600599560)","slug":"today/20230215","published":1,"updated":"2023-02-20T10:29:47.750Z","_id":"cle5qoy8e0015nipchz6ksxjv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>开发公共平台项目，测试资源相对比较少，因此对开发者自身而言，为了维护项目的稳定性，需要对平台做各类测试，即使有测试环境，但是也很容易缺乏测试场景导致带着bug上线的情况。</p>\n<p>因此我们需要做完整自动化测试方案，来避免这类常规错误，提高平台的可用性和稳定性。</p>\n<p>这里先简单描述自动化测试的分类：</p>\n<ul>\n<li>单元测试，验证独立的单元模块代码或函数是否正常工作</li>\n<li>集成测试，验证多个单元模块间的协同工作</li>\n<li>UI 测试，只针对前端UI部分测试，后端数据采用mock方式</li>\n<li>端到端测试，从用户的角度，通过机器来模仿用户在真实浏览器中验证应用交互</li>\n<li>快照测试，验证程序的UI变化</li>\n</ul>\n<p>接下来我们将根据这些测试类如何在项目中落地完整方案。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h1><p>前端项目主要用的单元测试框架为<code>Jest</code>和<code>Mocha</code>，下面就<code>Jest</code>框架如何实现一个单元测试。</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jest --save-dev</span><br><span class=\"line\"><span class=\"meta\">#</span> 如果是typescript还需要安装 ts</span><br><span class=\"line\">npm i ts-jest babel-jest --save-dev</span><br><span class=\"line\"><span class=\"meta\">#</span> 安装类型</span><br><span class=\"line\">npm i @types/jest --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增测试命令，在<code>package.json</code>中<code>scripts</code>新增代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node --experimental-vm-modules node_modules/jest/bin/jest.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增配置文件<code>jest.config.js</code>，参考配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"testEnvironment\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    testMatch: [ <span class=\"comment\">//匹配测试用例的文件</span></span><br><span class=\"line\">        <span class=\"string\">'&lt;rootDir&gt;/test/**/*.test.ts'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    transform: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^.+\\\\.js$'</span>: <span class=\"string\">'&lt;rootDir&gt;/node_modules/babel-jest'</span>, <span class=\"comment\">// babel编译</span></span><br><span class=\"line\">        <span class=\"string\">'^.+\\\\.ts$'</span>: <span class=\"string\">'&lt;rootDir&gt;/node_modules/ts-jest'</span>, <span class=\"comment\">// typescript编译</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"collectCoverage\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写单元测试代码，在根目录下新建测试文件<code>test/sum.test.js</code>，标识对<code>a.ts</code>文件做测试，代码如下：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sum.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sum.test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../src/sum'</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">\"test two num sum\"</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = sum(<span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    expect(<span class=\"keyword\">typeof</span> res).toBe(<span class=\"string\">\"number\"</span>)</span><br><span class=\"line\">    expect(res).toBe(<span class=\"number\">11</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>开始自动化测试<code>yarn test</code>或者<code>npm run test</code>，然后会出现如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASS  ./sum.test.ts</span><br><span class=\"line\">----------|---------|----------|---------|---------|-------------------</span><br><span class=\"line\">File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s </span><br><span class=\"line\">----------|---------|----------|---------|---------|-------------------</span><br><span class=\"line\">All files |     100 |      100 |     100 |     100 |                   </span><br><span class=\"line\"> sum.ts   |     100 |      100 |     100 |     100 |                   </span><br><span class=\"line\">----------|---------|----------|---------|---------|-------------------</span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       1 passed, 1 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        1.394 s, estimated 3 s</span><br></pre></td></tr></table></figure>\n\n<p>简单说明一下上面的表格几个字段作用：</p>\n<ul>\n<li>File，标识当前测试的文件</li>\n<li>Stmts，语句覆盖率（statement coverage）：是不是每个语句都执行了</li>\n<li>Branch，分支覆盖率（branch coverage）：是不是每个if代码块都执行了</li>\n<li>Funcs，函数覆盖率（function coverage）：是不是每个函数都调用了</li>\n<li>Lines，行覆盖率（line coverage）：是不是每一行都执行了</li>\n</ul>\n<h2 id=\"怎么提高单元测试覆盖率\"><a href=\"#怎么提高单元测试覆盖率\" class=\"headerlink\" title=\"怎么提高单元测试覆盖率\"></a>怎么提高单元测试覆盖率</h2><p>分为两个部分：</p>\n<ul>\n<li>提高代码质量，减少代码块的大小，减少各类复杂逻辑判断，不去测试有依赖性函数，如：需接口、数据库等</li>\n<li>提高开发意愿，一自动化生成单元测试，二采用设置覆盖率指标，三是确定单元测试规范（哪些模块需要写，哪些不需要写）</li>\n</ul>\n<h1 id=\"集成测试\"><a href=\"#集成测试\" class=\"headerlink\" title=\"集成测试\"></a>集成测试</h1><p>集成测试主要是测试当单元模块组合到一起之后是否功能正常。</p>\n<p>相比较单元测试只是针对某个函数或方案做单一功能测试，集成测试是针对某个功能模块做完整的测试，因此在测试粒度上的选择，需要开发自己去衡量，但是一般的选择如下几种：</p>\n<ul>\n<li>如果有UI展示的，一般通过router分割页面粒度去进行测试，尽可能的少mock依赖，尽量的渲染全子组件</li>\n<li>如果是库不含JS的，则以功能模块为粒度进行测试，测试数据尽量丰富且贴近真实数据</li>\n</ul>\n<p>具体实现步骤其实和单元测试一样，只是所写的测试功能比单元测试范围要大且完整。</p>\n<h1 id=\"UI-测试\"><a href=\"#UI-测试\" class=\"headerlink\" title=\"UI 测试\"></a>UI 测试</h1><blockquote>\n<p>相比较后面<code>端到端测试</code>，UI测试只是对于前端的测试，是脱离真实后端环境的，仅仅只是将前端放在真实环境中运行，而后端和数据都应该使用 Mock 的。</p>\n</blockquote>\n<p>UI 测试在前端上，也可以叫组件测试<br>那么如何实现UI测试，其实依旧可以使用<code>Jest</code>、<code>Enzyme</code> <code>selenium</code> <code>Vitest</code>等框架，目前都支持将<code>Vue</code>、<code>React</code>等组件进行模拟渲染完成。</p>\n<p>利用<code>Jest</code>实现对React UI组件测试，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// React Home.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;h1&gt;Home&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// home.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/client\"</span>; <span class=\"comment\">// createRoot 是React18 新出的特性</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; act &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/test-utils\"</span>; <span class=\"comment\">// react支持测试动作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">\"../src/pages/home\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">global.IS_REACT_ACT_ENVIRONMENT = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 DOM 元素作为渲染目标</span></span><br><span class=\"line\">    container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(container);</span><br><span class=\"line\">    root = createRoot(container)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出时进行清理</span></span><br><span class=\"line\">    <span class=\"comment\">// root.unmount(container);</span></span><br><span class=\"line\">    container.remove();</span><br><span class=\"line\">    container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">\"渲染有或无名称\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        root.render(&lt;Home /&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(container.textContent).toBe(\"Home\");</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当然你依然可以使用<code>Jest</code>去做Vue UI 测试，但是<code>Vitest</code>实现在vite项目中更加好用，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Home.vue</span></span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">\"ts\"</span>&gt;</span><br><span class=\"line\">defineProps&lt;&#123; <span class=\"attr\">msg</span>: string &#125;&gt;()</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/</span>h1&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/home.test.js</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; mount &#125; from '@vue/</span>test-utils<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">import Home from '</span>../src/components/Home.vue<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">test('</span>mount component<span class=\"string\">', async () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    expect(Home).toBeTruthy()</span></span><br><span class=\"line\"><span class=\"string\">    const wrapper = mount(Home, &#123;</span></span><br><span class=\"line\"><span class=\"string\">        props: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            msg: '</span>Home<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    expect(wrapper.html()).toContain('</span>Home<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快照测试\"><a href=\"#快照测试\" class=\"headerlink\" title=\"快照测试\"></a>快照测试</h2><p>快照测试是属于UI测试的一种分类，主要用于区分同样的数据下，页面UI展示是否发生变化，如果不一样则比较测试结果失败，有异常或者功能迭代。针对快照测试详细说明如下：</p>\n<blockquote>\n<p>快照测试类似于“找不同”游戏。快照测试会给运行中的应用程序拍一张图片，并将其与以前保存的图片进行比较。如果图像不同，则测试失败。这种测试方法对确保应用程序代码变更后是否仍然可以正确渲染很有帮助。</p>\n<p>当然，在前端中，其实并不是比较图片，而是比较前后生成的html结构，本质上是一个字符串的比较。</p>\n</blockquote>\n<p>同理，如果一个功能模块，针对同样的输入，得出的结果是不一样，那么也是一种快照测试。</p>\n<p>利用<code>Jest</code>实现快照测试代码如下（基本和UI测试一样）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// home.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/client\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; act &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/test-utils\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pretty <span class=\"keyword\">from</span> <span class=\"string\">\"pretty\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">\"../src/pages/home\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">global.IS_REACT_ACT_ENVIRONMENT = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 DOM 元素作为渲染目标</span></span><br><span class=\"line\">    container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(container);</span><br><span class=\"line\">    root = createRoot(container)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出时进行清理</span></span><br><span class=\"line\">    <span class=\"comment\">// root.unmount(container);</span></span><br><span class=\"line\">    container.remove();</span><br><span class=\"line\">    container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">\"渲染有或无名称\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        root.render(&lt;Home /&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(container.textContent).toBe(\"Home\");</span><br><span class=\"line\"></span><br><span class=\"line\">    // 快照对比 这里你可以先把html结构存储一份，然后再拿出来对比</span><br><span class=\"line\">    expect(</span><br><span class=\"line\">        pretty(container.innerHTML)).</span><br><span class=\"line\">        toMatchInlineSnapshot(`</span><br><span class=\"line\">\"&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;Home1&lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;\"</span><br><span class=\"line\">`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"E2E测试\"><a href=\"#E2E测试\" class=\"headerlink\" title=\"E2E测试\"></a>E2E测试</h1><p>E2E测试，也叫端到端测试，就是模拟真实环境下，用户不同操作行为的测试。</p>\n<p>目前主要进行E2E测试框架有如下几种：</p>\n<ul>\n<li>puppeteer 一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome</li>\n<li>cypress  现代网络构建的下一代前端测试工具， 编写更快、更容易和更可靠的测试</li>\n<li>Selenium  是开源的自动化测试工具，它主要是用于Web 应用程序的自动化测试，不只局限于此，同时支持所有基于web 的管理任务自动化</li>\n<li>NightWatch 是一个用于web应用和网站上执行自动化端到端（end-to-end）测试的集成框架，用于主流浏览器中，简化编写和执行多种类型地测试程序</li>\n</ul>\n<p>这几者的区别后面会有专门文章去描述，现在我们先利用<code>cypress</code>实现E2E测试代码， 以Vue项目为主，如下：<br>步骤一，安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add cypress -D</span><br></pre></td></tr></table></figure>\n\n<p>步骤二，新增脚本，package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"cypress\"</span>: <span class=\"string\">\"cypress open\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>步骤三，后面按照其提示去添加测试文件，比如：<code>index.cy.ts</code>，然后修改代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'template spec'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'has home text'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 访问首页</span></span><br><span class=\"line\">    cy.visit(<span class=\"string\">'http://localhost:5173/'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 断言是否有 Home 文字</span></span><br><span class=\"line\">    cy.contains(<span class=\"string\">'Home'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>具体效果如下图：</p>\n<p><img src=\"/assets/img/20230215.png\" alt></p>\n<p>当然E2E没有这么简单，还有一些点击、输入等事件，甚至可以模拟登录等，这些详细操作放在后面cypress实战篇去讲解。</p>\n<h1 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h1><p>了解自动化测试后，我们还需要对测试覆盖率进行一个完整的了解。</p>\n<blockquote>\n<p>测试覆盖率(test coverage)是衡量软件测试完整性的一个重要指标。掌握测试覆盖率数据，有利于客观认识软件质量，正确了解测试状态，有效改进测试工作。</p>\n</blockquote>\n<p>其实上面提到单元测试的时候已经有讲过一些，这里再做一个完整都介绍。</p>\n<p>覆盖率主要分为以下几种：</p>\n<ul>\n<li>代码覆盖率， 如上述所说分为几种，如：行覆盖率、函数覆盖率等</li>\n<li>需求覆盖率，测试所覆盖的需求数量与总需求数量的比值</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>自动化测试在前端开发是必不可少的一个环节，因为前端是直接面向用户的，即使有测试团队支持，也难免会出现测试遗漏的场景，或者加大测试人力成本。</p>\n<p>当然不同项目的自动化测试所需要的环节是不一样的，根据个人经验，建议不同场景采用自动化测试如下：</p>\n<ul>\n<li>开发纯函数库，建议写更多的单元测试 + 少量的集成测试</li>\n<li>开发组件库，建议写更多的单元测试、为每个组件编写快照测试、写少量的集成测试 + 端到端测试</li>\n<li>开发业务系统，建议写更多的集成测试、为工具类库、算法写单元测试、写少量的端到端测试</li>\n<li>开发公共平台项目，建议写更多的集成测试和完整的端到端测试</li>\n</ul>\n<h1 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h1><ul>\n<li><a href=\"https://github.com/qiubohong/qiubohong.github.io/tree/master/code/react/my-app\" target=\"_blank\" rel=\"noopener\">React测试demo代码</a></li>\n<li><a href=\"https://github.com/qiubohong/qiubohong.github.io/tree/master/code/vue/vite-project\" target=\"_blank\" rel=\"noopener\">Vue测试demo代码</a></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">把 puppeteer 融入调试流程，调试体验爽翻了！</a></li>\n<li><a href=\"https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme-zh-CN.md\" target=\"_blank\" rel=\"noopener\">JS最佳测试实践</a></li>\n<li><a href=\"https://blog.checklyhq.com/how-to-bypass-totp-based-2fa-login-flows-with-playwright/\" target=\"_blank\" rel=\"noopener\">如何使用Playwright绕过验证登录做端到端测试</a></li>\n<li><a href=\"https://juejin.cn/post/6844904194600599560\" target=\"_blank\" rel=\"noopener\">前端自动化测试入门</a></li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>开发公共平台项目，测试资源相对比较少，因此对开发者自身而言，为了维护项目的稳定性，需要对平台做各类测试，即使有测试环境，但是也很容易缺乏测试场景导致带着bug上线的情况。</p>\n<p>因此我们需要做完整自动化测试方案，来避免这类常规错误，提高平台的可用性和稳定性。</p>\n<p>这里先简单描述自动化测试的分类：</p>\n<ul>\n<li>单元测试，验证独立的单元模块代码或函数是否正常工作</li>\n<li>集成测试，验证多个单元模块间的协同工作</li>\n<li>UI 测试，只针对前端UI部分测试，后端数据采用mock方式</li>\n<li>端到端测试，从用户的角度，通过机器来模仿用户在真实浏览器中验证应用交互</li>\n<li>快照测试，验证程序的UI变化</li>\n</ul>\n<p>接下来我们将根据这些测试类如何在项目中落地完整方案。</p>","more":"<h1 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h1><p>前端项目主要用的单元测试框架为<code>Jest</code>和<code>Mocha</code>，下面就<code>Jest</code>框架如何实现一个单元测试。</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jest --save-dev</span><br><span class=\"line\"><span class=\"meta\">#</span> 如果是typescript还需要安装 ts</span><br><span class=\"line\">npm i ts-jest babel-jest --save-dev</span><br><span class=\"line\"><span class=\"meta\">#</span> 安装类型</span><br><span class=\"line\">npm i @types/jest --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增测试命令，在<code>package.json</code>中<code>scripts</code>新增代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"test\"</span>: <span class=\"string\">\"node --experimental-vm-modules node_modules/jest/bin/jest.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增配置文件<code>jest.config.js</code>，参考配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"testEnvironment\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    testMatch: [ <span class=\"comment\">//匹配测试用例的文件</span></span><br><span class=\"line\">        <span class=\"string\">'&lt;rootDir&gt;/test/**/*.test.ts'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    transform: &#123;</span><br><span class=\"line\">        <span class=\"string\">'^.+\\\\.js$'</span>: <span class=\"string\">'&lt;rootDir&gt;/node_modules/babel-jest'</span>, <span class=\"comment\">// babel编译</span></span><br><span class=\"line\">        <span class=\"string\">'^.+\\\\.ts$'</span>: <span class=\"string\">'&lt;rootDir&gt;/node_modules/ts-jest'</span>, <span class=\"comment\">// typescript编译</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"collectCoverage\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写单元测试代码，在根目录下新建测试文件<code>test/sum.test.js</code>，标识对<code>a.ts</code>文件做测试，代码如下：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sum.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sum.test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../src/sum'</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">\"test two num sum\"</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = sum(<span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    expect(<span class=\"keyword\">typeof</span> res).toBe(<span class=\"string\">\"number\"</span>)</span><br><span class=\"line\">    expect(res).toBe(<span class=\"number\">11</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>开始自动化测试<code>yarn test</code>或者<code>npm run test</code>，然后会出现如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASS  ./sum.test.ts</span><br><span class=\"line\">----------|---------|----------|---------|---------|-------------------</span><br><span class=\"line\">File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s </span><br><span class=\"line\">----------|---------|----------|---------|---------|-------------------</span><br><span class=\"line\">All files |     100 |      100 |     100 |     100 |                   </span><br><span class=\"line\"> sum.ts   |     100 |      100 |     100 |     100 |                   </span><br><span class=\"line\">----------|---------|----------|---------|---------|-------------------</span><br><span class=\"line\">Test Suites: 1 passed, 1 total</span><br><span class=\"line\">Tests:       1 passed, 1 total</span><br><span class=\"line\">Snapshots:   0 total</span><br><span class=\"line\">Time:        1.394 s, estimated 3 s</span><br></pre></td></tr></table></figure>\n\n<p>简单说明一下上面的表格几个字段作用：</p>\n<ul>\n<li>File，标识当前测试的文件</li>\n<li>Stmts，语句覆盖率（statement coverage）：是不是每个语句都执行了</li>\n<li>Branch，分支覆盖率（branch coverage）：是不是每个if代码块都执行了</li>\n<li>Funcs，函数覆盖率（function coverage）：是不是每个函数都调用了</li>\n<li>Lines，行覆盖率（line coverage）：是不是每一行都执行了</li>\n</ul>\n<h2 id=\"怎么提高单元测试覆盖率\"><a href=\"#怎么提高单元测试覆盖率\" class=\"headerlink\" title=\"怎么提高单元测试覆盖率\"></a>怎么提高单元测试覆盖率</h2><p>分为两个部分：</p>\n<ul>\n<li>提高代码质量，减少代码块的大小，减少各类复杂逻辑判断，不去测试有依赖性函数，如：需接口、数据库等</li>\n<li>提高开发意愿，一自动化生成单元测试，二采用设置覆盖率指标，三是确定单元测试规范（哪些模块需要写，哪些不需要写）</li>\n</ul>\n<h1 id=\"集成测试\"><a href=\"#集成测试\" class=\"headerlink\" title=\"集成测试\"></a>集成测试</h1><p>集成测试主要是测试当单元模块组合到一起之后是否功能正常。</p>\n<p>相比较单元测试只是针对某个函数或方案做单一功能测试，集成测试是针对某个功能模块做完整的测试，因此在测试粒度上的选择，需要开发自己去衡量，但是一般的选择如下几种：</p>\n<ul>\n<li>如果有UI展示的，一般通过router分割页面粒度去进行测试，尽可能的少mock依赖，尽量的渲染全子组件</li>\n<li>如果是库不含JS的，则以功能模块为粒度进行测试，测试数据尽量丰富且贴近真实数据</li>\n</ul>\n<p>具体实现步骤其实和单元测试一样，只是所写的测试功能比单元测试范围要大且完整。</p>\n<h1 id=\"UI-测试\"><a href=\"#UI-测试\" class=\"headerlink\" title=\"UI 测试\"></a>UI 测试</h1><blockquote>\n<p>相比较后面<code>端到端测试</code>，UI测试只是对于前端的测试，是脱离真实后端环境的，仅仅只是将前端放在真实环境中运行，而后端和数据都应该使用 Mock 的。</p>\n</blockquote>\n<p>UI 测试在前端上，也可以叫组件测试<br>那么如何实现UI测试，其实依旧可以使用<code>Jest</code>、<code>Enzyme</code> <code>selenium</code> <code>Vitest</code>等框架，目前都支持将<code>Vue</code>、<code>React</code>等组件进行模拟渲染完成。</p>\n<p>利用<code>Jest</code>实现对React UI组件测试，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// React Home.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;h1&gt;Home&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// home.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/client\"</span>; <span class=\"comment\">// createRoot 是React18 新出的特性</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; act &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/test-utils\"</span>; <span class=\"comment\">// react支持测试动作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">\"../src/pages/home\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">global.IS_REACT_ACT_ENVIRONMENT = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 DOM 元素作为渲染目标</span></span><br><span class=\"line\">    container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(container);</span><br><span class=\"line\">    root = createRoot(container)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出时进行清理</span></span><br><span class=\"line\">    <span class=\"comment\">// root.unmount(container);</span></span><br><span class=\"line\">    container.remove();</span><br><span class=\"line\">    container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">\"渲染有或无名称\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        root.render(&lt;Home /&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(container.textContent).toBe(\"Home\");</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当然你依然可以使用<code>Jest</code>去做Vue UI 测试，但是<code>Vitest</code>实现在vite项目中更加好用，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Home.vue</span></span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">\"ts\"</span>&gt;</span><br><span class=\"line\">defineProps&lt;&#123; <span class=\"attr\">msg</span>: string &#125;&gt;()</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/</span>h1&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/home.test.js</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; mount &#125; from '@vue/</span>test-utils<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">import Home from '</span>../src/components/Home.vue<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">test('</span>mount component<span class=\"string\">', async () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    expect(Home).toBeTruthy()</span></span><br><span class=\"line\"><span class=\"string\">    const wrapper = mount(Home, &#123;</span></span><br><span class=\"line\"><span class=\"string\">        props: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            msg: '</span>Home<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    expect(wrapper.html()).toContain('</span>Home<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快照测试\"><a href=\"#快照测试\" class=\"headerlink\" title=\"快照测试\"></a>快照测试</h2><p>快照测试是属于UI测试的一种分类，主要用于区分同样的数据下，页面UI展示是否发生变化，如果不一样则比较测试结果失败，有异常或者功能迭代。针对快照测试详细说明如下：</p>\n<blockquote>\n<p>快照测试类似于“找不同”游戏。快照测试会给运行中的应用程序拍一张图片，并将其与以前保存的图片进行比较。如果图像不同，则测试失败。这种测试方法对确保应用程序代码变更后是否仍然可以正确渲染很有帮助。</p>\n<p>当然，在前端中，其实并不是比较图片，而是比较前后生成的html结构，本质上是一个字符串的比较。</p>\n</blockquote>\n<p>同理，如果一个功能模块，针对同样的输入，得出的结果是不一样，那么也是一种快照测试。</p>\n<p>利用<code>Jest</code>实现快照测试代码如下（基本和UI测试一样）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// home.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRoot &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/client\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; act &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom/test-utils\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pretty <span class=\"keyword\">from</span> <span class=\"string\">\"pretty\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">\"../src/pages/home\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">global.IS_REACT_ACT_ENVIRONMENT = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 DOM 元素作为渲染目标</span></span><br><span class=\"line\">    container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(container);</span><br><span class=\"line\">    root = createRoot(container)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 退出时进行清理</span></span><br><span class=\"line\">    <span class=\"comment\">// root.unmount(container);</span></span><br><span class=\"line\">    container.remove();</span><br><span class=\"line\">    container = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">\"渲染有或无名称\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        root.render(&lt;Home /&gt;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(container.textContent).toBe(\"Home\");</span><br><span class=\"line\"></span><br><span class=\"line\">    // 快照对比 这里你可以先把html结构存储一份，然后再拿出来对比</span><br><span class=\"line\">    expect(</span><br><span class=\"line\">        pretty(container.innerHTML)).</span><br><span class=\"line\">        toMatchInlineSnapshot(`</span><br><span class=\"line\">\"&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;Home1&lt;/h1&gt;</span><br><span class=\"line\">&lt;/div&gt;\"</span><br><span class=\"line\">`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"E2E测试\"><a href=\"#E2E测试\" class=\"headerlink\" title=\"E2E测试\"></a>E2E测试</h1><p>E2E测试，也叫端到端测试，就是模拟真实环境下，用户不同操作行为的测试。</p>\n<p>目前主要进行E2E测试框架有如下几种：</p>\n<ul>\n<li>puppeteer 一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome</li>\n<li>cypress  现代网络构建的下一代前端测试工具， 编写更快、更容易和更可靠的测试</li>\n<li>Selenium  是开源的自动化测试工具，它主要是用于Web 应用程序的自动化测试，不只局限于此，同时支持所有基于web 的管理任务自动化</li>\n<li>NightWatch 是一个用于web应用和网站上执行自动化端到端（end-to-end）测试的集成框架，用于主流浏览器中，简化编写和执行多种类型地测试程序</li>\n</ul>\n<p>这几者的区别后面会有专门文章去描述，现在我们先利用<code>cypress</code>实现E2E测试代码， 以Vue项目为主，如下：<br>步骤一，安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add cypress -D</span><br></pre></td></tr></table></figure>\n\n<p>步骤二，新增脚本，package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"cypress\"</span>: <span class=\"string\">\"cypress open\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>步骤三，后面按照其提示去添加测试文件，比如：<code>index.cy.ts</code>，然后修改代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'template spec'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'has home text'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 访问首页</span></span><br><span class=\"line\">    cy.visit(<span class=\"string\">'http://localhost:5173/'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 断言是否有 Home 文字</span></span><br><span class=\"line\">    cy.contains(<span class=\"string\">'Home'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>具体效果如下图：</p>\n<p><img src=\"/assets/img/20230215.png\" alt></p>\n<p>当然E2E没有这么简单，还有一些点击、输入等事件，甚至可以模拟登录等，这些详细操作放在后面cypress实战篇去讲解。</p>\n<h1 id=\"测试覆盖率\"><a href=\"#测试覆盖率\" class=\"headerlink\" title=\"测试覆盖率\"></a>测试覆盖率</h1><p>了解自动化测试后，我们还需要对测试覆盖率进行一个完整的了解。</p>\n<blockquote>\n<p>测试覆盖率(test coverage)是衡量软件测试完整性的一个重要指标。掌握测试覆盖率数据，有利于客观认识软件质量，正确了解测试状态，有效改进测试工作。</p>\n</blockquote>\n<p>其实上面提到单元测试的时候已经有讲过一些，这里再做一个完整都介绍。</p>\n<p>覆盖率主要分为以下几种：</p>\n<ul>\n<li>代码覆盖率， 如上述所说分为几种，如：行覆盖率、函数覆盖率等</li>\n<li>需求覆盖率，测试所覆盖的需求数量与总需求数量的比值</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>自动化测试在前端开发是必不可少的一个环节，因为前端是直接面向用户的，即使有测试团队支持，也难免会出现测试遗漏的场景，或者加大测试人力成本。</p>\n<p>当然不同项目的自动化测试所需要的环节是不一样的，根据个人经验，建议不同场景采用自动化测试如下：</p>\n<ul>\n<li>开发纯函数库，建议写更多的单元测试 + 少量的集成测试</li>\n<li>开发组件库，建议写更多的单元测试、为每个组件编写快照测试、写少量的集成测试 + 端到端测试</li>\n<li>开发业务系统，建议写更多的集成测试、为工具类库、算法写单元测试、写少量的端到端测试</li>\n<li>开发公共平台项目，建议写更多的集成测试和完整的端到端测试</li>\n</ul>\n<h1 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h1><ul>\n<li><a href=\"https://github.com/qiubohong/qiubohong.github.io/tree/master/code/react/my-app\" target=\"_blank\" rel=\"noopener\">React测试demo代码</a></li>\n<li><a href=\"https://github.com/qiubohong/qiubohong.github.io/tree/master/code/vue/vite-project\" target=\"_blank\" rel=\"noopener\">Vue测试demo代码</a></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3OTYzMDkzMg==&mid=2247493866&idx=1&sn=c4a3d5ddf6e3148360f3de9ea32e018f&chksm=cf0327d1f874aec72d630aa81d7b1b0b0961943287fbab023e6d39d466f33b642e12ca7f1ac0&token=953834215&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">把 puppeteer 融入调试流程，调试体验爽翻了！</a></li>\n<li><a href=\"https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme-zh-CN.md\" target=\"_blank\" rel=\"noopener\">JS最佳测试实践</a></li>\n<li><a href=\"https://blog.checklyhq.com/how-to-bypass-totp-based-2fa-login-flows-with-playwright/\" target=\"_blank\" rel=\"noopener\">如何使用Playwright绕过验证登录做端到端测试</a></li>\n<li><a href=\"https://juejin.cn/post/6844904194600599560\" target=\"_blank\" rel=\"noopener\">前端自动化测试入门</a></li>\n</ul>"},{"title":"好玩有趣收集系列（二）","date":"2023-02-18T03:51:01.000Z","toc":true,"_content":"\n今日收集一些好玩有趣的开源api或框架或开源项目 \n\n# 自动生成1000个性化视频\n\n通过[Shotstack](https://shotstack.io/docs/guide/getting-started/core-concepts/)提供的API服务制作不同视频。\n\n> ShotStack是一个基于云的视频编辑API。与Adobe Premiere或After Effects等传统桌面视频编辑应用程序不同，ShotStack纯粹是基于代码的--您可以使用代码创建编辑。该API使用使用JSON的REST架构样式来描述应该如何编辑视频。有许多不同语言的SDK可用于与API交互并创建JSON请求。\n\n是否可以利用该api和小程序结合在一起做一些 生日祝福小视频定制服务。  \n\n<!-- more -->\n\n# ssh2.js + zx.js 快速实现运维\n\n- [ssh2.js](https://github.com/mscdex/ssh2) 它是用纯JavaScript为Node.js编写的SSH2客户端和服务器模块\n- [zx.js](https://www.npmjs.com/package/zx) 更加方便执行shell命令的API接口\n- [inquirer.js](https://www.npmjs.com/package/inquirer) 提供终端交互的工具包\n\n> 原文：[【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟](https://github.com/CatsAndMice/blog/issues/42)\n> 其他好玩的文章：\n> - [自动生成npm版本号和发布npm包](https://juejin.cn/post/7068969844607189029)\n> - [发属于自己的快速创建开发文件脚手架](https://juejin.cn/post/7072972877628178440)\n\n# 密码学工具\n\n[cryptography 加密密码相关工具网站](https://crypto-online.cn/)\n\n# 自动生成证件照\n\n[certificate-photo  生成证件照的小程序源码](https://github.com/liuxiaojun666/certificate-photo)\n\n# 常用小工具\n\n回头可以自己搞一套，提高网站访问量\n\n[腾讯浏览器 帮小忙工具集合](https://tool.browser.qq.com/category/develop)\n\n# P2P私域聊天工具\n\n> webrtc file transfer tool，p2p网页在线文件传输，跨终端，不限平台，内网不限速，支持私有部署，支持多文件拖拽发送，支持本地屏幕录制，远程屏幕共享，远程音视频通话，密码房间，中继服务设置，webrtc检测，文字传输，公共聊天，丰富的后台管理，实时执行日志展示，机器人告警通知等功能\n\n[webrtc file transfer tool github 地址](https://github.com/iamtsm/tl-rtc-file)\n\n# 个人Linux服务器管理面板\n能够让你快速观看个人服务器的一些状态和信息。\n\n[github地址](https://github.com/chaos-zhu/easynode)\n\n\n# 有趣的言论\n\n创业箴言：\n\n领导者的作用不是行使权力，而是分配权力。\n\n有效的领导者通过设定方向、确定人员（找到具有正确技能和背景的人）、授权他人、确保决策执行，来节省自己的时间，并扩大自己的影响。\n\n-- [《我的创业箴言》](https://hackernoon.com/optimize-for-alignment-not-control-great-leaders-serve-and-more-startup-mantras)","source":"_posts/ideas/20230218.md","raw":"---\ntitle: 好玩有趣收集系列（二）\ndate: 2023-02-18 11:51:01\ntoc: true\ntags:\n    - 奇思妙想\n---\n\n今日收集一些好玩有趣的开源api或框架或开源项目 \n\n# 自动生成1000个性化视频\n\n通过[Shotstack](https://shotstack.io/docs/guide/getting-started/core-concepts/)提供的API服务制作不同视频。\n\n> ShotStack是一个基于云的视频编辑API。与Adobe Premiere或After Effects等传统桌面视频编辑应用程序不同，ShotStack纯粹是基于代码的--您可以使用代码创建编辑。该API使用使用JSON的REST架构样式来描述应该如何编辑视频。有许多不同语言的SDK可用于与API交互并创建JSON请求。\n\n是否可以利用该api和小程序结合在一起做一些 生日祝福小视频定制服务。  \n\n<!-- more -->\n\n# ssh2.js + zx.js 快速实现运维\n\n- [ssh2.js](https://github.com/mscdex/ssh2) 它是用纯JavaScript为Node.js编写的SSH2客户端和服务器模块\n- [zx.js](https://www.npmjs.com/package/zx) 更加方便执行shell命令的API接口\n- [inquirer.js](https://www.npmjs.com/package/inquirer) 提供终端交互的工具包\n\n> 原文：[【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟](https://github.com/CatsAndMice/blog/issues/42)\n> 其他好玩的文章：\n> - [自动生成npm版本号和发布npm包](https://juejin.cn/post/7068969844607189029)\n> - [发属于自己的快速创建开发文件脚手架](https://juejin.cn/post/7072972877628178440)\n\n# 密码学工具\n\n[cryptography 加密密码相关工具网站](https://crypto-online.cn/)\n\n# 自动生成证件照\n\n[certificate-photo  生成证件照的小程序源码](https://github.com/liuxiaojun666/certificate-photo)\n\n# 常用小工具\n\n回头可以自己搞一套，提高网站访问量\n\n[腾讯浏览器 帮小忙工具集合](https://tool.browser.qq.com/category/develop)\n\n# P2P私域聊天工具\n\n> webrtc file transfer tool，p2p网页在线文件传输，跨终端，不限平台，内网不限速，支持私有部署，支持多文件拖拽发送，支持本地屏幕录制，远程屏幕共享，远程音视频通话，密码房间，中继服务设置，webrtc检测，文字传输，公共聊天，丰富的后台管理，实时执行日志展示，机器人告警通知等功能\n\n[webrtc file transfer tool github 地址](https://github.com/iamtsm/tl-rtc-file)\n\n# 个人Linux服务器管理面板\n能够让你快速观看个人服务器的一些状态和信息。\n\n[github地址](https://github.com/chaos-zhu/easynode)\n\n\n# 有趣的言论\n\n创业箴言：\n\n领导者的作用不是行使权力，而是分配权力。\n\n有效的领导者通过设定方向、确定人员（找到具有正确技能和背景的人）、授权他人、确保决策执行，来节省自己的时间，并扩大自己的影响。\n\n-- [《我的创业箴言》](https://hackernoon.com/optimize-for-alignment-not-control-great-leaders-serve-and-more-startup-mantras)","slug":"ideas/20230218","published":1,"updated":"2023-02-20T12:36:27.433Z","_id":"clea0a8te00001apcnvlgb6wt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今日收集一些好玩有趣的开源api或框架或开源项目 </p>\n<h1 id=\"自动生成1000个性化视频\"><a href=\"#自动生成1000个性化视频\" class=\"headerlink\" title=\"自动生成1000个性化视频\"></a>自动生成1000个性化视频</h1><p>通过<a href=\"https://shotstack.io/docs/guide/getting-started/core-concepts/\" target=\"_blank\" rel=\"noopener\">Shotstack</a>提供的API服务制作不同视频。</p>\n<blockquote>\n<p>ShotStack是一个基于云的视频编辑API。与Adobe Premiere或After Effects等传统桌面视频编辑应用程序不同，ShotStack纯粹是基于代码的–您可以使用代码创建编辑。该API使用使用JSON的REST架构样式来描述应该如何编辑视频。有许多不同语言的SDK可用于与API交互并创建JSON请求。</p>\n</blockquote>\n<p>是否可以利用该api和小程序结合在一起做一些 生日祝福小视频定制服务。  </p>\n<a id=\"more\"></a>\n\n<h1 id=\"ssh2-js-zx-js-快速实现运维\"><a href=\"#ssh2-js-zx-js-快速实现运维\" class=\"headerlink\" title=\"ssh2.js + zx.js 快速实现运维\"></a>ssh2.js + zx.js 快速实现运维</h1><ul>\n<li><a href=\"https://github.com/mscdex/ssh2\" target=\"_blank\" rel=\"noopener\">ssh2.js</a> 它是用纯JavaScript为Node.js编写的SSH2客户端和服务器模块</li>\n<li><a href=\"https://www.npmjs.com/package/zx\" target=\"_blank\" rel=\"noopener\">zx.js</a> 更加方便执行shell命令的API接口</li>\n<li><a href=\"https://www.npmjs.com/package/inquirer\" target=\"_blank\" rel=\"noopener\">inquirer.js</a> 提供终端交互的工具包</li>\n</ul>\n<blockquote>\n<p>原文：<a href=\"https://github.com/CatsAndMice/blog/issues/42\" target=\"_blank\" rel=\"noopener\">【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟</a><br>其他好玩的文章：</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/7068969844607189029\" target=\"_blank\" rel=\"noopener\">自动生成npm版本号和发布npm包</a></li>\n<li><a href=\"https://juejin.cn/post/7072972877628178440\" target=\"_blank\" rel=\"noopener\">发属于自己的快速创建开发文件脚手架</a></li>\n</ul>\n</blockquote>\n<h1 id=\"密码学工具\"><a href=\"#密码学工具\" class=\"headerlink\" title=\"密码学工具\"></a>密码学工具</h1><p><a href=\"https://crypto-online.cn/\" target=\"_blank\" rel=\"noopener\">cryptography 加密密码相关工具网站</a></p>\n<h1 id=\"自动生成证件照\"><a href=\"#自动生成证件照\" class=\"headerlink\" title=\"自动生成证件照\"></a>自动生成证件照</h1><p><a href=\"https://github.com/liuxiaojun666/certificate-photo\" target=\"_blank\" rel=\"noopener\">certificate-photo  生成证件照的小程序源码</a></p>\n<h1 id=\"常用小工具\"><a href=\"#常用小工具\" class=\"headerlink\" title=\"常用小工具\"></a>常用小工具</h1><p>回头可以自己搞一套，提高网站访问量</p>\n<p><a href=\"https://tool.browser.qq.com/category/develop\" target=\"_blank\" rel=\"noopener\">腾讯浏览器 帮小忙工具集合</a></p>\n<h1 id=\"P2P私域聊天工具\"><a href=\"#P2P私域聊天工具\" class=\"headerlink\" title=\"P2P私域聊天工具\"></a>P2P私域聊天工具</h1><blockquote>\n<p>webrtc file transfer tool，p2p网页在线文件传输，跨终端，不限平台，内网不限速，支持私有部署，支持多文件拖拽发送，支持本地屏幕录制，远程屏幕共享，远程音视频通话，密码房间，中继服务设置，webrtc检测，文字传输，公共聊天，丰富的后台管理，实时执行日志展示，机器人告警通知等功能</p>\n</blockquote>\n<p><a href=\"https://github.com/iamtsm/tl-rtc-file\" target=\"_blank\" rel=\"noopener\">webrtc file transfer tool github 地址</a></p>\n<h1 id=\"个人Linux服务器管理面板\"><a href=\"#个人Linux服务器管理面板\" class=\"headerlink\" title=\"个人Linux服务器管理面板\"></a>个人Linux服务器管理面板</h1><p>能够让你快速观看个人服务器的一些状态和信息。</p>\n<p><a href=\"https://github.com/chaos-zhu/easynode\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h1 id=\"有趣的言论\"><a href=\"#有趣的言论\" class=\"headerlink\" title=\"有趣的言论\"></a>有趣的言论</h1><p>创业箴言：</p>\n<p>领导者的作用不是行使权力，而是分配权力。</p>\n<p>有效的领导者通过设定方向、确定人员（找到具有正确技能和背景的人）、授权他人、确保决策执行，来节省自己的时间，并扩大自己的影响。</p>\n<p>– <a href=\"https://hackernoon.com/optimize-for-alignment-not-control-great-leaders-serve-and-more-startup-mantras\" target=\"_blank\" rel=\"noopener\">《我的创业箴言》</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>今日收集一些好玩有趣的开源api或框架或开源项目 </p>\n<h1 id=\"自动生成1000个性化视频\"><a href=\"#自动生成1000个性化视频\" class=\"headerlink\" title=\"自动生成1000个性化视频\"></a>自动生成1000个性化视频</h1><p>通过<a href=\"https://shotstack.io/docs/guide/getting-started/core-concepts/\" target=\"_blank\" rel=\"noopener\">Shotstack</a>提供的API服务制作不同视频。</p>\n<blockquote>\n<p>ShotStack是一个基于云的视频编辑API。与Adobe Premiere或After Effects等传统桌面视频编辑应用程序不同，ShotStack纯粹是基于代码的–您可以使用代码创建编辑。该API使用使用JSON的REST架构样式来描述应该如何编辑视频。有许多不同语言的SDK可用于与API交互并创建JSON请求。</p>\n</blockquote>\n<p>是否可以利用该api和小程序结合在一起做一些 生日祝福小视频定制服务。  </p>","more":"<h1 id=\"ssh2-js-zx-js-快速实现运维\"><a href=\"#ssh2-js-zx-js-快速实现运维\" class=\"headerlink\" title=\"ssh2.js + zx.js 快速实现运维\"></a>ssh2.js + zx.js 快速实现运维</h1><ul>\n<li><a href=\"https://github.com/mscdex/ssh2\" target=\"_blank\" rel=\"noopener\">ssh2.js</a> 它是用纯JavaScript为Node.js编写的SSH2客户端和服务器模块</li>\n<li><a href=\"https://www.npmjs.com/package/zx\" target=\"_blank\" rel=\"noopener\">zx.js</a> 更加方便执行shell命令的API接口</li>\n<li><a href=\"https://www.npmjs.com/package/inquirer\" target=\"_blank\" rel=\"noopener\">inquirer.js</a> 提供终端交互的工具包</li>\n</ul>\n<blockquote>\n<p>原文：<a href=\"https://github.com/CatsAndMice/blog/issues/42\" target=\"_blank\" rel=\"noopener\">【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟</a><br>其他好玩的文章：</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/7068969844607189029\" target=\"_blank\" rel=\"noopener\">自动生成npm版本号和发布npm包</a></li>\n<li><a href=\"https://juejin.cn/post/7072972877628178440\" target=\"_blank\" rel=\"noopener\">发属于自己的快速创建开发文件脚手架</a></li>\n</ul>\n</blockquote>\n<h1 id=\"密码学工具\"><a href=\"#密码学工具\" class=\"headerlink\" title=\"密码学工具\"></a>密码学工具</h1><p><a href=\"https://crypto-online.cn/\" target=\"_blank\" rel=\"noopener\">cryptography 加密密码相关工具网站</a></p>\n<h1 id=\"自动生成证件照\"><a href=\"#自动生成证件照\" class=\"headerlink\" title=\"自动生成证件照\"></a>自动生成证件照</h1><p><a href=\"https://github.com/liuxiaojun666/certificate-photo\" target=\"_blank\" rel=\"noopener\">certificate-photo  生成证件照的小程序源码</a></p>\n<h1 id=\"常用小工具\"><a href=\"#常用小工具\" class=\"headerlink\" title=\"常用小工具\"></a>常用小工具</h1><p>回头可以自己搞一套，提高网站访问量</p>\n<p><a href=\"https://tool.browser.qq.com/category/develop\" target=\"_blank\" rel=\"noopener\">腾讯浏览器 帮小忙工具集合</a></p>\n<h1 id=\"P2P私域聊天工具\"><a href=\"#P2P私域聊天工具\" class=\"headerlink\" title=\"P2P私域聊天工具\"></a>P2P私域聊天工具</h1><blockquote>\n<p>webrtc file transfer tool，p2p网页在线文件传输，跨终端，不限平台，内网不限速，支持私有部署，支持多文件拖拽发送，支持本地屏幕录制，远程屏幕共享，远程音视频通话，密码房间，中继服务设置，webrtc检测，文字传输，公共聊天，丰富的后台管理，实时执行日志展示，机器人告警通知等功能</p>\n</blockquote>\n<p><a href=\"https://github.com/iamtsm/tl-rtc-file\" target=\"_blank\" rel=\"noopener\">webrtc file transfer tool github 地址</a></p>\n<h1 id=\"个人Linux服务器管理面板\"><a href=\"#个人Linux服务器管理面板\" class=\"headerlink\" title=\"个人Linux服务器管理面板\"></a>个人Linux服务器管理面板</h1><p>能够让你快速观看个人服务器的一些状态和信息。</p>\n<p><a href=\"https://github.com/chaos-zhu/easynode\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h1 id=\"有趣的言论\"><a href=\"#有趣的言论\" class=\"headerlink\" title=\"有趣的言论\"></a>有趣的言论</h1><p>创业箴言：</p>\n<p>领导者的作用不是行使权力，而是分配权力。</p>\n<p>有效的领导者通过设定方向、确定人员（找到具有正确技能和背景的人）、授权他人、确保决策执行，来节省自己的时间，并扩大自己的影响。</p>\n<p>– <a href=\"https://hackernoon.com/optimize-for-alignment-not-control-great-leaders-serve-and-more-startup-mantras\" target=\"_blank\" rel=\"noopener\">《我的创业箴言》</a></p>"},{"title":"创业idea —— 一个小程序利用一句话画一幅画","date":"2023-02-17T03:51:01.000Z","_content":"\n# 背景\n最近从开源库看到一个很火的项目，就是用一句话画一幅画。\n\n这里虽然他们开源只识别英文，我们可以调用第三方的翻译API转成英文，然后再返回到开源库。\n\n小程序思路：\n\n- 一个人一天体验3次，转发可以获得次数\n- 允许转发下载，以及个人签名等\n- 提高用户量\n- 如果访问量爆发的话，可以继续尝试\n- 名字叫随意画\n\n# AI生成图片开源项目\n\n[stable-diffusion-ui 一句话生成一幅画](https://github.com/cmdr2/stable-diffusion-ui?utm_source=gold_browser_extension)","source":"_posts/ideas/20230217.md","raw":"---\ntitle: 创业idea —— 一个小程序利用一句话画一幅画\ndate: 2023-02-17 11:51:01\ntags:\n    - 奇思妙想\n---\n\n# 背景\n最近从开源库看到一个很火的项目，就是用一句话画一幅画。\n\n这里虽然他们开源只识别英文，我们可以调用第三方的翻译API转成英文，然后再返回到开源库。\n\n小程序思路：\n\n- 一个人一天体验3次，转发可以获得次数\n- 允许转发下载，以及个人签名等\n- 提高用户量\n- 如果访问量爆发的话，可以继续尝试\n- 名字叫随意画\n\n# AI生成图片开源项目\n\n[stable-diffusion-ui 一句话生成一幅画](https://github.com/cmdr2/stable-diffusion-ui?utm_source=gold_browser_extension)","slug":"ideas/20230217","published":1,"updated":"2023-02-20T12:36:45.994Z","_id":"clea0a8uc00011apcq9l2y9h5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近从开源库看到一个很火的项目，就是用一句话画一幅画。</p>\n<p>这里虽然他们开源只识别英文，我们可以调用第三方的翻译API转成英文，然后再返回到开源库。</p>\n<p>小程序思路：</p>\n<ul>\n<li>一个人一天体验3次，转发可以获得次数</li>\n<li>允许转发下载，以及个人签名等</li>\n<li>提高用户量</li>\n<li>如果访问量爆发的话，可以继续尝试</li>\n<li>名字叫随意画</li>\n</ul>\n<h1 id=\"AI生成图片开源项目\"><a href=\"#AI生成图片开源项目\" class=\"headerlink\" title=\"AI生成图片开源项目\"></a>AI生成图片开源项目</h1><p><a href=\"https://github.com/cmdr2/stable-diffusion-ui?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">stable-diffusion-ui 一句话生成一幅画</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近从开源库看到一个很火的项目，就是用一句话画一幅画。</p>\n<p>这里虽然他们开源只识别英文，我们可以调用第三方的翻译API转成英文，然后再返回到开源库。</p>\n<p>小程序思路：</p>\n<ul>\n<li>一个人一天体验3次，转发可以获得次数</li>\n<li>允许转发下载，以及个人签名等</li>\n<li>提高用户量</li>\n<li>如果访问量爆发的话，可以继续尝试</li>\n<li>名字叫随意画</li>\n</ul>\n<h1 id=\"AI生成图片开源项目\"><a href=\"#AI生成图片开源项目\" class=\"headerlink\" title=\"AI生成图片开源项目\"></a>AI生成图片开源项目</h1><p><a href=\"https://github.com/cmdr2/stable-diffusion-ui?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">stable-diffusion-ui 一句话生成一幅画</a></p>\n"},{"title":"Next、Nuxt、Nest的区别(翻译)","date":"2023-02-14T04:51:01.000Z","_content":"","source":"_posts/translate/nuxt-next-nest-diff.md","raw":"---\ntitle: Next、Nuxt、Nest的区别(翻译)\ndate: 2023-02-14 12:51:01\ntags:\n    - 翻译文章\n---","slug":"translate/nuxt-next-nest-diff","published":1,"updated":"2023-02-18T12:38:15.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clea0a8vm00041apc3wdiipnx","content":"<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cldikhk5h0001wspcw16wrmt2","tag_id":"cldikhk6e0003wspcp1ay1vi0","_id":"cldikhk6p0008wspc2j9tiwcu"},{"post_id":"cldikhk690002wspco34267kw","tag_id":"cldikhk6e0003wspcp1ay1vi0","_id":"cldikhk6y000cwspc32kweckq"},{"post_id":"cldikhk6g0004wspckaf4dmgc","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldikhk74000hwspcc8uhqvhf"},{"post_id":"cldikhk6h0005wspcvyepazkg","tag_id":"cldikhk70000fwspcva2amyii","_id":"cldikhk7c000owspcwdd5vy3i"},{"post_id":"cldikhk6h0005wspcvyepazkg","tag_id":"cldikhk76000jwspc1xkogfum","_id":"cldikhk7d000qwspcqbu5t8vj"},{"post_id":"cldikhk6i0006wspc4l59t00h","tag_id":"cldikhk7b000mwspcdkfv0fzn","_id":"cldikhk7d000twspctxim0cbv"},{"post_id":"cldikhk6p0009wspc2hzocv82","tag_id":"cldikhk7d000swspcl2lti6h0","_id":"cldikhk7f000ywspc7etl10j3"},{"post_id":"cldikhk6u000awspcrykhqeby","tag_id":"cldikhk7b000mwspcdkfv0fzn","_id":"cldikhk7h0012wspcvucws5jw"},{"post_id":"cldikhk97002awspc8pb7nd3l","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldikhk9m002cwspcmpa20ov8"},{"post_id":"cldikhk99002bwspcl2oxpeet","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldikhk9q002ewspc5tof1szr"},{"post_id":"cldikhk9n002dwspckqib8jr6","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldikhk9r002gwspcrpvfpdjz"},{"post_id":"cldikhkap002wwspc55wjiuu4","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldikhkar002zwspcwb0mtvlv"},{"post_id":"cldixgpby00062cpc7g4hhs6c","tag_id":"cldikhk7d000swspcl2lti6h0","_id":"cldixha2b00072cpccjloywqb"},{"post_id":"cldwn2x430006nxpcs2zl2zst","tag_id":"cldikhk70000fwspcva2amyii","_id":"cldwn4cw80007nxpcmhs92n39"},{"post_id":"cldztepwt0008nxpc9qooiw8n","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztepx40009nxpctf7f8zjm"},{"post_id":"cldztepwt0008nxpc9qooiw8n","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztepxb000anxpck9chypfw"},{"post_id":"cldztesko000bnxpcs16znscw","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztesku000cnxpc63otlvli"},{"post_id":"cldztesko000bnxpcs16znscw","tag_id":"cldikhk7l0019wspcq6ghb7a3","_id":"cldzteskv000dnxpczchxvxrk"},{"post_id":"cldztev2a000enxpcznndjqyw","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztev2d000fnxpc49y7uv4e"},{"post_id":"cldztev2a000enxpcznndjqyw","tag_id":"cldikhk7m001fwspcbritlucq","_id":"cldztev2d000gnxpcwgujvf3u"},{"post_id":"cldztexdh000hnxpcywyythwq","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztexdz000inxpcvirg81d8"},{"post_id":"cldztexdh000hnxpcywyythwq","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztexdz000jnxpcj317st8g"},{"post_id":"cldztezms000knxpcrr1hyvmg","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztezmu000lnxpcjro1oso0"},{"post_id":"cldztezms000knxpcrr1hyvmg","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztezmu000mnxpcqqvl41t9"},{"post_id":"cldztf2aa000nnxpcan8jgat1","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztf2ah000onxpc99iw6ogp"},{"post_id":"cldztf2aa000nnxpcan8jgat1","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztf2ah000pnxpc2jpt5b2j"},{"post_id":"cldztf4ms000qnxpcnvksifib","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztf4mv000rnxpcjnd47cww"},{"post_id":"cldztf4ms000qnxpcnvksifib","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztf4mv000snxpcyvggo1h2"},{"post_id":"cldztf8f2000tnxpc5t37zkeb","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztf8fb000unxpcccc5clt5"},{"post_id":"cldztf8f2000tnxpc5t37zkeb","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztf8fb000vnxpcmh0lmbuq"},{"post_id":"cldztfawm000wnxpcm032fvfi","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfawo000xnxpcllj9pc2n"},{"post_id":"cldztfawm000wnxpcm032fvfi","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztfawo000ynxpc7gqwgma5"},{"post_id":"cldztfdrk000znxpcmia27zbt","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfdrs0010nxpcfsi4dq6x"},{"post_id":"cldztfdrk000znxpcmia27zbt","tag_id":"cldikhk7n001jwspch43hec3m","_id":"cldztfdrs0011nxpcuig2zcom"},{"post_id":"cldztffw90012nxpc8waqamto","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztffwb0013nxpcp98eh97r"},{"post_id":"cldztffw90012nxpc8waqamto","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztffwb0014nxpckxpcgnb3"},{"post_id":"cldztfi5j0015nxpchf9v4aj1","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfi5k0016nxpcthgbqpao"},{"post_id":"cldztfi5j0015nxpchf9v4aj1","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztfi5k0017nxpc8ggkuqu5"},{"post_id":"cldztfk9n0018nxpchzfd0zbb","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfk9q0019nxpcntqcjl1v"},{"post_id":"cldztfk9n0018nxpchzfd0zbb","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztfk9q001anxpcp75lbqz5"},{"post_id":"cldztfmlc001bnxpc76u4b9d1","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfmlj001cnxpc5nlh3uo1"},{"post_id":"cldztfmlc001bnxpc76u4b9d1","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztfmlj001dnxpc1osai5au"},{"post_id":"cldztfory001enxpciy605ent","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfos0001fnxpc179lu9bb"},{"post_id":"cldztfory001enxpciy605ent","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztfos0001gnxpclnkmklla"},{"post_id":"cldztfr7q001hnxpc1ysvj7ft","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfr7s001inxpclikay3p5"},{"post_id":"cldztfr7q001hnxpc1ysvj7ft","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldztfr7s001jnxpc9qyhirk0"},{"post_id":"cldztfuy5001knxpcqjm7f5pz","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztfuy7001lnxpcjw34quo3"},{"post_id":"cldztgd3m0024nxpcbyjw3i4b","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldztgd3s0025nxpcyrht97ir"},{"post_id":"cldzxh8v0002lnxpc1qm8lnow","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldzxh8v3002mnxpc1cek3j91"},{"post_id":"cldzxh8v0002lnxpc1qm8lnow","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxh8v3002nnxpc6m5t903o"},{"post_id":"cldzxhjrw002onxpccfvgri4h","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldzxhjrx002pnxpcatnqqgkq"},{"post_id":"cldzxhjrw002onxpccfvgri4h","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxhjrx002qnxpcgzx452n7"},{"post_id":"cldzxides0033nxpc1la1skec","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldzxidev0034nxpcytlqog5q"},{"post_id":"cldzxides0033nxpc1la1skec","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxidew0035nxpc25iw9eox"},{"post_id":"cldzxioec0036nxpccvkufwhz","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldzxioed0037nxpcgaqqcg7k"},{"post_id":"cldzxioec0036nxpccvkufwhz","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxioed0038nxpc9rst505r"},{"post_id":"cldzxj1z80039nxpclollwgzp","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldzxj1z9003anxpc30e8gt8h"},{"post_id":"cldzxj1z80039nxpclollwgzp","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxj1z9003bnxpcmjg22ujt"},{"post_id":"cldzxn4j6003cnxpc37zmn224","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxne1i003enxpcglr0pymf"},{"post_id":"cldzxp2yv003knxpcu02dws9f","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cldzxp4bg003lnxpc2afe6bjv"},{"post_id":"cldzxp2yv003knxpcu02dws9f","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxp4bk003mnxpcxxp8d5cd"},{"post_id":"cldzxn4j6003cnxpc37zmn224","tag_id":"cldzxpihc003nnxpczr2opdnn","_id":"cldzxpl8t003pnxpcdj7ezj4j"},{"post_id":"cldzxp2yv003knxpcu02dws9f","tag_id":"cldzxpihc003nnxpczr2opdnn","_id":"cldzxrf160000sqpc7c7yqk7n"},{"post_id":"cldzxtpug0001sqpc9tfp3ixp","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cldzxu72s0002sqpcxjeq8chu"},{"post_id":"cldzxtpug0001sqpc9tfp3ixp","tag_id":"cldzxpihc003nnxpczr2opdnn","_id":"cldzxu72v0003sqpcuos0tobg"},{"post_id":"cle1dt4jn0003h5pcmbmyz9vi","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle1dt4jp0004h5pcmav8git4"},{"post_id":"cle1dt4jn0003h5pcmbmyz9vi","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle1dt4jp0005h5pct1dixmou"},{"post_id":"cle2vxjj90003nipcokn9x1wm","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle2vxjjf0004nipchu4wughh"},{"post_id":"cle2vxjj90003nipcokn9x1wm","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle2vxjjf0005nipctinvrjkh"},{"post_id":"cle2vycx10009nipclo9fq7xr","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle2vycx3000anipc3cg4o7x2"},{"post_id":"cle2vycx10009nipclo9fq7xr","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle2vycx3000bnipcjrt0r89n"},{"post_id":"cle3wdg0m000cnipczm67j234","tag_id":"cldikhk7d000swspcl2lti6h0","_id":"cle3wdvr1000dnipcj5jh2gnj"},{"post_id":"cle48sx2n000gnipc54nee4ju","tag_id":"cldikhk6e0003wspcp1ay1vi0","_id":"cle48sx2p000hnipc6t3wcffq"},{"post_id":"cle4abw7x000lnipcl0yi2slx","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle4abw7z000mnipco4mwcvq6"},{"post_id":"cle4abw7x000lnipcl0yi2slx","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle4abw7z000nnipcj8np1t4x"},{"post_id":"cle4ahj0n000rnipcy3tc3a5e","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle4ahj0r000snipcd83qrnb4"},{"post_id":"cle4ahj0n000rnipcy3tc3a5e","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle4ahj0r000tnipcl35hwkxs"},{"post_id":"cle4avdca000xnipcrdzwt1hq","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle4avdcd000ynipcedphpw1d"},{"post_id":"cle4avdca000xnipcrdzwt1hq","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle4avdcd000znipc58x32aei"},{"post_id":"cle5b3zl30010nipcdmtke3hq","tag_id":"cldikhk6e0003wspcp1ay1vi0","_id":"cle5b7s0j0011nipc5d31ebvi"},{"post_id":"cle5qot8e0012nipcoq7t2o7c","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle5qot8q0013nipcmkmtrnzb"},{"post_id":"cle5qot8e0012nipcoq7t2o7c","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle5qot8s0014nipcr502kifd"},{"post_id":"cle5qoy8e0015nipchz6ksxjv","tag_id":"cldikhk7g0010wspcrvvbeabw","_id":"cle5qoy8h0016nipcj859sp05"},{"post_id":"cle5qoy8e0015nipchz6ksxjv","tag_id":"cldikhk6x000bwspcedfe97nt","_id":"cle5qoy8h0017nipcg8gh37hv"},{"post_id":"clea0a8te00001apcnvlgb6wt","tag_id":"cldikhk6e0003wspcp1ay1vi0","_id":"clea0a8uh00021apcg7xo5nko"},{"post_id":"clea0a8uc00011apcq9l2y9h5","tag_id":"cldikhk6e0003wspcp1ay1vi0","_id":"clea0a8ui00031apc7cgq6z87"},{"post_id":"clea0a8vm00041apc3wdiipnx","tag_id":"cldikhk70000fwspcva2amyii","_id":"clea0a8vq00051apcj1rle3c0"}],"Tag":[{"name":"奇思妙想","_id":"cldikhk6e0003wspcp1ay1vi0"},{"name":"技术分享","_id":"cldikhk6x000bwspcedfe97nt"},{"name":"翻译文章","_id":"cldikhk70000fwspcva2amyii"},{"name":"hide","_id":"cldikhk76000jwspc1xkogfum"},{"name":"周二技术周刊","_id":"cldikhk7b000mwspcdkfv0fzn"},{"name":"学习总结","_id":"cldikhk7d000swspcl2lti6h0"},{"name":"每日更新","_id":"cldikhk7g0010wspcrvvbeabw"},{"name":"动手实战","_id":"cldikhk7l0019wspcq6ghb7a3"},{"name":"短视频","_id":"cldikhk7m001fwspcbritlucq"},{"name":"技术探鲜","_id":"cldikhk7n001jwspch43hec3m"},{"name":"低代码系列","_id":"cldzxne1h003dnxpckx27lsd4"},{"name":"低代码系列目录","_id":"cldzxnn0u003hnxpcbeifafyk"},{"name":"低代码","_id":"cldzxpihc003nnxpczr2opdnn"}]}}